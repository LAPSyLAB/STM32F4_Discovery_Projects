
Initial_Breadboard_VIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008d94  08008d94  00018d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e50  08008e50  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e50  08008e50  00018e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e58  08008e58  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08008e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb0  200001d0  08009030  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002080  08009030  00022080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f5b  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a52  00000000  00000000  0003519e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00038bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e47  00000000  00000000  00039ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258dd  00000000  00000000  0003ace7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a350  00000000  00000000  000605c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6bdc  00000000  00000000  0007a914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005288  00000000  00000000  001514f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00156778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d7c 	.word	0x08008d7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08008d7c 	.word	0x08008d7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fd01 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f86b 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9b9 	bl	8000900 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058e:	f000 f923 	bl	80007d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000592:	f000 f94f 	bl	8000834 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000596:	f000 f97d 	bl	8000894 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800059a:	f007 fa0f 	bl	80079bc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800059e:	f000 f8c9 	bl	8000734 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_ADC_Start(&hadc1);
 80005a2:	4827      	ldr	r0, [pc, #156]	; (8000640 <main+0xc4>)
 80005a4:	f000 fdca 	bl	800113c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ac:	4824      	ldr	r0, [pc, #144]	; (8000640 <main+0xc4>)
 80005ae:	f000 fe97 	bl	80012e0 <HAL_ADC_PollForConversion>
	    AnalogValue = HAL_ADC_GetValue(&hadc1);
 80005b2:	4823      	ldr	r0, [pc, #140]	; (8000640 <main+0xc4>)
 80005b4:	f000 ff1f 	bl	80013f6 <HAL_ADC_GetValue>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <main+0xc8>)
 80005be:	601a      	str	r2, [r3, #0]

	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	4820      	ldr	r0, [pc, #128]	; (8000648 <main+0xcc>)
 80005c6:	f001 fc20 	bl	8001e0a <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	481e      	ldr	r0, [pc, #120]	; (8000648 <main+0xcc>)
 80005d0:	f001 fc1b 	bl	8001e0a <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d8:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0xcc>)
 80005da:	f001 fc16 	bl	8001e0a <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	4819      	ldr	r0, [pc, #100]	; (8000648 <main+0xcc>)
 80005e4:	f001 fc11 	bl	8001e0a <HAL_GPIO_TogglePin>

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);   //External LED on PB5
 80005e8:	2120      	movs	r1, #32
 80005ea:	4818      	ldr	r0, [pc, #96]	; (800064c <main+0xd0>)
 80005ec:	f001 fc0d 	bl	8001e0a <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4); //External Key on PB4
 80005f0:	2110      	movs	r1, #16
 80005f2:	4816      	ldr	r0, [pc, #88]	; (800064c <main+0xd0>)
 80005f4:	f001 fbd8 	bl	8001da8 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <main+0xd4>)
 80005fe:	601a      	str	r2, [r3, #0]



	    snprintf (SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Analog:%d\r\n",Counter++, 1-KeyState, AnalogValue);
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <main+0xd8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	4913      	ldr	r1, [pc, #76]	; (8000654 <main+0xd8>)
 8000608:	600a      	str	r2, [r1, #0]
 800060a:	4a11      	ldr	r2, [pc, #68]	; (8000650 <main+0xd4>)
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	f1c2 0201 	rsb	r2, r2, #1
 8000612:	490c      	ldr	r1, [pc, #48]	; (8000644 <main+0xc8>)
 8000614:	6809      	ldr	r1, [r1, #0]
 8000616:	9101      	str	r1, [sp, #4]
 8000618:	9200      	str	r2, [sp, #0]
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <main+0xdc>)
 800061c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <main+0xe0>)
 8000622:	f007 fef3 	bl	800840c <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <main+0xe0>)
 8000628:	f7ff fdd2 	bl	80001d0 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	4619      	mov	r1, r3
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <main+0xe0>)
 8000632:	f007 fa81 	bl	8007b38 <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f000 fd17 	bl	800106c <HAL_Delay>
  {
 800063e:	e7b0      	b.n	80005a2 <main+0x26>
 8000640:	200001ec 	.word	0x200001ec
 8000644:	20000430 	.word	0x20000430
 8000648:	40020c00 	.word	0x40020c00
 800064c:	40020400 	.word	0x40020400
 8000650:	2000042c 	.word	0x2000042c
 8000654:	20000428 	.word	0x20000428
 8000658:	08008d94 	.word	0x08008d94
 800065c:	20000328 	.word	0x20000328

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 ff00 	bl	8008474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006de:	2307      	movs	r3, #7
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fb12 	bl	8003d10 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f2:	f000 fa21 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2105      	movs	r1, #5
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fd73 	bl	8004200 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000720:	f000 fa0a 	bl	8000b38 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_ADC1_Init+0x98>)
 8000796:	f000 fc8d 	bl	80010b4 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 f9ca 	bl	8000b38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b6:	f000 fe2b 	bl	8001410 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 f9ba 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200001ec 	.word	0x200001ec
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_I2C1_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x50>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_I2C1_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_I2C1_Init+0x50>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2C1_Init+0x50>)
 8000816:	f001 fb13 	bl	8001e40 <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 f98a 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000234 	.word	0x20000234
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_I2S3_Init+0x54>)
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <MX_I2S3_Init+0x58>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_I2S3_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_I2S3_Init+0x54>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_I2S3_Init+0x54>)
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <MX_I2S3_Init+0x5c>)
 800085e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2S3_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_I2S3_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2S3_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_I2S3_Init+0x54>)
 8000874:	f001 fc28 	bl	80020c8 <HAL_I2S_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800087e:	f000 f95b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000288 	.word	0x20000288
 800088c:	40003c00 	.word	0x40003c00
 8000890:	00017700 	.word	0x00017700

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_SPI1_Init+0x64>)
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <MX_SPI1_Init+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008e0:	220a      	movs	r2, #10
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008e6:	f003 ffd7 	bl	8004898 <HAL_SPI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f0:	f000 f922 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200002d0 	.word	0x200002d0
 80008fc:	40013000 	.word	0x40013000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	4b81      	ldr	r3, [pc, #516]	; (8000b20 <MX_GPIO_Init+0x220>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a80      	ldr	r2, [pc, #512]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b7e      	ldr	r3, [pc, #504]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	4b7a      	ldr	r3, [pc, #488]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a79      	ldr	r2, [pc, #484]	; (8000b20 <MX_GPIO_Init+0x220>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b77      	ldr	r3, [pc, #476]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b73      	ldr	r3, [pc, #460]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a72      	ldr	r2, [pc, #456]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b70      	ldr	r3, [pc, #448]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b6c      	ldr	r3, [pc, #432]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a6b      	ldr	r2, [pc, #428]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b69      	ldr	r3, [pc, #420]	; (8000b20 <MX_GPIO_Init+0x220>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b65      	ldr	r3, [pc, #404]	; (8000b20 <MX_GPIO_Init+0x220>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a64      	ldr	r2, [pc, #400]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b62      	ldr	r3, [pc, #392]	; (8000b20 <MX_GPIO_Init+0x220>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b5e      	ldr	r3, [pc, #376]	; (8000b20 <MX_GPIO_Init+0x220>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a5d      	ldr	r2, [pc, #372]	; (8000b20 <MX_GPIO_Init+0x220>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b5b      	ldr	r3, [pc, #364]	; (8000b20 <MX_GPIO_Init+0x220>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2108      	movs	r1, #8
 80009c2:	4858      	ldr	r0, [pc, #352]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009c4:	f001 fa08 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2101      	movs	r1, #1
 80009cc:	4856      	ldr	r0, [pc, #344]	; (8000b28 <MX_GPIO_Init+0x228>)
 80009ce:	f001 fa03 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d2:	2200      	movs	r2, #0
 80009d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009d8:	4854      	ldr	r0, [pc, #336]	; (8000b2c <MX_GPIO_Init+0x22c>)
 80009da:	f001 f9fd 	bl	8001dd8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2120      	movs	r1, #32
 80009e2:	4853      	ldr	r0, [pc, #332]	; (8000b30 <MX_GPIO_Init+0x230>)
 80009e4:	f001 f9f8 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e8:	2308      	movs	r3, #8
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4849      	ldr	r0, [pc, #292]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000a00:	f001 f836 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4843      	ldr	r0, [pc, #268]	; (8000b28 <MX_GPIO_Init+0x228>)
 8000a1c:	f001 f828 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a20:	2308      	movs	r3, #8
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a30:	2305      	movs	r3, #5
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	483b      	ldr	r0, [pc, #236]	; (8000b28 <MX_GPIO_Init+0x228>)
 8000a3c:	f001 f818 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a44:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4837      	ldr	r0, [pc, #220]	; (8000b34 <MX_GPIO_Init+0x234>)
 8000a56:	f001 f80b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4831      	ldr	r0, [pc, #196]	; (8000b34 <MX_GPIO_Init+0x234>)
 8000a6e:	f000 ffff 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB4 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_4;
 8000a72:	2314      	movs	r3, #20
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	482a      	ldr	r0, [pc, #168]	; (8000b30 <MX_GPIO_Init+0x230>)
 8000a86:	f000 fff3 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4822      	ldr	r0, [pc, #136]	; (8000b30 <MX_GPIO_Init+0x230>)
 8000aa8:	f000 ffe2 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aac:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ab0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4819      	ldr	r0, [pc, #100]	; (8000b2c <MX_GPIO_Init+0x22c>)
 8000ac6:	f000 ffd3 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000aca:	2320      	movs	r3, #32
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <MX_GPIO_Init+0x22c>)
 8000ade:	f000 ffc7 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_GPIO_Init+0x230>)
 8000afa:	f000 ffb9 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b02:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000b14:	f000 ffac 	bl	8001a70 <HAL_GPIO_Init>

}
 8000b18:	bf00      	nop
 8000b1a:	3730      	adds	r7, #48	; 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020000 	.word	0x40020000

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 ff32 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_ADC_MspInit+0x7c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d127      	bne.n	8000c06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_ADC_MspInit+0x84>)
 8000c02:	f000 ff35 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40012000 	.word	0x40012000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_I2C_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12c      	bne.n	8000c98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c78:	f000 fefa 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400

08000cac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a31      	ldr	r2, [pc, #196]	; (8000d9c <HAL_I2S_MspInit+0xf0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d15a      	bne.n	8000d92 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 fc93 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cf8:	f7ff ff1e 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d50:	2310      	movs	r3, #16
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d60:	2306      	movs	r3, #6
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480e      	ldr	r0, [pc, #56]	; (8000da4 <HAL_I2S_MspInit+0xf8>)
 8000d6c:	f000 fe80 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d82:	2306      	movs	r3, #6
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <HAL_I2S_MspInit+0xfc>)
 8000d8e:	f000 fe6f 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40003c00 	.word	0x40003c00
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020800 	.word	0x40020800

08000dac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_SPI_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12b      	bne.n	8000e26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e06:	23e0      	movs	r3, #224	; 0xe0
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e16:	2305      	movs	r3, #5
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_SPI_MspInit+0x8c>)
 8000e22:	f000 fe25 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40013000 	.word	0x40013000
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f8d0 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <OTG_FS_IRQHandler+0x10>)
 8000e96:	f001 ff07 	bl	8002ca8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20001910 	.word	0x20001910

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f007 fad6 	bl	8008484 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20020000 	.word	0x20020000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	20000434 	.word	0x20000434
 8000f0c:	20002080 	.word	0x20002080

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3a:	490e      	ldr	r1, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f50:	4c0b      	ldr	r4, [pc, #44]	; (8000f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f5e:	f7ff ffd7 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f007 fa95 	bl	8008490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fb09 	bl	800057c <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000f78:	08008e60 	.word	0x08008e60
  ldr r2, =_sbss
 8000f7c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000f80:	20002080 	.word	0x20002080

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 fd1b 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fdc2 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fd33 	bl	8001a56 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 fcfb 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20000438 	.word	0x20000438

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000438 	.word	0x20000438

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e033      	b.n	8001132 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fd5e 	bl	8000b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d118      	bne.n	8001124 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010fa:	f023 0302 	bic.w	r3, r3, #2
 80010fe:	f043 0202 	orr.w	r2, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 faa4 	bl	8001654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f023 0303 	bic.w	r3, r3, #3
 800111a:	f043 0201 	orr.w	r2, r3, #1
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
 8001122:	e001      	b.n	8001128 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Start+0x1a>
 8001152:	2302      	movs	r3, #2
 8001154:	e0b2      	b.n	80012bc <HAL_ADC_Start+0x180>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d018      	beq.n	800119e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800117c:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <HAL_ADC_Start+0x18c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_ADC_Start+0x190>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0c9a      	lsrs	r2, r3, #18
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001190:	e002      	b.n	8001198 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	3b01      	subs	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d17a      	bne.n	80012a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ea:	d106      	bne.n	80011fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f023 0206 	bic.w	r2, r3, #6
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	645a      	str	r2, [r3, #68]	; 0x44
 80011f8:	e002      	b.n	8001200 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <HAL_ADC_Start+0x194>)
 800120a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001214:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2b00      	cmp	r3, #0
 8001220:	d12a      	bne.n	8001278 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a2b      	ldr	r2, [pc, #172]	; (80012d4 <HAL_ADC_Start+0x198>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d015      	beq.n	8001258 <HAL_ADC_Start+0x11c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a29      	ldr	r2, [pc, #164]	; (80012d8 <HAL_ADC_Start+0x19c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d105      	bne.n	8001242 <HAL_ADC_Start+0x106>
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_ADC_Start+0x194>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00a      	beq.n	8001258 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a25      	ldr	r2, [pc, #148]	; (80012dc <HAL_ADC_Start+0x1a0>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d136      	bne.n	80012ba <HAL_ADC_Start+0x17e>
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_ADC_Start+0x194>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	2b00      	cmp	r3, #0
 8001256:	d130      	bne.n	80012ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d129      	bne.n	80012ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	e020      	b.n	80012ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <HAL_ADC_Start+0x198>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d11b      	bne.n	80012ba <HAL_ADC_Start+0x17e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d114      	bne.n	80012ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	e00b      	b.n	80012ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0210 	orr.w	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	20000000 	.word	0x20000000
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	40012300 	.word	0x40012300
 80012d4:	40012000 	.word	0x40012000
 80012d8:	40012100 	.word	0x40012100
 80012dc:	40012200 	.word	0x40012200

080012e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fc:	d113      	bne.n	8001326 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800130c:	d10b      	bne.n	8001326 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f043 0220 	orr.w	r2, r3, #32
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e063      	b.n	80013ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001326:	f7ff fe95 	bl	8001054 <HAL_GetTick>
 800132a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800132c:	e021      	b.n	8001372 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d01d      	beq.n	8001372 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d007      	beq.n	800134c <HAL_ADC_PollForConversion+0x6c>
 800133c:	f7ff fe8a 	bl	8001054 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d212      	bcs.n	8001372 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b02      	cmp	r3, #2
 8001358:	d00b      	beq.n	8001372 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f043 0204 	orr.w	r2, r3, #4
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e03d      	b.n	80013ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b02      	cmp	r3, #2
 800137e:	d1d6      	bne.n	800132e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f06f 0212 	mvn.w	r2, #18
 8001388:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d123      	bne.n	80013ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d11f      	bne.n	80013ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d111      	bne.n	80013ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x1c>
 8001428:	2302      	movs	r3, #2
 800142a:	e105      	b.n	8001638 <HAL_ADC_ConfigChannel+0x228>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b09      	cmp	r3, #9
 800143a:	d925      	bls.n	8001488 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68d9      	ldr	r1, [r3, #12]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	3b1e      	subs	r3, #30
 8001452:	2207      	movs	r2, #7
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43da      	mvns	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	400a      	ands	r2, r1
 8001460:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68d9      	ldr	r1, [r3, #12]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	4603      	mov	r3, r0
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4403      	add	r3, r0
 800147a:	3b1e      	subs	r3, #30
 800147c:	409a      	lsls	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	e022      	b.n	80014ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6919      	ldr	r1, [r3, #16]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	2207      	movs	r2, #7
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6919      	ldr	r1, [r3, #16]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4403      	add	r3, r0
 80014c4:	409a      	lsls	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d824      	bhi.n	8001520 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b05      	subs	r3, #5
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	400a      	ands	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b05      	subs	r3, #5
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
 800151e:	e04c      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d824      	bhi.n	8001572 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	3b23      	subs	r3, #35	; 0x23
 800153a:	221f      	movs	r2, #31
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43da      	mvns	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	400a      	ands	r2, r1
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	3b23      	subs	r3, #35	; 0x23
 8001564:	fa00 f203 	lsl.w	r2, r0, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
 8001570:	e023      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b41      	subs	r3, #65	; 0x41
 8001584:	221f      	movs	r2, #31
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	400a      	ands	r2, r1
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3b41      	subs	r3, #65	; 0x41
 80015ae:	fa00 f203 	lsl.w	r2, r0, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_ADC_ConfigChannel+0x234>)
 80015bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a21      	ldr	r2, [pc, #132]	; (8001648 <HAL_ADC_ConfigChannel+0x238>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d109      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1cc>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b12      	cmp	r3, #18
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_ADC_ConfigChannel+0x238>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d123      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d003      	beq.n	80015f6 <HAL_ADC_ConfigChannel+0x1e6>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b11      	cmp	r3, #17
 80015f4:	d11b      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d111      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_ADC_ConfigChannel+0x23c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_ADC_ConfigChannel+0x240>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9a      	lsrs	r2, r3, #18
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001620:	e002      	b.n	8001628 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f9      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40012300 	.word	0x40012300
 8001648:	40012000 	.word	0x40012000
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800165c:	4b79      	ldr	r3, [pc, #484]	; (8001844 <ADC_Init+0x1f0>)
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	431a      	orrs	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	4a58      	ldr	r2, [pc, #352]	; (8001848 <ADC_Init+0x1f4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800171c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e00f      	b.n	8001752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0202 	bic.w	r2, r2, #2
 8001760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	005a      	lsls	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800179e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	3b01      	subs	r3, #1
 80017ac:	035a      	lsls	r2, r3, #13
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	e007      	b.n	80017c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	051a      	lsls	r2, r3, #20
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800180a:	025a      	lsls	r2, r3, #9
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	029a      	lsls	r2, r3, #10
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40012300 	.word	0x40012300
 8001848:	0f000001 	.word	0x0f000001

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e16b      	b.n	8001d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 815a 	bne.w	8001d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80b4 	beq.w	8001d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a5b      	ldr	r2, [pc, #364]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_GPIO_Init+0x314>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_GPIO_Init+0x318>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x31c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4e      	ldr	r2, [pc, #312]	; (8001d94 <HAL_GPIO_Init+0x324>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae90 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e1c:	887a      	ldrh	r2, [r7, #2]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12b      	b.n	80020aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fed8 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f002 fba4 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a81      	ldr	r2, [pc, #516]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d807      	bhi.n	8001ec4 <HAL_I2C_Init+0x84>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a80      	ldr	r2, [pc, #512]	; (80020b8 <HAL_I2C_Init+0x278>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e006      	b.n	8001ed2 <HAL_I2C_Init+0x92>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a7d      	ldr	r2, [pc, #500]	; (80020bc <HAL_I2C_Init+0x27c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e7      	b.n	80020aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a78      	ldr	r2, [pc, #480]	; (80020c0 <HAL_I2C_Init+0x280>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d802      	bhi.n	8001f14 <HAL_I2C_Init+0xd4>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	e009      	b.n	8001f28 <HAL_I2C_Init+0xe8>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_I2C_Init+0x284>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	3301      	adds	r3, #1
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	495c      	ldr	r1, [pc, #368]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d819      	bhi.n	8001f7c <HAL_I2C_Init+0x13c>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e59      	subs	r1, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_I2C_Init+0x138>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e59      	subs	r1, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	e051      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e04f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_I2C_Init+0x168>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e012      	b.n	8001fce <HAL_I2C_Init+0x18e>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x196>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e022      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <HAL_I2C_Init+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e58      	subs	r0, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800204a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6911      	ldr	r1, [r2, #16]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	000186a0 	.word	0x000186a0
 80020b8:	001e847f 	.word	0x001e847f
 80020bc:	003d08ff 	.word	0x003d08ff
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e128      	b.n	800232c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a90      	ldr	r2, [pc, #576]	; (8002334 <HAL_I2S_Init+0x26c>)
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe fdd9 	bl	8000cac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002110:	f023 030f 	bic.w	r3, r3, #15
 8002114:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2202      	movs	r2, #2
 800211c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d060      	beq.n	80021e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800212e:	2310      	movs	r3, #16
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e001      	b.n	8002138 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b20      	cmp	r3, #32
 800213e:	d802      	bhi.n	8002146 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002146:	2001      	movs	r0, #1
 8002148:	f002 fb48 	bl	80047dc <HAL_RCCEx_GetPeriphCLKFreq>
 800214c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002156:	d125      	bne.n	80021a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	fbb2 f2f3 	udiv	r2, r2, r3
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	461a      	mov	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	3305      	adds	r3, #5
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	e01f      	b.n	80021c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	fbb2 f2f3 	udiv	r2, r2, r3
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	3305      	adds	r3, #5
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	e00e      	b.n	80021c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	3305      	adds	r3, #5
 80021c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_I2S_Init+0x270>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	08db      	lsrs	r3, r3, #3
 80021cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e003      	b.n	80021f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d902      	bls.n	80021fc <HAL_I2S_Init+0x134>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	2bff      	cmp	r3, #255	; 0xff
 80021fa:	d907      	bls.n	800220c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f043 0210 	orr.w	r2, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e08f      	b.n	800232c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	ea42 0103 	orr.w	r1, r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	430a      	orrs	r2, r1
 800221e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800222a:	f023 030f 	bic.w	r3, r3, #15
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6851      	ldr	r1, [r2, #4]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6892      	ldr	r2, [r2, #8]
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68d2      	ldr	r2, [r2, #12]
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6992      	ldr	r2, [r2, #24]
 8002242:	430a      	orrs	r2, r1
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d161      	bne.n	800231c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a38      	ldr	r2, [pc, #224]	; (800233c <HAL_I2S_Init+0x274>)
 800225c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a37      	ldr	r2, [pc, #220]	; (8002340 <HAL_I2S_Init+0x278>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_I2S_Init+0x1a4>
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_I2S_Init+0x27c>)
 800226a:	e001      	b.n	8002270 <HAL_I2S_Init+0x1a8>
 800226c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4932      	ldr	r1, [pc, #200]	; (8002340 <HAL_I2S_Init+0x278>)
 8002278:	428a      	cmp	r2, r1
 800227a:	d101      	bne.n	8002280 <HAL_I2S_Init+0x1b8>
 800227c:	4a31      	ldr	r2, [pc, #196]	; (8002344 <HAL_I2S_Init+0x27c>)
 800227e:	e001      	b.n	8002284 <HAL_I2S_Init+0x1bc>
 8002280:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002284:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002288:	f023 030f 	bic.w	r3, r3, #15
 800228c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_I2S_Init+0x278>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_I2S_Init+0x1d4>
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_I2S_Init+0x27c>)
 800229a:	e001      	b.n	80022a0 <HAL_I2S_Init+0x1d8>
 800229c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a0:	2202      	movs	r2, #2
 80022a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a25      	ldr	r2, [pc, #148]	; (8002340 <HAL_I2S_Init+0x278>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_I2S_Init+0x1ea>
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_I2S_Init+0x27c>)
 80022b0:	e001      	b.n	80022b6 <HAL_I2S_Init+0x1ee>
 80022b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c2:	d003      	beq.n	80022cc <HAL_I2S_Init+0x204>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d103      	bne.n	80022d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	e001      	b.n	80022d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002304:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_I2S_Init+0x278>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_I2S_Init+0x24c>
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_I2S_Init+0x27c>)
 8002312:	e001      	b.n	8002318 <HAL_I2S_Init+0x250>
 8002314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002318:	897a      	ldrh	r2, [r7, #10]
 800231a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	0800243f 	.word	0x0800243f
 8002338:	cccccccd 	.word	0xcccccccd
 800233c:	08002555 	.word	0x08002555
 8002340:	40003800 	.word	0x40003800
 8002344:	40003400 	.word	0x40003400

08002348 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c9a      	adds	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffb8 	bl	8002348 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	b292      	uxth	r2, r2
 80023f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	1c9a      	adds	r2, r3, #2
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10e      	bne.n	8002436 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002426:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff93 	bl	800235c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b04      	cmp	r3, #4
 8002458:	d13a      	bne.n	80024d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d109      	bne.n	8002478 <I2S_IRQHandler+0x3a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d102      	bne.n	8002478 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffb4 	bl	80023e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d126      	bne.n	80024d0 <I2S_IRQHandler+0x92>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b20      	cmp	r3, #32
 800248e:	d11f      	bne.n	80024d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800249e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ff50 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d136      	bne.n	800254a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d109      	bne.n	80024fa <I2S_IRQHandler+0xbc>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d102      	bne.n	80024fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff45 	bl	8002384 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b08      	cmp	r3, #8
 8002502:	d122      	bne.n	800254a <I2S_IRQHandler+0x10c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b20      	cmp	r3, #32
 8002510:	d11b      	bne.n	800254a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002520:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff13 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a92      	ldr	r2, [pc, #584]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800256e:	4b92      	ldr	r3, [pc, #584]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002570:	e001      	b.n	8002576 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002572:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a8b      	ldr	r2, [pc, #556]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800258c:	4b8a      	ldr	r3, [pc, #552]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800258e:	e001      	b.n	8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a0:	d004      	beq.n	80025ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 8099 	bne.w	80026de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d107      	bne.n	80025c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f925 	bl	8002810 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d107      	bne.n	80025e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f9c8 	bl	8002970 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d13a      	bne.n	8002660 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d035      	beq.n	8002660 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a6e      	ldr	r2, [pc, #440]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002600:	e001      	b.n	8002606 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4969      	ldr	r1, [pc, #420]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800260e:	428b      	cmp	r3, r1
 8002610:	d101      	bne.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002612:	4b69      	ldr	r3, [pc, #420]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002614:	e001      	b.n	800261a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800261a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800261e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800262e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fe88 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	f040 80c3 	bne.w	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80bd 	beq.w	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002686:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002692:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002694:	e001      	b.n	800269a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4944      	ldr	r1, [pc, #272]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026a2:	428b      	cmp	r3, r1
 80026a4:	d101      	bne.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80026a6:	4b44      	ldr	r3, [pc, #272]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026a8:	e001      	b.n	80026ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80026aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0204 	orr.w	r2, r3, #4
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fe4a 	bl	8002370 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026dc:	e089      	b.n	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d107      	bne.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8be 	bl	8002874 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f8fd 	bl	800290c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d12f      	bne.n	800277c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d02a      	beq.n	800277c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002734:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002742:	e001      	b.n	8002748 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4919      	ldr	r1, [pc, #100]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002750:	428b      	cmp	r3, r1
 8002752:	d101      	bne.n	8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002754:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002756:	e001      	b.n	800275c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002760:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fdfa 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d136      	bne.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d031      	beq.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800279c:	e001      	b.n	80027a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800279e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027aa:	428b      	cmp	r3, r1
 80027ac:	d106      	bne.n	80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80027ae:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027b0:	e006      	b.n	80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80027b2:	bf00      	nop
 80027b4:	40003800 	.word	0x40003800
 80027b8:	40003400 	.word	0x40003400
 80027bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fdc0 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027f0:	e000      	b.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027f2:	bf00      	nop
}
 80027f4:	bf00      	nop
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c99      	adds	r1, r3, #2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6251      	str	r1, [r2, #36]	; 0x24
 8002822:	881a      	ldrh	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d113      	bne.n	800286a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002850:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d106      	bne.n	800286a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ffc9 	bl	80027fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c99      	adds	r1, r3, #2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6251      	str	r1, [r2, #36]	; 0x24
 8002886:	8819      	ldrh	r1, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <I2SEx_TxISR_I2SExt+0x90>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <I2SEx_TxISR_I2SExt+0x22>
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <I2SEx_TxISR_I2SExt+0x94>)
 8002894:	e001      	b.n	800289a <I2SEx_TxISR_I2SExt+0x26>
 8002896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800289a:	460a      	mov	r2, r1
 800289c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d121      	bne.n	80028fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <I2SEx_TxISR_I2SExt+0x90>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <I2SEx_TxISR_I2SExt+0x50>
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <I2SEx_TxISR_I2SExt+0x94>)
 80028c2:	e001      	b.n	80028c8 <I2SEx_TxISR_I2SExt+0x54>
 80028c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	490d      	ldr	r1, [pc, #52]	; (8002904 <I2SEx_TxISR_I2SExt+0x90>)
 80028d0:	428b      	cmp	r3, r1
 80028d2:	d101      	bne.n	80028d8 <I2SEx_TxISR_I2SExt+0x64>
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <I2SEx_TxISR_I2SExt+0x94>)
 80028d6:	e001      	b.n	80028dc <I2SEx_TxISR_I2SExt+0x68>
 80028d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff81 	bl	80027fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40003800 	.word	0x40003800
 8002908:	40003400 	.word	0x40003400

0800290c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68d8      	ldr	r0, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	1c99      	adds	r1, r3, #2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002924:	b282      	uxth	r2, r0
 8002926:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d113      	bne.n	8002968 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800294e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff4a 	bl	80027fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <I2SEx_RxISR_I2SExt+0x90>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <I2SEx_RxISR_I2SExt+0x16>
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <I2SEx_RxISR_I2SExt+0x94>)
 8002984:	e001      	b.n	800298a <I2SEx_RxISR_I2SExt+0x1a>
 8002986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800298a:	68d8      	ldr	r0, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	1c99      	adds	r1, r3, #2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002996:	b282      	uxth	r2, r0
 8002998:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d121      	bne.n	80029f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <I2SEx_RxISR_I2SExt+0x90>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <I2SEx_RxISR_I2SExt+0x50>
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <I2SEx_RxISR_I2SExt+0x94>)
 80029be:	e001      	b.n	80029c4 <I2SEx_RxISR_I2SExt+0x54>
 80029c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	490d      	ldr	r1, [pc, #52]	; (8002a00 <I2SEx_RxISR_I2SExt+0x90>)
 80029cc:	428b      	cmp	r3, r1
 80029ce:	d101      	bne.n	80029d4 <I2SEx_RxISR_I2SExt+0x64>
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <I2SEx_RxISR_I2SExt+0x94>)
 80029d2:	e001      	b.n	80029d8 <I2SEx_RxISR_I2SExt+0x68>
 80029d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff03 	bl	80027fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40003800 	.word	0x40003800
 8002a04:	40003400 	.word	0x40003400

08002a08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0a:	b08f      	sub	sp, #60	; 0x3c
 8002a0c:	af0a      	add	r7, sp, #40	; 0x28
 8002a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e10f      	b.n	8002c3a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f005 f9c7 	bl	8007dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 f8ba 	bl	8004bd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	687e      	ldr	r6, [r7, #4]
 8002a66:	466d      	mov	r5, sp
 8002a68:	f106 0410 	add.w	r4, r6, #16
 8002a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a7c:	1d33      	adds	r3, r6, #4
 8002a7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a80:	6838      	ldr	r0, [r7, #0]
 8002a82:	f001 ff92 	bl	80049aa <USB_CoreInit>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0d0      	b.n	8002c3a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 f8a8 	bl	8004bf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e04a      	b.n	8002b40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	333d      	adds	r3, #61	; 0x3d
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	333c      	adds	r3, #60	; 0x3c
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	b298      	uxth	r0, r3
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3342      	adds	r3, #66	; 0x42
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	333f      	adds	r3, #63	; 0x3f
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3344      	adds	r3, #68	; 0x44
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3348      	adds	r3, #72	; 0x48
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3350      	adds	r3, #80	; 0x50
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3af      	bcc.n	8002aaa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e044      	b.n	8002bda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3b5      	bcc.n	8002b50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	687e      	ldr	r6, [r7, #4]
 8002bec:	466d      	mov	r5, sp
 8002bee:	f106 0410 	add.w	r4, r6, #16
 8002bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c02:	1d33      	adds	r3, r6, #4
 8002c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c06:	6838      	ldr	r0, [r7, #0]
 8002c08:	f002 f840 	bl	8004c8c <USB_DevInit>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00d      	b.n	8002c3a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 f8bc 	bl	8005db0 <USB_DevDisconnect>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_PCD_Start+0x1c>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e020      	b.n	8002ca0 <HAL_PCD_Start+0x5e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d109      	bne.n	8002c82 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 ff92 	bl	8004bb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 f86c 	bl	8005d6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b08d      	sub	sp, #52	; 0x34
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 f92a 	bl	8005f18 <USB_GetMode>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 839d 	bne.w	8003406 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 f88e 	bl	8005df2 <USB_ReadInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8393 	beq.w	8003404 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 f885 	bl	8005df2 <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d107      	bne.n	8002d02 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f002 0202 	and.w	r2, r2, #2
 8002d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 f873 	bl	8005df2 <USB_ReadInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d161      	bne.n	8002dda <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0210 	bic.w	r2, r2, #16
 8002d24:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	3304      	adds	r3, #4
 8002d44:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	0c5b      	lsrs	r3, r3, #17
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d124      	bne.n	8002d9c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d035      	beq.n	8002dca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6a38      	ldr	r0, [r7, #32]
 8002d72:	f002 feaa 	bl	8005aca <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d82:	441a      	add	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d94:	441a      	add	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	e016      	b.n	8002dca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	0c5b      	lsrs	r3, r3, #17
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d110      	bne.n	8002dca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dae:	2208      	movs	r2, #8
 8002db0:	4619      	mov	r1, r3
 8002db2:	6a38      	ldr	r0, [r7, #32]
 8002db4:	f002 fe89 	bl	8005aca <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc4:	441a      	add	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0210 	orr.w	r2, r2, #16
 8002dd8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 f807 	bl	8005df2 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dee:	d16e      	bne.n	8002ece <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 f80d 	bl	8005e18 <USB_ReadDevAllOutEpInterrupt>
 8002dfe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e00:	e062      	b.n	8002ec8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d057      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 f832 	bl	8005e80 <USB_ReadDevOutEPInterrupt>
 8002e1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00c      	beq.n	8002e42 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	2301      	movs	r3, #1
 8002e38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fdb1 	bl	80039a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00c      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 feab 	bl	8003bbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2310      	movs	r3, #16
 8002e80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d199      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 ff8d 	bl	8005df2 <USB_ReadInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ee2:	f040 80c0 	bne.w	8003066 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 ffae 	bl	8005e4c <USB_ReadDevAllInEpInterrupt>
 8002ef0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ef6:	e0b2      	b.n	800305e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80a7 	beq.w	8003052 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f002 ffd4 	bl	8005ebc <USB_ReadDevInEPInterrupt>
 8002f14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d057      	beq.n	8002fd0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	2201      	movs	r2, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69f9      	ldr	r1, [r7, #28]
 8002f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f40:	4013      	ands	r3, r2
 8002f42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f50:	461a      	mov	r2, r3
 8002f52:	2301      	movs	r3, #1
 8002f54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d132      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3348      	adds	r3, #72	; 0x48
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4403      	add	r3, r0
 8002f7e:	3344      	adds	r3, #68	; 0x44
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4419      	add	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4403      	add	r3, r0
 8002f92:	3348      	adds	r3, #72	; 0x48
 8002f94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d113      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x31c>
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3350      	adds	r3, #80	; 0x50
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	f002 ffdc 	bl	8005f7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f004 ff8b 	bl	8007ee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2308      	movs	r3, #8
 8002fea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003002:	461a      	mov	r2, r3
 8003004:	2310      	movs	r3, #16
 8003006:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	461a      	mov	r2, r3
 8003020:	2340      	movs	r3, #64	; 0x40
 8003022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303a:	461a      	mov	r2, r3
 800303c:	2302      	movs	r3, #2
 800303e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800304a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fc1b 	bl	8003888 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	3301      	adds	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	f47f af49 	bne.w	8002ef8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f002 fec1 	bl	8005df2 <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800307a:	d122      	bne.n	80030c2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003096:	2b01      	cmp	r3, #1
 8003098:	d108      	bne.n	80030ac <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030a2:	2100      	movs	r1, #0
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fe27 	bl	8003cf8 <HAL_PCDEx_LPM_Callback>
 80030aa:	e002      	b.n	80030b2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f004 ff91 	bl	8007fd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f002 fe93 	bl	8005df2 <USB_ReadInterrupts>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d6:	d112      	bne.n	80030fe <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d102      	bne.n	80030ee <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f004 ff4d 	bl	8007f88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030fc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f002 fe75 	bl	8005df2 <USB_ReadInterrupts>
 8003108:	4603      	mov	r3, r0
 800310a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	f040 80c7 	bne.w	80032a4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2110      	movs	r1, #16
 8003130:	4618      	mov	r0, r3
 8003132:	f001 ff0f 	bl	8004f54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313a:	e056      	b.n	80031ea <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	461a      	mov	r2, r3
 800314a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800314e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003160:	0151      	lsls	r1, r2, #5
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	440a      	add	r2, r1
 8003166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800316a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800316e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003180:	0151      	lsls	r1, r2, #5
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	440a      	add	r2, r1
 8003186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800318a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800318e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319c:	461a      	mov	r2, r3
 800319e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b4:	0151      	lsls	r1, r2, #5
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	440a      	add	r2, r1
 80031ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d4:	0151      	lsls	r1, r2, #5
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	440a      	add	r2, r1
 80031da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	3301      	adds	r3, #1
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3a3      	bcc.n	800313c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003202:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003206:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003220:	f043 030b 	orr.w	r3, r3, #11
 8003224:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003236:	f043 030b 	orr.w	r3, r3, #11
 800323a:	6453      	str	r3, [r2, #68]	; 0x44
 800323c:	e015      	b.n	800326a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800324c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003250:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003254:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003264:	f043 030b 	orr.w	r3, r3, #11
 8003268:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003278:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800327c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800328e:	461a      	mov	r2, r3
 8003290:	f002 fe74 	bl	8005f7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fda2 	bl	8005df2 <USB_ReadInterrupts>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b8:	d124      	bne.n	8003304 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f002 fe38 	bl	8005f34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 fea0 	bl	800500e <USB_GetDevSpeed>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681c      	ldr	r4, [r3, #0]
 80032da:	f001 f97d 	bl	80045d8 <HAL_RCC_GetHCLKFreq>
 80032de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	4620      	mov	r0, r4
 80032ea:	f001 fbbf 	bl	8004a6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f004 fe21 	bl	8007f36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f002 fd72 	bl	8005df2 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d10a      	bne.n	800332e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f004 fdfe 	bl	8007f1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f002 0208 	and.w	r2, r2, #8
 800332c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f002 fd5d 	bl	8005df2 <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003342:	d10f      	bne.n	8003364 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f004 fe60 	bl	8008014 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fd42 	bl	8005df2 <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003378:	d10f      	bne.n	800339a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f004 fe33 	bl	8007ff0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fd27 	bl	8005df2 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ae:	d10a      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f004 fe41 	bl	8008038 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 fd11 	bl	8005df2 <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d115      	bne.n	8003406 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f004 fe31 	bl	8008054 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	e000      	b.n	8003406 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003404:	bf00      	nop
    }
  }
}
 8003406:	3734      	adds	r7, #52	; 0x34
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}

0800340c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_SetAddress+0x1a>
 8003422:	2302      	movs	r3, #2
 8003424:	e013      	b.n	800344e <HAL_PCD_SetAddress+0x42>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f002 fc6f 	bl	8005d22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	4608      	mov	r0, r1
 8003460:	4611      	mov	r1, r2
 8003462:	461a      	mov	r2, r3
 8003464:	4603      	mov	r3, r0
 8003466:	70fb      	strb	r3, [r7, #3]
 8003468:	460b      	mov	r3, r1
 800346a:	803b      	strh	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003478:	2b00      	cmp	r3, #0
 800347a:	da0f      	bge.n	800349c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	3338      	adds	r3, #56	; 0x38
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	705a      	strb	r2, [r3, #1]
 800349a:	e00f      	b.n	80034bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	f003 020f 	and.w	r2, r3, #15
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034c8:	883a      	ldrh	r2, [r7, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	78ba      	ldrb	r2, [r7, #2]
 80034d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034e6:	78bb      	ldrb	r3, [r7, #2]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d102      	bne.n	80034f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_PCD_EP_Open+0xaa>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e00e      	b.n	800351e <HAL_PCD_EP_Open+0xc8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68f9      	ldr	r1, [r7, #12]
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fda2 	bl	8005058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800351c:	7afb      	ldrb	r3, [r7, #11]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003536:	2b00      	cmp	r3, #0
 8003538:	da0f      	bge.n	800355a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 020f 	and.w	r2, r3, #15
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	3338      	adds	r3, #56	; 0x38
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	3304      	adds	r3, #4
 8003550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	705a      	strb	r2, [r3, #1]
 8003558:	e00f      	b.n	800357a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_PCD_EP_Close+0x6e>
 8003590:	2302      	movs	r3, #2
 8003592:	e00e      	b.n	80035b2 <HAL_PCD_EP_Close+0x8c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fde0 	bl	8005168 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	460b      	mov	r3, r1
 80035c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ca:	7afb      	ldrb	r3, [r7, #11]
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	b2da      	uxtb	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003616:	7afb      	ldrb	r3, [r7, #11]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	6979      	ldr	r1, [r7, #20]
 800362e:	f002 f8bb 	bl	80057a8 <USB_EP0StartXfer>
 8003632:	e008      	b.n	8003646 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	6979      	ldr	r1, [r7, #20]
 8003642:	f001 fe6d 	bl	8005320 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	460b      	mov	r3, r1
 800368e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003690:	7afb      	ldrb	r3, [r7, #11]
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	3338      	adds	r3, #56	; 0x38
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2201      	movs	r2, #1
 80036be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c0:	7afb      	ldrb	r3, [r7, #11]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6979      	ldr	r1, [r7, #20]
 80036f2:	f002 f859 	bl	80057a8 <USB_EP0StartXfer>
 80036f6:	e008      	b.n	800370a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6979      	ldr	r1, [r7, #20]
 8003706:	f001 fe0b 	bl	8005320 <USB_EPStartXfer>
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 020f 	and.w	r2, r3, #15
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d901      	bls.n	8003732 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e050      	b.n	80037d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003736:	2b00      	cmp	r3, #0
 8003738:	da0f      	bge.n	800375a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3338      	adds	r3, #56	; 0x38
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	705a      	strb	r2, [r3, #1]
 8003758:	e00d      	b.n	8003776 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_PCD_EP_SetStall+0x82>
 8003792:	2302      	movs	r3, #2
 8003794:	e01e      	b.n	80037d4 <HAL_PCD_EP_SetStall+0xc0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f002 f9e8 	bl	8005b7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	b2d9      	uxtb	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037c4:	461a      	mov	r2, r3
 80037c6:	f002 fbd9 	bl	8005f7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d901      	bls.n	80037fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e042      	b.n	8003880 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da0f      	bge.n	8003822 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3338      	adds	r3, #56	; 0x38
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	705a      	strb	r2, [r3, #1]
 8003820:	e00f      	b.n	8003842 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 020f 	and.w	r2, r3, #15
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_PCD_EP_ClrStall+0x86>
 800385e:	2302      	movs	r3, #2
 8003860:	e00e      	b.n	8003880 <HAL_PCD_EP_ClrStall+0xa4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68f9      	ldr	r1, [r7, #12]
 8003870:	4618      	mov	r0, r3
 8003872:	f002 f9f0 	bl	8005c56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af02      	add	r7, sp, #8
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	3338      	adds	r3, #56	; 0x38
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d901      	bls.n	80038c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e06c      	b.n	800399a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d902      	bls.n	80038dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3303      	adds	r3, #3
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038e4:	e02b      	b.n	800393e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d902      	bls.n	8003902 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3303      	adds	r3, #3
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68d9      	ldr	r1, [r3, #12]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800391a:	b2db      	uxtb	r3, r3
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f002 f894 	bl	8005a4e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	429a      	cmp	r2, r3
 8003952:	d809      	bhi.n	8003968 <PCD_WriteEmptyTxFifo+0xe0>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800395c:	429a      	cmp	r2, r3
 800395e:	d203      	bcs.n	8003968 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1be      	bne.n	80038e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	429a      	cmp	r2, r3
 8003972:	d811      	bhi.n	8003998 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	43db      	mvns	r3, r3
 800398e:	6939      	ldr	r1, [r7, #16]
 8003990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003994:	4013      	ands	r3, r2
 8003996:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	333c      	adds	r3, #60	; 0x3c
 80039bc:	3304      	adds	r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 80a0 	bne.w	8003b1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d015      	beq.n	8003a12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a72      	ldr	r2, [pc, #456]	; (8003bb4 <PCD_EP_OutXfrComplete_int+0x210>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f240 80dd 	bls.w	8003baa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80d7 	beq.w	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0e:	6093      	str	r3, [r2, #8]
 8003a10:	e0cb      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	6093      	str	r3, [r2, #8]
 8003a2e:	e0bc      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f040 80b7 	bne.w	8003baa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a5d      	ldr	r2, [pc, #372]	; (8003bb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d90f      	bls.n	8003a64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	e0a2      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	0159      	lsls	r1, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	440b      	add	r3, r1
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4403      	add	r3, r0
 8003a9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4403      	add	r3, r0
 8003ac2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4419      	add	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003adc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d114      	bne.n	8003b0e <PCD_EP_OutXfrComplete_int+0x16a>
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d108      	bne.n	8003b0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b06:	461a      	mov	r2, r3
 8003b08:	2101      	movs	r1, #1
 8003b0a:	f002 fa37 	bl	8005f7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f004 f9cb 	bl	8007eb0 <HAL_PCD_DataOutStageCallback>
 8003b1a:	e046      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a26      	ldr	r2, [pc, #152]	; (8003bb8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d124      	bne.n	8003b6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b40:	6093      	str	r3, [r2, #8]
 8003b42:	e032      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f004 f9a2 	bl	8007eb0 <HAL_PCD_DataOutStageCallback>
 8003b6c:	e01d      	b.n	8003baa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d114      	bne.n	8003b9e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b96:	461a      	mov	r2, r3
 8003b98:	2100      	movs	r1, #0
 8003b9a:	f002 f9ef 	bl	8005f7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f004 f983 	bl	8007eb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	4f54300a 	.word	0x4f54300a
 8003bb8:	4f54310a 	.word	0x4f54310a

08003bbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	333c      	adds	r3, #60	; 0x3c
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d90e      	bls.n	8003c10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f004 f93b 	bl	8007e8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d90c      	bls.n	8003c38 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d108      	bne.n	8003c38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c30:	461a      	mov	r2, r3
 8003c32:	2101      	movs	r1, #1
 8003c34:	f002 f9a2 	bl	8005f7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	4f54300a 	.word	0x4f54300a

08003c48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
 8003c54:	4613      	mov	r3, r2
 8003c56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c66:	883b      	ldrh	r3, [r7, #0]
 8003c68:	0419      	lsls	r1, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
 8003c74:	e028      	b.n	8003cc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	4413      	add	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	e00d      	b.n	8003ca6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3340      	adds	r3, #64	; 0x40
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d3ec      	bcc.n	8003c8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cb0:	883b      	ldrh	r3, [r7, #0]
 8003cb2:	0418      	lsls	r0, r3, #16
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	4302      	orrs	r2, r0
 8003cc0:	3340      	adds	r3, #64	; 0x40
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e267      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d075      	beq.n	8003e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2e:	4b88      	ldr	r3, [pc, #544]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d00c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3a:	4b85      	ldr	r3, [pc, #532]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d112      	bne.n	8003d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d46:	4b82      	ldr	r3, [pc, #520]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d52:	d10b      	bne.n	8003d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	4b7e      	ldr	r3, [pc, #504]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d05b      	beq.n	8003e18 <HAL_RCC_OscConfig+0x108>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d157      	bne.n	8003e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e242      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d74:	d106      	bne.n	8003d84 <HAL_RCC_OscConfig+0x74>
 8003d76:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a75      	ldr	r2, [pc, #468]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e01d      	b.n	8003dc0 <HAL_RCC_OscConfig+0xb0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x98>
 8003d8e:	4b70      	ldr	r3, [pc, #448]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6f      	ldr	r2, [pc, #444]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b6d      	ldr	r3, [pc, #436]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a6c      	ldr	r2, [pc, #432]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCC_OscConfig+0xb0>
 8003da8:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a68      	ldr	r2, [pc, #416]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b66      	ldr	r3, [pc, #408]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a65      	ldr	r2, [pc, #404]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd f944 	bl	8001054 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fd f940 	bl	8001054 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e207      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	4b5b      	ldr	r3, [pc, #364]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xc0>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fd f930 	bl	8001054 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fd f92c 	bl	8001054 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1f3      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	4b51      	ldr	r3, [pc, #324]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0xe8>
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d063      	beq.n	8003eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e26:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d11c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3e:	4b44      	ldr	r3, [pc, #272]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d116      	bne.n	8003e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4a:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_RCC_OscConfig+0x152>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d001      	beq.n	8003e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e1c7      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4937      	ldr	r1, [pc, #220]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	e03a      	b.n	8003eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e80:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_RCC_OscConfig+0x244>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fd f8e5 	bl	8001054 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8e:	f7fd f8e1 	bl	8001054 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e1a8      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eac:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4925      	ldr	r1, [pc, #148]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
 8003ec0:	e015      	b.n	8003eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <HAL_RCC_OscConfig+0x244>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd f8c4 	bl	8001054 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fd f8c0 	bl	8001054 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e187      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d036      	beq.n	8003f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d016      	beq.n	8003f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_RCC_OscConfig+0x248>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd f8a4 	bl	8001054 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f10:	f7fd f8a0 	bl	8001054 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e167      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_OscConfig+0x240>)
 8003f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x200>
 8003f2e:	e01b      	b.n	8003f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCC_OscConfig+0x248>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f36:	f7fd f88d 	bl	8001054 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3c:	e00e      	b.n	8003f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3e:	f7fd f889 	bl	8001054 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d907      	bls.n	8003f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e150      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
 8003f50:	40023800 	.word	0x40023800
 8003f54:	42470000 	.word	0x42470000
 8003f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	4b88      	ldr	r3, [pc, #544]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ea      	bne.n	8003f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8097 	beq.w	80040a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4b81      	ldr	r3, [pc, #516]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10f      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	4b7d      	ldr	r3, [pc, #500]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a7c      	ldr	r2, [pc, #496]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
 8003f96:	4b7a      	ldr	r3, [pc, #488]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b77      	ldr	r3, [pc, #476]	; (8004184 <HAL_RCC_OscConfig+0x474>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b74      	ldr	r3, [pc, #464]	; (8004184 <HAL_RCC_OscConfig+0x474>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a73      	ldr	r2, [pc, #460]	; (8004184 <HAL_RCC_OscConfig+0x474>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7fd f849 	bl	8001054 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fd f845 	bl	8001054 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e10c      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_OscConfig+0x474>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x2ea>
 8003fec:	4b64      	ldr	r3, [pc, #400]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a63      	ldr	r2, [pc, #396]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff8:	e01c      	b.n	8004034 <HAL_RCC_OscConfig+0x324>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x30c>
 8004002:	4b5f      	ldr	r3, [pc, #380]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4a5e      	ldr	r2, [pc, #376]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8004008:	f043 0304 	orr.w	r3, r3, #4
 800400c:	6713      	str	r3, [r2, #112]	; 0x70
 800400e:	4b5c      	ldr	r3, [pc, #368]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a5b      	ldr	r2, [pc, #364]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0x324>
 800401c:	4b58      	ldr	r3, [pc, #352]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a57      	ldr	r2, [pc, #348]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	4b55      	ldr	r3, [pc, #340]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a54      	ldr	r2, [pc, #336]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 800402e:	f023 0304 	bic.w	r3, r3, #4
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d015      	beq.n	8004068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fd f80a 	bl	8001054 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	e00a      	b.n	800405a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004044:	f7fd f806 	bl	8001054 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0cb      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	4b49      	ldr	r3, [pc, #292]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ee      	beq.n	8004044 <HAL_RCC_OscConfig+0x334>
 8004066:	e014      	b.n	8004092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004068:	f7fc fff4 	bl	8001054 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fc fff0 	bl	8001054 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0b5      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004086:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1ee      	bne.n	8004070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d105      	bne.n	80040a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004098:	4b39      	ldr	r3, [pc, #228]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	4a38      	ldr	r2, [pc, #224]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 800409e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80a1 	beq.w	80041f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ae:	4b34      	ldr	r3, [pc, #208]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d05c      	beq.n	8004174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d141      	bne.n	8004146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	4b31      	ldr	r3, [pc, #196]	; (8004188 <HAL_RCC_OscConfig+0x478>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fc ffc4 	bl	8001054 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fc ffc0 	bl	8001054 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e087      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	019b      	lsls	r3, r3, #6
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	3b01      	subs	r3, #1
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	491b      	ldr	r1, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x478>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411e:	f7fc ff99 	bl	8001054 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004126:	f7fc ff95 	bl	8001054 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e05c      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x416>
 8004144:	e054      	b.n	80041f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <HAL_RCC_OscConfig+0x478>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fc ff82 	bl	8001054 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004154:	f7fc ff7e 	bl	8001054 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e045      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCC_OscConfig+0x470>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x444>
 8004172:	e03d      	b.n	80041f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d107      	bne.n	800418c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e038      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
 8004180:	40023800 	.word	0x40023800
 8004184:	40007000 	.word	0x40007000
 8004188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x4ec>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d028      	beq.n	80041ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d121      	bne.n	80041ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d11a      	bne.n	80041ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041bc:	4013      	ands	r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d111      	bne.n	80041ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	3b01      	subs	r3, #1
 80041d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d107      	bne.n	80041ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800

08004200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0cc      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004214:	4b68      	ldr	r3, [pc, #416]	; (80043b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d90c      	bls.n	800423c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b63      	ldr	r3, [pc, #396]	; (80043b8 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0b8      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004254:	4b59      	ldr	r3, [pc, #356]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a58      	ldr	r2, [pc, #352]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800425e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800426c:	4b53      	ldr	r3, [pc, #332]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a52      	ldr	r2, [pc, #328]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004278:	4b50      	ldr	r3, [pc, #320]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	494d      	ldr	r1, [pc, #308]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d044      	beq.n	8004320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b47      	ldr	r3, [pc, #284]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d119      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07f      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d003      	beq.n	80042be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042be:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e06f      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ce:	4b3b      	ldr	r3, [pc, #236]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e067      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042de:	4b37      	ldr	r3, [pc, #220]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f023 0203 	bic.w	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4934      	ldr	r1, [pc, #208]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f0:	f7fc feb0 	bl	8001054 <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	e00a      	b.n	800430e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f8:	f7fc feac 	bl	8001054 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	; 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e04f      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 020c 	and.w	r2, r3, #12
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	429a      	cmp	r2, r3
 800431e:	d1eb      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004320:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d20c      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e032      	b.n	80043ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4916      	ldr	r1, [pc, #88]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	490e      	ldr	r1, [pc, #56]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004386:	f000 f821 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 800438a:	4602      	mov	r2, r0
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	490a      	ldr	r1, [pc, #40]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	5ccb      	ldrb	r3, [r1, r3]
 800439a:	fa22 f303 	lsr.w	r3, r2, r3
 800439e:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc fe10 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40023c00 	.word	0x40023c00
 80043bc:	40023800 	.word	0x40023800
 80043c0:	08008e04 	.word	0x08008e04
 80043c4:	20000000 	.word	0x20000000
 80043c8:	20000004 	.word	0x20000004

080043cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b094      	sub	sp, #80	; 0x50
 80043d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	647b      	str	r3, [r7, #68]	; 0x44
 80043d8:	2300      	movs	r3, #0
 80043da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043dc:	2300      	movs	r3, #0
 80043de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043e4:	4b79      	ldr	r3, [pc, #484]	; (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d00d      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x40>
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	f200 80e1 	bhi.w	80045b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x34>
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0x3a>
 80043fe:	e0db      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004400:	4b73      	ldr	r3, [pc, #460]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004404:	e0db      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004406:	4b73      	ldr	r3, [pc, #460]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800440a:	e0d8      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800440c:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004414:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004416:	4b6d      	ldr	r3, [pc, #436]	; (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d063      	beq.n	80044ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004422:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	2200      	movs	r2, #0
 800442a:	63bb      	str	r3, [r7, #56]	; 0x38
 800442c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004434:	633b      	str	r3, [r7, #48]	; 0x30
 8004436:	2300      	movs	r3, #0
 8004438:	637b      	str	r3, [r7, #52]	; 0x34
 800443a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800443e:	4622      	mov	r2, r4
 8004440:	462b      	mov	r3, r5
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	0159      	lsls	r1, r3, #5
 800444c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004450:	0150      	lsls	r0, r2, #5
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4621      	mov	r1, r4
 8004458:	1a51      	subs	r1, r2, r1
 800445a:	6139      	str	r1, [r7, #16]
 800445c:	4629      	mov	r1, r5
 800445e:	eb63 0301 	sbc.w	r3, r3, r1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004470:	4659      	mov	r1, fp
 8004472:	018b      	lsls	r3, r1, #6
 8004474:	4651      	mov	r1, sl
 8004476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800447a:	4651      	mov	r1, sl
 800447c:	018a      	lsls	r2, r1, #6
 800447e:	4651      	mov	r1, sl
 8004480:	ebb2 0801 	subs.w	r8, r2, r1
 8004484:	4659      	mov	r1, fp
 8004486:	eb63 0901 	sbc.w	r9, r3, r1
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800449a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800449e:	4690      	mov	r8, r2
 80044a0:	4699      	mov	r9, r3
 80044a2:	4623      	mov	r3, r4
 80044a4:	eb18 0303 	adds.w	r3, r8, r3
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	462b      	mov	r3, r5
 80044ac:	eb49 0303 	adc.w	r3, r9, r3
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044be:	4629      	mov	r1, r5
 80044c0:	024b      	lsls	r3, r1, #9
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044c8:	4621      	mov	r1, r4
 80044ca:	024a      	lsls	r2, r1, #9
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	2200      	movs	r2, #0
 80044d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044dc:	f7fb fed0 	bl	8000280 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e8:	e058      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ea:	4b38      	ldr	r3, [pc, #224]	; (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	2200      	movs	r2, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	4611      	mov	r1, r2
 80044f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044fa:	623b      	str	r3, [r7, #32]
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004504:	4642      	mov	r2, r8
 8004506:	464b      	mov	r3, r9
 8004508:	f04f 0000 	mov.w	r0, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	0159      	lsls	r1, r3, #5
 8004512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004516:	0150      	lsls	r0, r2, #5
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4641      	mov	r1, r8
 800451e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004522:	4649      	mov	r1, r9
 8004524:	eb63 0b01 	sbc.w	fp, r3, r1
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800453c:	ebb2 040a 	subs.w	r4, r2, sl
 8004540:	eb63 050b 	sbc.w	r5, r3, fp
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	00eb      	lsls	r3, r5, #3
 800454e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004552:	00e2      	lsls	r2, r4, #3
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	4643      	mov	r3, r8
 800455a:	18e3      	adds	r3, r4, r3
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	464b      	mov	r3, r9
 8004560:	eb45 0303 	adc.w	r3, r5, r3
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004572:	4629      	mov	r1, r5
 8004574:	028b      	lsls	r3, r1, #10
 8004576:	4621      	mov	r1, r4
 8004578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800457c:	4621      	mov	r1, r4
 800457e:	028a      	lsls	r2, r1, #10
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004586:	2200      	movs	r2, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	61fa      	str	r2, [r7, #28]
 800458c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004590:	f7fb fe76 	bl	8000280 <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4613      	mov	r3, r2
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_GetSysClockFreq+0x200>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	3301      	adds	r3, #1
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3750      	adds	r7, #80	; 0x50
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	00f42400 	.word	0x00f42400
 80045d4:	007a1200 	.word	0x007a1200

080045d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <HAL_RCC_GetHCLKFreq+0x14>)
 80045de:	681b      	ldr	r3, [r3, #0]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20000000 	.word	0x20000000

080045f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045f4:	f7ff fff0 	bl	80045d8 <HAL_RCC_GetHCLKFreq>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	0a9b      	lsrs	r3, r3, #10
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	4903      	ldr	r1, [pc, #12]	; (8004614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004606:	5ccb      	ldrb	r3, [r1, r3]
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800460c:	4618      	mov	r0, r3
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40023800 	.word	0x40023800
 8004614:	08008e14 	.word	0x08008e14

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800463c:	2b00      	cmp	r3, #0
 800463e:	d035      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004640:	4b62      	ldr	r3, [pc, #392]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004646:	f7fc fd05 	bl	8001054 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800464e:	f7fc fd01 	bl	8001054 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0b0      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004660:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	019a      	lsls	r2, r3, #6
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	4955      	ldr	r1, [pc, #340]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004680:	4b52      	ldr	r3, [pc, #328]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004686:	f7fc fce5 	bl	8001054 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fc fce1 	bl	8001054 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e090      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8083 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b44      	ldr	r3, [pc, #272]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a43      	ldr	r2, [pc, #268]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046d6:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3e      	ldr	r2, [pc, #248]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046e2:	f7fc fcb7 	bl	8001054 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fc fcb3 	bl	8001054 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e062      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004708:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004710:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d028      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004736:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800473c:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004742:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d114      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800474e:	f7fc fc81 	bl	8001054 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fc fc7d 	bl	8001054 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e02a      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004784:	d10d      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479a:	490d      	ldr	r1, [pc, #52]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]
 80047a0:	e005      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ac:	6093      	str	r3, [r2, #8]
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ba:	4905      	ldr	r1, [pc, #20]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	42470068 	.word	0x42470068
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42470e40 	.word	0x42470e40

080047dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d13e      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d12f      	bne.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004812:	617b      	str	r3, [r7, #20]
          break;
 8004814:	e02f      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004816:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004822:	d108      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800482c:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e007      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004860:	0f1b      	lsrs	r3, r3, #28
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
          break;
 800486e:	e002      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
          break;
 8004874:	bf00      	nop
        }
      }
      break;
 8004876:	bf00      	nop
    }
  }
  return frequency;
 8004878:	697b      	ldr	r3, [r7, #20]
}
 800487a:	4618      	mov	r0, r3
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	00bb8000 	.word	0x00bb8000
 8004890:	007a1200 	.word	0x007a1200
 8004894:	00f42400 	.word	0x00f42400

08004898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07b      	b.n	80049a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d108      	bne.n	80048c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ba:	d009      	beq.n	80048d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	61da      	str	r2, [r3, #28]
 80048c2:	e005      	b.n	80048d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc fa5e 	bl	8000dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004906:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	ea42 0103 	orr.w	r1, r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	f003 0104 	and.w	r1, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f003 0210 	and.w	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004990:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049aa:	b084      	sub	sp, #16
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	f107 001c 	add.w	r0, r7, #28
 80049b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d122      	bne.n	8004a08 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d105      	bne.n	80049fc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f001 fb1b 	bl	8006038 <USB_CoreReset>
 8004a02:	4603      	mov	r3, r0
 8004a04:	73fb      	strb	r3, [r7, #15]
 8004a06:	e01a      	b.n	8004a3e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fb0f 	bl	8006038 <USB_CoreReset>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
 8004a30:	e005      	b.n	8004a3e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10b      	bne.n	8004a5c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f043 0206 	orr.w	r2, r3, #6
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a68:	b004      	add	sp, #16
 8004a6a:	4770      	bx	lr

08004a6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d165      	bne.n	8004b4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a41      	ldr	r2, [pc, #260]	; (8004b88 <USB_SetTurnaroundTime+0x11c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d906      	bls.n	8004a96 <USB_SetTurnaroundTime+0x2a>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a40      	ldr	r2, [pc, #256]	; (8004b8c <USB_SetTurnaroundTime+0x120>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d202      	bcs.n	8004a96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a90:	230f      	movs	r3, #15
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e062      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a3c      	ldr	r2, [pc, #240]	; (8004b8c <USB_SetTurnaroundTime+0x120>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d306      	bcc.n	8004aac <USB_SetTurnaroundTime+0x40>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a3b      	ldr	r2, [pc, #236]	; (8004b90 <USB_SetTurnaroundTime+0x124>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d202      	bcs.n	8004aac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aa6:	230e      	movs	r3, #14
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e057      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a38      	ldr	r2, [pc, #224]	; (8004b90 <USB_SetTurnaroundTime+0x124>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d306      	bcc.n	8004ac2 <USB_SetTurnaroundTime+0x56>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a37      	ldr	r2, [pc, #220]	; (8004b94 <USB_SetTurnaroundTime+0x128>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d202      	bcs.n	8004ac2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004abc:	230d      	movs	r3, #13
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e04c      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a33      	ldr	r2, [pc, #204]	; (8004b94 <USB_SetTurnaroundTime+0x128>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d306      	bcc.n	8004ad8 <USB_SetTurnaroundTime+0x6c>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <USB_SetTurnaroundTime+0x12c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d802      	bhi.n	8004ad8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ad2:	230c      	movs	r3, #12
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	e041      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a2f      	ldr	r2, [pc, #188]	; (8004b98 <USB_SetTurnaroundTime+0x12c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d906      	bls.n	8004aee <USB_SetTurnaroundTime+0x82>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4a2e      	ldr	r2, [pc, #184]	; (8004b9c <USB_SetTurnaroundTime+0x130>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d802      	bhi.n	8004aee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ae8:	230b      	movs	r3, #11
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e036      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4a2a      	ldr	r2, [pc, #168]	; (8004b9c <USB_SetTurnaroundTime+0x130>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d906      	bls.n	8004b04 <USB_SetTurnaroundTime+0x98>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4a29      	ldr	r2, [pc, #164]	; (8004ba0 <USB_SetTurnaroundTime+0x134>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d802      	bhi.n	8004b04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004afe:	230a      	movs	r3, #10
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	e02b      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <USB_SetTurnaroundTime+0x134>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d906      	bls.n	8004b1a <USB_SetTurnaroundTime+0xae>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <USB_SetTurnaroundTime+0x138>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d202      	bcs.n	8004b1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b14:	2309      	movs	r3, #9
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e020      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <USB_SetTurnaroundTime+0x138>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d306      	bcc.n	8004b30 <USB_SetTurnaroundTime+0xc4>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <USB_SetTurnaroundTime+0x13c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d802      	bhi.n	8004b30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e015      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <USB_SetTurnaroundTime+0x13c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d906      	bls.n	8004b46 <USB_SetTurnaroundTime+0xda>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <USB_SetTurnaroundTime+0x140>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d202      	bcs.n	8004b46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b40:	2307      	movs	r3, #7
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e00a      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b46:	2306      	movs	r3, #6
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e007      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b52:	2309      	movs	r3, #9
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e001      	b.n	8004b5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b58:	2309      	movs	r3, #9
 8004b5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	029b      	lsls	r3, r3, #10
 8004b70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	00d8acbf 	.word	0x00d8acbf
 8004b8c:	00e4e1c0 	.word	0x00e4e1c0
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	01067380 	.word	0x01067380
 8004b98:	011a499f 	.word	0x011a499f
 8004b9c:	01312cff 	.word	0x01312cff
 8004ba0:	014ca43f 	.word	0x014ca43f
 8004ba4:	016e3600 	.word	0x016e3600
 8004ba8:	01a6ab1f 	.word	0x01a6ab1f
 8004bac:	01e84800 	.word	0x01e84800

08004bb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f043 0201 	orr.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0201 	bic.w	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d115      	bne.n	8004c42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c22:	2001      	movs	r0, #1
 8004c24:	f7fc fa22 	bl	800106c <HAL_Delay>
      ms++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f001 f972 	bl	8005f18 <USB_GetMode>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d01e      	beq.n	8004c78 <USB_SetCurrentMode+0x84>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b31      	cmp	r3, #49	; 0x31
 8004c3e:	d9f0      	bls.n	8004c22 <USB_SetCurrentMode+0x2e>
 8004c40:	e01a      	b.n	8004c78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d115      	bne.n	8004c74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c54:	2001      	movs	r0, #1
 8004c56:	f7fc fa09 	bl	800106c <HAL_Delay>
      ms++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 f959 	bl	8005f18 <USB_GetMode>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <USB_SetCurrentMode+0x84>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b31      	cmp	r3, #49	; 0x31
 8004c70:	d9f0      	bls.n	8004c54 <USB_SetCurrentMode+0x60>
 8004c72:	e001      	b.n	8004c78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e005      	b.n	8004c84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b32      	cmp	r3, #50	; 0x32
 8004c7c:	d101      	bne.n	8004c82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b086      	sub	sp, #24
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	e009      	b.n	8004cc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	3340      	adds	r3, #64	; 0x40
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b0e      	cmp	r3, #14
 8004cc4:	d9f2      	bls.n	8004cac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11c      	bne.n	8004d06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cda:	f043 0302 	orr.w	r3, r3, #2
 8004cde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
 8004d04:	e00b      	b.n	8004d1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d24:	461a      	mov	r2, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d30:	4619      	mov	r1, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d38:	461a      	mov	r2, r3
 8004d3a:	680b      	ldr	r3, [r1, #0]
 8004d3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d10c      	bne.n	8004d5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f945 	bl	8004fdc <USB_SetDevSpeed>
 8004d52:	e008      	b.n	8004d66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d54:	2101      	movs	r1, #1
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f940 	bl	8004fdc <USB_SetDevSpeed>
 8004d5c:	e003      	b.n	8004d66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d5e:	2103      	movs	r1, #3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f93b 	bl	8004fdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d66:	2110      	movs	r1, #16
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8f3 	bl	8004f54 <USB_FlushTxFifo>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f90f 	bl	8004f9c <USB_FlushRxFifo>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da6:	461a      	mov	r2, r3
 8004da8:	2300      	movs	r3, #0
 8004daa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	e043      	b.n	8004e3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc8:	d118      	bne.n	8004dfc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	e013      	b.n	8004e0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df2:	461a      	mov	r2, r3
 8004df4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e008      	b.n	8004e0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	3301      	adds	r3, #1
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d3b7      	bcc.n	8004db2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	e043      	b.n	8004ed0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e5e:	d118      	bne.n	8004e92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	461a      	mov	r2, r3
 8004e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e013      	b.n	8004ea4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e008      	b.n	8004ea4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ec8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d3b7      	bcc.n	8004e48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d105      	bne.n	8004f0c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f043 0210 	orr.w	r2, r3, #16
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <USB_DevInit+0x2c4>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f043 0208 	orr.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d107      	bne.n	8004f40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f38:	f043 0304 	orr.w	r3, r3, #4
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f4c:	b004      	add	sp, #16
 8004f4e:	4770      	bx	lr
 8004f50:	803c3800 	.word	0x803c3800

08004f54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	f043 0220 	orr.w	r2, r3, #32
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3301      	adds	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <USB_FlushTxFifo+0x44>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e006      	b.n	8004f8c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d0f1      	beq.n	8004f6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	00030d40 	.word	0x00030d40

08004f9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2210      	movs	r2, #16
 8004fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <USB_FlushRxFifo+0x3c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e006      	b.n	8004fcc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d0f1      	beq.n	8004fae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	00030d40 	.word	0x00030d40

08004fdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800500e:	b480      	push	{r7}
 8005010:	b087      	sub	sp, #28
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0306 	and.w	r3, r3, #6
 8005026:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800502e:	2300      	movs	r3, #0
 8005030:	75fb      	strb	r3, [r7, #23]
 8005032:	e00a      	b.n	800504a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d002      	beq.n	8005040 <USB_GetDevSpeed+0x32>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b06      	cmp	r3, #6
 800503e:	d102      	bne.n	8005046 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005040:	2302      	movs	r3, #2
 8005042:	75fb      	strb	r3, [r7, #23]
 8005044:	e001      	b.n	800504a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005046:	230f      	movs	r3, #15
 8005048:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
}
 800504c:	4618      	mov	r0, r3
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d13a      	bne.n	80050ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	2101      	movs	r1, #1
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	b29b      	uxth	r3, r3
 800508c:	68f9      	ldr	r1, [r7, #12]
 800508e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005092:	4313      	orrs	r3, r2
 8005094:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d155      	bne.n	8005158 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	78db      	ldrb	r3, [r3, #3]
 80050c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	059b      	lsls	r3, r3, #22
 80050ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050d0:	4313      	orrs	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e036      	b.n	8005158 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	2101      	movs	r1, #1
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005108:	4313      	orrs	r3, r2
 800510a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11a      	bne.n	8005158 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	78db      	ldrb	r3, [r3, #3]
 800513c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800513e:	430b      	orrs	r3, r1
 8005140:	4313      	orrs	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005156:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d161      	bne.n	8005248 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800519a:	d11f      	bne.n	80051dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	2101      	movs	r1, #1
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	68f9      	ldr	r1, [r7, #12]
 80051f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051fc:	4013      	ands	r3, r2
 80051fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	2101      	movs	r1, #1
 8005212:	fa01 f303 	lsl.w	r3, r1, r3
 8005216:	b29b      	uxth	r3, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005220:	4013      	ands	r3, r2
 8005222:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	0159      	lsls	r1, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	440b      	add	r3, r1
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	4619      	mov	r1, r3
 8005240:	4b35      	ldr	r3, [pc, #212]	; (8005318 <USB_DeactivateEndpoint+0x1b0>)
 8005242:	4013      	ands	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
 8005246:	e060      	b.n	800530a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525e:	d11f      	bne.n	80052a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800527e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800529e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	2101      	movs	r1, #1
 80052b2:	fa01 f303 	lsl.w	r3, r1, r3
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	43db      	mvns	r3, r3
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c0:	4013      	ands	r3, r2
 80052c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	2101      	movs	r1, #1
 80052d6:	fa01 f303 	lsl.w	r3, r1, r3
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	43db      	mvns	r3, r3
 80052de:	68f9      	ldr	r1, [r7, #12]
 80052e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e4:	4013      	ands	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	0159      	lsls	r1, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	440b      	add	r3, r1
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	4619      	mov	r1, r3
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <USB_DeactivateEndpoint+0x1b4>)
 8005306:	4013      	ands	r3, r2
 8005308:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	ec337800 	.word	0xec337800
 800531c:	eff37800 	.word	0xeff37800

08005320 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	; 0x28
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b01      	cmp	r3, #1
 800533e:	f040 815c 	bne.w	80055fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d132      	bne.n	80053b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800536c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800538c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	0cdb      	lsrs	r3, r3, #19
 80053aa:	04db      	lsls	r3, r3, #19
 80053ac:	6113      	str	r3, [r2, #16]
 80053ae:	e074      	b.n	800549a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ca:	0cdb      	lsrs	r3, r3, #19
 80053cc:	04db      	lsls	r3, r3, #19
 80053ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6959      	ldr	r1, [r3, #20]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	440b      	add	r3, r1
 800540c:	1e59      	subs	r1, r3, #1
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	fbb1 f3f3 	udiv	r3, r1, r3
 8005416:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005418:	4b9d      	ldr	r3, [pc, #628]	; (8005690 <USB_EPStartXfer+0x370>)
 800541a:	400b      	ands	r3, r1
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	0148      	lsls	r0, r1, #5
 8005420:	69f9      	ldr	r1, [r7, #28]
 8005422:	4401      	add	r1, r0
 8005424:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005428:	4313      	orrs	r3, r2
 800542a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005442:	69b9      	ldr	r1, [r7, #24]
 8005444:	0148      	lsls	r0, r1, #5
 8005446:	69f9      	ldr	r1, [r7, #28]
 8005448:	4401      	add	r1, r0
 800544a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800544e:	4313      	orrs	r3, r2
 8005450:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	78db      	ldrb	r3, [r3, #3]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d11f      	bne.n	800549a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005474:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005478:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005498:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d14b      	bne.n	8005538 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	461a      	mov	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	78db      	ldrb	r3, [r3, #3]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d128      	bne.n	8005516 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d110      	bne.n	80054f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	e00f      	b.n	8005516 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005514:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005530:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e12f      	b.n	8005798 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005556:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	78db      	ldrb	r3, [r3, #3]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d015      	beq.n	800558c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8117 	beq.w	8005798 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	2101      	movs	r1, #1
 800557c:	fa01 f303 	lsl.w	r3, r1, r3
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005586:	4313      	orrs	r3, r2
 8005588:	634b      	str	r3, [r1, #52]	; 0x34
 800558a:	e105      	b.n	8005798 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d110      	bne.n	80055be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e00f      	b.n	80055de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	68d9      	ldr	r1, [r3, #12]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	781a      	ldrb	r2, [r3, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	b298      	uxth	r0, r3
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	4603      	mov	r3, r0
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fa2b 	bl	8005a4e <USB_WritePacket>
 80055f8:	e0ce      	b.n	8005798 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005614:	0cdb      	lsrs	r3, r3, #19
 8005616:	04db      	lsls	r3, r3, #19
 8005618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800563c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d126      	bne.n	8005694 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800565c:	69b9      	ldr	r1, [r7, #24]
 800565e:	0148      	lsls	r0, r1, #5
 8005660:	69f9      	ldr	r1, [r7, #28]
 8005662:	4401      	add	r1, r0
 8005664:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005668:	4313      	orrs	r3, r2
 800566a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	0151      	lsls	r1, r2, #5
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	440a      	add	r2, r1
 8005682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800568a:	6113      	str	r3, [r2, #16]
 800568c:	e036      	b.n	80056fc <USB_EPStartXfer+0x3dc>
 800568e:	bf00      	nop
 8005690:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4413      	add	r3, r2
 800569e:	1e5a      	subs	r2, r3, #1
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	8afb      	ldrh	r3, [r7, #22]
 80056ba:	04d9      	lsls	r1, r3, #19
 80056bc:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <USB_EPStartXfer+0x484>)
 80056be:	400b      	ands	r3, r1
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	0148      	lsls	r0, r1, #5
 80056c4:	69f9      	ldr	r1, [r7, #28]
 80056c6:	4401      	add	r1, r0
 80056c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056cc:	4313      	orrs	r3, r2
 80056ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	8af9      	ldrh	r1, [r7, #22]
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ec:	69b9      	ldr	r1, [r7, #24]
 80056ee:	0148      	lsls	r0, r1, #5
 80056f0:	69f9      	ldr	r1, [r7, #28]
 80056f2:	4401      	add	r1, r0
 80056f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056f8:	4313      	orrs	r3, r2
 80056fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d10d      	bne.n	800571e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	68d9      	ldr	r1, [r3, #12]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	460a      	mov	r2, r1
 800571c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	78db      	ldrb	r3, [r3, #3]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d128      	bne.n	8005778 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d110      	bne.n	8005758 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e00f      	b.n	8005778 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005776:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	1ff80000 	.word	0x1ff80000

080057a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	f040 80cd 	bne.w	8005964 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d132      	bne.n	8005838 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005830:	0cdb      	lsrs	r3, r3, #19
 8005832:	04db      	lsls	r3, r3, #19
 8005834:	6113      	str	r3, [r2, #16]
 8005836:	e04e      	b.n	80058d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	440a      	add	r2, r1
 800584e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005852:	0cdb      	lsrs	r3, r3, #19
 8005854:	04db      	lsls	r3, r3, #19
 8005856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800587a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	d903      	bls.n	8005890 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058c6:	6939      	ldr	r1, [r7, #16]
 80058c8:	0148      	lsls	r0, r1, #5
 80058ca:	6979      	ldr	r1, [r7, #20]
 80058cc:	4401      	add	r1, r0
 80058ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058d2:	4313      	orrs	r3, r2
 80058d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d11e      	bne.n	800591a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d009      	beq.n	80058f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	461a      	mov	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005912:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	e092      	b.n	8005a40 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005934:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005938:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d07e      	beq.n	8005a40 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	2101      	movs	r1, #1
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	6979      	ldr	r1, [r7, #20]
 800595a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800595e:	4313      	orrs	r3, r2
 8005960:	634b      	str	r3, [r1, #52]	; 0x34
 8005962:	e06d      	b.n	8005a40 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597e:	0cdb      	lsrs	r3, r3, #19
 8005980:	04db      	lsls	r3, r3, #19
 8005982:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ee:	6939      	ldr	r1, [r7, #16]
 80059f0:	0148      	lsls	r0, r1, #5
 80059f2:	6979      	ldr	r1, [r7, #20]
 80059f4:	4401      	add	r1, r0
 80059f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059fa:	4313      	orrs	r3, r2
 80059fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d10d      	bne.n	8005a20 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d009      	beq.n	8005a20 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	68d9      	ldr	r1, [r3, #12]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	460a      	mov	r2, r1
 8005a1e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b089      	sub	sp, #36	; 0x24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	4611      	mov	r1, r2
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	71fb      	strb	r3, [r7, #7]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d123      	bne.n	8005abc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a74:	88bb      	ldrh	r3, [r7, #4]
 8005a76:	3303      	adds	r3, #3
 8005a78:	089b      	lsrs	r3, r3, #2
 8005a7a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e018      	b.n	8005ab4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	031a      	lsls	r2, r3, #12
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8e:	461a      	mov	r2, r3
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d3e2      	bcc.n	8005a82 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3724      	adds	r7, #36	; 0x24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b08b      	sub	sp, #44	; 0x2c
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005af0:	2300      	movs	r3, #0
 8005af2:	623b      	str	r3, [r7, #32]
 8005af4:	e014      	b.n	8005b20 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	3301      	adds	r3, #1
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	623b      	str	r3, [r7, #32]
 8005b20:	6a3a      	ldr	r2, [r7, #32]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d3e6      	bcc.n	8005af6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b28:	8bfb      	ldrh	r3, [r7, #30]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01e      	beq.n	8005b6c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f107 0310 	add.w	r3, r7, #16
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	701a      	strb	r2, [r3, #0]
      i++;
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	3301      	adds	r3, #1
 8005b58:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b60:	8bfb      	ldrh	r3, [r7, #30]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b66:	8bfb      	ldrh	r3, [r7, #30]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ea      	bne.n	8005b42 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	372c      	adds	r7, #44	; 0x2c
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d12c      	bne.n	8005bf0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	db12      	blt.n	8005bce <USB_EPSetStall+0x54>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00f      	beq.n	8005bce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bcc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e02b      	b.n	8005c48 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	db12      	blt.n	8005c28 <USB_EPSetStall+0xae>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00f      	beq.n	8005c28 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c26:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d128      	bne.n	8005cc4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	78db      	ldrb	r3, [r3, #3]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d003      	beq.n	8005ca2 <USB_EPClearStall+0x4c>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	78db      	ldrb	r3, [r3, #3]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d138      	bne.n	8005d14 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e027      	b.n	8005d14 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ce2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	78db      	ldrb	r3, [r3, #3]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d003      	beq.n	8005cf4 <USB_EPClearStall+0x9e>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	78db      	ldrb	r3, [r3, #3]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d10f      	bne.n	8005d14 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d12:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d44:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d88:	f023 0303 	bic.w	r3, r3, #3
 8005d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9c:	f023 0302 	bic.w	r3, r3, #2
 8005da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dde:	f043 0302 	orr.w	r3, r3, #2
 8005de2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4013      	ands	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	0c1b      	lsrs	r3, r3, #16
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	b29b      	uxth	r3, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eae:	68bb      	ldr	r3, [r7, #8]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eec:	01db      	lsls	r3, r3, #7
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0301 	and.w	r3, r3, #1
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	460b      	mov	r3, r1
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	333c      	adds	r3, #60	; 0x3c
 8005f92:	3304      	adds	r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4a26      	ldr	r2, [pc, #152]	; (8006034 <USB_EP0_OutStart+0xb8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d90a      	bls.n	8005fb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb0:	d101      	bne.n	8005fb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e037      	b.n	8006026 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe4:	f043 0318 	orr.w	r3, r3, #24
 8005fe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ffc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d10f      	bne.n	8006024 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	4f54300a 	.word	0x4f54300a

08006038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	4a13      	ldr	r2, [pc, #76]	; (8006098 <USB_CoreReset+0x60>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e01a      	b.n	800608a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	daf3      	bge.n	8006044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	4a09      	ldr	r2, [pc, #36]	; (8006098 <USB_CoreReset+0x60>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d901      	bls.n	800607c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e006      	b.n	800608a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b01      	cmp	r3, #1
 8006086:	d0f1      	beq.n	800606c <USB_CoreReset+0x34>

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	00030d40 	.word	0x00030d40

0800609c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060ac:	f002 f96a 	bl	8008384 <USBD_static_malloc>
 80060b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80060c0:	2302      	movs	r3, #2
 80060c2:	e066      	b.n	8006192 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7c1b      	ldrb	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d119      	bne.n	8006108 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d8:	2202      	movs	r2, #2
 80060da:	2181      	movs	r1, #129	; 0x81
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f002 f82e 	bl	800813e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ec:	2202      	movs	r2, #2
 80060ee:	2101      	movs	r1, #1
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f002 f824 	bl	800813e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2210      	movs	r2, #16
 8006102:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006106:	e016      	b.n	8006136 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006108:	2340      	movs	r3, #64	; 0x40
 800610a:	2202      	movs	r2, #2
 800610c:	2181      	movs	r1, #129	; 0x81
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f002 f815 	bl	800813e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800611a:	2340      	movs	r3, #64	; 0x40
 800611c:	2202      	movs	r2, #2
 800611e:	2101      	movs	r1, #1
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f002 f80c 	bl	800813e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2210      	movs	r2, #16
 8006132:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006136:	2308      	movs	r3, #8
 8006138:	2203      	movs	r2, #3
 800613a:	2182      	movs	r1, #130	; 0x82
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 fffe 	bl	800813e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	7c1b      	ldrb	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006176:	2101      	movs	r1, #1
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f002 f8cf 	bl	800831c <USBD_LL_PrepareReceive>
 800617e:	e007      	b.n	8006190 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006186:	2340      	movs	r3, #64	; 0x40
 8006188:	2101      	movs	r1, #1
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f002 f8c6 	bl	800831c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80061a6:	2181      	movs	r1, #129	; 0x81
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 ffee 	bl	800818a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061b4:	2101      	movs	r1, #1
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 ffe7 	bl	800818a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061c4:	2182      	movs	r1, #130	; 0x82
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 ffdf 	bl	800818a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00e      	beq.n	8006204 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f6:	4618      	mov	r0, r3
 80061f8:	f002 f8d2 	bl	80083a0 <USBD_static_free>
    pdev->pClassData = NULL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006220:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006234:	2303      	movs	r3, #3
 8006236:	e0af      	b.n	8006398 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006240:	2b00      	cmp	r3, #0
 8006242:	d03f      	beq.n	80062c4 <USBD_CDC_Setup+0xb4>
 8006244:	2b20      	cmp	r3, #32
 8006246:	f040 809f 	bne.w	8006388 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d02e      	beq.n	80062b0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	b25b      	sxtb	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	da16      	bge.n	800628a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006268:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	88d2      	ldrh	r2, [r2, #6]
 800626e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	88db      	ldrh	r3, [r3, #6]
 8006274:	2b07      	cmp	r3, #7
 8006276:	bf28      	it	cs
 8006278:	2307      	movcs	r3, #7
 800627a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	89fa      	ldrh	r2, [r7, #14]
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 fb19 	bl	80078ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006288:	e085      	b.n	8006396 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	785a      	ldrb	r2, [r3, #1]
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	88db      	ldrh	r3, [r3, #6]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80062a0:	6939      	ldr	r1, [r7, #16]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	88db      	ldrh	r3, [r3, #6]
 80062a6:	461a      	mov	r2, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 fb32 	bl	8007912 <USBD_CtlPrepareRx>
      break;
 80062ae:	e072      	b.n	8006396 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	7850      	ldrb	r0, [r2, #1]
 80062bc:	2200      	movs	r2, #0
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	4798      	blx	r3
      break;
 80062c2:	e068      	b.n	8006396 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b0b      	cmp	r3, #11
 80062ca:	d852      	bhi.n	8006372 <USBD_CDC_Setup+0x162>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <USBD_CDC_Setup+0xc4>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	08006305 	.word	0x08006305
 80062d8:	08006381 	.word	0x08006381
 80062dc:	08006373 	.word	0x08006373
 80062e0:	08006373 	.word	0x08006373
 80062e4:	08006373 	.word	0x08006373
 80062e8:	08006373 	.word	0x08006373
 80062ec:	08006373 	.word	0x08006373
 80062f0:	08006373 	.word	0x08006373
 80062f4:	08006373 	.word	0x08006373
 80062f8:	08006373 	.word	0x08006373
 80062fc:	0800632f 	.word	0x0800632f
 8006300:	08006359 	.word	0x08006359
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b03      	cmp	r3, #3
 800630e:	d107      	bne.n	8006320 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006310:	f107 030a 	add.w	r3, r7, #10
 8006314:	2202      	movs	r2, #2
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 face 	bl	80078ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800631e:	e032      	b.n	8006386 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fa58 	bl	80077d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006328:	2303      	movs	r3, #3
 800632a:	75fb      	strb	r3, [r7, #23]
          break;
 800632c:	e02b      	b.n	8006386 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b03      	cmp	r3, #3
 8006338:	d107      	bne.n	800634a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800633a:	f107 030d 	add.w	r3, r7, #13
 800633e:	2201      	movs	r2, #1
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 fab9 	bl	80078ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006348:	e01d      	b.n	8006386 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 fa43 	bl	80077d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006352:	2303      	movs	r3, #3
 8006354:	75fb      	strb	r3, [r7, #23]
          break;
 8006356:	e016      	b.n	8006386 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b03      	cmp	r3, #3
 8006362:	d00f      	beq.n	8006384 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fa36 	bl	80077d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006370:	e008      	b.n	8006384 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fa2f 	bl	80077d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800637a:	2303      	movs	r3, #3
 800637c:	75fb      	strb	r3, [r7, #23]
          break;
 800637e:	e002      	b.n	8006386 <USBD_CDC_Setup+0x176>
          break;
 8006380:	bf00      	nop
 8006382:	e008      	b.n	8006396 <USBD_CDC_Setup+0x186>
          break;
 8006384:	bf00      	nop
      }
      break;
 8006386:	e006      	b.n	8006396 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fa24 	bl	80077d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	75fb      	strb	r3, [r7, #23]
      break;
 8006394:	bf00      	nop
  }

  return (uint8_t)ret;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063be:	2303      	movs	r3, #3
 80063c0:	e04f      	b.n	8006462 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	3318      	adds	r3, #24
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d029      	beq.n	8006434 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	3318      	adds	r3, #24
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	78f9      	ldrb	r1, [r7, #3]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	460b      	mov	r3, r1
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	1a5b      	subs	r3, r3, r1
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4403      	add	r3, r0
 8006400:	3344      	adds	r3, #68	; 0x44
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	fbb2 f1f3 	udiv	r1, r2, r3
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800640e:	2b00      	cmp	r3, #0
 8006410:	d110      	bne.n	8006434 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006412:	78fa      	ldrb	r2, [r7, #3]
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	3318      	adds	r3, #24
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006426:	78f9      	ldrb	r1, [r7, #3]
 8006428:	2300      	movs	r3, #0
 800642a:	2200      	movs	r2, #0
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 ff54 	bl	80082da <USBD_LL_Transmit>
 8006432:	e015      	b.n	8006460 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800647c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006488:	2303      	movs	r3, #3
 800648a:	e015      	b.n	80064b8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 ff64 	bl	800835e <USBD_LL_GetRxDataSize>
 8006496:	4602      	mov	r2, r0
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064b2:	4611      	mov	r1, r2
 80064b4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e01b      	b.n	8006512 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d015      	beq.n	8006510 <USBD_CDC_EP0_RxReady+0x50>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064ea:	2bff      	cmp	r3, #255	; 0xff
 80064ec:	d010      	beq.n	8006510 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006504:	b292      	uxth	r2, r2
 8006506:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	22ff      	movs	r2, #255	; 0xff
 800650c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2243      	movs	r2, #67	; 0x43
 8006528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800652a:	4b03      	ldr	r3, [pc, #12]	; (8006538 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	20000094 	.word	0x20000094

0800653c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2243      	movs	r2, #67	; 0x43
 8006548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800654a:	4b03      	ldr	r3, [pc, #12]	; (8006558 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20000050 	.word	0x20000050

0800655c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2243      	movs	r2, #67	; 0x43
 8006568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800656a:	4b03      	ldr	r3, [pc, #12]	; (8006578 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	200000d8 	.word	0x200000d8

0800657c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	220a      	movs	r2, #10
 8006588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800658a:	4b03      	ldr	r3, [pc, #12]	; (8006598 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	2000000c 	.word	0x2000000c

0800659c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e004      	b.n	80065ba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b087      	sub	sp, #28
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e008      	b.n	80065f6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006612:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800661a:	2303      	movs	r3, #3
 800661c:	e004      	b.n	8006628 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006642:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006644:	2301      	movs	r3, #1
 8006646:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006652:	2303      	movs	r3, #3
 8006654:	e01a      	b.n	800668c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800665c:	2b00      	cmp	r3, #0
 800665e:	d114      	bne.n	800668a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2201      	movs	r2, #1
 8006664:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800667e:	2181      	movs	r1, #129	; 0x81
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fe2a 	bl	80082da <USBD_LL_Transmit>

    ret = USBD_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e016      	b.n	80066e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7c1b      	ldrb	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066c4:	2101      	movs	r1, #1
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 fe28 	bl	800831c <USBD_LL_PrepareReceive>
 80066cc:	e007      	b.n	80066de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	2101      	movs	r1, #1
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fe1f 	bl	800831c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e01f      	b.n	8006740 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	79fa      	ldrb	r2, [r7, #7]
 8006732:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f001 fc9b 	bl	8008070 <USBD_LL_Init>
 800673a:	4603      	mov	r3, r0
 800673c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800673e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	e016      	b.n	800678e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	f107 020e 	add.w	r2, r7, #14
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	4602      	mov	r2, r0
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fcb2 	bl	8008108 <USBD_LL_Start>
 80067a4:	4603      	mov	r3, r0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067d0:	2303      	movs	r3, #3
 80067d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	78fa      	ldrb	r2, [r7, #3]
 80067e8:	4611      	mov	r1, r2
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	4611      	mov	r1, r2
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
  }

  return USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f000 ff90 	bl	8007764 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	2b02      	cmp	r3, #2
 8006866:	d01a      	beq.n	800689e <USBD_LL_SetupStage+0x72>
 8006868:	2b02      	cmp	r3, #2
 800686a:	d822      	bhi.n	80068b2 <USBD_LL_SetupStage+0x86>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <USBD_LL_SetupStage+0x4a>
 8006870:	2b01      	cmp	r3, #1
 8006872:	d00a      	beq.n	800688a <USBD_LL_SetupStage+0x5e>
 8006874:	e01d      	b.n	80068b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa62 	bl	8006d48 <USBD_StdDevReq>
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]
      break;
 8006888:	e020      	b.n	80068cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fac6 	bl	8006e24 <USBD_StdItfReq>
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e016      	b.n	80068cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fb05 	bl	8006eb6 <USBD_StdEPReq>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
      break;
 80068b0:	e00c      	b.n	80068cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fc81 	bl	80081c8 <USBD_LL_StallEP>
 80068c6:	4603      	mov	r3, r0
 80068c8:	73fb      	strb	r3, [r7, #15]
      break;
 80068ca:	bf00      	nop
  }

  return ret;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	460b      	mov	r3, r1
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d138      	bne.n	800695c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d14a      	bne.n	8006992 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	429a      	cmp	r2, r3
 8006906:	d913      	bls.n	8006930 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	4293      	cmp	r3, r2
 8006920:	bf28      	it	cs
 8006922:	4613      	movcs	r3, r2
 8006924:	461a      	mov	r2, r3
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f001 f80f 	bl	800794c <USBD_CtlContinueRx>
 800692e:	e030      	b.n	8006992 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b03      	cmp	r3, #3
 800693a:	d10b      	bne.n	8006954 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f001 f80a 	bl	800796e <USBD_CtlSendStatus>
 800695a:	e01a      	b.n	8006992 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b03      	cmp	r3, #3
 8006966:	d114      	bne.n	8006992 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00e      	beq.n	8006992 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	7afa      	ldrb	r2, [r7, #11]
 800697e:	4611      	mov	r1, r2
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	4798      	blx	r3
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	e000      	b.n	8006994 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	460b      	mov	r3, r1
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d16b      	bne.n	8006a88 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3314      	adds	r3, #20
 80069b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d156      	bne.n	8006a6e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d914      	bls.n	80069f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	461a      	mov	r2, r3
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 ff84 	bl	80078f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069e8:	2300      	movs	r3, #0
 80069ea:	2200      	movs	r2, #0
 80069ec:	2100      	movs	r1, #0
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f001 fc94 	bl	800831c <USBD_LL_PrepareReceive>
 80069f4:	e03b      	b.n	8006a6e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d11c      	bne.n	8006a3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d316      	bcc.n	8006a3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d20f      	bcs.n	8006a3c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 ff65 	bl	80078f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	2200      	movs	r2, #0
 8006a32:	2100      	movs	r1, #0
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f001 fc71 	bl	800831c <USBD_LL_PrepareReceive>
 8006a3a:	e018      	b.n	8006a6e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d10b      	bne.n	8006a60 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a60:	2180      	movs	r1, #128	; 0x80
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f001 fbb0 	bl	80081c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 ff93 	bl	8007994 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d122      	bne.n	8006abe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff fe98 	bl	80067ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a86:	e01a      	b.n	8006abe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d114      	bne.n	8006abe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00e      	beq.n	8006abe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	7afa      	ldrb	r2, [r7, #11]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	4798      	blx	r3
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	e000      	b.n	8006ac0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e02f      	b.n	8006b5c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00f      	beq.n	8006b26 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6852      	ldr	r2, [r2, #4]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	4611      	mov	r1, r2
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b26:	2340      	movs	r3, #64	; 0x40
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fb06 	bl	800813e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2240      	movs	r2, #64	; 0x40
 8006b3e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b42:	2340      	movs	r3, #64	; 0x40
 8006b44:	2200      	movs	r2, #0
 8006b46:	2180      	movs	r1, #128	; 0x80
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 faf8 	bl	800813e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2240      	movs	r2, #64	; 0x40
 8006b58:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	d106      	bne.n	8006bd2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e012      	b.n	8006c1c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d10b      	bne.n	8006c1a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e014      	b.n	8006c68 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d10d      	bne.n	8006c66 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	4611      	mov	r1, r2
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e014      	b.n	8006cb4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d10d      	bne.n	8006cb2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	4611      	mov	r1, r2
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6852      	ldr	r2, [r2, #4]
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
  }

  return USBD_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b087      	sub	sp, #28
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d28:	8a3b      	ldrh	r3, [r7, #16]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	b21a      	sxth	r2, r3
 8006d2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	b21b      	sxth	r3, r3
 8006d36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d38:	89fb      	ldrh	r3, [r7, #14]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d5e:	2b40      	cmp	r3, #64	; 0x40
 8006d60:	d005      	beq.n	8006d6e <USBD_StdDevReq+0x26>
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d853      	bhi.n	8006e0e <USBD_StdDevReq+0xc6>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <USBD_StdDevReq+0x3a>
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d14f      	bne.n	8006e0e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d80:	e04a      	b.n	8006e18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	2b09      	cmp	r3, #9
 8006d88:	d83b      	bhi.n	8006e02 <USBD_StdDevReq+0xba>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <USBD_StdDevReq+0x48>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006de5 	.word	0x08006de5
 8006d94:	08006df9 	.word	0x08006df9
 8006d98:	08006e03 	.word	0x08006e03
 8006d9c:	08006def 	.word	0x08006def
 8006da0:	08006e03 	.word	0x08006e03
 8006da4:	08006dc3 	.word	0x08006dc3
 8006da8:	08006db9 	.word	0x08006db9
 8006dac:	08006e03 	.word	0x08006e03
 8006db0:	08006ddb 	.word	0x08006ddb
 8006db4:	08006dcd 	.word	0x08006dcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f9de 	bl	800717c <USBD_GetDescriptor>
          break;
 8006dc0:	e024      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fb43 	bl	8007450 <USBD_SetAddress>
          break;
 8006dca:	e01f      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fb82 	bl	80074d8 <USBD_SetConfig>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
          break;
 8006dd8:	e018      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc21 	bl	8007624 <USBD_GetConfig>
          break;
 8006de2:	e013      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fc52 	bl	8007690 <USBD_GetStatus>
          break;
 8006dec:	e00e      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fc81 	bl	80076f8 <USBD_SetFeature>
          break;
 8006df6:	e009      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fc90 	bl	8007720 <USBD_ClrFeature>
          break;
 8006e00:	e004      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fce7 	bl	80077d8 <USBD_CtlError>
          break;
 8006e0a:	bf00      	nop
      }
      break;
 8006e0c:	e004      	b.n	8006e18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fce1 	bl	80077d8 <USBD_CtlError>
      break;
 8006e16:	bf00      	nop
  }

  return ret;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop

08006e24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d005      	beq.n	8006e4a <USBD_StdItfReq+0x26>
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d82f      	bhi.n	8006ea2 <USBD_StdItfReq+0x7e>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <USBD_StdItfReq+0x26>
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d12b      	bne.n	8006ea2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d81d      	bhi.n	8006e94 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	889b      	ldrh	r3, [r3, #4]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d813      	bhi.n	8006e8a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	88db      	ldrh	r3, [r3, #6]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d110      	bne.n	8006e9e <USBD_StdItfReq+0x7a>
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10d      	bne.n	8006e9e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fd73 	bl	800796e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e88:	e009      	b.n	8006e9e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fca3 	bl	80077d8 <USBD_CtlError>
          break;
 8006e92:	e004      	b.n	8006e9e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc9e 	bl	80077d8 <USBD_CtlError>
          break;
 8006e9c:	e000      	b.n	8006ea0 <USBD_StdItfReq+0x7c>
          break;
 8006e9e:	bf00      	nop
      }
      break;
 8006ea0:	e004      	b.n	8006eac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fc97 	bl	80077d8 <USBD_CtlError>
      break;
 8006eaa:	bf00      	nop
  }

  return ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	889b      	ldrh	r3, [r3, #4]
 8006ec8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ed2:	2b40      	cmp	r3, #64	; 0x40
 8006ed4:	d007      	beq.n	8006ee6 <USBD_StdEPReq+0x30>
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	f200 8145 	bhi.w	8007166 <USBD_StdEPReq+0x2b0>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00c      	beq.n	8006efa <USBD_StdEPReq+0x44>
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	f040 8140 	bne.w	8007166 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	4798      	blx	r3
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef8:	e13a      	b.n	8007170 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d007      	beq.n	8006f12 <USBD_StdEPReq+0x5c>
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	f300 8129 	bgt.w	800715a <USBD_StdEPReq+0x2a4>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d07f      	beq.n	800700c <USBD_StdEPReq+0x156>
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d03c      	beq.n	8006f8a <USBD_StdEPReq+0xd4>
 8006f10:	e123      	b.n	800715a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d002      	beq.n	8006f24 <USBD_StdEPReq+0x6e>
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d016      	beq.n	8006f50 <USBD_StdEPReq+0x9a>
 8006f22:	e02c      	b.n	8006f7e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <USBD_StdEPReq+0x90>
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b80      	cmp	r3, #128	; 0x80
 8006f2e:	d00a      	beq.n	8006f46 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 f947 	bl	80081c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f3a:	2180      	movs	r1, #128	; 0x80
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 f943 	bl	80081c8 <USBD_LL_StallEP>
 8006f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f44:	e020      	b.n	8006f88 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fc45 	bl	80077d8 <USBD_CtlError>
              break;
 8006f4e:	e01b      	b.n	8006f88 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	885b      	ldrh	r3, [r3, #2]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10e      	bne.n	8006f76 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <USBD_StdEPReq+0xc0>
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b80      	cmp	r3, #128	; 0x80
 8006f62:	d008      	beq.n	8006f76 <USBD_StdEPReq+0xc0>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	88db      	ldrh	r3, [r3, #6]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f929 	bl	80081c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fcf9 	bl	800796e <USBD_CtlSendStatus>

              break;
 8006f7c:	e004      	b.n	8006f88 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fc29 	bl	80077d8 <USBD_CtlError>
              break;
 8006f86:	bf00      	nop
          }
          break;
 8006f88:	e0ec      	b.n	8007164 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d002      	beq.n	8006f9c <USBD_StdEPReq+0xe6>
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d016      	beq.n	8006fc8 <USBD_StdEPReq+0x112>
 8006f9a:	e030      	b.n	8006ffe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <USBD_StdEPReq+0x108>
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b80      	cmp	r3, #128	; 0x80
 8006fa6:	d00a      	beq.n	8006fbe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f90b 	bl	80081c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fb2:	2180      	movs	r1, #128	; 0x80
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f907 	bl	80081c8 <USBD_LL_StallEP>
 8006fba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fbc:	e025      	b.n	800700a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fc09 	bl	80077d8 <USBD_CtlError>
              break;
 8006fc6:	e020      	b.n	800700a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	885b      	ldrh	r3, [r3, #2]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d11b      	bne.n	8007008 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f911 	bl	8008206 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fcc2 	bl	800796e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006ffc:	e004      	b.n	8007008 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fbe9 	bl	80077d8 <USBD_CtlError>
              break;
 8007006:	e000      	b.n	800700a <USBD_StdEPReq+0x154>
              break;
 8007008:	bf00      	nop
          }
          break;
 800700a:	e0ab      	b.n	8007164 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d002      	beq.n	800701e <USBD_StdEPReq+0x168>
 8007018:	2b03      	cmp	r3, #3
 800701a:	d032      	beq.n	8007082 <USBD_StdEPReq+0x1cc>
 800701c:	e097      	b.n	800714e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <USBD_StdEPReq+0x17e>
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b80      	cmp	r3, #128	; 0x80
 8007028:	d004      	beq.n	8007034 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fbd3 	bl	80077d8 <USBD_CtlError>
                break;
 8007032:	e091      	b.n	8007158 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	da0b      	bge.n	8007054 <USBD_StdEPReq+0x19e>
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	3310      	adds	r3, #16
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4413      	add	r3, r2
 8007050:	3304      	adds	r3, #4
 8007052:	e00b      	b.n	800706c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4413      	add	r3, r2
 800706a:	3304      	adds	r3, #4
 800706c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2202      	movs	r2, #2
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fc1d 	bl	80078ba <USBD_CtlSendData>
              break;
 8007080:	e06a      	b.n	8007158 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007086:	2b00      	cmp	r3, #0
 8007088:	da11      	bge.n	80070ae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	f003 020f 	and.w	r2, r3, #15
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	440b      	add	r3, r1
 800709c:	3324      	adds	r3, #36	; 0x24
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d117      	bne.n	80070d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb96 	bl	80077d8 <USBD_CtlError>
                  break;
 80070ac:	e054      	b.n	8007158 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fb83 	bl	80077d8 <USBD_CtlError>
                  break;
 80070d2:	e041      	b.n	8007158 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	da0b      	bge.n	80070f4 <USBD_StdEPReq+0x23e>
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	3310      	adds	r3, #16
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	4413      	add	r3, r2
 80070f0:	3304      	adds	r3, #4
 80070f2:	e00b      	b.n	800710c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	4413      	add	r3, r2
 800710a:	3304      	adds	r3, #4
 800710c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <USBD_StdEPReq+0x264>
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	2b80      	cmp	r3, #128	; 0x80
 8007118:	d103      	bne.n	8007122 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e00e      	b.n	8007140 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 f88c 	bl	8008244 <USBD_LL_IsStallEP>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	e002      	b.n	8007140 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2202      	movs	r2, #2
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fbb7 	bl	80078ba <USBD_CtlSendData>
              break;
 800714c:	e004      	b.n	8007158 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fb41 	bl	80077d8 <USBD_CtlError>
              break;
 8007156:	bf00      	nop
          }
          break;
 8007158:	e004      	b.n	8007164 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fb3b 	bl	80077d8 <USBD_CtlError>
          break;
 8007162:	bf00      	nop
      }
      break;
 8007164:	e004      	b.n	8007170 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fb35 	bl	80077d8 <USBD_CtlError>
      break;
 800716e:	bf00      	nop
  }

  return ret;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	0a1b      	lsrs	r3, r3, #8
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	2b06      	cmp	r3, #6
 800719e:	f200 8128 	bhi.w	80073f2 <USBD_GetDescriptor+0x276>
 80071a2:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <USBD_GetDescriptor+0x2c>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071c5 	.word	0x080071c5
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	080073f3 	.word	0x080073f3
 80071b8:	080073f3 	.word	0x080073f3
 80071bc:	08007393 	.word	0x08007393
 80071c0:	080073bf 	.word	0x080073bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
      break;
 80071da:	e112      	b.n	8007402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7c1b      	ldrb	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f107 0208 	add.w	r2, r7, #8
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	2202      	movs	r2, #2
 80071fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071fe:	e100      	b.n	8007402 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	f107 0208 	add.w	r2, r7, #8
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	2202      	movs	r2, #2
 8007218:	701a      	strb	r2, [r3, #0]
      break;
 800721a:	e0f2      	b.n	8007402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	885b      	ldrh	r3, [r3, #2]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b05      	cmp	r3, #5
 8007224:	f200 80ac 	bhi.w	8007380 <USBD_GetDescriptor+0x204>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <USBD_GetDescriptor+0xb4>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007249 	.word	0x08007249
 8007234:	0800727d 	.word	0x0800727d
 8007238:	080072b1 	.word	0x080072b1
 800723c:	080072e5 	.word	0x080072e5
 8007240:	08007319 	.word	0x08007319
 8007244:	0800734d 	.word	0x0800734d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7c12      	ldrb	r2, [r2, #16]
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800726a:	e091      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fab2 	bl	80077d8 <USBD_CtlError>
            err++;
 8007274:	7afb      	ldrb	r3, [r7, #11]
 8007276:	3301      	adds	r3, #1
 8007278:	72fb      	strb	r3, [r7, #11]
          break;
 800727a:	e089      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	7c12      	ldrb	r2, [r2, #16]
 8007294:	f107 0108 	add.w	r1, r7, #8
 8007298:	4610      	mov	r0, r2
 800729a:	4798      	blx	r3
 800729c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800729e:	e077      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa98 	bl	80077d8 <USBD_CtlError>
            err++;
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	3301      	adds	r3, #1
 80072ac:	72fb      	strb	r3, [r7, #11]
          break;
 80072ae:	e06f      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	7c12      	ldrb	r2, [r2, #16]
 80072c8:	f107 0108 	add.w	r1, r7, #8
 80072cc:	4610      	mov	r0, r2
 80072ce:	4798      	blx	r3
 80072d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072d2:	e05d      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa7e 	bl	80077d8 <USBD_CtlError>
            err++;
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	3301      	adds	r3, #1
 80072e0:	72fb      	strb	r3, [r7, #11]
          break;
 80072e2:	e055      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7c12      	ldrb	r2, [r2, #16]
 80072fc:	f107 0108 	add.w	r1, r7, #8
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
 8007304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007306:	e043      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa64 	bl	80077d8 <USBD_CtlError>
            err++;
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	3301      	adds	r3, #1
 8007314:	72fb      	strb	r3, [r7, #11]
          break;
 8007316:	e03b      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00b      	beq.n	800733c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7c12      	ldrb	r2, [r2, #16]
 8007330:	f107 0108 	add.w	r1, r7, #8
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800733a:	e029      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa4a 	bl	80077d8 <USBD_CtlError>
            err++;
 8007344:	7afb      	ldrb	r3, [r7, #11]
 8007346:	3301      	adds	r3, #1
 8007348:	72fb      	strb	r3, [r7, #11]
          break;
 800734a:	e021      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	7c12      	ldrb	r2, [r2, #16]
 8007364:	f107 0108 	add.w	r1, r7, #8
 8007368:	4610      	mov	r0, r2
 800736a:	4798      	blx	r3
 800736c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800736e:	e00f      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa30 	bl	80077d8 <USBD_CtlError>
            err++;
 8007378:	7afb      	ldrb	r3, [r7, #11]
 800737a:	3301      	adds	r3, #1
 800737c:	72fb      	strb	r3, [r7, #11]
          break;
 800737e:	e007      	b.n	8007390 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa28 	bl	80077d8 <USBD_CtlError>
          err++;
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	3301      	adds	r3, #1
 800738c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800738e:	bf00      	nop
      }
      break;
 8007390:	e037      	b.n	8007402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7c1b      	ldrb	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a2:	f107 0208 	add.w	r2, r7, #8
 80073a6:	4610      	mov	r0, r2
 80073a8:	4798      	blx	r3
 80073aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073ac:	e029      	b.n	8007402 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fa11 	bl	80077d8 <USBD_CtlError>
        err++;
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	3301      	adds	r3, #1
 80073ba:	72fb      	strb	r3, [r7, #11]
      break;
 80073bc:	e021      	b.n	8007402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	7c1b      	ldrb	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10d      	bne.n	80073e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	f107 0208 	add.w	r2, r7, #8
 80073d2:	4610      	mov	r0, r2
 80073d4:	4798      	blx	r3
 80073d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	2207      	movs	r2, #7
 80073de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073e0:	e00f      	b.n	8007402 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f9f7 	bl	80077d8 <USBD_CtlError>
        err++;
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	3301      	adds	r3, #1
 80073ee:	72fb      	strb	r3, [r7, #11]
      break;
 80073f0:	e007      	b.n	8007402 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f9ef 	bl	80077d8 <USBD_CtlError>
      err++;
 80073fa:	7afb      	ldrb	r3, [r7, #11]
 80073fc:	3301      	adds	r3, #1
 80073fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007400:	bf00      	nop
  }

  if (err != 0U)
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11e      	bne.n	8007446 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	88db      	ldrh	r3, [r3, #6]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d016      	beq.n	800743e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007410:	893b      	ldrh	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00e      	beq.n	8007434 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	88da      	ldrh	r2, [r3, #6]
 800741a:	893b      	ldrh	r3, [r7, #8]
 800741c:	4293      	cmp	r3, r2
 800741e:	bf28      	it	cs
 8007420:	4613      	movcs	r3, r2
 8007422:	b29b      	uxth	r3, r3
 8007424:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007426:	893b      	ldrh	r3, [r7, #8]
 8007428:	461a      	mov	r2, r3
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa44 	bl	80078ba <USBD_CtlSendData>
 8007432:	e009      	b.n	8007448 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9ce 	bl	80077d8 <USBD_CtlError>
 800743c:	e004      	b.n	8007448 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa95 	bl	800796e <USBD_CtlSendStatus>
 8007444:	e000      	b.n	8007448 <USBD_GetDescriptor+0x2cc>
    return;
 8007446:	bf00      	nop
  }
}
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop

08007450 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	889b      	ldrh	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d131      	bne.n	80074c6 <USBD_SetAddress+0x76>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88db      	ldrh	r3, [r3, #6]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d12d      	bne.n	80074c6 <USBD_SetAddress+0x76>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	2b7f      	cmp	r3, #127	; 0x7f
 8007470:	d829      	bhi.n	80074c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	885b      	ldrh	r3, [r3, #2]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d104      	bne.n	8007494 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9a3 	bl	80077d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	e01d      	b.n	80074d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7bfa      	ldrb	r2, [r7, #15]
 8007498:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fefb 	bl	800829c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa61 	bl	800796e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ba:	e009      	b.n	80074d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c4:	e004      	b.n	80074d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f985 	bl	80077d8 <USBD_CtlError>
  }
}
 80074ce:	bf00      	nop
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	885b      	ldrh	r3, [r3, #2]
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	4b4c      	ldr	r3, [pc, #304]	; (8007620 <USBD_SetConfig+0x148>)
 80074ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074f0:	4b4b      	ldr	r3, [pc, #300]	; (8007620 <USBD_SetConfig+0x148>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d905      	bls.n	8007504 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f96c 	bl	80077d8 <USBD_CtlError>
    return USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	e088      	b.n	8007616 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d002      	beq.n	8007516 <USBD_SetConfig+0x3e>
 8007510:	2b03      	cmp	r3, #3
 8007512:	d025      	beq.n	8007560 <USBD_SetConfig+0x88>
 8007514:	e071      	b.n	80075fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007516:	4b42      	ldr	r3, [pc, #264]	; (8007620 <USBD_SetConfig+0x148>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01c      	beq.n	8007558 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800751e:	4b40      	ldr	r3, [pc, #256]	; (8007620 <USBD_SetConfig+0x148>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007528:	4b3d      	ldr	r3, [pc, #244]	; (8007620 <USBD_SetConfig+0x148>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff f948 	bl	80067c4 <USBD_SetClassConfig>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f949 	bl	80077d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007546:	e065      	b.n	8007614 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa10 	bl	800796e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2203      	movs	r2, #3
 8007552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007556:	e05d      	b.n	8007614 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fa08 	bl	800796e <USBD_CtlSendStatus>
      break;
 800755e:	e059      	b.n	8007614 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007560:	4b2f      	ldr	r3, [pc, #188]	; (8007620 <USBD_SetConfig+0x148>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d112      	bne.n	800758e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007570:	4b2b      	ldr	r3, [pc, #172]	; (8007620 <USBD_SetConfig+0x148>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800757a:	4b29      	ldr	r3, [pc, #164]	; (8007620 <USBD_SetConfig+0x148>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff f93b 	bl	80067fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f9f1 	bl	800796e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800758c:	e042      	b.n	8007614 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800758e:	4b24      	ldr	r3, [pc, #144]	; (8007620 <USBD_SetConfig+0x148>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	429a      	cmp	r2, r3
 800759a:	d02a      	beq.n	80075f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff f929 	bl	80067fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075aa:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <USBD_SetConfig+0x148>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075b4:	4b1a      	ldr	r3, [pc, #104]	; (8007620 <USBD_SetConfig+0x148>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff f902 	bl	80067c4 <USBD_SetClassConfig>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00f      	beq.n	80075ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f903 	bl	80077d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff f90e 	bl	80067fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075e8:	e014      	b.n	8007614 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9bf 	bl	800796e <USBD_CtlSendStatus>
      break;
 80075f0:	e010      	b.n	8007614 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9bb 	bl	800796e <USBD_CtlSendStatus>
      break;
 80075f8:	e00c      	b.n	8007614 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8eb 	bl	80077d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007602:	4b07      	ldr	r3, [pc, #28]	; (8007620 <USBD_SetConfig+0x148>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff f8f7 	bl	80067fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800760e:	2303      	movs	r3, #3
 8007610:	73fb      	strb	r3, [r7, #15]
      break;
 8007612:	bf00      	nop
  }

  return ret;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	2000043c 	.word	0x2000043c

08007624 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	88db      	ldrh	r3, [r3, #6]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d004      	beq.n	8007640 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f8cd 	bl	80077d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800763e:	e023      	b.n	8007688 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	dc02      	bgt.n	8007652 <USBD_GetConfig+0x2e>
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc03      	bgt.n	8007658 <USBD_GetConfig+0x34>
 8007650:	e015      	b.n	800767e <USBD_GetConfig+0x5a>
 8007652:	2b03      	cmp	r3, #3
 8007654:	d00b      	beq.n	800766e <USBD_GetConfig+0x4a>
 8007656:	e012      	b.n	800767e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3308      	adds	r3, #8
 8007662:	2201      	movs	r2, #1
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f927 	bl	80078ba <USBD_CtlSendData>
        break;
 800766c:	e00c      	b.n	8007688 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3304      	adds	r3, #4
 8007672:	2201      	movs	r2, #1
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f91f 	bl	80078ba <USBD_CtlSendData>
        break;
 800767c:	e004      	b.n	8007688 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f8a9 	bl	80077d8 <USBD_CtlError>
        break;
 8007686:	bf00      	nop
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d81e      	bhi.n	80076e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	88db      	ldrh	r3, [r3, #6]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d004      	beq.n	80076ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f890 	bl	80077d8 <USBD_CtlError>
        break;
 80076b8:	e01a      	b.n	80076f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f043 0202 	orr.w	r2, r3, #2
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	330c      	adds	r3, #12
 80076da:	2202      	movs	r2, #2
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8eb 	bl	80078ba <USBD_CtlSendData>
      break;
 80076e4:	e004      	b.n	80076f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f875 	bl	80077d8 <USBD_CtlError>
      break;
 80076ee:	bf00      	nop
  }
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d106      	bne.n	8007718 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f92b 	bl	800796e <USBD_CtlSendStatus>
  }
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007730:	b2db      	uxtb	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	2b02      	cmp	r3, #2
 8007736:	d80b      	bhi.n	8007750 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d10c      	bne.n	800775a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f910 	bl	800796e <USBD_CtlSendStatus>
      }
      break;
 800774e:	e004      	b.n	800775a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f840 	bl	80077d8 <USBD_CtlError>
      break;
 8007758:	e000      	b.n	800775c <USBD_ClrFeature+0x3c>
      break;
 800775a:	bf00      	nop
  }
}
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	781a      	ldrb	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff fabb 	bl	8006d0a <SWAPBYTE>
 8007794:	4603      	mov	r3, r0
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff faae 	bl	8006d0a <SWAPBYTE>
 80077ae:	4603      	mov	r3, r0
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff faa1 	bl	8006d0a <SWAPBYTE>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	80da      	strh	r2, [r3, #6]
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077e2:	2180      	movs	r1, #128	; 0x80
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fcef 	bl	80081c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077ea:	2100      	movs	r1, #0
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fceb 	bl	80081c8 <USBD_LL_StallEP>
}
 80077f2:	bf00      	nop
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d036      	beq.n	800787e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007814:	6938      	ldr	r0, [r7, #16]
 8007816:	f000 f836 	bl	8007886 <USBD_GetLen>
 800781a:	4603      	mov	r3, r0
 800781c:	3301      	adds	r3, #1
 800781e:	b29b      	uxth	r3, r3
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	7812      	ldrb	r2, [r2, #0]
 8007832:	701a      	strb	r2, [r3, #0]
  idx++;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	3301      	adds	r3, #1
 8007838:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	4413      	add	r3, r2
 8007840:	2203      	movs	r2, #3
 8007842:	701a      	strb	r2, [r3, #0]
  idx++;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	3301      	adds	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800784a:	e013      	b.n	8007874 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3301      	adds	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
    idx++;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	3301      	adds	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	4413      	add	r3, r2
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
    idx++;
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	3301      	adds	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e7      	bne.n	800784c <USBD_GetString+0x52>
 800787c:	e000      	b.n	8007880 <USBD_GetString+0x86>
    return;
 800787e:	bf00      	nop
  }
}
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007896:	e005      	b.n	80078a4 <USBD_GetLen+0x1e>
  {
    len++;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	3301      	adds	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f5      	bne.n	8007898 <USBD_GetLen+0x12>
  }

  return len;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	2100      	movs	r1, #0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fcfa 	bl	80082da <USBD_LL_Transmit>

  return USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	2100      	movs	r1, #0
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fce9 	bl	80082da <USBD_LL_Transmit>

  return USBD_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2203      	movs	r2, #3
 8007922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	2100      	movs	r1, #0
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fced 	bl	800831c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	2100      	movs	r1, #0
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fcdc 	bl	800831c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2204      	movs	r2, #4
 800797a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800797e:	2300      	movs	r3, #0
 8007980:	2200      	movs	r2, #0
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fca8 	bl	80082da <USBD_LL_Transmit>

  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2205      	movs	r2, #5
 80079a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079a4:	2300      	movs	r3, #0
 80079a6:	2200      	movs	r2, #0
 80079a8:	2100      	movs	r1, #0
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fcb6 	bl	800831c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079c0:	2200      	movs	r2, #0
 80079c2:	4912      	ldr	r1, [pc, #72]	; (8007a0c <MX_USB_DEVICE_Init+0x50>)
 80079c4:	4812      	ldr	r0, [pc, #72]	; (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079c6:	f7fe fe8f 	bl	80066e8 <USBD_Init>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079d0:	f7f9 f8b2 	bl	8000b38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079d4:	490f      	ldr	r1, [pc, #60]	; (8007a14 <MX_USB_DEVICE_Init+0x58>)
 80079d6:	480e      	ldr	r0, [pc, #56]	; (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079d8:	f7fe feb6 	bl	8006748 <USBD_RegisterClass>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079e2:	f7f9 f8a9 	bl	8000b38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079e6:	490c      	ldr	r1, [pc, #48]	; (8007a18 <MX_USB_DEVICE_Init+0x5c>)
 80079e8:	4809      	ldr	r0, [pc, #36]	; (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079ea:	f7fe fdd7 	bl	800659c <USBD_CDC_RegisterInterface>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079f4:	f7f9 f8a0 	bl	8000b38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079f8:	4805      	ldr	r0, [pc, #20]	; (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079fa:	f7fe fecc 	bl	8006796 <USBD_Start>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a04:	f7f9 f898 	bl	8000b38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a08:	bf00      	nop
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000130 	.word	0x20000130
 8007a10:	20000440 	.word	0x20000440
 8007a14:	20000018 	.word	0x20000018
 8007a18:	2000011c 	.word	0x2000011c

08007a1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a20:	2200      	movs	r2, #0
 8007a22:	4905      	ldr	r1, [pc, #20]	; (8007a38 <CDC_Init_FS+0x1c>)
 8007a24:	4805      	ldr	r0, [pc, #20]	; (8007a3c <CDC_Init_FS+0x20>)
 8007a26:	f7fe fdce 	bl	80065c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a2a:	4905      	ldr	r1, [pc, #20]	; (8007a40 <CDC_Init_FS+0x24>)
 8007a2c:	4803      	ldr	r0, [pc, #12]	; (8007a3c <CDC_Init_FS+0x20>)
 8007a2e:	f7fe fde8 	bl	8006602 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000f10 	.word	0x20000f10
 8007a3c:	20000440 	.word	0x20000440
 8007a40:	20000710 	.word	0x20000710

08007a44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	6039      	str	r1, [r7, #0]
 8007a5e:	71fb      	strb	r3, [r7, #7]
 8007a60:	4613      	mov	r3, r2
 8007a62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	2b23      	cmp	r3, #35	; 0x23
 8007a68:	d84a      	bhi.n	8007b00 <CDC_Control_FS+0xac>
 8007a6a:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <CDC_Control_FS+0x1c>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007b01 	.word	0x08007b01
 8007a74:	08007b01 	.word	0x08007b01
 8007a78:	08007b01 	.word	0x08007b01
 8007a7c:	08007b01 	.word	0x08007b01
 8007a80:	08007b01 	.word	0x08007b01
 8007a84:	08007b01 	.word	0x08007b01
 8007a88:	08007b01 	.word	0x08007b01
 8007a8c:	08007b01 	.word	0x08007b01
 8007a90:	08007b01 	.word	0x08007b01
 8007a94:	08007b01 	.word	0x08007b01
 8007a98:	08007b01 	.word	0x08007b01
 8007a9c:	08007b01 	.word	0x08007b01
 8007aa0:	08007b01 	.word	0x08007b01
 8007aa4:	08007b01 	.word	0x08007b01
 8007aa8:	08007b01 	.word	0x08007b01
 8007aac:	08007b01 	.word	0x08007b01
 8007ab0:	08007b01 	.word	0x08007b01
 8007ab4:	08007b01 	.word	0x08007b01
 8007ab8:	08007b01 	.word	0x08007b01
 8007abc:	08007b01 	.word	0x08007b01
 8007ac0:	08007b01 	.word	0x08007b01
 8007ac4:	08007b01 	.word	0x08007b01
 8007ac8:	08007b01 	.word	0x08007b01
 8007acc:	08007b01 	.word	0x08007b01
 8007ad0:	08007b01 	.word	0x08007b01
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	08007b01 	.word	0x08007b01
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b01 	.word	0x08007b01
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	08007b01 	.word	0x08007b01
 8007aec:	08007b01 	.word	0x08007b01
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b01 	.word	0x08007b01
 8007af8:	08007b01 	.word	0x08007b01
 8007afc:	08007b01 	.word	0x08007b01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b00:	bf00      	nop
  }

  return (USBD_OK);
 8007b02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	4805      	ldr	r0, [pc, #20]	; (8007b34 <CDC_Receive_FS+0x24>)
 8007b1e:	f7fe fd70 	bl	8006602 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b22:	4804      	ldr	r0, [pc, #16]	; (8007b34 <CDC_Receive_FS+0x24>)
 8007b24:	f7fe fdb6 	bl	8006694 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000440 	.word	0x20000440

08007b38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b48:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <CDC_Transmit_FS+0x48>)
 8007b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e00b      	b.n	8007b76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b5e:	887b      	ldrh	r3, [r7, #2]
 8007b60:	461a      	mov	r2, r3
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4806      	ldr	r0, [pc, #24]	; (8007b80 <CDC_Transmit_FS+0x48>)
 8007b66:	f7fe fd2e 	bl	80065c6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b6a:	4805      	ldr	r0, [pc, #20]	; (8007b80 <CDC_Transmit_FS+0x48>)
 8007b6c:	f7fe fd62 	bl	8006634 <USBD_CDC_TransmitPacket>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000440 	.word	0x20000440

08007b84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	6039      	str	r1, [r7, #0]
 8007bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2212      	movs	r2, #18
 8007bb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bba:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	2000014c 	.word	0x2000014c

08007bcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007bde:	4b03      	ldr	r3, [pc, #12]	; (8007bec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20000160 	.word	0x20000160

08007bf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4907      	ldr	r1, [pc, #28]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c06:	4808      	ldr	r0, [pc, #32]	; (8007c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c08:	f7ff fdf7 	bl	80077fa <USBD_GetString>
 8007c0c:	e004      	b.n	8007c18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4904      	ldr	r1, [pc, #16]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c12:	4805      	ldr	r0, [pc, #20]	; (8007c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c14:	f7ff fdf1 	bl	80077fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20001710 	.word	0x20001710
 8007c28:	08008dbc 	.word	0x08008dbc

08007c2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	4904      	ldr	r1, [pc, #16]	; (8007c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c3c:	4804      	ldr	r0, [pc, #16]	; (8007c50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c3e:	f7ff fddc 	bl	80077fa <USBD_GetString>
  return USBD_StrDesc;
 8007c42:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20001710 	.word	0x20001710
 8007c50:	08008dd4 	.word	0x08008dd4

08007c54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	221a      	movs	r2, #26
 8007c64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c66:	f000 f843 	bl	8007cf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c6a:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20000164 	.word	0x20000164

08007c78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4907      	ldr	r1, [pc, #28]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c8e:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c90:	f7ff fdb3 	bl	80077fa <USBD_GetString>
 8007c94:	e004      	b.n	8007ca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	4904      	ldr	r1, [pc, #16]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c9a:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c9c:	f7ff fdad 	bl	80077fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20001710 	.word	0x20001710
 8007cb0:	08008de8 	.word	0x08008de8

08007cb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4907      	ldr	r1, [pc, #28]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cca:	4808      	ldr	r0, [pc, #32]	; (8007cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ccc:	f7ff fd95 	bl	80077fa <USBD_GetString>
 8007cd0:	e004      	b.n	8007cdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	4904      	ldr	r1, [pc, #16]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cd6:	4805      	ldr	r0, [pc, #20]	; (8007cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cd8:	f7ff fd8f 	bl	80077fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cdc:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20001710 	.word	0x20001710
 8007cec:	08008df4 	.word	0x08008df4

08007cf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <Get_SerialNum+0x44>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cfc:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <Get_SerialNum+0x48>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d02:	4b0e      	ldr	r3, [pc, #56]	; (8007d3c <Get_SerialNum+0x4c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d16:	2208      	movs	r2, #8
 8007d18:	4909      	ldr	r1, [pc, #36]	; (8007d40 <Get_SerialNum+0x50>)
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f814 	bl	8007d48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d20:	2204      	movs	r2, #4
 8007d22:	4908      	ldr	r1, [pc, #32]	; (8007d44 <Get_SerialNum+0x54>)
 8007d24:	68b8      	ldr	r0, [r7, #8]
 8007d26:	f000 f80f 	bl	8007d48 <IntToUnicode>
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	1fff7a10 	.word	0x1fff7a10
 8007d38:	1fff7a14 	.word	0x1fff7a14
 8007d3c:	1fff7a18 	.word	0x1fff7a18
 8007d40:	20000166 	.word	0x20000166
 8007d44:	20000176 	.word	0x20000176

08007d48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75fb      	strb	r3, [r7, #23]
 8007d5e:	e027      	b.n	8007db0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	0f1b      	lsrs	r3, r3, #28
 8007d64:	2b09      	cmp	r3, #9
 8007d66:	d80b      	bhi.n	8007d80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	0f1b      	lsrs	r3, r3, #28
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4619      	mov	r1, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	440b      	add	r3, r1
 8007d78:	3230      	adds	r2, #48	; 0x30
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e00a      	b.n	8007d96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	0f1b      	lsrs	r3, r3, #28
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	440b      	add	r3, r1
 8007d90:	3237      	adds	r2, #55	; 0x37
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	3301      	adds	r3, #1
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4413      	add	r3, r2
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	3301      	adds	r3, #1
 8007dae:	75fb      	strb	r3, [r7, #23]
 8007db0:	7dfa      	ldrb	r2, [r7, #23]
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d3d3      	bcc.n	8007d60 <IntToUnicode+0x18>
  }
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08a      	sub	sp, #40	; 0x28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd0:	f107 0314 	add.w	r3, r7, #20
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	605a      	str	r2, [r3, #4]
 8007dda:	609a      	str	r2, [r3, #8]
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de8:	d147      	bne.n	8007e7a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dea:	2300      	movs	r3, #0
 8007dec:	613b      	str	r3, [r7, #16]
 8007dee:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <HAL_PCD_MspInit+0xbc>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	4a24      	ldr	r2, [pc, #144]	; (8007e84 <HAL_PCD_MspInit+0xbc>)
 8007df4:	f043 0301 	orr.w	r3, r3, #1
 8007df8:	6313      	str	r3, [r2, #48]	; 0x30
 8007dfa:	4b22      	ldr	r3, [pc, #136]	; (8007e84 <HAL_PCD_MspInit+0xbc>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	613b      	str	r3, [r7, #16]
 8007e04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e14:	f107 0314 	add.w	r3, r7, #20
 8007e18:	4619      	mov	r1, r3
 8007e1a:	481b      	ldr	r0, [pc, #108]	; (8007e88 <HAL_PCD_MspInit+0xc0>)
 8007e1c:	f7f9 fe28 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e26:	2302      	movs	r3, #2
 8007e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e32:	230a      	movs	r3, #10
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e36:	f107 0314 	add.w	r3, r7, #20
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	4812      	ldr	r0, [pc, #72]	; (8007e88 <HAL_PCD_MspInit+0xc0>)
 8007e3e:	f7f9 fe17 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e42:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <HAL_PCD_MspInit+0xbc>)
 8007e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e46:	4a0f      	ldr	r2, [pc, #60]	; (8007e84 <HAL_PCD_MspInit+0xbc>)
 8007e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e4c:	6353      	str	r3, [r2, #52]	; 0x34
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <HAL_PCD_MspInit+0xbc>)
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	4a0b      	ldr	r2, [pc, #44]	; (8007e84 <HAL_PCD_MspInit+0xbc>)
 8007e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <HAL_PCD_MspInit+0xbc>)
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	2043      	movs	r0, #67	; 0x43
 8007e70:	f7f9 fdc7 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e74:	2043      	movs	r0, #67	; 0x43
 8007e76:	f7f9 fde0 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	3728      	adds	r7, #40	; 0x28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40023800 	.word	0x40023800
 8007e88:	40020000 	.word	0x40020000

08007e8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fe fcc2 	bl	800682c <USBD_LL_SetupStage>
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	440b      	add	r3, r1
 8007ed0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f7fe fcfc 	bl	80068d6 <USBD_LL_DataOutStage>
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	3348      	adds	r3, #72	; 0x48
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	f7fe fd45 	bl	800699c <USBD_LL_DataInStage>
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fe59 	bl	8006be0 <USBD_LL_SOF>
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
 8007f4e:	e008      	b.n	8007f62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d102      	bne.n	8007f5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
 8007f5c:	e001      	b.n	8007f62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f5e:	f7f8 fdeb 	bl	8000b38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f68:	7bfa      	ldrb	r2, [r7, #15]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fe fdf9 	bl	8006b64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe fda5 	bl	8006ac8 <USBD_LL_Reset>
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fdf4 	bl	8006b84 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fae:	f043 0301 	orr.w	r3, r3, #1
 8007fb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <HAL_PCD_SuspendCallback+0x48>)
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	4a03      	ldr	r2, [pc, #12]	; (8007fd0 <HAL_PCD_SuspendCallback+0x48>)
 8007fc2:	f043 0306 	orr.w	r3, r3, #6
 8007fc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	e000ed00 	.word	0xe000ed00

08007fd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fde4 	bl	8006bb0 <USBD_LL_Resume>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe fe32 	bl	8006c70 <USBD_LL_IsoOUTIncomplete>
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	4611      	mov	r1, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fdfa 	bl	8006c24 <USBD_LL_IsoINIncomplete>
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fe38 	bl	8006cbc <USBD_LL_DevConnected>
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fe35 	bl	8006cd2 <USBD_LL_DevDisconnected>
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d13c      	bne.n	80080fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008080:	4a20      	ldr	r2, [pc, #128]	; (8008104 <USBD_LL_Init+0x94>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a1e      	ldr	r2, [pc, #120]	; (8008104 <USBD_LL_Init+0x94>)
 800808c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008090:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <USBD_LL_Init+0x94>)
 8008092:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008096:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008098:	4b1a      	ldr	r3, [pc, #104]	; (8008104 <USBD_LL_Init+0x94>)
 800809a:	2204      	movs	r2, #4
 800809c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800809e:	4b19      	ldr	r3, [pc, #100]	; (8008104 <USBD_LL_Init+0x94>)
 80080a0:	2202      	movs	r2, #2
 80080a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080a4:	4b17      	ldr	r3, [pc, #92]	; (8008104 <USBD_LL_Init+0x94>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080aa:	4b16      	ldr	r3, [pc, #88]	; (8008104 <USBD_LL_Init+0x94>)
 80080ac:	2202      	movs	r2, #2
 80080ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080b0:	4b14      	ldr	r3, [pc, #80]	; (8008104 <USBD_LL_Init+0x94>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80080b6:	4b13      	ldr	r3, [pc, #76]	; (8008104 <USBD_LL_Init+0x94>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80080bc:	4b11      	ldr	r3, [pc, #68]	; (8008104 <USBD_LL_Init+0x94>)
 80080be:	2200      	movs	r2, #0
 80080c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80080c2:	4b10      	ldr	r3, [pc, #64]	; (8008104 <USBD_LL_Init+0x94>)
 80080c4:	2201      	movs	r2, #1
 80080c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080c8:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <USBD_LL_Init+0x94>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080ce:	480d      	ldr	r0, [pc, #52]	; (8008104 <USBD_LL_Init+0x94>)
 80080d0:	f7fa fc9a 	bl	8002a08 <HAL_PCD_Init>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080da:	f7f8 fd2d 	bl	8000b38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080de:	2180      	movs	r1, #128	; 0x80
 80080e0:	4808      	ldr	r0, [pc, #32]	; (8008104 <USBD_LL_Init+0x94>)
 80080e2:	f7fb fdf8 	bl	8003cd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080e6:	2240      	movs	r2, #64	; 0x40
 80080e8:	2100      	movs	r1, #0
 80080ea:	4806      	ldr	r0, [pc, #24]	; (8008104 <USBD_LL_Init+0x94>)
 80080ec:	f7fb fdac 	bl	8003c48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080f0:	2280      	movs	r2, #128	; 0x80
 80080f2:	2101      	movs	r1, #1
 80080f4:	4803      	ldr	r0, [pc, #12]	; (8008104 <USBD_LL_Init+0x94>)
 80080f6:	f7fb fda7 	bl	8003c48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20001910 	.word	0x20001910

08008108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800811e:	4618      	mov	r0, r3
 8008120:	f7fa fd8f 	bl	8002c42 <HAL_PCD_Start>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f942 	bl	80083b4 <USBD_Get_USB_Status>
 8008130:	4603      	mov	r3, r0
 8008132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008134:	7bbb      	ldrb	r3, [r7, #14]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	4608      	mov	r0, r1
 8008148:	4611      	mov	r1, r2
 800814a:	461a      	mov	r2, r3
 800814c:	4603      	mov	r3, r0
 800814e:	70fb      	strb	r3, [r7, #3]
 8008150:	460b      	mov	r3, r1
 8008152:	70bb      	strb	r3, [r7, #2]
 8008154:	4613      	mov	r3, r2
 8008156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008166:	78bb      	ldrb	r3, [r7, #2]
 8008168:	883a      	ldrh	r2, [r7, #0]
 800816a:	78f9      	ldrb	r1, [r7, #3]
 800816c:	f7fb f973 	bl	8003456 <HAL_PCD_EP_Open>
 8008170:	4603      	mov	r3, r0
 8008172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f91c 	bl	80083b4 <USBD_Get_USB_Status>
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081a4:	78fa      	ldrb	r2, [r7, #3]
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fb f9bc 	bl	8003526 <HAL_PCD_EP_Close>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 f8fd 	bl	80083b4 <USBD_Get_USB_Status>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081be:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081e2:	78fa      	ldrb	r2, [r7, #3]
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fb fa94 	bl	8003714 <HAL_PCD_EP_SetStall>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 f8de 	bl	80083b4 <USBD_Get_USB_Status>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f7fb fad9 	bl	80037dc <HAL_PCD_EP_ClrStall>
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 f8bf 	bl	80083b4 <USBD_Get_USB_Status>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823a:	7bbb      	ldrb	r3, [r7, #14]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800825c:	2b00      	cmp	r3, #0
 800825e:	da0b      	bge.n	8008278 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008266:	68f9      	ldr	r1, [r7, #12]
 8008268:	4613      	mov	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	333e      	adds	r3, #62	; 0x3e
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	e00b      	b.n	8008290 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800827e:	68f9      	ldr	r1, [r7, #12]
 8008280:	4613      	mov	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800828e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082b6:	78fa      	ldrb	r2, [r7, #3]
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fb f8a6 	bl	800340c <HAL_PCD_SetAddress>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f874 	bl	80083b4 <USBD_Get_USB_Status>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	460b      	mov	r3, r1
 80082e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082f8:	7af9      	ldrb	r1, [r7, #11]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	f7fb f9bf 	bl	8003680 <HAL_PCD_EP_Transmit>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	4618      	mov	r0, r3
 800830a:	f000 f853 	bl	80083b4 <USBD_Get_USB_Status>
 800830e:	4603      	mov	r3, r0
 8008310:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008312:	7dbb      	ldrb	r3, [r7, #22]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	607a      	str	r2, [r7, #4]
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	460b      	mov	r3, r1
 800832a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800833a:	7af9      	ldrb	r1, [r7, #11]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	f7fb f93b 	bl	80035ba <HAL_PCD_EP_Receive>
 8008344:	4603      	mov	r3, r0
 8008346:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	4618      	mov	r0, r3
 800834c:	f000 f832 	bl	80083b4 <USBD_Get_USB_Status>
 8008350:	4603      	mov	r3, r0
 8008352:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008354:	7dbb      	ldrb	r3, [r7, #22]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	4611      	mov	r1, r2
 8008374:	4618      	mov	r0, r3
 8008376:	f7fb f96b 	bl	8003650 <HAL_PCD_EP_GetRxCount>
 800837a:	4603      	mov	r3, r0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800838c:	4b03      	ldr	r3, [pc, #12]	; (800839c <USBD_static_malloc+0x18>)
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20001d18 	.word	0x20001d18

080083a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d817      	bhi.n	80083f8 <USBD_Get_USB_Status+0x44>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <USBD_Get_USB_Status+0x1c>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083e7 	.word	0x080083e7
 80083d8:	080083ed 	.word	0x080083ed
 80083dc:	080083f3 	.word	0x080083f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
    break;
 80083e4:	e00b      	b.n	80083fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083e6:	2303      	movs	r3, #3
 80083e8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ea:	e008      	b.n	80083fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
    break;
 80083f0:	e005      	b.n	80083fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083f2:	2303      	movs	r3, #3
 80083f4:	73fb      	strb	r3, [r7, #15]
    break;
 80083f6:	e002      	b.n	80083fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	73fb      	strb	r3, [r7, #15]
    break;
 80083fc:	bf00      	nop
  }
  return usb_status;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <sniprintf>:
 800840c:	b40c      	push	{r2, r3}
 800840e:	b530      	push	{r4, r5, lr}
 8008410:	4b17      	ldr	r3, [pc, #92]	; (8008470 <sniprintf+0x64>)
 8008412:	1e0c      	subs	r4, r1, #0
 8008414:	681d      	ldr	r5, [r3, #0]
 8008416:	b09d      	sub	sp, #116	; 0x74
 8008418:	da08      	bge.n	800842c <sniprintf+0x20>
 800841a:	238b      	movs	r3, #139	; 0x8b
 800841c:	602b      	str	r3, [r5, #0]
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	b01d      	add	sp, #116	; 0x74
 8008424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008428:	b002      	add	sp, #8
 800842a:	4770      	bx	lr
 800842c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008430:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008434:	bf14      	ite	ne
 8008436:	f104 33ff 	addne.w	r3, r4, #4294967295
 800843a:	4623      	moveq	r3, r4
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	9307      	str	r3, [sp, #28]
 8008440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008444:	9002      	str	r0, [sp, #8]
 8008446:	9006      	str	r0, [sp, #24]
 8008448:	f8ad 3016 	strh.w	r3, [sp, #22]
 800844c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800844e:	ab21      	add	r3, sp, #132	; 0x84
 8008450:	a902      	add	r1, sp, #8
 8008452:	4628      	mov	r0, r5
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	f000 f993 	bl	8008780 <_svfiprintf_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	bfbc      	itt	lt
 800845e:	238b      	movlt	r3, #139	; 0x8b
 8008460:	602b      	strlt	r3, [r5, #0]
 8008462:	2c00      	cmp	r4, #0
 8008464:	d0dd      	beq.n	8008422 <sniprintf+0x16>
 8008466:	9b02      	ldr	r3, [sp, #8]
 8008468:	2200      	movs	r2, #0
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	e7d9      	b.n	8008422 <sniprintf+0x16>
 800846e:	bf00      	nop
 8008470:	200001cc 	.word	0x200001cc

08008474 <memset>:
 8008474:	4402      	add	r2, r0
 8008476:	4603      	mov	r3, r0
 8008478:	4293      	cmp	r3, r2
 800847a:	d100      	bne.n	800847e <memset+0xa>
 800847c:	4770      	bx	lr
 800847e:	f803 1b01 	strb.w	r1, [r3], #1
 8008482:	e7f9      	b.n	8008478 <memset+0x4>

08008484 <__errno>:
 8008484:	4b01      	ldr	r3, [pc, #4]	; (800848c <__errno+0x8>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	200001cc 	.word	0x200001cc

08008490 <__libc_init_array>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4d0d      	ldr	r5, [pc, #52]	; (80084c8 <__libc_init_array+0x38>)
 8008494:	4c0d      	ldr	r4, [pc, #52]	; (80084cc <__libc_init_array+0x3c>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	2600      	movs	r6, #0
 800849c:	42a6      	cmp	r6, r4
 800849e:	d109      	bne.n	80084b4 <__libc_init_array+0x24>
 80084a0:	4d0b      	ldr	r5, [pc, #44]	; (80084d0 <__libc_init_array+0x40>)
 80084a2:	4c0c      	ldr	r4, [pc, #48]	; (80084d4 <__libc_init_array+0x44>)
 80084a4:	f000 fc6a 	bl	8008d7c <_init>
 80084a8:	1b64      	subs	r4, r4, r5
 80084aa:	10a4      	asrs	r4, r4, #2
 80084ac:	2600      	movs	r6, #0
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	d105      	bne.n	80084be <__libc_init_array+0x2e>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b8:	4798      	blx	r3
 80084ba:	3601      	adds	r6, #1
 80084bc:	e7ee      	b.n	800849c <__libc_init_array+0xc>
 80084be:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c2:	4798      	blx	r3
 80084c4:	3601      	adds	r6, #1
 80084c6:	e7f2      	b.n	80084ae <__libc_init_array+0x1e>
 80084c8:	08008e58 	.word	0x08008e58
 80084cc:	08008e58 	.word	0x08008e58
 80084d0:	08008e58 	.word	0x08008e58
 80084d4:	08008e5c 	.word	0x08008e5c

080084d8 <__retarget_lock_acquire_recursive>:
 80084d8:	4770      	bx	lr

080084da <__retarget_lock_release_recursive>:
 80084da:	4770      	bx	lr

080084dc <_free_r>:
 80084dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084de:	2900      	cmp	r1, #0
 80084e0:	d044      	beq.n	800856c <_free_r+0x90>
 80084e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e6:	9001      	str	r0, [sp, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f1a1 0404 	sub.w	r4, r1, #4
 80084ee:	bfb8      	it	lt
 80084f0:	18e4      	addlt	r4, r4, r3
 80084f2:	f000 f8df 	bl	80086b4 <__malloc_lock>
 80084f6:	4a1e      	ldr	r2, [pc, #120]	; (8008570 <_free_r+0x94>)
 80084f8:	9801      	ldr	r0, [sp, #4]
 80084fa:	6813      	ldr	r3, [r2, #0]
 80084fc:	b933      	cbnz	r3, 800850c <_free_r+0x30>
 80084fe:	6063      	str	r3, [r4, #4]
 8008500:	6014      	str	r4, [r2, #0]
 8008502:	b003      	add	sp, #12
 8008504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008508:	f000 b8da 	b.w	80086c0 <__malloc_unlock>
 800850c:	42a3      	cmp	r3, r4
 800850e:	d908      	bls.n	8008522 <_free_r+0x46>
 8008510:	6825      	ldr	r5, [r4, #0]
 8008512:	1961      	adds	r1, r4, r5
 8008514:	428b      	cmp	r3, r1
 8008516:	bf01      	itttt	eq
 8008518:	6819      	ldreq	r1, [r3, #0]
 800851a:	685b      	ldreq	r3, [r3, #4]
 800851c:	1949      	addeq	r1, r1, r5
 800851e:	6021      	streq	r1, [r4, #0]
 8008520:	e7ed      	b.n	80084fe <_free_r+0x22>
 8008522:	461a      	mov	r2, r3
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	b10b      	cbz	r3, 800852c <_free_r+0x50>
 8008528:	42a3      	cmp	r3, r4
 800852a:	d9fa      	bls.n	8008522 <_free_r+0x46>
 800852c:	6811      	ldr	r1, [r2, #0]
 800852e:	1855      	adds	r5, r2, r1
 8008530:	42a5      	cmp	r5, r4
 8008532:	d10b      	bne.n	800854c <_free_r+0x70>
 8008534:	6824      	ldr	r4, [r4, #0]
 8008536:	4421      	add	r1, r4
 8008538:	1854      	adds	r4, r2, r1
 800853a:	42a3      	cmp	r3, r4
 800853c:	6011      	str	r1, [r2, #0]
 800853e:	d1e0      	bne.n	8008502 <_free_r+0x26>
 8008540:	681c      	ldr	r4, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	6053      	str	r3, [r2, #4]
 8008546:	440c      	add	r4, r1
 8008548:	6014      	str	r4, [r2, #0]
 800854a:	e7da      	b.n	8008502 <_free_r+0x26>
 800854c:	d902      	bls.n	8008554 <_free_r+0x78>
 800854e:	230c      	movs	r3, #12
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	e7d6      	b.n	8008502 <_free_r+0x26>
 8008554:	6825      	ldr	r5, [r4, #0]
 8008556:	1961      	adds	r1, r4, r5
 8008558:	428b      	cmp	r3, r1
 800855a:	bf04      	itt	eq
 800855c:	6819      	ldreq	r1, [r3, #0]
 800855e:	685b      	ldreq	r3, [r3, #4]
 8008560:	6063      	str	r3, [r4, #4]
 8008562:	bf04      	itt	eq
 8008564:	1949      	addeq	r1, r1, r5
 8008566:	6021      	streq	r1, [r4, #0]
 8008568:	6054      	str	r4, [r2, #4]
 800856a:	e7ca      	b.n	8008502 <_free_r+0x26>
 800856c:	b003      	add	sp, #12
 800856e:	bd30      	pop	{r4, r5, pc}
 8008570:	20002078 	.word	0x20002078

08008574 <sbrk_aligned>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4e0e      	ldr	r6, [pc, #56]	; (80085b0 <sbrk_aligned+0x3c>)
 8008578:	460c      	mov	r4, r1
 800857a:	6831      	ldr	r1, [r6, #0]
 800857c:	4605      	mov	r5, r0
 800857e:	b911      	cbnz	r1, 8008586 <sbrk_aligned+0x12>
 8008580:	f000 fba6 	bl	8008cd0 <_sbrk_r>
 8008584:	6030      	str	r0, [r6, #0]
 8008586:	4621      	mov	r1, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f000 fba1 	bl	8008cd0 <_sbrk_r>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	d00a      	beq.n	80085a8 <sbrk_aligned+0x34>
 8008592:	1cc4      	adds	r4, r0, #3
 8008594:	f024 0403 	bic.w	r4, r4, #3
 8008598:	42a0      	cmp	r0, r4
 800859a:	d007      	beq.n	80085ac <sbrk_aligned+0x38>
 800859c:	1a21      	subs	r1, r4, r0
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 fb96 	bl	8008cd0 <_sbrk_r>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d101      	bne.n	80085ac <sbrk_aligned+0x38>
 80085a8:	f04f 34ff 	mov.w	r4, #4294967295
 80085ac:	4620      	mov	r0, r4
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	2000207c 	.word	0x2000207c

080085b4 <_malloc_r>:
 80085b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	1ccd      	adds	r5, r1, #3
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	4607      	mov	r7, r0
 80085ca:	db01      	blt.n	80085d0 <_malloc_r+0x1c>
 80085cc:	42a9      	cmp	r1, r5
 80085ce:	d905      	bls.n	80085dc <_malloc_r+0x28>
 80085d0:	230c      	movs	r3, #12
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	2600      	movs	r6, #0
 80085d6:	4630      	mov	r0, r6
 80085d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086b0 <_malloc_r+0xfc>
 80085e0:	f000 f868 	bl	80086b4 <__malloc_lock>
 80085e4:	f8d8 3000 	ldr.w	r3, [r8]
 80085e8:	461c      	mov	r4, r3
 80085ea:	bb5c      	cbnz	r4, 8008644 <_malloc_r+0x90>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4638      	mov	r0, r7
 80085f0:	f7ff ffc0 	bl	8008574 <sbrk_aligned>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	4604      	mov	r4, r0
 80085f8:	d155      	bne.n	80086a6 <_malloc_r+0xf2>
 80085fa:	f8d8 4000 	ldr.w	r4, [r8]
 80085fe:	4626      	mov	r6, r4
 8008600:	2e00      	cmp	r6, #0
 8008602:	d145      	bne.n	8008690 <_malloc_r+0xdc>
 8008604:	2c00      	cmp	r4, #0
 8008606:	d048      	beq.n	800869a <_malloc_r+0xe6>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	4631      	mov	r1, r6
 800860c:	4638      	mov	r0, r7
 800860e:	eb04 0903 	add.w	r9, r4, r3
 8008612:	f000 fb5d 	bl	8008cd0 <_sbrk_r>
 8008616:	4581      	cmp	r9, r0
 8008618:	d13f      	bne.n	800869a <_malloc_r+0xe6>
 800861a:	6821      	ldr	r1, [r4, #0]
 800861c:	1a6d      	subs	r5, r5, r1
 800861e:	4629      	mov	r1, r5
 8008620:	4638      	mov	r0, r7
 8008622:	f7ff ffa7 	bl	8008574 <sbrk_aligned>
 8008626:	3001      	adds	r0, #1
 8008628:	d037      	beq.n	800869a <_malloc_r+0xe6>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	442b      	add	r3, r5
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	f8d8 3000 	ldr.w	r3, [r8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d038      	beq.n	80086aa <_malloc_r+0xf6>
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	42a2      	cmp	r2, r4
 800863c:	d12b      	bne.n	8008696 <_malloc_r+0xe2>
 800863e:	2200      	movs	r2, #0
 8008640:	605a      	str	r2, [r3, #4]
 8008642:	e00f      	b.n	8008664 <_malloc_r+0xb0>
 8008644:	6822      	ldr	r2, [r4, #0]
 8008646:	1b52      	subs	r2, r2, r5
 8008648:	d41f      	bmi.n	800868a <_malloc_r+0xd6>
 800864a:	2a0b      	cmp	r2, #11
 800864c:	d917      	bls.n	800867e <_malloc_r+0xca>
 800864e:	1961      	adds	r1, r4, r5
 8008650:	42a3      	cmp	r3, r4
 8008652:	6025      	str	r5, [r4, #0]
 8008654:	bf18      	it	ne
 8008656:	6059      	strne	r1, [r3, #4]
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	bf08      	it	eq
 800865c:	f8c8 1000 	streq.w	r1, [r8]
 8008660:	5162      	str	r2, [r4, r5]
 8008662:	604b      	str	r3, [r1, #4]
 8008664:	4638      	mov	r0, r7
 8008666:	f104 060b 	add.w	r6, r4, #11
 800866a:	f000 f829 	bl	80086c0 <__malloc_unlock>
 800866e:	f026 0607 	bic.w	r6, r6, #7
 8008672:	1d23      	adds	r3, r4, #4
 8008674:	1af2      	subs	r2, r6, r3
 8008676:	d0ae      	beq.n	80085d6 <_malloc_r+0x22>
 8008678:	1b9b      	subs	r3, r3, r6
 800867a:	50a3      	str	r3, [r4, r2]
 800867c:	e7ab      	b.n	80085d6 <_malloc_r+0x22>
 800867e:	42a3      	cmp	r3, r4
 8008680:	6862      	ldr	r2, [r4, #4]
 8008682:	d1dd      	bne.n	8008640 <_malloc_r+0x8c>
 8008684:	f8c8 2000 	str.w	r2, [r8]
 8008688:	e7ec      	b.n	8008664 <_malloc_r+0xb0>
 800868a:	4623      	mov	r3, r4
 800868c:	6864      	ldr	r4, [r4, #4]
 800868e:	e7ac      	b.n	80085ea <_malloc_r+0x36>
 8008690:	4634      	mov	r4, r6
 8008692:	6876      	ldr	r6, [r6, #4]
 8008694:	e7b4      	b.n	8008600 <_malloc_r+0x4c>
 8008696:	4613      	mov	r3, r2
 8008698:	e7cc      	b.n	8008634 <_malloc_r+0x80>
 800869a:	230c      	movs	r3, #12
 800869c:	603b      	str	r3, [r7, #0]
 800869e:	4638      	mov	r0, r7
 80086a0:	f000 f80e 	bl	80086c0 <__malloc_unlock>
 80086a4:	e797      	b.n	80085d6 <_malloc_r+0x22>
 80086a6:	6025      	str	r5, [r4, #0]
 80086a8:	e7dc      	b.n	8008664 <_malloc_r+0xb0>
 80086aa:	605b      	str	r3, [r3, #4]
 80086ac:	deff      	udf	#255	; 0xff
 80086ae:	bf00      	nop
 80086b0:	20002078 	.word	0x20002078

080086b4 <__malloc_lock>:
 80086b4:	4801      	ldr	r0, [pc, #4]	; (80086bc <__malloc_lock+0x8>)
 80086b6:	f7ff bf0f 	b.w	80084d8 <__retarget_lock_acquire_recursive>
 80086ba:	bf00      	nop
 80086bc:	20002074 	.word	0x20002074

080086c0 <__malloc_unlock>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__malloc_unlock+0x8>)
 80086c2:	f7ff bf0a 	b.w	80084da <__retarget_lock_release_recursive>
 80086c6:	bf00      	nop
 80086c8:	20002074 	.word	0x20002074

080086cc <__ssputs_r>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	688e      	ldr	r6, [r1, #8]
 80086d2:	461f      	mov	r7, r3
 80086d4:	42be      	cmp	r6, r7
 80086d6:	680b      	ldr	r3, [r1, #0]
 80086d8:	4682      	mov	sl, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	4690      	mov	r8, r2
 80086de:	d82c      	bhi.n	800873a <__ssputs_r+0x6e>
 80086e0:	898a      	ldrh	r2, [r1, #12]
 80086e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086e6:	d026      	beq.n	8008736 <__ssputs_r+0x6a>
 80086e8:	6965      	ldr	r5, [r4, #20]
 80086ea:	6909      	ldr	r1, [r1, #16]
 80086ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f0:	eba3 0901 	sub.w	r9, r3, r1
 80086f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086f8:	1c7b      	adds	r3, r7, #1
 80086fa:	444b      	add	r3, r9
 80086fc:	106d      	asrs	r5, r5, #1
 80086fe:	429d      	cmp	r5, r3
 8008700:	bf38      	it	cc
 8008702:	461d      	movcc	r5, r3
 8008704:	0553      	lsls	r3, r2, #21
 8008706:	d527      	bpl.n	8008758 <__ssputs_r+0x8c>
 8008708:	4629      	mov	r1, r5
 800870a:	f7ff ff53 	bl	80085b4 <_malloc_r>
 800870e:	4606      	mov	r6, r0
 8008710:	b360      	cbz	r0, 800876c <__ssputs_r+0xa0>
 8008712:	6921      	ldr	r1, [r4, #16]
 8008714:	464a      	mov	r2, r9
 8008716:	f000 faeb 	bl	8008cf0 <memcpy>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008724:	81a3      	strh	r3, [r4, #12]
 8008726:	6126      	str	r6, [r4, #16]
 8008728:	6165      	str	r5, [r4, #20]
 800872a:	444e      	add	r6, r9
 800872c:	eba5 0509 	sub.w	r5, r5, r9
 8008730:	6026      	str	r6, [r4, #0]
 8008732:	60a5      	str	r5, [r4, #8]
 8008734:	463e      	mov	r6, r7
 8008736:	42be      	cmp	r6, r7
 8008738:	d900      	bls.n	800873c <__ssputs_r+0x70>
 800873a:	463e      	mov	r6, r7
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	4632      	mov	r2, r6
 8008740:	4641      	mov	r1, r8
 8008742:	f000 faab 	bl	8008c9c <memmove>
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	1b9b      	subs	r3, r3, r6
 800874a:	60a3      	str	r3, [r4, #8]
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	4433      	add	r3, r6
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	2000      	movs	r0, #0
 8008754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008758:	462a      	mov	r2, r5
 800875a:	f000 fad7 	bl	8008d0c <_realloc_r>
 800875e:	4606      	mov	r6, r0
 8008760:	2800      	cmp	r0, #0
 8008762:	d1e0      	bne.n	8008726 <__ssputs_r+0x5a>
 8008764:	6921      	ldr	r1, [r4, #16]
 8008766:	4650      	mov	r0, sl
 8008768:	f7ff feb8 	bl	80084dc <_free_r>
 800876c:	230c      	movs	r3, #12
 800876e:	f8ca 3000 	str.w	r3, [sl]
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	f04f 30ff 	mov.w	r0, #4294967295
 800877e:	e7e9      	b.n	8008754 <__ssputs_r+0x88>

08008780 <_svfiprintf_r>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	4698      	mov	r8, r3
 8008786:	898b      	ldrh	r3, [r1, #12]
 8008788:	061b      	lsls	r3, r3, #24
 800878a:	b09d      	sub	sp, #116	; 0x74
 800878c:	4607      	mov	r7, r0
 800878e:	460d      	mov	r5, r1
 8008790:	4614      	mov	r4, r2
 8008792:	d50e      	bpl.n	80087b2 <_svfiprintf_r+0x32>
 8008794:	690b      	ldr	r3, [r1, #16]
 8008796:	b963      	cbnz	r3, 80087b2 <_svfiprintf_r+0x32>
 8008798:	2140      	movs	r1, #64	; 0x40
 800879a:	f7ff ff0b 	bl	80085b4 <_malloc_r>
 800879e:	6028      	str	r0, [r5, #0]
 80087a0:	6128      	str	r0, [r5, #16]
 80087a2:	b920      	cbnz	r0, 80087ae <_svfiprintf_r+0x2e>
 80087a4:	230c      	movs	r3, #12
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	e0d0      	b.n	8008950 <_svfiprintf_r+0x1d0>
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	616b      	str	r3, [r5, #20]
 80087b2:	2300      	movs	r3, #0
 80087b4:	9309      	str	r3, [sp, #36]	; 0x24
 80087b6:	2320      	movs	r3, #32
 80087b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c0:	2330      	movs	r3, #48	; 0x30
 80087c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008968 <_svfiprintf_r+0x1e8>
 80087c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ca:	f04f 0901 	mov.w	r9, #1
 80087ce:	4623      	mov	r3, r4
 80087d0:	469a      	mov	sl, r3
 80087d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d6:	b10a      	cbz	r2, 80087dc <_svfiprintf_r+0x5c>
 80087d8:	2a25      	cmp	r2, #37	; 0x25
 80087da:	d1f9      	bne.n	80087d0 <_svfiprintf_r+0x50>
 80087dc:	ebba 0b04 	subs.w	fp, sl, r4
 80087e0:	d00b      	beq.n	80087fa <_svfiprintf_r+0x7a>
 80087e2:	465b      	mov	r3, fp
 80087e4:	4622      	mov	r2, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff ff6f 	bl	80086cc <__ssputs_r>
 80087ee:	3001      	adds	r0, #1
 80087f0:	f000 80a9 	beq.w	8008946 <_svfiprintf_r+0x1c6>
 80087f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f6:	445a      	add	r2, fp
 80087f8:	9209      	str	r2, [sp, #36]	; 0x24
 80087fa:	f89a 3000 	ldrb.w	r3, [sl]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 80a1 	beq.w	8008946 <_svfiprintf_r+0x1c6>
 8008804:	2300      	movs	r3, #0
 8008806:	f04f 32ff 	mov.w	r2, #4294967295
 800880a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800880e:	f10a 0a01 	add.w	sl, sl, #1
 8008812:	9304      	str	r3, [sp, #16]
 8008814:	9307      	str	r3, [sp, #28]
 8008816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800881a:	931a      	str	r3, [sp, #104]	; 0x68
 800881c:	4654      	mov	r4, sl
 800881e:	2205      	movs	r2, #5
 8008820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008824:	4850      	ldr	r0, [pc, #320]	; (8008968 <_svfiprintf_r+0x1e8>)
 8008826:	f7f7 fcdb 	bl	80001e0 <memchr>
 800882a:	9a04      	ldr	r2, [sp, #16]
 800882c:	b9d8      	cbnz	r0, 8008866 <_svfiprintf_r+0xe6>
 800882e:	06d0      	lsls	r0, r2, #27
 8008830:	bf44      	itt	mi
 8008832:	2320      	movmi	r3, #32
 8008834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008838:	0711      	lsls	r1, r2, #28
 800883a:	bf44      	itt	mi
 800883c:	232b      	movmi	r3, #43	; 0x2b
 800883e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008842:	f89a 3000 	ldrb.w	r3, [sl]
 8008846:	2b2a      	cmp	r3, #42	; 0x2a
 8008848:	d015      	beq.n	8008876 <_svfiprintf_r+0xf6>
 800884a:	9a07      	ldr	r2, [sp, #28]
 800884c:	4654      	mov	r4, sl
 800884e:	2000      	movs	r0, #0
 8008850:	f04f 0c0a 	mov.w	ip, #10
 8008854:	4621      	mov	r1, r4
 8008856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800885a:	3b30      	subs	r3, #48	; 0x30
 800885c:	2b09      	cmp	r3, #9
 800885e:	d94d      	bls.n	80088fc <_svfiprintf_r+0x17c>
 8008860:	b1b0      	cbz	r0, 8008890 <_svfiprintf_r+0x110>
 8008862:	9207      	str	r2, [sp, #28]
 8008864:	e014      	b.n	8008890 <_svfiprintf_r+0x110>
 8008866:	eba0 0308 	sub.w	r3, r0, r8
 800886a:	fa09 f303 	lsl.w	r3, r9, r3
 800886e:	4313      	orrs	r3, r2
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	46a2      	mov	sl, r4
 8008874:	e7d2      	b.n	800881c <_svfiprintf_r+0x9c>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	1d19      	adds	r1, r3, #4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	9103      	str	r1, [sp, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	bfbb      	ittet	lt
 8008882:	425b      	neglt	r3, r3
 8008884:	f042 0202 	orrlt.w	r2, r2, #2
 8008888:	9307      	strge	r3, [sp, #28]
 800888a:	9307      	strlt	r3, [sp, #28]
 800888c:	bfb8      	it	lt
 800888e:	9204      	strlt	r2, [sp, #16]
 8008890:	7823      	ldrb	r3, [r4, #0]
 8008892:	2b2e      	cmp	r3, #46	; 0x2e
 8008894:	d10c      	bne.n	80088b0 <_svfiprintf_r+0x130>
 8008896:	7863      	ldrb	r3, [r4, #1]
 8008898:	2b2a      	cmp	r3, #42	; 0x2a
 800889a:	d134      	bne.n	8008906 <_svfiprintf_r+0x186>
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	9203      	str	r2, [sp, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bfb8      	it	lt
 80088a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ac:	3402      	adds	r4, #2
 80088ae:	9305      	str	r3, [sp, #20]
 80088b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008978 <_svfiprintf_r+0x1f8>
 80088b4:	7821      	ldrb	r1, [r4, #0]
 80088b6:	2203      	movs	r2, #3
 80088b8:	4650      	mov	r0, sl
 80088ba:	f7f7 fc91 	bl	80001e0 <memchr>
 80088be:	b138      	cbz	r0, 80088d0 <_svfiprintf_r+0x150>
 80088c0:	9b04      	ldr	r3, [sp, #16]
 80088c2:	eba0 000a 	sub.w	r0, r0, sl
 80088c6:	2240      	movs	r2, #64	; 0x40
 80088c8:	4082      	lsls	r2, r0
 80088ca:	4313      	orrs	r3, r2
 80088cc:	3401      	adds	r4, #1
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d4:	4825      	ldr	r0, [pc, #148]	; (800896c <_svfiprintf_r+0x1ec>)
 80088d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088da:	2206      	movs	r2, #6
 80088dc:	f7f7 fc80 	bl	80001e0 <memchr>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d038      	beq.n	8008956 <_svfiprintf_r+0x1d6>
 80088e4:	4b22      	ldr	r3, [pc, #136]	; (8008970 <_svfiprintf_r+0x1f0>)
 80088e6:	bb1b      	cbnz	r3, 8008930 <_svfiprintf_r+0x1b0>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	3307      	adds	r3, #7
 80088ec:	f023 0307 	bic.w	r3, r3, #7
 80088f0:	3308      	adds	r3, #8
 80088f2:	9303      	str	r3, [sp, #12]
 80088f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f6:	4433      	add	r3, r6
 80088f8:	9309      	str	r3, [sp, #36]	; 0x24
 80088fa:	e768      	b.n	80087ce <_svfiprintf_r+0x4e>
 80088fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008900:	460c      	mov	r4, r1
 8008902:	2001      	movs	r0, #1
 8008904:	e7a6      	b.n	8008854 <_svfiprintf_r+0xd4>
 8008906:	2300      	movs	r3, #0
 8008908:	3401      	adds	r4, #1
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	4619      	mov	r1, r3
 800890e:	f04f 0c0a 	mov.w	ip, #10
 8008912:	4620      	mov	r0, r4
 8008914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008918:	3a30      	subs	r2, #48	; 0x30
 800891a:	2a09      	cmp	r2, #9
 800891c:	d903      	bls.n	8008926 <_svfiprintf_r+0x1a6>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0c6      	beq.n	80088b0 <_svfiprintf_r+0x130>
 8008922:	9105      	str	r1, [sp, #20]
 8008924:	e7c4      	b.n	80088b0 <_svfiprintf_r+0x130>
 8008926:	fb0c 2101 	mla	r1, ip, r1, r2
 800892a:	4604      	mov	r4, r0
 800892c:	2301      	movs	r3, #1
 800892e:	e7f0      	b.n	8008912 <_svfiprintf_r+0x192>
 8008930:	ab03      	add	r3, sp, #12
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	462a      	mov	r2, r5
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <_svfiprintf_r+0x1f4>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	4638      	mov	r0, r7
 800893c:	f3af 8000 	nop.w
 8008940:	1c42      	adds	r2, r0, #1
 8008942:	4606      	mov	r6, r0
 8008944:	d1d6      	bne.n	80088f4 <_svfiprintf_r+0x174>
 8008946:	89ab      	ldrh	r3, [r5, #12]
 8008948:	065b      	lsls	r3, r3, #25
 800894a:	f53f af2d 	bmi.w	80087a8 <_svfiprintf_r+0x28>
 800894e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008950:	b01d      	add	sp, #116	; 0x74
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008956:	ab03      	add	r3, sp, #12
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	462a      	mov	r2, r5
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <_svfiprintf_r+0x1f4>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	4638      	mov	r0, r7
 8008962:	f000 f879 	bl	8008a58 <_printf_i>
 8008966:	e7eb      	b.n	8008940 <_svfiprintf_r+0x1c0>
 8008968:	08008e1c 	.word	0x08008e1c
 800896c:	08008e26 	.word	0x08008e26
 8008970:	00000000 	.word	0x00000000
 8008974:	080086cd 	.word	0x080086cd
 8008978:	08008e22 	.word	0x08008e22

0800897c <_printf_common>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	4616      	mov	r6, r2
 8008982:	4699      	mov	r9, r3
 8008984:	688a      	ldr	r2, [r1, #8]
 8008986:	690b      	ldr	r3, [r1, #16]
 8008988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800898c:	4293      	cmp	r3, r2
 800898e:	bfb8      	it	lt
 8008990:	4613      	movlt	r3, r2
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008998:	4607      	mov	r7, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b10a      	cbz	r2, 80089a2 <_printf_common+0x26>
 800899e:	3301      	adds	r3, #1
 80089a0:	6033      	str	r3, [r6, #0]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	0699      	lsls	r1, r3, #26
 80089a6:	bf42      	ittt	mi
 80089a8:	6833      	ldrmi	r3, [r6, #0]
 80089aa:	3302      	addmi	r3, #2
 80089ac:	6033      	strmi	r3, [r6, #0]
 80089ae:	6825      	ldr	r5, [r4, #0]
 80089b0:	f015 0506 	ands.w	r5, r5, #6
 80089b4:	d106      	bne.n	80089c4 <_printf_common+0x48>
 80089b6:	f104 0a19 	add.w	sl, r4, #25
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	6832      	ldr	r2, [r6, #0]
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	dc26      	bgt.n	8008a12 <_printf_common+0x96>
 80089c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089c8:	1e13      	subs	r3, r2, #0
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	bf18      	it	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	0692      	lsls	r2, r2, #26
 80089d2:	d42b      	bmi.n	8008a2c <_printf_common+0xb0>
 80089d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d8:	4649      	mov	r1, r9
 80089da:	4638      	mov	r0, r7
 80089dc:	47c0      	blx	r8
 80089de:	3001      	adds	r0, #1
 80089e0:	d01e      	beq.n	8008a20 <_printf_common+0xa4>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	f003 0306 	and.w	r3, r3, #6
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	bf02      	ittt	eq
 80089ee:	68e5      	ldreq	r5, [r4, #12]
 80089f0:	6833      	ldreq	r3, [r6, #0]
 80089f2:	1aed      	subeq	r5, r5, r3
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	bf0c      	ite	eq
 80089f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089fc:	2500      	movne	r5, #0
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bfc4      	itt	gt
 8008a02:	1a9b      	subgt	r3, r3, r2
 8008a04:	18ed      	addgt	r5, r5, r3
 8008a06:	2600      	movs	r6, #0
 8008a08:	341a      	adds	r4, #26
 8008a0a:	42b5      	cmp	r5, r6
 8008a0c:	d11a      	bne.n	8008a44 <_printf_common+0xc8>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e008      	b.n	8008a24 <_printf_common+0xa8>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	4649      	mov	r1, r9
 8008a18:	4638      	mov	r0, r7
 8008a1a:	47c0      	blx	r8
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d103      	bne.n	8008a28 <_printf_common+0xac>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a28:	3501      	adds	r5, #1
 8008a2a:	e7c6      	b.n	80089ba <_printf_common+0x3e>
 8008a2c:	18e1      	adds	r1, r4, r3
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	2030      	movs	r0, #48	; 0x30
 8008a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a36:	4422      	add	r2, r4
 8008a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a40:	3302      	adds	r3, #2
 8008a42:	e7c7      	b.n	80089d4 <_printf_common+0x58>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4622      	mov	r2, r4
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c0      	blx	r8
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0e6      	beq.n	8008a20 <_printf_common+0xa4>
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7d9      	b.n	8008a0a <_printf_common+0x8e>
	...

08008a58 <_printf_i>:
 8008a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	7e0f      	ldrb	r7, [r1, #24]
 8008a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a60:	2f78      	cmp	r7, #120	; 0x78
 8008a62:	4691      	mov	r9, r2
 8008a64:	4680      	mov	r8, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	469a      	mov	sl, r3
 8008a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a6e:	d807      	bhi.n	8008a80 <_printf_i+0x28>
 8008a70:	2f62      	cmp	r7, #98	; 0x62
 8008a72:	d80a      	bhi.n	8008a8a <_printf_i+0x32>
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	f000 80d4 	beq.w	8008c22 <_printf_i+0x1ca>
 8008a7a:	2f58      	cmp	r7, #88	; 0x58
 8008a7c:	f000 80c0 	beq.w	8008c00 <_printf_i+0x1a8>
 8008a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a88:	e03a      	b.n	8008b00 <_printf_i+0xa8>
 8008a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a8e:	2b15      	cmp	r3, #21
 8008a90:	d8f6      	bhi.n	8008a80 <_printf_i+0x28>
 8008a92:	a101      	add	r1, pc, #4	; (adr r1, 8008a98 <_printf_i+0x40>)
 8008a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008a81 	.word	0x08008a81
 8008aa4:	08008a81 	.word	0x08008a81
 8008aa8:	08008a81 	.word	0x08008a81
 8008aac:	08008a81 	.word	0x08008a81
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008a81 	.word	0x08008a81
 8008ab8:	08008a81 	.word	0x08008a81
 8008abc:	08008a81 	.word	0x08008a81
 8008ac0:	08008a81 	.word	0x08008a81
 8008ac4:	08008c09 	.word	0x08008c09
 8008ac8:	08008b31 	.word	0x08008b31
 8008acc:	08008bc3 	.word	0x08008bc3
 8008ad0:	08008a81 	.word	0x08008a81
 8008ad4:	08008a81 	.word	0x08008a81
 8008ad8:	08008c2b 	.word	0x08008c2b
 8008adc:	08008a81 	.word	0x08008a81
 8008ae0:	08008b31 	.word	0x08008b31
 8008ae4:	08008a81 	.word	0x08008a81
 8008ae8:	08008a81 	.word	0x08008a81
 8008aec:	08008bcb 	.word	0x08008bcb
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	602a      	str	r2, [r5, #0]
 8008af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b00:	2301      	movs	r3, #1
 8008b02:	e09f      	b.n	8008c44 <_printf_i+0x1ec>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	682b      	ldr	r3, [r5, #0]
 8008b08:	0607      	lsls	r7, r0, #24
 8008b0a:	f103 0104 	add.w	r1, r3, #4
 8008b0e:	6029      	str	r1, [r5, #0]
 8008b10:	d501      	bpl.n	8008b16 <_printf_i+0xbe>
 8008b12:	681e      	ldr	r6, [r3, #0]
 8008b14:	e003      	b.n	8008b1e <_printf_i+0xc6>
 8008b16:	0646      	lsls	r6, r0, #25
 8008b18:	d5fb      	bpl.n	8008b12 <_printf_i+0xba>
 8008b1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b1e:	2e00      	cmp	r6, #0
 8008b20:	da03      	bge.n	8008b2a <_printf_i+0xd2>
 8008b22:	232d      	movs	r3, #45	; 0x2d
 8008b24:	4276      	negs	r6, r6
 8008b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b2a:	485a      	ldr	r0, [pc, #360]	; (8008c94 <_printf_i+0x23c>)
 8008b2c:	230a      	movs	r3, #10
 8008b2e:	e012      	b.n	8008b56 <_printf_i+0xfe>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	6820      	ldr	r0, [r4, #0]
 8008b34:	1d19      	adds	r1, r3, #4
 8008b36:	6029      	str	r1, [r5, #0]
 8008b38:	0605      	lsls	r5, r0, #24
 8008b3a:	d501      	bpl.n	8008b40 <_printf_i+0xe8>
 8008b3c:	681e      	ldr	r6, [r3, #0]
 8008b3e:	e002      	b.n	8008b46 <_printf_i+0xee>
 8008b40:	0641      	lsls	r1, r0, #25
 8008b42:	d5fb      	bpl.n	8008b3c <_printf_i+0xe4>
 8008b44:	881e      	ldrh	r6, [r3, #0]
 8008b46:	4853      	ldr	r0, [pc, #332]	; (8008c94 <_printf_i+0x23c>)
 8008b48:	2f6f      	cmp	r7, #111	; 0x6f
 8008b4a:	bf0c      	ite	eq
 8008b4c:	2308      	moveq	r3, #8
 8008b4e:	230a      	movne	r3, #10
 8008b50:	2100      	movs	r1, #0
 8008b52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b56:	6865      	ldr	r5, [r4, #4]
 8008b58:	60a5      	str	r5, [r4, #8]
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	bfa2      	ittt	ge
 8008b5e:	6821      	ldrge	r1, [r4, #0]
 8008b60:	f021 0104 	bicge.w	r1, r1, #4
 8008b64:	6021      	strge	r1, [r4, #0]
 8008b66:	b90e      	cbnz	r6, 8008b6c <_printf_i+0x114>
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	d04b      	beq.n	8008c04 <_printf_i+0x1ac>
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b72:	fb03 6711 	mls	r7, r3, r1, r6
 8008b76:	5dc7      	ldrb	r7, [r0, r7]
 8008b78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b7c:	4637      	mov	r7, r6
 8008b7e:	42bb      	cmp	r3, r7
 8008b80:	460e      	mov	r6, r1
 8008b82:	d9f4      	bls.n	8008b6e <_printf_i+0x116>
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d10b      	bne.n	8008ba0 <_printf_i+0x148>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	07de      	lsls	r6, r3, #31
 8008b8c:	d508      	bpl.n	8008ba0 <_printf_i+0x148>
 8008b8e:	6923      	ldr	r3, [r4, #16]
 8008b90:	6861      	ldr	r1, [r4, #4]
 8008b92:	4299      	cmp	r1, r3
 8008b94:	bfde      	ittt	le
 8008b96:	2330      	movle	r3, #48	; 0x30
 8008b98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ba0:	1b52      	subs	r2, r2, r5
 8008ba2:	6122      	str	r2, [r4, #16]
 8008ba4:	f8cd a000 	str.w	sl, [sp]
 8008ba8:	464b      	mov	r3, r9
 8008baa:	aa03      	add	r2, sp, #12
 8008bac:	4621      	mov	r1, r4
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f7ff fee4 	bl	800897c <_printf_common>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d14a      	bne.n	8008c4e <_printf_i+0x1f6>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	b004      	add	sp, #16
 8008bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	f043 0320 	orr.w	r3, r3, #32
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	4833      	ldr	r0, [pc, #204]	; (8008c98 <_printf_i+0x240>)
 8008bcc:	2778      	movs	r7, #120	; 0x78
 8008bce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	6829      	ldr	r1, [r5, #0]
 8008bd6:	061f      	lsls	r7, r3, #24
 8008bd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bdc:	d402      	bmi.n	8008be4 <_printf_i+0x18c>
 8008bde:	065f      	lsls	r7, r3, #25
 8008be0:	bf48      	it	mi
 8008be2:	b2b6      	uxthmi	r6, r6
 8008be4:	07df      	lsls	r7, r3, #31
 8008be6:	bf48      	it	mi
 8008be8:	f043 0320 	orrmi.w	r3, r3, #32
 8008bec:	6029      	str	r1, [r5, #0]
 8008bee:	bf48      	it	mi
 8008bf0:	6023      	strmi	r3, [r4, #0]
 8008bf2:	b91e      	cbnz	r6, 8008bfc <_printf_i+0x1a4>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	f023 0320 	bic.w	r3, r3, #32
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	2310      	movs	r3, #16
 8008bfe:	e7a7      	b.n	8008b50 <_printf_i+0xf8>
 8008c00:	4824      	ldr	r0, [pc, #144]	; (8008c94 <_printf_i+0x23c>)
 8008c02:	e7e4      	b.n	8008bce <_printf_i+0x176>
 8008c04:	4615      	mov	r5, r2
 8008c06:	e7bd      	b.n	8008b84 <_printf_i+0x12c>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	6826      	ldr	r6, [r4, #0]
 8008c0c:	6961      	ldr	r1, [r4, #20]
 8008c0e:	1d18      	adds	r0, r3, #4
 8008c10:	6028      	str	r0, [r5, #0]
 8008c12:	0635      	lsls	r5, r6, #24
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	d501      	bpl.n	8008c1c <_printf_i+0x1c4>
 8008c18:	6019      	str	r1, [r3, #0]
 8008c1a:	e002      	b.n	8008c22 <_printf_i+0x1ca>
 8008c1c:	0670      	lsls	r0, r6, #25
 8008c1e:	d5fb      	bpl.n	8008c18 <_printf_i+0x1c0>
 8008c20:	8019      	strh	r1, [r3, #0]
 8008c22:	2300      	movs	r3, #0
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	4615      	mov	r5, r2
 8008c28:	e7bc      	b.n	8008ba4 <_printf_i+0x14c>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	1d1a      	adds	r2, r3, #4
 8008c2e:	602a      	str	r2, [r5, #0]
 8008c30:	681d      	ldr	r5, [r3, #0]
 8008c32:	6862      	ldr	r2, [r4, #4]
 8008c34:	2100      	movs	r1, #0
 8008c36:	4628      	mov	r0, r5
 8008c38:	f7f7 fad2 	bl	80001e0 <memchr>
 8008c3c:	b108      	cbz	r0, 8008c42 <_printf_i+0x1ea>
 8008c3e:	1b40      	subs	r0, r0, r5
 8008c40:	6060      	str	r0, [r4, #4]
 8008c42:	6863      	ldr	r3, [r4, #4]
 8008c44:	6123      	str	r3, [r4, #16]
 8008c46:	2300      	movs	r3, #0
 8008c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c4c:	e7aa      	b.n	8008ba4 <_printf_i+0x14c>
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	462a      	mov	r2, r5
 8008c52:	4649      	mov	r1, r9
 8008c54:	4640      	mov	r0, r8
 8008c56:	47d0      	blx	sl
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d0ad      	beq.n	8008bb8 <_printf_i+0x160>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	079b      	lsls	r3, r3, #30
 8008c60:	d413      	bmi.n	8008c8a <_printf_i+0x232>
 8008c62:	68e0      	ldr	r0, [r4, #12]
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	4298      	cmp	r0, r3
 8008c68:	bfb8      	it	lt
 8008c6a:	4618      	movlt	r0, r3
 8008c6c:	e7a6      	b.n	8008bbc <_printf_i+0x164>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4632      	mov	r2, r6
 8008c72:	4649      	mov	r1, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	47d0      	blx	sl
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d09d      	beq.n	8008bb8 <_printf_i+0x160>
 8008c7c:	3501      	adds	r5, #1
 8008c7e:	68e3      	ldr	r3, [r4, #12]
 8008c80:	9903      	ldr	r1, [sp, #12]
 8008c82:	1a5b      	subs	r3, r3, r1
 8008c84:	42ab      	cmp	r3, r5
 8008c86:	dcf2      	bgt.n	8008c6e <_printf_i+0x216>
 8008c88:	e7eb      	b.n	8008c62 <_printf_i+0x20a>
 8008c8a:	2500      	movs	r5, #0
 8008c8c:	f104 0619 	add.w	r6, r4, #25
 8008c90:	e7f5      	b.n	8008c7e <_printf_i+0x226>
 8008c92:	bf00      	nop
 8008c94:	08008e2d 	.word	0x08008e2d
 8008c98:	08008e3e 	.word	0x08008e3e

08008c9c <memmove>:
 8008c9c:	4288      	cmp	r0, r1
 8008c9e:	b510      	push	{r4, lr}
 8008ca0:	eb01 0402 	add.w	r4, r1, r2
 8008ca4:	d902      	bls.n	8008cac <memmove+0x10>
 8008ca6:	4284      	cmp	r4, r0
 8008ca8:	4623      	mov	r3, r4
 8008caa:	d807      	bhi.n	8008cbc <memmove+0x20>
 8008cac:	1e43      	subs	r3, r0, #1
 8008cae:	42a1      	cmp	r1, r4
 8008cb0:	d008      	beq.n	8008cc4 <memmove+0x28>
 8008cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cba:	e7f8      	b.n	8008cae <memmove+0x12>
 8008cbc:	4402      	add	r2, r0
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	428a      	cmp	r2, r1
 8008cc2:	d100      	bne.n	8008cc6 <memmove+0x2a>
 8008cc4:	bd10      	pop	{r4, pc}
 8008cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cce:	e7f7      	b.n	8008cc0 <memmove+0x24>

08008cd0 <_sbrk_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d06      	ldr	r5, [pc, #24]	; (8008cec <_sbrk_r+0x1c>)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	f7f8 f8e2 	bl	8000ea4 <_sbrk>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_sbrk_r+0x1a>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_sbrk_r+0x1a>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	20002070 	.word	0x20002070

08008cf0 <memcpy>:
 8008cf0:	440a      	add	r2, r1
 8008cf2:	4291      	cmp	r1, r2
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d100      	bne.n	8008cfc <memcpy+0xc>
 8008cfa:	4770      	bx	lr
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d06:	4291      	cmp	r1, r2
 8008d08:	d1f9      	bne.n	8008cfe <memcpy+0xe>
 8008d0a:	bd10      	pop	{r4, pc}

08008d0c <_realloc_r>:
 8008d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	4680      	mov	r8, r0
 8008d12:	4614      	mov	r4, r2
 8008d14:	460e      	mov	r6, r1
 8008d16:	b921      	cbnz	r1, 8008d22 <_realloc_r+0x16>
 8008d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	f7ff bc49 	b.w	80085b4 <_malloc_r>
 8008d22:	b92a      	cbnz	r2, 8008d30 <_realloc_r+0x24>
 8008d24:	f7ff fbda 	bl	80084dc <_free_r>
 8008d28:	4625      	mov	r5, r4
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d30:	f000 f81b 	bl	8008d6a <_malloc_usable_size_r>
 8008d34:	4284      	cmp	r4, r0
 8008d36:	4607      	mov	r7, r0
 8008d38:	d802      	bhi.n	8008d40 <_realloc_r+0x34>
 8008d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d3e:	d812      	bhi.n	8008d66 <_realloc_r+0x5a>
 8008d40:	4621      	mov	r1, r4
 8008d42:	4640      	mov	r0, r8
 8008d44:	f7ff fc36 	bl	80085b4 <_malloc_r>
 8008d48:	4605      	mov	r5, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d0ed      	beq.n	8008d2a <_realloc_r+0x1e>
 8008d4e:	42bc      	cmp	r4, r7
 8008d50:	4622      	mov	r2, r4
 8008d52:	4631      	mov	r1, r6
 8008d54:	bf28      	it	cs
 8008d56:	463a      	movcs	r2, r7
 8008d58:	f7ff ffca 	bl	8008cf0 <memcpy>
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4640      	mov	r0, r8
 8008d60:	f7ff fbbc 	bl	80084dc <_free_r>
 8008d64:	e7e1      	b.n	8008d2a <_realloc_r+0x1e>
 8008d66:	4635      	mov	r5, r6
 8008d68:	e7df      	b.n	8008d2a <_realloc_r+0x1e>

08008d6a <_malloc_usable_size_r>:
 8008d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d6e:	1f18      	subs	r0, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bfbc      	itt	lt
 8008d74:	580b      	ldrlt	r3, [r1, r0]
 8008d76:	18c0      	addlt	r0, r0, r3
 8008d78:	4770      	bx	lr
	...

08008d7c <_init>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr

08008d88 <_fini>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	bf00      	nop
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr
