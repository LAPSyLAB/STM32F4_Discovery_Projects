
Initial_Breadboard_VIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008d94  08008d94  00018d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e50  08008e50  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e50  08008e50  00018e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e58  08008e58  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d78  200001e4  08009044  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f5c  08009044  00021f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001603b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ec  00000000  00000000  0003624f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00039b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003adf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ecf  00000000  00000000  0003bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a0d  00000000  00000000  00061def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d711a  00000000  00000000  0007b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  00152968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d7c 	.word	0x08008d7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008d7c 	.word	0x08008d7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fd01 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f86b 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f9b9 	bl	8000908 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 f923 	bl	80007e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800059a:	f000 f94f 	bl	800083c <MX_I2S3_Init>
  MX_SPI1_Init();
 800059e:	f000 f97d 	bl	800089c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f007 fa0f 	bl	80079c4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8c9 	bl	800073c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_ADC_Start(&hadc1);
 80005aa:	4827      	ldr	r0, [pc, #156]	; (8000648 <main+0xc4>)
 80005ac:	f000 fdca 	bl	8001144 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005b0:	f04f 31ff 	mov.w	r1, #4294967295
 80005b4:	4824      	ldr	r0, [pc, #144]	; (8000648 <main+0xc4>)
 80005b6:	f000 fe97 	bl	80012e8 <HAL_ADC_PollForConversion>
	    AnalogValue = HAL_ADC_GetValue(&hadc1);
 80005ba:	4823      	ldr	r0, [pc, #140]	; (8000648 <main+0xc4>)
 80005bc:	f000 ff1f 	bl	80013fe <HAL_ADC_GetValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <main+0xc8>)
 80005c6:	601a      	str	r2, [r3, #0]

	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	4820      	ldr	r0, [pc, #128]	; (8000650 <main+0xcc>)
 80005ce:	f001 fc20 	bl	8001e12 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	481e      	ldr	r0, [pc, #120]	; (8000650 <main+0xcc>)
 80005d8:	f001 fc1b 	bl	8001e12 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e0:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0xcc>)
 80005e2:	f001 fc16 	bl	8001e12 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <main+0xcc>)
 80005ec:	f001 fc11 	bl	8001e12 <HAL_GPIO_TogglePin>

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);   //External LED on PB5
 80005f0:	2120      	movs	r1, #32
 80005f2:	4818      	ldr	r0, [pc, #96]	; (8000654 <main+0xd0>)
 80005f4:	f001 fc0d 	bl	8001e12 <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4); //External Key on PB4
 80005f8:	2110      	movs	r1, #16
 80005fa:	4816      	ldr	r0, [pc, #88]	; (8000654 <main+0xd0>)
 80005fc:	f001 fbd8 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <main+0xd4>)
 8000606:	601a      	str	r2, [r3, #0]



	    snprintf (SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Analog:%d\r\n",Counter++, 1-KeyState, AnalogValue);
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <main+0xd8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	4913      	ldr	r1, [pc, #76]	; (800065c <main+0xd8>)
 8000610:	600a      	str	r2, [r1, #0]
 8000612:	4a11      	ldr	r2, [pc, #68]	; (8000658 <main+0xd4>)
 8000614:	6812      	ldr	r2, [r2, #0]
 8000616:	f1c2 0201 	rsb	r2, r2, #1
 800061a:	490c      	ldr	r1, [pc, #48]	; (800064c <main+0xc8>)
 800061c:	6809      	ldr	r1, [r1, #0]
 800061e:	9101      	str	r1, [sp, #4]
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <main+0xdc>)
 8000624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0xe0>)
 800062a:	f007 ff25 	bl	8008478 <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800062e:	480d      	ldr	r0, [pc, #52]	; (8000664 <main+0xe0>)
 8000630:	f7ff fdce 	bl	80001d0 <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	4619      	mov	r1, r3
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <main+0xe0>)
 800063a:	f007 fa81 	bl	8007b40 <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        HAL_Delay(1000);
 800063e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000642:	f000 fd17 	bl	8001074 <HAL_Delay>
  {
 8000646:	e7b0      	b.n	80005aa <main+0x26>
 8000648:	20000200 	.word	0x20000200
 800064c:	20000444 	.word	0x20000444
 8000650:	40020c00 	.word	0x40020c00
 8000654:	40020400 	.word	0x40020400
 8000658:	20000440 	.word	0x20000440
 800065c:	2000043c 	.word	0x2000043c
 8000660:	08008d94 	.word	0x08008d94
 8000664:	2000033c 	.word	0x2000033c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f007 fef6 	bl	8008468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fb12 	bl	8003d18 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fa:	f000 fa21 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fd73 	bl	8004208 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000728:	f000 fa0a 	bl	8000b40 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_ADC1_Init+0x9c>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800075a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_ADC1_Init+0x98>)
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <MX_ADC1_Init+0xa0>)
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_ADC1_Init+0x98>)
 800078a:	2201      	movs	r2, #1
 800078c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000798:	2201      	movs	r2, #1
 800079a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_ADC1_Init+0x98>)
 800079e:	f000 fc8d 	bl	80010bc <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a8:	f000 f9ca 	bl	8000b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_ADC1_Init+0x98>)
 80007be:	f000 fe2b 	bl	8001418 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c8:	f000 f9ba 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000200 	.word	0x20000200
 80007d8:	40012000 	.word	0x40012000
 80007dc:	0f000001 	.word	0x0f000001

080007e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f001 fb13 	bl	8001e48 <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 f98a 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000248 	.word	0x20000248
 8000834:	40005400 	.word	0x40005400
 8000838:	000186a0 	.word	0x000186a0

0800083c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_I2S3_Init+0x54>)
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <MX_I2S3_Init+0x58>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2S3_Init+0x54>)
 8000848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_I2S3_Init+0x54>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_I2S3_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_I2S3_Init+0x54>)
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <MX_I2S3_Init+0x5c>)
 8000866:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_I2S3_Init+0x54>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_I2S3_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_I2S3_Init+0x54>)
 800087c:	f001 fc28 	bl	80020d0 <HAL_I2S_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000886:	f000 f95b 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000029c 	.word	0x2000029c
 8000894:	40003c00 	.word	0x40003c00
 8000898:	00017700 	.word	0x00017700

0800089c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_SPI1_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_SPI1_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI1_Init+0x64>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI1_Init+0x64>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI1_Init+0x64>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_SPI1_Init+0x64>)
 80008ee:	f003 ffd7 	bl	80048a0 <HAL_SPI_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f8:	f000 f922 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200002e4 	.word	0x200002e4
 8000904:	40013000 	.word	0x40013000

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	4b81      	ldr	r3, [pc, #516]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a80      	ldr	r2, [pc, #512]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b7e      	ldr	r3, [pc, #504]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b7a      	ldr	r3, [pc, #488]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a79      	ldr	r2, [pc, #484]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b77      	ldr	r3, [pc, #476]	; (8000b28 <MX_GPIO_Init+0x220>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b73      	ldr	r3, [pc, #460]	; (8000b28 <MX_GPIO_Init+0x220>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a72      	ldr	r2, [pc, #456]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b70      	ldr	r3, [pc, #448]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b6c      	ldr	r3, [pc, #432]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a6b      	ldr	r2, [pc, #428]	; (8000b28 <MX_GPIO_Init+0x220>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b69      	ldr	r3, [pc, #420]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b65      	ldr	r3, [pc, #404]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a64      	ldr	r2, [pc, #400]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b62      	ldr	r3, [pc, #392]	; (8000b28 <MX_GPIO_Init+0x220>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b5e      	ldr	r3, [pc, #376]	; (8000b28 <MX_GPIO_Init+0x220>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a5d      	ldr	r2, [pc, #372]	; (8000b28 <MX_GPIO_Init+0x220>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b5b      	ldr	r3, [pc, #364]	; (8000b28 <MX_GPIO_Init+0x220>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	4858      	ldr	r0, [pc, #352]	; (8000b2c <MX_GPIO_Init+0x224>)
 80009cc:	f001 fa08 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2101      	movs	r1, #1
 80009d4:	4856      	ldr	r0, [pc, #344]	; (8000b30 <MX_GPIO_Init+0x228>)
 80009d6:	f001 fa03 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009da:	2200      	movs	r2, #0
 80009dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009e0:	4854      	ldr	r0, [pc, #336]	; (8000b34 <MX_GPIO_Init+0x22c>)
 80009e2:	f001 f9fd 	bl	8001de0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2120      	movs	r1, #32
 80009ea:	4853      	ldr	r0, [pc, #332]	; (8000b38 <MX_GPIO_Init+0x230>)
 80009ec:	f001 f9f8 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009f0:	2308      	movs	r3, #8
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4849      	ldr	r0, [pc, #292]	; (8000b2c <MX_GPIO_Init+0x224>)
 8000a08:	f001 f836 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4843      	ldr	r0, [pc, #268]	; (8000b30 <MX_GPIO_Init+0x228>)
 8000a24:	f001 f828 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a38:	2305      	movs	r3, #5
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	483b      	ldr	r0, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x228>)
 8000a44:	f001 f818 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a4c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4837      	ldr	r0, [pc, #220]	; (8000b3c <MX_GPIO_Init+0x234>)
 8000a5e:	f001 f80b 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4831      	ldr	r0, [pc, #196]	; (8000b3c <MX_GPIO_Init+0x234>)
 8000a76:	f000 ffff 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB4 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_4;
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	482a      	ldr	r0, [pc, #168]	; (8000b38 <MX_GPIO_Init+0x230>)
 8000a8e:	f000 fff3 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4822      	ldr	r0, [pc, #136]	; (8000b38 <MX_GPIO_Init+0x230>)
 8000ab0:	f000 ffe2 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ab4:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ab8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4819      	ldr	r0, [pc, #100]	; (8000b34 <MX_GPIO_Init+0x22c>)
 8000ace:	f000 ffd3 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_GPIO_Init+0x22c>)
 8000ae6:	f000 ffc7 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aea:	2320      	movs	r3, #32
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_GPIO_Init+0x230>)
 8000b02:	f000 ffb9 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_GPIO_Init+0x224>)
 8000b1c:	f000 ffac 	bl	8001a78 <HAL_GPIO_Init>

}
 8000b20:	bf00      	nop
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40020000 	.word	0x40020000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b8a:	2007      	movs	r0, #7
 8000b8c:	f000 ff32 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_ADC_MspInit+0x7c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d127      	bne.n	8000c0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_ADC_MspInit+0x80>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <HAL_ADC_MspInit+0x80>)
 8000bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_ADC_MspInit+0x80>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_ADC_MspInit+0x80>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_ADC_MspInit+0x80>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_ADC_MspInit+0x80>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_ADC_MspInit+0x84>)
 8000c0a:	f000 ff35 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12c      	bne.n	8000ca0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c62:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c68:	2312      	movs	r3, #18
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c74:	2304      	movs	r3, #4
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <HAL_I2C_MspInit+0x8c>)
 8000c80:	f000 fefa 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <HAL_I2S_MspInit+0xf0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d15a      	bne.n	8000d9a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ce8:	23c0      	movs	r3, #192	; 0xc0
 8000cea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 fc93 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d00:	f7ff ff1e 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_I2S_MspInit+0xf4>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d58:	2310      	movs	r3, #16
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d68:	2306      	movs	r3, #6
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <HAL_I2S_MspInit+0xf8>)
 8000d74:	f000 fe80 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d78:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <HAL_I2S_MspInit+0xfc>)
 8000d96:	f000 fe6f 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3738      	adds	r7, #56	; 0x38
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40003c00 	.word	0x40003c00
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800

08000db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_SPI_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12b      	bne.n	8000e2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e0e:	23e0      	movs	r3, #224	; 0xe0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_SPI_MspInit+0x8c>)
 8000e2a:	f000 fe25 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40013000 	.word	0x40013000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f8d0 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <OTG_FS_IRQHandler+0x10>)
 8000e9e:	f001 ff07 	bl	8002cb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20001924 	.word	0x20001924

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f007 fa9a 	bl	8008414 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20020000 	.word	0x20020000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	20000448 	.word	0x20000448
 8000f14:	20001f60 	.word	0x20001f60

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f007 fa59 	bl	8008420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fb09 	bl	8000584 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000f80:	08008e60 	.word	0x08008e60
  ldr r2, =_sbss
 8000f84:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000f88:	20001f5c 	.word	0x20001f5c

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fd1b 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fdc2 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fd33 	bl	8001a5e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 fcfb 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	2000044c 	.word	0x2000044c

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000044c 	.word	0x2000044c

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e033      	b.n	800113a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fd5e 	bl	8000b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d118      	bne.n	800112c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001102:	f023 0302 	bic.w	r3, r3, #2
 8001106:	f043 0202 	orr.w	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 faa4 	bl	800165c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
 800112a:	e001      	b.n	8001130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001156:	2b01      	cmp	r3, #1
 8001158:	d101      	bne.n	800115e <HAL_ADC_Start+0x1a>
 800115a:	2302      	movs	r3, #2
 800115c:	e0b2      	b.n	80012c4 <HAL_ADC_Start+0x180>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b01      	cmp	r3, #1
 8001172:	d018      	beq.n	80011a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <HAL_ADC_Start+0x18c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_ADC_Start+0x190>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9a      	lsrs	r2, r3, #18
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001198:	e002      	b.n	80011a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3b01      	subs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f9      	bne.n	800119a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d17a      	bne.n	80012aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f2:	d106      	bne.n	8001202 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f023 0206 	bic.w	r2, r3, #6
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001200:	e002      	b.n	8001208 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <HAL_ADC_Start+0x194>)
 8001212:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800121c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2b00      	cmp	r3, #0
 8001228:	d12a      	bne.n	8001280 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <HAL_ADC_Start+0x198>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d015      	beq.n	8001260 <HAL_ADC_Start+0x11c>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <HAL_ADC_Start+0x19c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d105      	bne.n	800124a <HAL_ADC_Start+0x106>
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_ADC_Start+0x194>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <HAL_ADC_Start+0x1a0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d136      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_ADC_Start+0x194>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	d130      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d129      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	e020      	b.n	80012c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_ADC_Start+0x198>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d11b      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d114      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	e00b      	b.n	80012c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f043 0210 	orr.w	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	40012300 	.word	0x40012300
 80012dc:	40012000 	.word	0x40012000
 80012e0:	40012100 	.word	0x40012100
 80012e4:	40012200 	.word	0x40012200

080012e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001304:	d113      	bne.n	800132e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001314:	d10b      	bne.n	800132e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0220 	orr.w	r2, r3, #32
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e063      	b.n	80013f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800132e:	f7ff fe95 	bl	800105c <HAL_GetTick>
 8001332:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001334:	e021      	b.n	800137a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d01d      	beq.n	800137a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_ADC_PollForConversion+0x6c>
 8001344:	f7ff fe8a 	bl	800105c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d212      	bcs.n	800137a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b02      	cmp	r3, #2
 8001360:	d00b      	beq.n	800137a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f043 0204 	orr.w	r2, r3, #4
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e03d      	b.n	80013f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d1d6      	bne.n	8001336 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0212 	mvn.w	r2, #18
 8001390:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d123      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d11f      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d111      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1c>
 8001430:	2302      	movs	r3, #2
 8001432:	e105      	b.n	8001640 <HAL_ADC_ConfigChannel+0x228>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b09      	cmp	r3, #9
 8001442:	d925      	bls.n	8001490 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68d9      	ldr	r1, [r3, #12]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	3b1e      	subs	r3, #30
 800145a:	2207      	movs	r2, #7
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43da      	mvns	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	400a      	ands	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68d9      	ldr	r1, [r3, #12]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b29b      	uxth	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	4603      	mov	r3, r0
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4403      	add	r3, r0
 8001482:	3b1e      	subs	r3, #30
 8001484:	409a      	lsls	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	e022      	b.n	80014d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	2207      	movs	r2, #7
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	400a      	ands	r2, r1
 80014b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6919      	ldr	r1, [r3, #16]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4403      	add	r3, r0
 80014cc:	409a      	lsls	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d824      	bhi.n	8001528 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	3b05      	subs	r3, #5
 80014f0:	221f      	movs	r2, #31
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	400a      	ands	r2, r1
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3b05      	subs	r3, #5
 800151a:	fa00 f203 	lsl.w	r2, r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
 8001526:	e04c      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d824      	bhi.n	800157a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3b23      	subs	r3, #35	; 0x23
 8001542:	221f      	movs	r2, #31
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43da      	mvns	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	400a      	ands	r2, r1
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b23      	subs	r3, #35	; 0x23
 800156c:	fa00 f203 	lsl.w	r2, r0, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
 8001578:	e023      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	3b41      	subs	r3, #65	; 0x41
 800158c:	221f      	movs	r2, #31
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	400a      	ands	r2, r1
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3b41      	subs	r3, #65	; 0x41
 80015b6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_ADC_ConfigChannel+0x234>)
 80015c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_ADC_ConfigChannel+0x238>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d109      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1cc>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b12      	cmp	r3, #18
 80015d6:	d105      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_ADC_ConfigChannel+0x238>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d123      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x21e>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d003      	beq.n	80015fe <HAL_ADC_ConfigChannel+0x1e6>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b11      	cmp	r3, #17
 80015fc:	d11b      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b10      	cmp	r3, #16
 8001610:	d111      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_ADC_ConfigChannel+0x23c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_ADC_ConfigChannel+0x240>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0c9a      	lsrs	r2, r3, #18
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001628:	e002      	b.n	8001630 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3b01      	subs	r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f9      	bne.n	800162a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40012300 	.word	0x40012300
 8001650:	40012000 	.word	0x40012000
 8001654:	20000000 	.word	0x20000000
 8001658:	431bde83 	.word	0x431bde83

0800165c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001664:	4b79      	ldr	r3, [pc, #484]	; (800184c <ADC_Init+0x1f0>)
 8001666:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	431a      	orrs	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	021a      	lsls	r2, r3, #8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6899      	ldr	r1, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	4a58      	ldr	r2, [pc, #352]	; (8001850 <ADC_Init+0x1f4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d022      	beq.n	800173a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	e00f      	b.n	800175a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001758:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0202 	bic.w	r2, r2, #2
 8001768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7e1b      	ldrb	r3, [r3, #24]
 8001774:	005a      	lsls	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01b      	beq.n	80017c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001796:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6859      	ldr	r1, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	3b01      	subs	r3, #1
 80017b4:	035a      	lsls	r2, r3, #13
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e007      	b.n	80017d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	051a      	lsls	r2, r3, #20
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6899      	ldr	r1, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001812:	025a      	lsls	r2, r3, #9
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6899      	ldr	r1, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	029a      	lsls	r2, r3, #10
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	609a      	str	r2, [r3, #8]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40012300 	.word	0x40012300
 8001850:	0f000001 	.word	0x0f000001

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e16b      	b.n	8001d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 815a 	bne.w	8001d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80b4 	beq.w	8001d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a5f      	ldr	r2, [pc, #380]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a5b      	ldr	r2, [pc, #364]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_GPIO_Init+0x314>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a51      	ldr	r2, [pc, #324]	; (8001d90 <HAL_GPIO_Init+0x318>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d025      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a50      	ldr	r2, [pc, #320]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <HAL_GPIO_Init+0x320>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4e      	ldr	r2, [pc, #312]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x212>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_GPIO_Init+0x330>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x20a>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00e      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00c      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e00a      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce2:	4a32      	ldr	r2, [pc, #200]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d60:	4a12      	ldr	r2, [pc, #72]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f ae90 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40021c00 	.word	0x40021c00
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dfc:	e003      	b.n	8001e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	400b      	ands	r3, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e12b      	b.n	80020b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fed8 	bl	8000c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	; 0x24
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eac:	f002 fba4 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 8001eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a81      	ldr	r2, [pc, #516]	; (80020bc <HAL_I2C_Init+0x274>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d807      	bhi.n	8001ecc <HAL_I2C_Init+0x84>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a80      	ldr	r2, [pc, #512]	; (80020c0 <HAL_I2C_Init+0x278>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf94      	ite	ls
 8001ec4:	2301      	movls	r3, #1
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e006      	b.n	8001eda <HAL_I2C_Init+0x92>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a7d      	ldr	r2, [pc, #500]	; (80020c4 <HAL_I2C_Init+0x27c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bf94      	ite	ls
 8001ed4:	2301      	movls	r3, #1
 8001ed6:	2300      	movhi	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0e7      	b.n	80020b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a78      	ldr	r2, [pc, #480]	; (80020c8 <HAL_I2C_Init+0x280>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0c9b      	lsrs	r3, r3, #18
 8001eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_I2C_Init+0x274>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d802      	bhi.n	8001f1c <HAL_I2C_Init+0xd4>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	e009      	b.n	8001f30 <HAL_I2C_Init+0xe8>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a69      	ldr	r2, [pc, #420]	; (80020cc <HAL_I2C_Init+0x284>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	099b      	lsrs	r3, r3, #6
 8001f2e:	3301      	adds	r3, #1
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	495c      	ldr	r1, [pc, #368]	; (80020bc <HAL_I2C_Init+0x274>)
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d819      	bhi.n	8001f84 <HAL_I2C_Init+0x13c>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e59      	subs	r1, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f64:	400b      	ands	r3, r1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_I2C_Init+0x138>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1e59      	subs	r1, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7e:	e051      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e04f      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d111      	bne.n	8001fb0 <HAL_I2C_Init+0x168>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	440b      	add	r3, r1
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	e012      	b.n	8001fd6 <HAL_I2C_Init+0x18e>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e58      	subs	r0, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	0099      	lsls	r1, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Init+0x196>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e022      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10e      	bne.n	8002004 <HAL_I2C_Init+0x1bc>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e58      	subs	r0, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002002:	e00f      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	0099      	lsls	r1, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	6809      	ldr	r1, [r1, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6911      	ldr	r1, [r2, #16]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68d2      	ldr	r2, [r2, #12]
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	430b      	orrs	r3, r1
 8002066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	000186a0 	.word	0x000186a0
 80020c0:	001e847f 	.word	0x001e847f
 80020c4:	003d08ff 	.word	0x003d08ff
 80020c8:	431bde83 	.word	0x431bde83
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e128      	b.n	8002334 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a90      	ldr	r2, [pc, #576]	; (800233c <HAL_I2S_Init+0x26c>)
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe fdd9 	bl	8000cb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002118:	f023 030f 	bic.w	r3, r3, #15
 800211c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2202      	movs	r2, #2
 8002124:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d060      	beq.n	80021f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002136:	2310      	movs	r3, #16
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e001      	b.n	8002140 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b20      	cmp	r3, #32
 8002146:	d802      	bhi.n	800214e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800214e:	2001      	movs	r0, #1
 8002150:	f002 fb48 	bl	80047e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002154:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215e:	d125      	bne.n	80021ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	3305      	adds	r3, #5
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	e01f      	b.n	80021ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	fbb2 f2f3 	udiv	r2, r2, r3
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	3305      	adds	r3, #5
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e00e      	b.n	80021ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	3305      	adds	r3, #5
 80021c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4a5c      	ldr	r2, [pc, #368]	; (8002340 <HAL_I2S_Init+0x270>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	e003      	b.n	80021f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d902      	bls.n	8002204 <HAL_I2S_Init+0x134>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2bff      	cmp	r3, #255	; 0xff
 8002202:	d907      	bls.n	8002214 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	f043 0210 	orr.w	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e08f      	b.n	8002334 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	ea42 0103 	orr.w	r1, r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	430a      	orrs	r2, r1
 8002226:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002232:	f023 030f 	bic.w	r3, r3, #15
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6851      	ldr	r1, [r2, #4]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68d2      	ldr	r2, [r2, #12]
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6992      	ldr	r2, [r2, #24]
 800224a:	430a      	orrs	r2, r1
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002256:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d161      	bne.n	8002324 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a38      	ldr	r2, [pc, #224]	; (8002344 <HAL_I2S_Init+0x274>)
 8002264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a37      	ldr	r2, [pc, #220]	; (8002348 <HAL_I2S_Init+0x278>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_I2S_Init+0x1a4>
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_I2S_Init+0x27c>)
 8002272:	e001      	b.n	8002278 <HAL_I2S_Init+0x1a8>
 8002274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	4932      	ldr	r1, [pc, #200]	; (8002348 <HAL_I2S_Init+0x278>)
 8002280:	428a      	cmp	r2, r1
 8002282:	d101      	bne.n	8002288 <HAL_I2S_Init+0x1b8>
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <HAL_I2S_Init+0x27c>)
 8002286:	e001      	b.n	800228c <HAL_I2S_Init+0x1bc>
 8002288:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800228c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002290:	f023 030f 	bic.w	r3, r3, #15
 8002294:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <HAL_I2S_Init+0x278>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d101      	bne.n	80022a4 <HAL_I2S_Init+0x1d4>
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_I2S_Init+0x27c>)
 80022a2:	e001      	b.n	80022a8 <HAL_I2S_Init+0x1d8>
 80022a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a8:	2202      	movs	r2, #2
 80022aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_I2S_Init+0x278>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_I2S_Init+0x1ea>
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_I2S_Init+0x27c>)
 80022b8:	e001      	b.n	80022be <HAL_I2S_Init+0x1ee>
 80022ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ca:	d003      	beq.n	80022d4 <HAL_I2S_Init+0x204>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d103      	bne.n	80022dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e001      	b.n	80022e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022fe:	4313      	orrs	r3, r2
 8002300:	b29a      	uxth	r2, r3
 8002302:	897b      	ldrh	r3, [r7, #10]
 8002304:	4313      	orrs	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800230c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_I2S_Init+0x278>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_I2S_Init+0x24c>
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_I2S_Init+0x27c>)
 800231a:	e001      	b.n	8002320 <HAL_I2S_Init+0x250>
 800231c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002320:	897a      	ldrh	r2, [r7, #10]
 8002322:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	08002447 	.word	0x08002447
 8002340:	cccccccd 	.word	0xcccccccd
 8002344:	0800255d 	.word	0x0800255d
 8002348:	40003800 	.word	0x40003800
 800234c:	40003400 	.word	0x40003400

08002350 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c9a      	adds	r2, r3, #2
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10e      	bne.n	80023e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffb8 	bl	8002350 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	b292      	uxth	r2, r2
 80023fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10e      	bne.n	800243e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800242e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff93 	bl	8002364 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b04      	cmp	r3, #4
 8002460:	d13a      	bne.n	80024d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d109      	bne.n	8002480 <I2S_IRQHandler+0x3a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d102      	bne.n	8002480 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffb4 	bl	80023e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d126      	bne.n	80024d8 <I2S_IRQHandler+0x92>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b20      	cmp	r3, #32
 8002496:	d11f      	bne.n	80024d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ff50 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d136      	bne.n	8002552 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d109      	bne.n	8002502 <I2S_IRQHandler+0xbc>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d102      	bne.n	8002502 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff45 	bl	800238c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d122      	bne.n	8002552 <I2S_IRQHandler+0x10c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b20      	cmp	r3, #32
 8002518:	d11b      	bne.n	8002552 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002528:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff13 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a92      	ldr	r2, [pc, #584]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002576:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002578:	e001      	b.n	800257e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800257a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a8b      	ldr	r2, [pc, #556]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002594:	4b8a      	ldr	r3, [pc, #552]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002596:	e001      	b.n	800259c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a8:	d004      	beq.n	80025b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 8099 	bne.w	80026e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d107      	bne.n	80025ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f925 	bl	8002818 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f9c8 	bl	8002978 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d13a      	bne.n	8002668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d035      	beq.n	8002668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a6e      	ldr	r2, [pc, #440]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002606:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002608:	e001      	b.n	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800260a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4969      	ldr	r1, [pc, #420]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002616:	428b      	cmp	r3, r1
 8002618:	d101      	bne.n	800261e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800261a:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800261c:	e001      	b.n	8002622 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800261e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002626:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002636:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0202 	orr.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fe88 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b08      	cmp	r3, #8
 8002670:	f040 80c3 	bne.w	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80bd 	beq.w	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800268e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a49      	ldr	r2, [pc, #292]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800269c:	e001      	b.n	80026a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800269e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4944      	ldr	r1, [pc, #272]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026aa:	428b      	cmp	r3, r1
 80026ac:	d101      	bne.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80026ae:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026b0:	e001      	b.n	80026b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80026b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f043 0204 	orr.w	r2, r3, #4
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fe4a 	bl	8002378 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026e4:	e089      	b.n	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d107      	bne.n	8002700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8be 	bl	800287c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f8fd 	bl	8002914 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d12f      	bne.n	8002784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02a      	beq.n	8002784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800273c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800274a:	e001      	b.n	8002750 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800274c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4919      	ldr	r1, [pc, #100]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002758:	428b      	cmp	r3, r1
 800275a:	d101      	bne.n	8002760 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800275e:	e001      	b.n	8002764 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002768:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fdfa 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d136      	bne.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d031      	beq.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027a4:	e001      	b.n	80027aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80027a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4902      	ldr	r1, [pc, #8]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027b2:	428b      	cmp	r3, r1
 80027b4:	d106      	bne.n	80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80027b6:	4b02      	ldr	r3, [pc, #8]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027b8:	e006      	b.n	80027c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80027ba:	bf00      	nop
 80027bc:	40003800 	.word	0x40003800
 80027c0:	40003400 	.word	0x40003400
 80027c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f043 0204 	orr.w	r2, r3, #4
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff fdc0 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027f8:	e000      	b.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027fa:	bf00      	nop
}
 80027fc:	bf00      	nop
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	1c99      	adds	r1, r3, #2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6251      	str	r1, [r2, #36]	; 0x24
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d113      	bne.n	8002872 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002858:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ffc9 	bl	8002804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c99      	adds	r1, r3, #2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6251      	str	r1, [r2, #36]	; 0x24
 800288e:	8819      	ldrh	r1, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1d      	ldr	r2, [pc, #116]	; (800290c <I2SEx_TxISR_I2SExt+0x90>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <I2SEx_TxISR_I2SExt+0x22>
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <I2SEx_TxISR_I2SExt+0x94>)
 800289c:	e001      	b.n	80028a2 <I2SEx_TxISR_I2SExt+0x26>
 800289e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a2:	460a      	mov	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d121      	bne.n	8002902 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <I2SEx_TxISR_I2SExt+0x90>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <I2SEx_TxISR_I2SExt+0x50>
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <I2SEx_TxISR_I2SExt+0x94>)
 80028ca:	e001      	b.n	80028d0 <I2SEx_TxISR_I2SExt+0x54>
 80028cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	490d      	ldr	r1, [pc, #52]	; (800290c <I2SEx_TxISR_I2SExt+0x90>)
 80028d8:	428b      	cmp	r3, r1
 80028da:	d101      	bne.n	80028e0 <I2SEx_TxISR_I2SExt+0x64>
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <I2SEx_TxISR_I2SExt+0x94>)
 80028de:	e001      	b.n	80028e4 <I2SEx_TxISR_I2SExt+0x68>
 80028e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff81 	bl	8002804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40003800 	.word	0x40003800
 8002910:	40003400 	.word	0x40003400

08002914 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68d8      	ldr	r0, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	1c99      	adds	r1, r3, #2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800292c:	b282      	uxth	r2, r0
 800292e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d113      	bne.n	8002970 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002956:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ff4a 	bl	8002804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a20      	ldr	r2, [pc, #128]	; (8002a08 <I2SEx_RxISR_I2SExt+0x90>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <I2SEx_RxISR_I2SExt+0x16>
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <I2SEx_RxISR_I2SExt+0x94>)
 800298c:	e001      	b.n	8002992 <I2SEx_RxISR_I2SExt+0x1a>
 800298e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002992:	68d8      	ldr	r0, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	1c99      	adds	r1, r3, #2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800299e:	b282      	uxth	r2, r0
 80029a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d121      	bne.n	80029fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <I2SEx_RxISR_I2SExt+0x90>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <I2SEx_RxISR_I2SExt+0x50>
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <I2SEx_RxISR_I2SExt+0x94>)
 80029c6:	e001      	b.n	80029cc <I2SEx_RxISR_I2SExt+0x54>
 80029c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	490d      	ldr	r1, [pc, #52]	; (8002a08 <I2SEx_RxISR_I2SExt+0x90>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d101      	bne.n	80029dc <I2SEx_RxISR_I2SExt+0x64>
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <I2SEx_RxISR_I2SExt+0x94>)
 80029da:	e001      	b.n	80029e0 <I2SEx_RxISR_I2SExt+0x68>
 80029dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff03 	bl	8002804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40003800 	.word	0x40003800
 8002a0c:	40003400 	.word	0x40003400

08002a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	b08f      	sub	sp, #60	; 0x3c
 8002a14:	af0a      	add	r7, sp, #40	; 0x28
 8002a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e10f      	b.n	8002c42 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f005 f9c7 	bl	8007dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2203      	movs	r2, #3
 8002a46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 f8ba 	bl	8004bda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	687e      	ldr	r6, [r7, #4]
 8002a6e:	466d      	mov	r5, sp
 8002a70:	f106 0410 	add.w	r4, r6, #16
 8002a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a84:	1d33      	adds	r3, r6, #4
 8002a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a88:	6838      	ldr	r0, [r7, #0]
 8002a8a:	f001 ff92 	bl	80049b2 <USB_CoreInit>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0d0      	b.n	8002c42 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 f8a8 	bl	8004bfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e04a      	b.n	8002b48 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	333d      	adds	r3, #61	; 0x3d
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	333c      	adds	r3, #60	; 0x3c
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	b298      	uxth	r0, r3
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3342      	adds	r3, #66	; 0x42
 8002aee:	4602      	mov	r2, r0
 8002af0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	333f      	adds	r3, #63	; 0x3f
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3344      	adds	r3, #68	; 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3348      	adds	r3, #72	; 0x48
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3350      	adds	r3, #80	; 0x50
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	3301      	adds	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d3af      	bcc.n	8002ab2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e044      	b.n	8002be2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	3301      	adds	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3b5      	bcc.n	8002b58 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	687e      	ldr	r6, [r7, #4]
 8002bf4:	466d      	mov	r5, sp
 8002bf6:	f106 0410 	add.w	r4, r6, #16
 8002bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c06:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c0a:	1d33      	adds	r3, r6, #4
 8002c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	f002 f840 	bl	8004c94 <USB_DevInit>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00d      	b.n	8002c42 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 f8bc 	bl	8005db8 <USB_DevDisconnect>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_PCD_Start+0x1c>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e020      	b.n	8002ca8 <HAL_PCD_Start+0x5e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d109      	bne.n	8002c8a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d005      	beq.n	8002c8a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 ff92 	bl	8004bb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 f86c 	bl	8005d76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b08d      	sub	sp, #52	; 0x34
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 f92a 	bl	8005f20 <USB_GetMode>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 839d 	bne.w	800340e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 f88e 	bl	8005dfa <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8393 	beq.w	800340c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 f885 	bl	8005dfa <USB_ReadInterrupts>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d107      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f002 0202 	and.w	r2, r2, #2
 8002d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 f873 	bl	8005dfa <USB_ReadInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d161      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0210 	bic.w	r2, r2, #16
 8002d2c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	0c5b      	lsrs	r3, r3, #17
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d124      	bne.n	8002da4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d035      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6a38      	ldr	r0, [r7, #32]
 8002d7a:	f002 feaa 	bl	8005ad2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8a:	441a      	add	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d9c:	441a      	add	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	619a      	str	r2, [r3, #24]
 8002da2:	e016      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	0c5b      	lsrs	r3, r3, #17
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d110      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002db6:	2208      	movs	r2, #8
 8002db8:	4619      	mov	r1, r3
 8002dba:	6a38      	ldr	r0, [r7, #32]
 8002dbc:	f002 fe89 	bl	8005ad2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dcc:	441a      	add	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0210 	orr.w	r2, r2, #16
 8002de0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 f807 	bl	8005dfa <USB_ReadInterrupts>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002df6:	d16e      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 f80d 	bl	8005e20 <USB_ReadDevAllOutEpInterrupt>
 8002e06:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e08:	e062      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d057      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 f832 	bl	8005e88 <USB_ReadDevOutEPInterrupt>
 8002e24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2301      	movs	r3, #1
 8002e40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fdb1 	bl	80039ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00c      	beq.n	8002e6e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	2308      	movs	r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 feab 	bl	8003bc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e84:	461a      	mov	r2, r3
 8002e86:	2310      	movs	r3, #16
 8002e88:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d199      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 ff8d 	bl	8005dfa <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eea:	f040 80c0 	bne.w	800306e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 ffae 	bl	8005e54 <USB_ReadDevAllInEpInterrupt>
 8002ef8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002efe:	e0b2      	b.n	8003066 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80a7 	beq.w	800305a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 ffd4 	bl	8005ec4 <USB_ReadDevInEPInterrupt>
 8002f1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d057      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	2201      	movs	r2, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69f9      	ldr	r1, [r7, #28]
 8002f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f48:	4013      	ands	r3, r2
 8002f4a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d132      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3348      	adds	r3, #72	; 0x48
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4403      	add	r3, r0
 8002f86:	3344      	adds	r3, #68	; 0x44
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4419      	add	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4403      	add	r3, r0
 8002f9a:	3348      	adds	r3, #72	; 0x48
 8002f9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d113      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x31c>
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3350      	adds	r3, #80	; 0x50
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d108      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	f002 ffdc 	bl	8005f84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 ff8b 	bl	8007eee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	2310      	movs	r3, #16
 800300e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003042:	461a      	mov	r2, r3
 8003044:	2302      	movs	r3, #2
 8003046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fc1b 	bl	8003890 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	3301      	adds	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	f47f af49 	bne.w	8002f00 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fec1 	bl	8005dfa <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800307e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003082:	d122      	bne.n	80030ca <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d108      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030aa:	2100      	movs	r1, #0
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fe27 	bl	8003d00 <HAL_PCDEx_LPM_Callback>
 80030b2:	e002      	b.n	80030ba <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f004 ff91 	bl	8007fdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 fe93 	bl	8005dfa <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	d112      	bne.n	8003106 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d102      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f004 ff4d 	bl	8007f90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003104:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f002 fe75 	bl	8005dfa <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	f040 80c7 	bne.w	80032ac <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2110      	movs	r1, #16
 8003138:	4618      	mov	r0, r3
 800313a:	f001 ff0f 	bl	8004f5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003142:	e056      	b.n	80031f2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003150:	461a      	mov	r2, r3
 8003152:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003156:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003168:	0151      	lsls	r1, r2, #5
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	440a      	add	r2, r1
 800316e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003176:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003188:	0151      	lsls	r1, r2, #5
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	440a      	add	r2, r1
 800318e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003196:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	461a      	mov	r2, r3
 80031a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031bc:	0151      	lsls	r1, r2, #5
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	440a      	add	r2, r1
 80031c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031dc:	0151      	lsls	r1, r2, #5
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	440a      	add	r2, r1
 80031e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	3301      	adds	r3, #1
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d3a3      	bcc.n	8003144 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800320a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800320e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003228:	f043 030b 	orr.w	r3, r3, #11
 800322c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323e:	f043 030b 	orr.w	r3, r3, #11
 8003242:	6453      	str	r3, [r2, #68]	; 0x44
 8003244:	e015      	b.n	8003272 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003258:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800325c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326c:	f043 030b 	orr.w	r3, r3, #11
 8003270:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003280:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003284:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003296:	461a      	mov	r2, r3
 8003298:	f002 fe74 	bl	8005f84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f002 fda2 	bl	8005dfa <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c0:	d124      	bne.n	800330c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fe38 	bl	8005f3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 fea0 	bl	8005016 <USB_GetDevSpeed>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681c      	ldr	r4, [r3, #0]
 80032e2:	f001 f97d 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 80032e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	4620      	mov	r0, r4
 80032f2:	f001 fbbf 	bl	8004a74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f004 fe21 	bl	8007f3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800330a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f002 fd72 	bl	8005dfa <USB_ReadInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d10a      	bne.n	8003336 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f004 fdfe 	bl	8007f22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f002 0208 	and.w	r2, r2, #8
 8003334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f002 fd5d 	bl	8005dfa <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334a:	d10f      	bne.n	800336c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f004 fe60 	bl	800801c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800336a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f002 fd42 	bl	8005dfa <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003380:	d10f      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f004 fe33 	bl	8007ff8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fd27 	bl	8005dfa <USB_ReadInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b6:	d10a      	bne.n	80033ce <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f004 fe41 	bl	8008040 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 fd11 	bl	8005dfa <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d115      	bne.n	800340e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f004 fe31 	bl	800805c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	e000      	b.n	800340e <HAL_PCD_IRQHandler+0x75e>
      return;
 800340c:	bf00      	nop
    }
  }
}
 800340e:	3734      	adds	r7, #52	; 0x34
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}

08003414 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_PCD_SetAddress+0x1a>
 800342a:	2302      	movs	r3, #2
 800342c:	e013      	b.n	8003456 <HAL_PCD_SetAddress+0x42>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f002 fc6f 	bl	8005d2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	4608      	mov	r0, r1
 8003468:	4611      	mov	r1, r2
 800346a:	461a      	mov	r2, r3
 800346c:	4603      	mov	r3, r0
 800346e:	70fb      	strb	r3, [r7, #3]
 8003470:	460b      	mov	r3, r1
 8003472:	803b      	strh	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800347c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	da0f      	bge.n	80034a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	3338      	adds	r3, #56	; 0x38
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	3304      	adds	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	705a      	strb	r2, [r3, #1]
 80034a2:	e00f      	b.n	80034c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	3304      	adds	r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034d0:	883a      	ldrh	r2, [r7, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	78ba      	ldrb	r2, [r7, #2]
 80034da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034ee:	78bb      	ldrb	r3, [r7, #2]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d102      	bne.n	80034fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_PCD_EP_Open+0xaa>
 8003504:	2302      	movs	r3, #2
 8003506:	e00e      	b.n	8003526 <HAL_PCD_EP_Open+0xc8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	f001 fda2 	bl	8005060 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003524:	7afb      	ldrb	r3, [r7, #11]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800353a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353e:	2b00      	cmp	r3, #0
 8003540:	da0f      	bge.n	8003562 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	3338      	adds	r3, #56	; 0x38
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	705a      	strb	r2, [r3, #1]
 8003560:	e00f      	b.n	8003582 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_PCD_EP_Close+0x6e>
 8003598:	2302      	movs	r3, #2
 800359a:	e00e      	b.n	80035ba <HAL_PCD_EP_Close+0x8c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 fde0 	bl	8005170 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b086      	sub	sp, #24
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	460b      	mov	r3, r1
 80035d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	7afb      	ldrb	r3, [r7, #11]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	3304      	adds	r3, #4
 80035ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	b2da      	uxtb	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361e:	7afb      	ldrb	r3, [r7, #11]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	f002 f8bb 	bl	80057b0 <USB_EP0StartXfer>
 800363a:	e008      	b.n	800364e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	f001 fe6d 	bl	8005328 <USB_EPStartXfer>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	460b      	mov	r3, r1
 8003696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	3338      	adds	r3, #56	; 0x38
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2201      	movs	r2, #1
 80036c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c8:	7afb      	ldrb	r3, [r7, #11]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d102      	bne.n	80036e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036e2:	7afb      	ldrb	r3, [r7, #11]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	6979      	ldr	r1, [r7, #20]
 80036fa:	f002 f859 	bl	80057b0 <USB_EP0StartXfer>
 80036fe:	e008      	b.n	8003712 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	f001 fe0b 	bl	8005328 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d901      	bls.n	800373a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e050      	b.n	80037dc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800373a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800373e:	2b00      	cmp	r3, #0
 8003740:	da0f      	bge.n	8003762 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	3338      	adds	r3, #56	; 0x38
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	3304      	adds	r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	705a      	strb	r2, [r3, #1]
 8003760:	e00d      	b.n	800377e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_PCD_EP_SetStall+0x82>
 800379a:	2302      	movs	r3, #2
 800379c:	e01e      	b.n	80037dc <HAL_PCD_EP_SetStall+0xc0>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f002 f9e8 	bl	8005b82 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	b2d9      	uxtb	r1, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037cc:	461a      	mov	r2, r3
 80037ce:	f002 fbd9 	bl	8005f84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d901      	bls.n	8003802 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e042      	b.n	8003888 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da0f      	bge.n	800382a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	705a      	strb	r2, [r3, #1]
 8003828:	e00f      	b.n	800384a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_PCD_EP_ClrStall+0x86>
 8003866:	2302      	movs	r3, #2
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_ClrStall+0xa4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	4618      	mov	r0, r3
 800387a:	f002 f9f0 	bl	8005c5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3338      	adds	r3, #56	; 0x38
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	3304      	adds	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d901      	bls.n	80038c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e06c      	b.n	80039a2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d902      	bls.n	80038e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3303      	adds	r3, #3
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ec:	e02b      	b.n	8003946 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	429a      	cmp	r2, r3
 8003902:	d902      	bls.n	800390a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3303      	adds	r3, #3
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68d9      	ldr	r1, [r3, #12]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003922:	b2db      	uxtb	r3, r3
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4603      	mov	r3, r0
 8003928:	6978      	ldr	r0, [r7, #20]
 800392a:	f002 f894 	bl	8005a56 <USB_WritePacket>

    ep->xfer_buff  += len;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	441a      	add	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	b29b      	uxth	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	429a      	cmp	r2, r3
 800395a:	d809      	bhi.n	8003970 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003964:	429a      	cmp	r2, r3
 8003966:	d203      	bcs.n	8003970 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1be      	bne.n	80038ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	d811      	bhi.n	80039a0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2201      	movs	r2, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	43db      	mvns	r3, r3
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800399c:	4013      	ands	r3, r2
 800399e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	333c      	adds	r3, #60	; 0x3c
 80039c4:	3304      	adds	r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f040 80a0 	bne.w	8003b24 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d015      	beq.n	8003a1a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a72      	ldr	r2, [pc, #456]	; (8003bbc <PCD_EP_OutXfrComplete_int+0x210>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f240 80dd 	bls.w	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80d7 	beq.w	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	6093      	str	r3, [r2, #8]
 8003a18:	e0cb      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	2320      	movs	r3, #32
 8003a34:	6093      	str	r3, [r2, #8]
 8003a36:	e0bc      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 80b7 	bne.w	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a5d      	ldr	r2, [pc, #372]	; (8003bbc <PCD_EP_OutXfrComplete_int+0x210>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d90f      	bls.n	8003a6c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a62:	461a      	mov	r2, r3
 8003a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a68:	6093      	str	r3, [r2, #8]
 8003a6a:	e0a2      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a7e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	0159      	lsls	r1, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a92:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4403      	add	r3, r0
 8003aa2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003aa6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4403      	add	r3, r0
 8003aca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4419      	add	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4403      	add	r3, r0
 8003ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ae4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d114      	bne.n	8003b16 <PCD_EP_OutXfrComplete_int+0x16a>
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2101      	movs	r1, #1
 8003b12:	f002 fa37 	bl	8005f84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f004 f9cb 	bl	8007eb8 <HAL_PCD_DataOutStageCallback>
 8003b22:	e046      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d124      	bne.n	8003b76 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	461a      	mov	r2, r3
 8003b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b48:	6093      	str	r3, [r2, #8]
 8003b4a:	e032      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b62:	461a      	mov	r2, r3
 8003b64:	2320      	movs	r3, #32
 8003b66:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f004 f9a2 	bl	8007eb8 <HAL_PCD_DataOutStageCallback>
 8003b74:	e01d      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d114      	bne.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d108      	bne.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f002 f9ef 	bl	8005f84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f004 f983 	bl	8007eb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	4f54300a 	.word	0x4f54300a
 8003bc0:	4f54310a 	.word	0x4f54310a

08003bc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	333c      	adds	r3, #60	; 0x3c
 8003bdc:	3304      	adds	r3, #4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d90e      	bls.n	8003c18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	461a      	mov	r2, r3
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f004 f93b 	bl	8007e94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d90c      	bls.n	8003c40 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d108      	bne.n	8003c40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	f002 f9a2 	bl	8005f84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	4f54300a 	.word	0x4f54300a

08003c50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c6e:	883b      	ldrh	r3, [r7, #0]
 8003c70:	0419      	lsls	r1, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c7c:	e028      	b.n	8003cd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4413      	add	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e00d      	b.n	8003cae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	3340      	adds	r3, #64	; 0x40
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	3301      	adds	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3ec      	bcc.n	8003c92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cb8:	883b      	ldrh	r3, [r7, #0]
 8003cba:	0418      	lsls	r0, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	4302      	orrs	r2, r0
 8003cc8:	3340      	adds	r3, #64	; 0x40
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e267      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d075      	beq.n	8003e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d36:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b85      	ldr	r3, [pc, #532]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d112      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b82      	ldr	r3, [pc, #520]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b7e      	ldr	r3, [pc, #504]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x108>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d157      	bne.n	8003e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e242      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x74>
 8003d7e:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a75      	ldr	r2, [pc, #468]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x98>
 8003d96:	4b70      	ldr	r3, [pc, #448]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6f      	ldr	r2, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b6d      	ldr	r3, [pc, #436]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6c      	ldr	r2, [pc, #432]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003db0:	4b69      	ldr	r3, [pc, #420]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a68      	ldr	r2, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b66      	ldr	r3, [pc, #408]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a65      	ldr	r2, [pc, #404]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd f944 	bl	800105c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd f940 	bl	800105c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e207      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xc0>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd f930 	bl	800105c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd f92c 	bl	800105c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1f3      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b51      	ldr	r3, [pc, #324]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0xe8>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d063      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e46:	4b44      	ldr	r3, [pc, #272]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1c7      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4937      	ldr	r1, [pc, #220]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e03a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b34      	ldr	r3, [pc, #208]	; (8003f5c <HAL_RCC_OscConfig+0x244>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd f8e5 	bl	800105c <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd f8e1 	bl	800105c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1a8      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4925      	ldr	r1, [pc, #148]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x244>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f8c4 	bl	800105c <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd f8c0 	bl	800105c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e187      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d036      	beq.n	8003f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_RCC_OscConfig+0x248>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd f8a4 	bl	800105c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fd f8a0 	bl	800105c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e167      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x200>
 8003f36:	e01b      	b.n	8003f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_RCC_OscConfig+0x248>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd f88d 	bl	800105c <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	e00e      	b.n	8003f64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fd f889 	bl	800105c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d907      	bls.n	8003f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e150      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	42470000 	.word	0x42470000
 8003f60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	4b88      	ldr	r3, [pc, #544]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ea      	bne.n	8003f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8097 	beq.w	80040ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f82:	4b81      	ldr	r3, [pc, #516]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	4b7d      	ldr	r3, [pc, #500]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a7c      	ldr	r2, [pc, #496]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9e:	4b7a      	ldr	r3, [pc, #488]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	4b77      	ldr	r3, [pc, #476]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d118      	bne.n	8003fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fba:	4b74      	ldr	r3, [pc, #464]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a73      	ldr	r2, [pc, #460]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd f849 	bl	800105c <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fce:	f7fd f845 	bl	800105c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e10c      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x2ea>
 8003ff4:	4b64      	ldr	r3, [pc, #400]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a63      	ldr	r2, [pc, #396]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8004000:	e01c      	b.n	800403c <HAL_RCC_OscConfig+0x324>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b05      	cmp	r3, #5
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x30c>
 800400a:	4b5f      	ldr	r3, [pc, #380]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a5e      	ldr	r2, [pc, #376]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004010:	f043 0304 	orr.w	r3, r3, #4
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	4b5c      	ldr	r3, [pc, #368]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	4a5b      	ldr	r2, [pc, #364]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6713      	str	r3, [r2, #112]	; 0x70
 8004022:	e00b      	b.n	800403c <HAL_RCC_OscConfig+0x324>
 8004024:	4b58      	ldr	r3, [pc, #352]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a57      	ldr	r2, [pc, #348]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	4b55      	ldr	r3, [pc, #340]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a54      	ldr	r2, [pc, #336]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004036:	f023 0304 	bic.w	r3, r3, #4
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fd f80a 	bl	800105c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fd f806 	bl	800105c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0cb      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	4b49      	ldr	r3, [pc, #292]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0ee      	beq.n	800404c <HAL_RCC_OscConfig+0x334>
 800406e:	e014      	b.n	800409a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004070:	f7fc fff4 	bl	800105c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fc fff0 	bl	800105c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0b5      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408e:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ee      	bne.n	8004078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800409a:	7dfb      	ldrb	r3, [r7, #23]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	4a38      	ldr	r2, [pc, #224]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a1 	beq.w	80041f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040b6:	4b34      	ldr	r3, [pc, #208]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d05c      	beq.n	800417c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d141      	bne.n	800414e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b31      	ldr	r3, [pc, #196]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fc ffc4 	bl	800105c <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fc ffc0 	bl	800105c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e087      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b27      	ldr	r3, [pc, #156]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	491b      	ldr	r1, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fc ff99 	bl	800105c <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412e:	f7fc ff95 	bl	800105c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e05c      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x416>
 800414c:	e054      	b.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fc ff82 	bl	800105c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fc ff7e 	bl	800105c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e045      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x444>
 800417a:	e03d      	b.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e038      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000
 8004190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_RCC_OscConfig+0x4ec>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d028      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d121      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d11a      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d111      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0cc      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b68      	ldr	r3, [pc, #416]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d90c      	bls.n	8004244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0b8      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a58      	ldr	r2, [pc, #352]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800427e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	494d      	ldr	r1, [pc, #308]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d044      	beq.n	8004328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d119      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e067      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4934      	ldr	r1, [pc, #208]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fc feb0 	bl	800105c <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fc feac 	bl	800105c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e04f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d20c      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e032      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4916      	ldr	r1, [pc, #88]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800438e:	f000 f821 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004392:	4602      	mov	r2, r0
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	490a      	ldr	r1, [pc, #40]	; (80043c8 <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	5ccb      	ldrb	r3, [r1, r3]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc fe10 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023c00 	.word	0x40023c00
 80043c4:	40023800 	.word	0x40023800
 80043c8:	08008e04 	.word	0x08008e04
 80043cc:	20000000 	.word	0x20000000
 80043d0:	20000004 	.word	0x20000004

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b094      	sub	sp, #80	; 0x50
 80043da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	647b      	str	r3, [r7, #68]	; 0x44
 80043e0:	2300      	movs	r3, #0
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	2300      	movs	r3, #0
 80043e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ec:	4b79      	ldr	r3, [pc, #484]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d00d      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x40>
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	f200 80e1 	bhi.w	80045c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x34>
 8004402:	2b04      	cmp	r3, #4
 8004404:	d003      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x3a>
 8004406:	e0db      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800440c:	e0db      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800440e:	4b73      	ldr	r3, [pc, #460]	; (80045dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004412:	e0d8      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004414:	4b6f      	ldr	r3, [pc, #444]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441e:	4b6d      	ldr	r3, [pc, #436]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	2200      	movs	r2, #0
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
 8004434:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443c:	633b      	str	r3, [r7, #48]	; 0x30
 800443e:	2300      	movs	r3, #0
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
 8004442:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004446:	4622      	mov	r2, r4
 8004448:	462b      	mov	r3, r5
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	0159      	lsls	r1, r3, #5
 8004454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004458:	0150      	lsls	r0, r2, #5
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4621      	mov	r1, r4
 8004460:	1a51      	subs	r1, r2, r1
 8004462:	6139      	str	r1, [r7, #16]
 8004464:	4629      	mov	r1, r5
 8004466:	eb63 0301 	sbc.w	r3, r3, r1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004478:	4659      	mov	r1, fp
 800447a:	018b      	lsls	r3, r1, #6
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004482:	4651      	mov	r1, sl
 8004484:	018a      	lsls	r2, r1, #6
 8004486:	4651      	mov	r1, sl
 8004488:	ebb2 0801 	subs.w	r8, r2, r1
 800448c:	4659      	mov	r1, fp
 800448e:	eb63 0901 	sbc.w	r9, r3, r1
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a6:	4690      	mov	r8, r2
 80044a8:	4699      	mov	r9, r3
 80044aa:	4623      	mov	r3, r4
 80044ac:	eb18 0303 	adds.w	r3, r8, r3
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	462b      	mov	r3, r5
 80044b4:	eb49 0303 	adc.w	r3, r9, r3
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044c6:	4629      	mov	r1, r5
 80044c8:	024b      	lsls	r3, r1, #9
 80044ca:	4621      	mov	r1, r4
 80044cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044d0:	4621      	mov	r1, r4
 80044d2:	024a      	lsls	r2, r1, #9
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044da:	2200      	movs	r2, #0
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044e4:	f7fb fecc 	bl	8000280 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4613      	mov	r3, r2
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f0:	e058      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	2200      	movs	r2, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	4611      	mov	r1, r2
 80044fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004502:	623b      	str	r3, [r7, #32]
 8004504:	2300      	movs	r3, #0
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	f04f 0000 	mov.w	r0, #0
 8004514:	f04f 0100 	mov.w	r1, #0
 8004518:	0159      	lsls	r1, r3, #5
 800451a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451e:	0150      	lsls	r0, r2, #5
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4641      	mov	r1, r8
 8004526:	ebb2 0a01 	subs.w	sl, r2, r1
 800452a:	4649      	mov	r1, r9
 800452c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800453c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004544:	ebb2 040a 	subs.w	r4, r2, sl
 8004548:	eb63 050b 	sbc.w	r5, r3, fp
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	00eb      	lsls	r3, r5, #3
 8004556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800455a:	00e2      	lsls	r2, r4, #3
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
 8004560:	4643      	mov	r3, r8
 8004562:	18e3      	adds	r3, r4, r3
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	464b      	mov	r3, r9
 8004568:	eb45 0303 	adc.w	r3, r5, r3
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800457a:	4629      	mov	r1, r5
 800457c:	028b      	lsls	r3, r1, #10
 800457e:	4621      	mov	r1, r4
 8004580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004584:	4621      	mov	r1, r4
 8004586:	028a      	lsls	r2, r1, #10
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458e:	2200      	movs	r2, #0
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	61fa      	str	r2, [r7, #28]
 8004594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004598:	f7fb fe72 	bl	8000280 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4613      	mov	r3, r2
 80045a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	3301      	adds	r3, #1
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045be:	e002      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3750      	adds	r7, #80	; 0x50
 80045cc:	46bd      	mov	sp, r7
 80045ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	00f42400 	.word	0x00f42400
 80045dc:	007a1200 	.word	0x007a1200

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000000 	.word	0x20000000

080045f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045fc:	f7ff fff0 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0a9b      	lsrs	r3, r3, #10
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4903      	ldr	r1, [pc, #12]	; (800461c <HAL_RCC_GetPCLK1Freq+0x24>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	08008e14 	.word	0x08008e14

08004620 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004644:	2b00      	cmp	r3, #0
 8004646:	d035      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004648:	4b62      	ldr	r3, [pc, #392]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800464e:	f7fc fd05 	bl	800105c <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004656:	f7fc fd01 	bl	800105c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e0b0      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004668:	4b5b      	ldr	r3, [pc, #364]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	019a      	lsls	r2, r3, #6
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	071b      	lsls	r3, r3, #28
 8004680:	4955      	ldr	r1, [pc, #340]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004688:	4b52      	ldr	r3, [pc, #328]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800468e:	f7fc fce5 	bl	800105c <HAL_GetTick>
 8004692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004696:	f7fc fce1 	bl	800105c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e090      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a8:	4b4b      	ldr	r3, [pc, #300]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8083 	beq.w	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	4b44      	ldr	r3, [pc, #272]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	4a43      	ldr	r2, [pc, #268]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d0:	6413      	str	r3, [r2, #64]	; 0x40
 80046d2:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046de:	4b3f      	ldr	r3, [pc, #252]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3e      	ldr	r2, [pc, #248]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046ea:	f7fc fcb7 	bl	800105c <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fc fcb3 	bl	800105c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e062      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004718:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02f      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d028      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800472e:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004736:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800473e:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004744:	4a24      	ldr	r2, [pc, #144]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d114      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004756:	f7fc fc81 	bl	800105c <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fc fc7d 	bl	800105c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e02a      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ee      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800478c:	d10d      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800479e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a2:	490d      	ldr	r1, [pc, #52]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]
 80047a8:	e005      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047b4:	6093      	str	r3, [r2, #8]
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c2:	4905      	ldr	r1, [pc, #20]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	42470068 	.word	0x42470068
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
 80047e0:	42470e40 	.word	0x42470e40

080047e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d13e      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d12f      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800481a:	617b      	str	r3, [r7, #20]
          break;
 800481c:	e02f      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800482a:	d108      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800482c:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e007      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800483e:	4b14      	ldr	r3, [pc, #80]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004868:	0f1b      	lsrs	r3, r3, #28
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]
          break;
 8004876:	e002      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
          break;
 800487c:	bf00      	nop
        }
      }
      break;
 800487e:	bf00      	nop
    }
  }
  return frequency;
 8004880:	697b      	ldr	r3, [r7, #20]
}
 8004882:	4618      	mov	r0, r3
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	00bb8000 	.word	0x00bb8000
 8004898:	007a1200 	.word	0x007a1200
 800489c:	00f42400 	.word	0x00f42400

080048a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07b      	b.n	80049aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d108      	bne.n	80048cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c2:	d009      	beq.n	80048d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	61da      	str	r2, [r3, #28]
 80048ca:	e005      	b.n	80048d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fa5e 	bl	8000db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	ea42 0103 	orr.w	r1, r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0104 	and.w	r1, r3, #4
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f003 0210 	and.w	r2, r3, #16
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049b2:	b084      	sub	sp, #16
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	f107 001c 	add.w	r0, r7, #28
 80049c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d122      	bne.n	8004a10 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f001 fb1b 	bl	8006040 <USB_CoreReset>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e01a      	b.n	8004a46 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f001 fb0f 	bl	8006040 <USB_CoreReset>
 8004a22:	4603      	mov	r3, r0
 8004a24:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
 8004a38:	e005      	b.n	8004a46 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d10b      	bne.n	8004a64 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f043 0206 	orr.w	r2, r3, #6
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a70:	b004      	add	sp, #16
 8004a72:	4770      	bx	lr

08004a74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d165      	bne.n	8004b54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a41      	ldr	r2, [pc, #260]	; (8004b90 <USB_SetTurnaroundTime+0x11c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d906      	bls.n	8004a9e <USB_SetTurnaroundTime+0x2a>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4a40      	ldr	r2, [pc, #256]	; (8004b94 <USB_SetTurnaroundTime+0x120>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d202      	bcs.n	8004a9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a98:	230f      	movs	r3, #15
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e062      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <USB_SetTurnaroundTime+0x120>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d306      	bcc.n	8004ab4 <USB_SetTurnaroundTime+0x40>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4a3b      	ldr	r2, [pc, #236]	; (8004b98 <USB_SetTurnaroundTime+0x124>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d202      	bcs.n	8004ab4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aae:	230e      	movs	r3, #14
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e057      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <USB_SetTurnaroundTime+0x124>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d306      	bcc.n	8004aca <USB_SetTurnaroundTime+0x56>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a37      	ldr	r2, [pc, #220]	; (8004b9c <USB_SetTurnaroundTime+0x128>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d202      	bcs.n	8004aca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ac4:	230d      	movs	r3, #13
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	e04c      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4a33      	ldr	r2, [pc, #204]	; (8004b9c <USB_SetTurnaroundTime+0x128>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d306      	bcc.n	8004ae0 <USB_SetTurnaroundTime+0x6c>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a32      	ldr	r2, [pc, #200]	; (8004ba0 <USB_SetTurnaroundTime+0x12c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d802      	bhi.n	8004ae0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ada:	230c      	movs	r3, #12
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	e041      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <USB_SetTurnaroundTime+0x12c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d906      	bls.n	8004af6 <USB_SetTurnaroundTime+0x82>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4a2e      	ldr	r2, [pc, #184]	; (8004ba4 <USB_SetTurnaroundTime+0x130>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d802      	bhi.n	8004af6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004af0:	230b      	movs	r3, #11
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e036      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <USB_SetTurnaroundTime+0x130>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d906      	bls.n	8004b0c <USB_SetTurnaroundTime+0x98>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <USB_SetTurnaroundTime+0x134>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d802      	bhi.n	8004b0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b06:	230a      	movs	r3, #10
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	e02b      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <USB_SetTurnaroundTime+0x134>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d906      	bls.n	8004b22 <USB_SetTurnaroundTime+0xae>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a25      	ldr	r2, [pc, #148]	; (8004bac <USB_SetTurnaroundTime+0x138>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d202      	bcs.n	8004b22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b1c:	2309      	movs	r3, #9
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e020      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <USB_SetTurnaroundTime+0x138>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d306      	bcc.n	8004b38 <USB_SetTurnaroundTime+0xc4>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <USB_SetTurnaroundTime+0x13c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d802      	bhi.n	8004b38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b32:	2308      	movs	r3, #8
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e015      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <USB_SetTurnaroundTime+0x13c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d906      	bls.n	8004b4e <USB_SetTurnaroundTime+0xda>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <USB_SetTurnaroundTime+0x140>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d202      	bcs.n	8004b4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b48:	2307      	movs	r3, #7
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e00a      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b4e:	2306      	movs	r3, #6
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e007      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b5a:	2309      	movs	r3, #9
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e001      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b60:	2309      	movs	r3, #9
 8004b62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	029b      	lsls	r3, r3, #10
 8004b78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	00d8acbf 	.word	0x00d8acbf
 8004b94:	00e4e1c0 	.word	0x00e4e1c0
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	01067380 	.word	0x01067380
 8004ba0:	011a499f 	.word	0x011a499f
 8004ba4:	01312cff 	.word	0x01312cff
 8004ba8:	014ca43f 	.word	0x014ca43f
 8004bac:	016e3600 	.word	0x016e3600
 8004bb0:	01a6ab1f 	.word	0x01a6ab1f
 8004bb4:	01e84800 	.word	0x01e84800

08004bb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 0201 	bic.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d115      	bne.n	8004c4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	f7fc fa22 	bl	8001074 <HAL_Delay>
      ms++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 f972 	bl	8005f20 <USB_GetMode>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d01e      	beq.n	8004c80 <USB_SetCurrentMode+0x84>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b31      	cmp	r3, #49	; 0x31
 8004c46:	d9f0      	bls.n	8004c2a <USB_SetCurrentMode+0x2e>
 8004c48:	e01a      	b.n	8004c80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d115      	bne.n	8004c7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f7fc fa09 	bl	8001074 <HAL_Delay>
      ms++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3301      	adds	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f001 f959 	bl	8005f20 <USB_GetMode>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <USB_SetCurrentMode+0x84>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b31      	cmp	r3, #49	; 0x31
 8004c78:	d9f0      	bls.n	8004c5c <USB_SetCurrentMode+0x60>
 8004c7a:	e001      	b.n	8004c80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e005      	b.n	8004c8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b32      	cmp	r3, #50	; 0x32
 8004c84:	d101      	bne.n	8004c8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c94:	b084      	sub	sp, #16
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e009      	b.n	8004cc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	3340      	adds	r3, #64	; 0x40
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b0e      	cmp	r3, #14
 8004ccc:	d9f2      	bls.n	8004cb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11c      	bne.n	8004d0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ce2:	f043 0302 	orr.w	r3, r3, #2
 8004ce6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d0c:	e00b      	b.n	8004d26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d38:	4619      	mov	r1, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d40:	461a      	mov	r2, r3
 8004d42:	680b      	ldr	r3, [r1, #0]
 8004d44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10c      	bne.n	8004d66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d52:	2100      	movs	r1, #0
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f945 	bl	8004fe4 <USB_SetDevSpeed>
 8004d5a:	e008      	b.n	8004d6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f940 	bl	8004fe4 <USB_SetDevSpeed>
 8004d64:	e003      	b.n	8004d6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d66:	2103      	movs	r1, #3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f93b 	bl	8004fe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d6e:	2110      	movs	r1, #16
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f8f3 	bl	8004f5c <USB_FlushTxFifo>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f90f 	bl	8004fa4 <USB_FlushRxFifo>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	461a      	mov	r2, r3
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	461a      	mov	r2, r3
 8004da4:	2300      	movs	r3, #0
 8004da6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	461a      	mov	r2, r3
 8004db0:	2300      	movs	r3, #0
 8004db2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	e043      	b.n	8004e42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd0:	d118      	bne.n	8004e04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	461a      	mov	r2, r3
 8004de6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	e013      	b.n	8004e16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e008      	b.n	8004e16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	461a      	mov	r2, r3
 8004e12:	2300      	movs	r3, #0
 8004e14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e22:	461a      	mov	r2, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	461a      	mov	r2, r3
 8004e36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d3b7      	bcc.n	8004dba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	e043      	b.n	8004ed8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e66:	d118      	bne.n	8004e9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e013      	b.n	8004eac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	461a      	mov	r2, r3
 8004e92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e008      	b.n	8004eac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ed0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d3b7      	bcc.n	8004e50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f043 0210 	orr.w	r2, r3, #16
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <USB_DevInit+0x2c4>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f043 0208 	orr.w	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f40:	f043 0304 	orr.w	r3, r3, #4
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f54:	b004      	add	sp, #16
 8004f56:	4770      	bx	lr
 8004f58:	803c3800 	.word	0x803c3800

08004f5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	019b      	lsls	r3, r3, #6
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <USB_FlushTxFifo+0x44>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e006      	b.n	8004f94 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d0f1      	beq.n	8004f76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	00030d40 	.word	0x00030d40

08004fa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	4a08      	ldr	r2, [pc, #32]	; (8004fe0 <USB_FlushRxFifo+0x3c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e006      	b.n	8004fd4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d0f1      	beq.n	8004fb6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	00030d40 	.word	0x00030d40

08004fe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005016:	b480      	push	{r7}
 8005018:	b087      	sub	sp, #28
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005036:	2300      	movs	r3, #0
 8005038:	75fb      	strb	r3, [r7, #23]
 800503a:	e00a      	b.n	8005052 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d002      	beq.n	8005048 <USB_GetDevSpeed+0x32>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b06      	cmp	r3, #6
 8005046:	d102      	bne.n	800504e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005048:	2302      	movs	r3, #2
 800504a:	75fb      	strb	r3, [r7, #23]
 800504c:	e001      	b.n	8005052 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800504e:	230f      	movs	r3, #15
 8005050:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005052:	7dfb      	ldrb	r3, [r7, #23]
}
 8005054:	4618      	mov	r0, r3
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d13a      	bne.n	80050f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2101      	movs	r1, #1
 800508e:	fa01 f303 	lsl.w	r3, r1, r3
 8005092:	b29b      	uxth	r3, r3
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800509a:	4313      	orrs	r3, r2
 800509c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d155      	bne.n	8005160 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	78db      	ldrb	r3, [r3, #3]
 80050ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	059b      	lsls	r3, r3, #22
 80050d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050d8:	4313      	orrs	r3, r2
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	e036      	b.n	8005160 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	69da      	ldr	r2, [r3, #28]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f303 	lsl.w	r3, r1, r3
 8005108:	041b      	lsls	r3, r3, #16
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005110:	4313      	orrs	r3, r2
 8005112:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11a      	bne.n	8005160 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005146:	430b      	orrs	r3, r1
 8005148:	4313      	orrs	r3, r2
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d161      	bne.n	8005250 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a2:	d11f      	bne.n	80051e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005204:	4013      	ands	r3, r2
 8005206:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	2101      	movs	r1, #1
 800521a:	fa01 f303 	lsl.w	r3, r1, r3
 800521e:	b29b      	uxth	r3, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005228:	4013      	ands	r3, r2
 800522a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	0159      	lsls	r1, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	440b      	add	r3, r1
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	4619      	mov	r1, r3
 8005248:	4b35      	ldr	r3, [pc, #212]	; (8005320 <USB_DeactivateEndpoint+0x1b0>)
 800524a:	4013      	ands	r3, r2
 800524c:	600b      	str	r3, [r1, #0]
 800524e:	e060      	b.n	8005312 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005266:	d11f      	bne.n	80052a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005286:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	2101      	movs	r1, #1
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	43db      	mvns	r3, r3
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c8:	4013      	ands	r3, r2
 80052ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	2101      	movs	r1, #1
 80052de:	fa01 f303 	lsl.w	r3, r1, r3
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	43db      	mvns	r3, r3
 80052e6:	68f9      	ldr	r1, [r7, #12]
 80052e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ec:	4013      	ands	r3, r2
 80052ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	0159      	lsls	r1, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	440b      	add	r3, r1
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	4619      	mov	r1, r3
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <USB_DeactivateEndpoint+0x1b4>)
 800530e:	4013      	ands	r3, r2
 8005310:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	ec337800 	.word	0xec337800
 8005324:	eff37800 	.word	0xeff37800

08005328 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	f040 815c 	bne.w	8005602 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d132      	bne.n	80053b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005370:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	0cdb      	lsrs	r3, r3, #19
 80053b2:	04db      	lsls	r3, r3, #19
 80053b4:	6113      	str	r3, [r2, #16]
 80053b6:	e074      	b.n	80054a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	0cdb      	lsrs	r3, r3, #19
 80053d4:	04db      	lsls	r3, r3, #19
 80053d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6959      	ldr	r1, [r3, #20]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	440b      	add	r3, r1
 8005414:	1e59      	subs	r1, r3, #1
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	fbb1 f3f3 	udiv	r3, r1, r3
 800541e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005420:	4b9d      	ldr	r3, [pc, #628]	; (8005698 <USB_EPStartXfer+0x370>)
 8005422:	400b      	ands	r3, r1
 8005424:	69b9      	ldr	r1, [r7, #24]
 8005426:	0148      	lsls	r0, r1, #5
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	4401      	add	r1, r0
 800542c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544a:	69b9      	ldr	r1, [r7, #24]
 800544c:	0148      	lsls	r0, r1, #5
 800544e:	69f9      	ldr	r1, [r7, #28]
 8005450:	4401      	add	r1, r0
 8005452:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005456:	4313      	orrs	r3, r2
 8005458:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	78db      	ldrb	r3, [r3, #3]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d11f      	bne.n	80054a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005480:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d14b      	bne.n	8005540 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	461a      	mov	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	78db      	ldrb	r3, [r3, #3]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d128      	bne.n	800551e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d110      	bne.n	80054fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	e00f      	b.n	800551e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005538:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e12f      	b.n	80057a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800555e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	78db      	ldrb	r3, [r3, #3]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d015      	beq.n	8005594 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8117 	beq.w	80057a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	2101      	movs	r1, #1
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	69f9      	ldr	r1, [r7, #28]
 800558a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800558e:	4313      	orrs	r3, r2
 8005590:	634b      	str	r3, [r1, #52]	; 0x34
 8005592:	e105      	b.n	80057a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d110      	bne.n	80055c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e00f      	b.n	80055e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	68d9      	ldr	r1, [r3, #12]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	b298      	uxth	r0, r3
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	4603      	mov	r3, r0
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fa2b 	bl	8005a56 <USB_WritePacket>
 8005600:	e0ce      	b.n	80057a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561c:	0cdb      	lsrs	r3, r3, #19
 800561e:	04db      	lsls	r3, r3, #19
 8005620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005640:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005644:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d126      	bne.n	800569c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005664:	69b9      	ldr	r1, [r7, #24]
 8005666:	0148      	lsls	r0, r1, #5
 8005668:	69f9      	ldr	r1, [r7, #28]
 800566a:	4401      	add	r1, r0
 800566c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005670:	4313      	orrs	r3, r2
 8005672:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005692:	6113      	str	r3, [r2, #16]
 8005694:	e036      	b.n	8005704 <USB_EPStartXfer+0x3dc>
 8005696:	bf00      	nop
 8005698:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	4413      	add	r3, r2
 80056a6:	1e5a      	subs	r2, r3, #1
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	8afb      	ldrh	r3, [r7, #22]
 80056c2:	04d9      	lsls	r1, r3, #19
 80056c4:	4b39      	ldr	r3, [pc, #228]	; (80057ac <USB_EPStartXfer+0x484>)
 80056c6:	400b      	ands	r3, r1
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	0148      	lsls	r0, r1, #5
 80056cc:	69f9      	ldr	r1, [r7, #28]
 80056ce:	4401      	add	r1, r0
 80056d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056d4:	4313      	orrs	r3, r2
 80056d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	8af9      	ldrh	r1, [r7, #22]
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f4:	69b9      	ldr	r1, [r7, #24]
 80056f6:	0148      	lsls	r0, r1, #5
 80056f8:	69f9      	ldr	r1, [r7, #28]
 80056fa:	4401      	add	r1, r0
 80056fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005700:	4313      	orrs	r3, r2
 8005702:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d10d      	bne.n	8005726 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	68d9      	ldr	r1, [r3, #12]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	460a      	mov	r2, r1
 8005724:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	78db      	ldrb	r3, [r3, #3]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d128      	bne.n	8005780 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d110      	bne.n	8005760 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e00f      	b.n	8005780 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800579e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	1ff80000 	.word	0x1ff80000

080057b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f040 80cd 	bne.w	800596c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d132      	bne.n	8005840 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005818:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800581c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005838:	0cdb      	lsrs	r3, r3, #19
 800583a:	04db      	lsls	r3, r3, #19
 800583c:	6113      	str	r3, [r2, #16]
 800583e:	e04e      	b.n	80058de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	0cdb      	lsrs	r3, r3, #19
 800585c:	04db      	lsls	r3, r3, #19
 800585e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800587e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005882:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	695a      	ldr	r2, [r3, #20]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	d903      	bls.n	8005898 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ce:	6939      	ldr	r1, [r7, #16]
 80058d0:	0148      	lsls	r0, r1, #5
 80058d2:	6979      	ldr	r1, [r7, #20]
 80058d4:	4401      	add	r1, r0
 80058d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058da:	4313      	orrs	r3, r2
 80058dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d11e      	bne.n	8005922 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d009      	beq.n	8005900 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	461a      	mov	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e092      	b.n	8005a48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005940:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d07e      	beq.n	8005a48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	2101      	movs	r1, #1
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	6979      	ldr	r1, [r7, #20]
 8005962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005966:	4313      	orrs	r3, r2
 8005968:	634b      	str	r3, [r1, #52]	; 0x34
 800596a:	e06d      	b.n	8005a48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005986:	0cdb      	lsrs	r3, r3, #19
 8005988:	04db      	lsls	r3, r3, #19
 800598a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f6:	6939      	ldr	r1, [r7, #16]
 80059f8:	0148      	lsls	r0, r1, #5
 80059fa:	6979      	ldr	r1, [r7, #20]
 80059fc:	4401      	add	r1, r0
 80059fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10d      	bne.n	8005a28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	68d9      	ldr	r1, [r3, #12]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	460a      	mov	r2, r1
 8005a26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b089      	sub	sp, #36	; 0x24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	4611      	mov	r1, r2
 8005a62:	461a      	mov	r2, r3
 8005a64:	460b      	mov	r3, r1
 8005a66:	71fb      	strb	r3, [r7, #7]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d123      	bne.n	8005ac4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a7c:	88bb      	ldrh	r3, [r7, #4]
 8005a7e:	3303      	adds	r3, #3
 8005a80:	089b      	lsrs	r3, r3, #2
 8005a82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	e018      	b.n	8005abc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	031a      	lsls	r2, r3, #12
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a96:	461a      	mov	r2, r3
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3e2      	bcc.n	8005a8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3724      	adds	r7, #36	; 0x24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b08b      	sub	sp, #44	; 0x2c
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	4613      	mov	r3, r2
 8005ade:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	e014      	b.n	8005b28 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	3301      	adds	r3, #1
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	3301      	adds	r3, #1
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	3301      	adds	r3, #1
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	3301      	adds	r3, #1
 8005b26:	623b      	str	r3, [r7, #32]
 8005b28:	6a3a      	ldr	r2, [r7, #32]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d3e6      	bcc.n	8005afe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b30:	8bfb      	ldrh	r3, [r7, #30]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01e      	beq.n	8005b74 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b40:	461a      	mov	r2, r3
 8005b42:	f107 0310 	add.w	r3, r7, #16
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	fa22 f303 	lsr.w	r3, r2, r3
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	701a      	strb	r2, [r3, #0]
      i++;
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	3301      	adds	r3, #1
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b68:	8bfb      	ldrh	r3, [r7, #30]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b6e:	8bfb      	ldrh	r3, [r7, #30]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1ea      	bne.n	8005b4a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	372c      	adds	r7, #44	; 0x2c
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d12c      	bne.n	8005bf8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	db12      	blt.n	8005bd6 <USB_EPSetStall+0x54>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00f      	beq.n	8005bd6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bd4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	e02b      	b.n	8005c50 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	db12      	blt.n	8005c30 <USB_EPSetStall+0xae>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00f      	beq.n	8005c30 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c2e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d128      	bne.n	8005ccc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	78db      	ldrb	r3, [r3, #3]
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d003      	beq.n	8005caa <USB_EPClearStall+0x4c>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	78db      	ldrb	r3, [r3, #3]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d138      	bne.n	8005d1c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e027      	b.n	8005d1c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	78db      	ldrb	r3, [r3, #3]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d003      	beq.n	8005cfc <USB_EPClearStall+0x9e>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	78db      	ldrb	r3, [r3, #3]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d10f      	bne.n	8005d1c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d4c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d90:	f023 0303 	bic.w	r3, r3, #3
 8005d94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da4:	f023 0302 	bic.w	r3, r3, #2
 8005da8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005de6:	f043 0302 	orr.w	r3, r3, #2
 8005dea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e12:	68fb      	ldr	r3, [r7, #12]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4013      	ands	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	0c1b      	lsrs	r3, r3, #16
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	4013      	ands	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	b29b      	uxth	r3, r3
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	01db      	lsls	r3, r3, #7
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f12:	68bb      	ldr	r3, [r7, #8]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	333c      	adds	r3, #60	; 0x3c
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4a26      	ldr	r2, [pc, #152]	; (800603c <USB_EP0_OutStart+0xb8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d90a      	bls.n	8005fbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb8:	d101      	bne.n	8005fbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e037      	b.n	800602e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fec:	f043 0318 	orr.w	r3, r3, #24
 8005ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006000:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006004:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10f      	bne.n	800602c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	461a      	mov	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006026:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800602a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	4f54300a 	.word	0x4f54300a

08006040 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	4a13      	ldr	r2, [pc, #76]	; (80060a0 <USB_CoreReset+0x60>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e01a      	b.n	8006092 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	daf3      	bge.n	800604c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f043 0201 	orr.w	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <USB_CoreReset+0x60>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d901      	bls.n	8006084 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e006      	b.n	8006092 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	d0f1      	beq.n	8006074 <USB_CoreReset+0x34>

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	00030d40 	.word	0x00030d40

080060a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060b4:	f002 f96a 	bl	800838c <USBD_static_malloc>
 80060b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80060c8:	2302      	movs	r3, #2
 80060ca:	e066      	b.n	800619a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7c1b      	ldrb	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d119      	bne.n	8006110 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e0:	2202      	movs	r2, #2
 80060e2:	2181      	movs	r1, #129	; 0x81
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f002 f82e 	bl	8008146 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f4:	2202      	movs	r2, #2
 80060f6:	2101      	movs	r1, #1
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f002 f824 	bl	8008146 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2210      	movs	r2, #16
 800610a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800610e:	e016      	b.n	800613e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006110:	2340      	movs	r3, #64	; 0x40
 8006112:	2202      	movs	r2, #2
 8006114:	2181      	movs	r1, #129	; 0x81
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f002 f815 	bl	8008146 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006122:	2340      	movs	r3, #64	; 0x40
 8006124:	2202      	movs	r2, #2
 8006126:	2101      	movs	r1, #1
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f002 f80c 	bl	8008146 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2210      	movs	r2, #16
 800613a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800613e:	2308      	movs	r3, #8
 8006140:	2203      	movs	r2, #3
 8006142:	2182      	movs	r1, #130	; 0x82
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fffe 	bl	8008146 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	7c1b      	ldrb	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800617a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617e:	2101      	movs	r1, #1
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f002 f8cf 	bl	8008324 <USBD_LL_PrepareReceive>
 8006186:	e007      	b.n	8006198 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800618e:	2340      	movs	r3, #64	; 0x40
 8006190:	2101      	movs	r1, #1
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f002 f8c6 	bl	8008324 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80061ae:	2181      	movs	r1, #129	; 0x81
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 ffee 	bl	8008192 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061bc:	2101      	movs	r1, #1
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 ffe7 	bl	8008192 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061cc:	2182      	movs	r1, #130	; 0x82
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 ffdf 	bl	8008192 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00e      	beq.n	800620c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061fe:	4618      	mov	r0, r3
 8006200:	f002 f8d2 	bl	80083a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006228:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	e0af      	b.n	80063a0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006248:	2b00      	cmp	r3, #0
 800624a:	d03f      	beq.n	80062cc <USBD_CDC_Setup+0xb4>
 800624c:	2b20      	cmp	r3, #32
 800624e:	f040 809f 	bne.w	8006390 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	88db      	ldrh	r3, [r3, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d02e      	beq.n	80062b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b25b      	sxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	da16      	bge.n	8006292 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006270:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	88d2      	ldrh	r2, [r2, #6]
 8006276:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	88db      	ldrh	r3, [r3, #6]
 800627c:	2b07      	cmp	r3, #7
 800627e:	bf28      	it	cs
 8006280:	2307      	movcs	r3, #7
 8006282:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	89fa      	ldrh	r2, [r7, #14]
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 fb19 	bl	80078c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006290:	e085      	b.n	800639e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	785a      	ldrb	r2, [r3, #1]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	88db      	ldrh	r3, [r3, #6]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80062a8:	6939      	ldr	r1, [r7, #16]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	88db      	ldrh	r3, [r3, #6]
 80062ae:	461a      	mov	r2, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 fb32 	bl	800791a <USBD_CtlPrepareRx>
      break;
 80062b6:	e072      	b.n	800639e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	7850      	ldrb	r0, [r2, #1]
 80062c4:	2200      	movs	r2, #0
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	4798      	blx	r3
      break;
 80062ca:	e068      	b.n	800639e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b0b      	cmp	r3, #11
 80062d2:	d852      	bhi.n	800637a <USBD_CDC_Setup+0x162>
 80062d4:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <USBD_CDC_Setup+0xc4>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	0800630d 	.word	0x0800630d
 80062e0:	08006389 	.word	0x08006389
 80062e4:	0800637b 	.word	0x0800637b
 80062e8:	0800637b 	.word	0x0800637b
 80062ec:	0800637b 	.word	0x0800637b
 80062f0:	0800637b 	.word	0x0800637b
 80062f4:	0800637b 	.word	0x0800637b
 80062f8:	0800637b 	.word	0x0800637b
 80062fc:	0800637b 	.word	0x0800637b
 8006300:	0800637b 	.word	0x0800637b
 8006304:	08006337 	.word	0x08006337
 8006308:	08006361 	.word	0x08006361
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d107      	bne.n	8006328 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006318:	f107 030a 	add.w	r3, r7, #10
 800631c:	2202      	movs	r2, #2
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 face 	bl	80078c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006326:	e032      	b.n	800638e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fa58 	bl	80077e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	75fb      	strb	r3, [r7, #23]
          break;
 8006334:	e02b      	b.n	800638e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b03      	cmp	r3, #3
 8006340:	d107      	bne.n	8006352 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006342:	f107 030d 	add.w	r3, r7, #13
 8006346:	2201      	movs	r2, #1
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 fab9 	bl	80078c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006350:	e01d      	b.n	800638e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 fa43 	bl	80077e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800635a:	2303      	movs	r3, #3
 800635c:	75fb      	strb	r3, [r7, #23]
          break;
 800635e:	e016      	b.n	800638e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b03      	cmp	r3, #3
 800636a:	d00f      	beq.n	800638c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fa36 	bl	80077e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006374:	2303      	movs	r3, #3
 8006376:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006378:	e008      	b.n	800638c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 fa2f 	bl	80077e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006382:	2303      	movs	r3, #3
 8006384:	75fb      	strb	r3, [r7, #23]
          break;
 8006386:	e002      	b.n	800638e <USBD_CDC_Setup+0x176>
          break;
 8006388:	bf00      	nop
 800638a:	e008      	b.n	800639e <USBD_CDC_Setup+0x186>
          break;
 800638c:	bf00      	nop
      }
      break;
 800638e:	e006      	b.n	800639e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fa24 	bl	80077e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006398:	2303      	movs	r3, #3
 800639a:	75fb      	strb	r3, [r7, #23]
      break;
 800639c:	bf00      	nop
  }

  return (uint8_t)ret;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e04f      	b.n	800646a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3318      	adds	r3, #24
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d029      	beq.n	800643c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	3318      	adds	r3, #24
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	78f9      	ldrb	r1, [r7, #3]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	460b      	mov	r3, r1
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	1a5b      	subs	r3, r3, r1
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4403      	add	r3, r0
 8006408:	3344      	adds	r3, #68	; 0x44
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006416:	2b00      	cmp	r3, #0
 8006418:	d110      	bne.n	800643c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	3318      	adds	r3, #24
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800642e:	78f9      	ldrb	r1, [r7, #3]
 8006430:	2300      	movs	r3, #0
 8006432:	2200      	movs	r2, #0
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 ff54 	bl	80082e2 <USBD_LL_Transmit>
 800643a:	e015      	b.n	8006468 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006464:	78fa      	ldrb	r2, [r7, #3]
 8006466:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006484:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006490:	2303      	movs	r3, #3
 8006492:	e015      	b.n	80064c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 ff64 	bl	8008366 <USBD_LL_GetRxDataSize>
 800649e:	4602      	mov	r2, r0
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064ba:	4611      	mov	r1, r2
 80064bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80064de:	2303      	movs	r3, #3
 80064e0:	e01b      	b.n	800651a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d015      	beq.n	8006518 <USBD_CDC_EP0_RxReady+0x50>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064f2:	2bff      	cmp	r3, #255	; 0xff
 80064f4:	d010      	beq.n	8006518 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006504:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800650c:	b292      	uxth	r2, r2
 800650e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2243      	movs	r2, #67	; 0x43
 8006530:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006532:	4b03      	ldr	r3, [pc, #12]	; (8006540 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	20000094 	.word	0x20000094

08006544 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2243      	movs	r2, #67	; 0x43
 8006550:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006552:	4b03      	ldr	r3, [pc, #12]	; (8006560 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	20000050 	.word	0x20000050

08006564 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2243      	movs	r2, #67	; 0x43
 8006570:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006572:	4b03      	ldr	r3, [pc, #12]	; (8006580 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	200000d8 	.word	0x200000d8

08006584 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	220a      	movs	r2, #10
 8006590:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006592:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	2000000c 	.word	0x2000000c

080065a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e004      	b.n	80065c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b087      	sub	sp, #28
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065e0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e008      	b.n	80065fe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800661a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006622:	2303      	movs	r3, #3
 8006624:	e004      	b.n	8006630 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800664a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800665a:	2303      	movs	r3, #3
 800665c:	e01a      	b.n	8006694 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006664:	2b00      	cmp	r3, #0
 8006666:	d114      	bne.n	8006692 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2201      	movs	r2, #1
 800666c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006686:	2181      	movs	r1, #129	; 0x81
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 fe2a 	bl	80082e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e016      	b.n	80066e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	7c1b      	ldrb	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066cc:	2101      	movs	r1, #1
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fe28 	bl	8008324 <USBD_LL_PrepareReceive>
 80066d4:	e007      	b.n	80066e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066dc:	2340      	movs	r3, #64	; 0x40
 80066de:	2101      	movs	r1, #1
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fe1f 	bl	8008324 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4613      	mov	r3, r2
 80066fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006704:	2303      	movs	r3, #3
 8006706:	e01f      	b.n	8006748 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	79fa      	ldrb	r2, [r7, #7]
 800673a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f001 fc9b 	bl	8008078 <USBD_LL_Init>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	e016      	b.n	8006796 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00b      	beq.n	8006794 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	f107 020e 	add.w	r2, r7, #14
 8006788:	4610      	mov	r0, r2
 800678a:	4798      	blx	r3
 800678c:	4602      	mov	r2, r0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fcb2 	bl	8008110 <USBD_LL_Start>
 80067ac:	4603      	mov	r3, r0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067d8:	2303      	movs	r3, #3
 80067da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	4611      	mov	r1, r2
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	4611      	mov	r1, r2
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	4798      	blx	r3
  }

  return USBD_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f000 ff90 	bl	800776c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	2b02      	cmp	r3, #2
 800686e:	d01a      	beq.n	80068a6 <USBD_LL_SetupStage+0x72>
 8006870:	2b02      	cmp	r3, #2
 8006872:	d822      	bhi.n	80068ba <USBD_LL_SetupStage+0x86>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <USBD_LL_SetupStage+0x4a>
 8006878:	2b01      	cmp	r3, #1
 800687a:	d00a      	beq.n	8006892 <USBD_LL_SetupStage+0x5e>
 800687c:	e01d      	b.n	80068ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa62 	bl	8006d50 <USBD_StdDevReq>
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]
      break;
 8006890:	e020      	b.n	80068d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fac6 	bl	8006e2c <USBD_StdItfReq>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]
      break;
 80068a4:	e016      	b.n	80068d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fb05 	bl	8006ebe <USBD_StdEPReq>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]
      break;
 80068b8:	e00c      	b.n	80068d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fc81 	bl	80081d0 <USBD_LL_StallEP>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
      break;
 80068d2:	bf00      	nop
  }

  return ret;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b086      	sub	sp, #24
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	460b      	mov	r3, r1
 80068e8:	607a      	str	r2, [r7, #4]
 80068ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d138      	bne.n	8006964 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006900:	2b03      	cmp	r3, #3
 8006902:	d14a      	bne.n	800699a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	429a      	cmp	r2, r3
 800690e:	d913      	bls.n	8006938 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	4293      	cmp	r3, r2
 8006928:	bf28      	it	cs
 800692a:	4613      	movcs	r3, r2
 800692c:	461a      	mov	r2, r3
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f001 f80f 	bl	8007954 <USBD_CtlContinueRx>
 8006936:	e030      	b.n	800699a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d10b      	bne.n	800695c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f001 f80a 	bl	8007976 <USBD_CtlSendStatus>
 8006962:	e01a      	b.n	800699a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b03      	cmp	r3, #3
 800696e:	d114      	bne.n	800699a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00e      	beq.n	800699a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	7afa      	ldrb	r2, [r7, #11]
 8006986:	4611      	mov	r1, r2
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	4798      	blx	r3
 800698c:	4603      	mov	r3, r0
 800698e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	e000      	b.n	800699c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	460b      	mov	r3, r1
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069b2:	7afb      	ldrb	r3, [r7, #11]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d16b      	bne.n	8006a90 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3314      	adds	r3, #20
 80069bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d156      	bne.n	8006a76 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d914      	bls.n	80069fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	1ad2      	subs	r2, r2, r3
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	461a      	mov	r2, r3
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 ff84 	bl	80078f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069f0:	2300      	movs	r3, #0
 80069f2:	2200      	movs	r2, #0
 80069f4:	2100      	movs	r1, #0
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f001 fc94 	bl	8008324 <USBD_LL_PrepareReceive>
 80069fc:	e03b      	b.n	8006a76 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d11c      	bne.n	8006a44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d316      	bcc.n	8006a44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d20f      	bcs.n	8006a44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a24:	2200      	movs	r2, #0
 8006a26:	2100      	movs	r1, #0
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 ff65 	bl	80078f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a36:	2300      	movs	r3, #0
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f001 fc71 	bl	8008324 <USBD_LL_PrepareReceive>
 8006a42:	e018      	b.n	8006a76 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d10b      	bne.n	8006a68 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a68:	2180      	movs	r1, #128	; 0x80
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f001 fbb0 	bl	80081d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 ff93 	bl	800799c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d122      	bne.n	8006ac6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f7ff fe98 	bl	80067b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a8e:	e01a      	b.n	8006ac6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d114      	bne.n	8006ac6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	7afa      	ldrb	r2, [r7, #11]
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	4798      	blx	r3
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	e000      	b.n	8006ac8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e02f      	b.n	8006b64 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00f      	beq.n	8006b2e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6852      	ldr	r2, [r2, #4]
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	4611      	mov	r1, r2
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	2200      	movs	r2, #0
 8006b32:	2100      	movs	r1, #0
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fb06 	bl	8008146 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2240      	movs	r2, #64	; 0x40
 8006b46:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b4a:	2340      	movs	r3, #64	; 0x40
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2180      	movs	r1, #128	; 0x80
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 faf8 	bl	8008146 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2240      	movs	r2, #64	; 0x40
 8006b60:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d106      	bne.n	8006bda <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e012      	b.n	8006c24 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d10b      	bne.n	8006c22 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e014      	b.n	8006c70 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d10d      	bne.n	8006c6e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e014      	b.n	8006cbc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d10d      	bne.n	8006cba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d009      	beq.n	8006d08 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6852      	ldr	r2, [r2, #4]
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	4611      	mov	r1, r2
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
  }

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b087      	sub	sp, #28
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3301      	adds	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d30:	8a3b      	ldrh	r3, [r7, #16]
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	b21a      	sxth	r2, r3
 8006d36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	b21b      	sxth	r3, r3
 8006d3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d40:	89fb      	ldrh	r3, [r7, #14]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d66:	2b40      	cmp	r3, #64	; 0x40
 8006d68:	d005      	beq.n	8006d76 <USBD_StdDevReq+0x26>
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d853      	bhi.n	8006e16 <USBD_StdDevReq+0xc6>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <USBD_StdDevReq+0x3a>
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d14f      	bne.n	8006e16 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4798      	blx	r3
 8006d84:	4603      	mov	r3, r0
 8006d86:	73fb      	strb	r3, [r7, #15]
      break;
 8006d88:	e04a      	b.n	8006e20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b09      	cmp	r3, #9
 8006d90:	d83b      	bhi.n	8006e0a <USBD_StdDevReq+0xba>
 8006d92:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <USBD_StdDevReq+0x48>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006ded 	.word	0x08006ded
 8006d9c:	08006e01 	.word	0x08006e01
 8006da0:	08006e0b 	.word	0x08006e0b
 8006da4:	08006df7 	.word	0x08006df7
 8006da8:	08006e0b 	.word	0x08006e0b
 8006dac:	08006dcb 	.word	0x08006dcb
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006e0b 	.word	0x08006e0b
 8006db8:	08006de3 	.word	0x08006de3
 8006dbc:	08006dd5 	.word	0x08006dd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f9de 	bl	8007184 <USBD_GetDescriptor>
          break;
 8006dc8:	e024      	b.n	8006e14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb43 	bl	8007458 <USBD_SetAddress>
          break;
 8006dd2:	e01f      	b.n	8006e14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb82 	bl	80074e0 <USBD_SetConfig>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]
          break;
 8006de0:	e018      	b.n	8006e14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc21 	bl	800762c <USBD_GetConfig>
          break;
 8006dea:	e013      	b.n	8006e14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fc52 	bl	8007698 <USBD_GetStatus>
          break;
 8006df4:	e00e      	b.n	8006e14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc81 	bl	8007700 <USBD_SetFeature>
          break;
 8006dfe:	e009      	b.n	8006e14 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fc90 	bl	8007728 <USBD_ClrFeature>
          break;
 8006e08:	e004      	b.n	8006e14 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fce7 	bl	80077e0 <USBD_CtlError>
          break;
 8006e12:	bf00      	nop
      }
      break;
 8006e14:	e004      	b.n	8006e20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fce1 	bl	80077e0 <USBD_CtlError>
      break;
 8006e1e:	bf00      	nop
  }

  return ret;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop

08006e2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d005      	beq.n	8006e52 <USBD_StdItfReq+0x26>
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d82f      	bhi.n	8006eaa <USBD_StdItfReq+0x7e>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <USBD_StdItfReq+0x26>
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d12b      	bne.n	8006eaa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d81d      	bhi.n	8006e9c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	889b      	ldrh	r3, [r3, #4]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d813      	bhi.n	8006e92 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	88db      	ldrh	r3, [r3, #6]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d110      	bne.n	8006ea6 <USBD_StdItfReq+0x7a>
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10d      	bne.n	8006ea6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fd73 	bl	8007976 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e90:	e009      	b.n	8006ea6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fca3 	bl	80077e0 <USBD_CtlError>
          break;
 8006e9a:	e004      	b.n	8006ea6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fc9e 	bl	80077e0 <USBD_CtlError>
          break;
 8006ea4:	e000      	b.n	8006ea8 <USBD_StdItfReq+0x7c>
          break;
 8006ea6:	bf00      	nop
      }
      break;
 8006ea8:	e004      	b.n	8006eb4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fc97 	bl	80077e0 <USBD_CtlError>
      break;
 8006eb2:	bf00      	nop
  }

  return ret;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	889b      	ldrh	r3, [r3, #4]
 8006ed0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d007      	beq.n	8006eee <USBD_StdEPReq+0x30>
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	f200 8145 	bhi.w	800716e <USBD_StdEPReq+0x2b0>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00c      	beq.n	8006f02 <USBD_StdEPReq+0x44>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	f040 8140 	bne.w	800716e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
      break;
 8006f00:	e13a      	b.n	8007178 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d007      	beq.n	8006f1a <USBD_StdEPReq+0x5c>
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	f300 8129 	bgt.w	8007162 <USBD_StdEPReq+0x2a4>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d07f      	beq.n	8007014 <USBD_StdEPReq+0x156>
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d03c      	beq.n	8006f92 <USBD_StdEPReq+0xd4>
 8006f18:	e123      	b.n	8007162 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d002      	beq.n	8006f2c <USBD_StdEPReq+0x6e>
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d016      	beq.n	8006f58 <USBD_StdEPReq+0x9a>
 8006f2a:	e02c      	b.n	8006f86 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00d      	beq.n	8006f4e <USBD_StdEPReq+0x90>
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	2b80      	cmp	r3, #128	; 0x80
 8006f36:	d00a      	beq.n	8006f4e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 f947 	bl	80081d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f42:	2180      	movs	r1, #128	; 0x80
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 f943 	bl	80081d0 <USBD_LL_StallEP>
 8006f4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f4c:	e020      	b.n	8006f90 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fc45 	bl	80077e0 <USBD_CtlError>
              break;
 8006f56:	e01b      	b.n	8006f90 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	885b      	ldrh	r3, [r3, #2]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10e      	bne.n	8006f7e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <USBD_StdEPReq+0xc0>
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	2b80      	cmp	r3, #128	; 0x80
 8006f6a:	d008      	beq.n	8006f7e <USBD_StdEPReq+0xc0>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	88db      	ldrh	r3, [r3, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f929 	bl	80081d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fcf9 	bl	8007976 <USBD_CtlSendStatus>

              break;
 8006f84:	e004      	b.n	8006f90 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fc29 	bl	80077e0 <USBD_CtlError>
              break;
 8006f8e:	bf00      	nop
          }
          break;
 8006f90:	e0ec      	b.n	800716c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d002      	beq.n	8006fa4 <USBD_StdEPReq+0xe6>
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d016      	beq.n	8006fd0 <USBD_StdEPReq+0x112>
 8006fa2:	e030      	b.n	8007006 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00d      	beq.n	8006fc6 <USBD_StdEPReq+0x108>
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b80      	cmp	r3, #128	; 0x80
 8006fae:	d00a      	beq.n	8006fc6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f90b 	bl	80081d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fba:	2180      	movs	r1, #128	; 0x80
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f907 	bl	80081d0 <USBD_LL_StallEP>
 8006fc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fc4:	e025      	b.n	8007012 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fc09 	bl	80077e0 <USBD_CtlError>
              break;
 8006fce:	e020      	b.n	8007012 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	885b      	ldrh	r3, [r3, #2]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d11b      	bne.n	8007010 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 f911 	bl	800820e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fcc2 	bl	8007976 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
 8007000:	4603      	mov	r3, r0
 8007002:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007004:	e004      	b.n	8007010 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fbe9 	bl	80077e0 <USBD_CtlError>
              break;
 800700e:	e000      	b.n	8007012 <USBD_StdEPReq+0x154>
              break;
 8007010:	bf00      	nop
          }
          break;
 8007012:	e0ab      	b.n	800716c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d002      	beq.n	8007026 <USBD_StdEPReq+0x168>
 8007020:	2b03      	cmp	r3, #3
 8007022:	d032      	beq.n	800708a <USBD_StdEPReq+0x1cc>
 8007024:	e097      	b.n	8007156 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <USBD_StdEPReq+0x17e>
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b80      	cmp	r3, #128	; 0x80
 8007030:	d004      	beq.n	800703c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fbd3 	bl	80077e0 <USBD_CtlError>
                break;
 800703a:	e091      	b.n	8007160 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800703c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	da0b      	bge.n	800705c <USBD_StdEPReq+0x19e>
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	3310      	adds	r3, #16
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	3304      	adds	r3, #4
 800705a:	e00b      	b.n	8007074 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	3304      	adds	r3, #4
 8007074:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2202      	movs	r2, #2
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fc1d 	bl	80078c2 <USBD_CtlSendData>
              break;
 8007088:	e06a      	b.n	8007160 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800708a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	da11      	bge.n	80070b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	3324      	adds	r3, #36	; 0x24
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d117      	bne.n	80070dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb96 	bl	80077e0 <USBD_CtlError>
                  break;
 80070b4:	e054      	b.n	8007160 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fb83 	bl	80077e0 <USBD_CtlError>
                  break;
 80070da:	e041      	b.n	8007160 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da0b      	bge.n	80070fc <USBD_StdEPReq+0x23e>
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	3310      	adds	r3, #16
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	3304      	adds	r3, #4
 80070fa:	e00b      	b.n	8007114 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4413      	add	r3, r2
 8007112:	3304      	adds	r3, #4
 8007114:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <USBD_StdEPReq+0x264>
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	2b80      	cmp	r3, #128	; 0x80
 8007120:	d103      	bne.n	800712a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e00e      	b.n	8007148 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f88c 	bl	800824c <USBD_LL_IsStallEP>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2201      	movs	r2, #1
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	e002      	b.n	8007148 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2202      	movs	r2, #2
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fbb7 	bl	80078c2 <USBD_CtlSendData>
              break;
 8007154:	e004      	b.n	8007160 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fb41 	bl	80077e0 <USBD_CtlError>
              break;
 800715e:	bf00      	nop
          }
          break;
 8007160:	e004      	b.n	800716c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fb3b 	bl	80077e0 <USBD_CtlError>
          break;
 800716a:	bf00      	nop
      }
      break;
 800716c:	e004      	b.n	8007178 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fb35 	bl	80077e0 <USBD_CtlError>
      break;
 8007176:	bf00      	nop
  }

  return ret;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	885b      	ldrh	r3, [r3, #2]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	2b06      	cmp	r3, #6
 80071a6:	f200 8128 	bhi.w	80073fa <USBD_GetDescriptor+0x276>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <USBD_GetDescriptor+0x2c>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071cd 	.word	0x080071cd
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	08007225 	.word	0x08007225
 80071bc:	080073fb 	.word	0x080073fb
 80071c0:	080073fb 	.word	0x080073fb
 80071c4:	0800739b 	.word	0x0800739b
 80071c8:	080073c7 	.word	0x080073c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	7c12      	ldrb	r2, [r2, #16]
 80071d8:	f107 0108 	add.w	r1, r7, #8
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	60f8      	str	r0, [r7, #12]
      break;
 80071e2:	e112      	b.n	800740a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7c1b      	ldrb	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10d      	bne.n	8007208 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	f107 0208 	add.w	r2, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3301      	adds	r3, #1
 8007202:	2202      	movs	r2, #2
 8007204:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007206:	e100      	b.n	800740a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	f107 0208 	add.w	r2, r7, #8
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3301      	adds	r3, #1
 800721e:	2202      	movs	r2, #2
 8007220:	701a      	strb	r2, [r3, #0]
      break;
 8007222:	e0f2      	b.n	800740a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b05      	cmp	r3, #5
 800722c:	f200 80ac 	bhi.w	8007388 <USBD_GetDescriptor+0x204>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBD_GetDescriptor+0xb4>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	08007251 	.word	0x08007251
 800723c:	08007285 	.word	0x08007285
 8007240:	080072b9 	.word	0x080072b9
 8007244:	080072ed 	.word	0x080072ed
 8007248:	08007321 	.word	0x08007321
 800724c:	08007355 	.word	0x08007355
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7c12      	ldrb	r2, [r2, #16]
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007272:	e091      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fab2 	bl	80077e0 <USBD_CtlError>
            err++;
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	3301      	adds	r3, #1
 8007280:	72fb      	strb	r3, [r7, #11]
          break;
 8007282:	e089      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e077      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa98 	bl	80077e0 <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e06f      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e05d      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa7e 	bl	80077e0 <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e055      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7c12      	ldrb	r2, [r2, #16]
 8007304:	f107 0108 	add.w	r1, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730e:	e043      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa64 	bl	80077e0 <USBD_CtlError>
            err++;
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	3301      	adds	r3, #1
 800731c:	72fb      	strb	r3, [r7, #11]
          break;
 800731e:	e03b      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	7c12      	ldrb	r2, [r2, #16]
 8007338:	f107 0108 	add.w	r1, r7, #8
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007342:	e029      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa4a 	bl	80077e0 <USBD_CtlError>
            err++;
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	3301      	adds	r3, #1
 8007350:	72fb      	strb	r3, [r7, #11]
          break;
 8007352:	e021      	b.n	8007398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7c12      	ldrb	r2, [r2, #16]
 800736c:	f107 0108 	add.w	r1, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007376:	e00f      	b.n	8007398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa30 	bl	80077e0 <USBD_CtlError>
            err++;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	3301      	adds	r3, #1
 8007384:	72fb      	strb	r3, [r7, #11]
          break;
 8007386:	e007      	b.n	8007398 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa28 	bl	80077e0 <USBD_CtlError>
          err++;
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	3301      	adds	r3, #1
 8007394:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007396:	bf00      	nop
      }
      break;
 8007398:	e037      	b.n	800740a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	7c1b      	ldrb	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073aa:	f107 0208 	add.w	r2, r7, #8
 80073ae:	4610      	mov	r0, r2
 80073b0:	4798      	blx	r3
 80073b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073b4:	e029      	b.n	800740a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa11 	bl	80077e0 <USBD_CtlError>
        err++;
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	3301      	adds	r3, #1
 80073c2:	72fb      	strb	r3, [r7, #11]
      break;
 80073c4:	e021      	b.n	800740a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	7c1b      	ldrb	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10d      	bne.n	80073ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	f107 0208 	add.w	r2, r7, #8
 80073da:	4610      	mov	r0, r2
 80073dc:	4798      	blx	r3
 80073de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	2207      	movs	r2, #7
 80073e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073e8:	e00f      	b.n	800740a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9f7 	bl	80077e0 <USBD_CtlError>
        err++;
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	3301      	adds	r3, #1
 80073f6:	72fb      	strb	r3, [r7, #11]
      break;
 80073f8:	e007      	b.n	800740a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f9ef 	bl	80077e0 <USBD_CtlError>
      err++;
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	3301      	adds	r3, #1
 8007406:	72fb      	strb	r3, [r7, #11]
      break;
 8007408:	bf00      	nop
  }

  if (err != 0U)
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d11e      	bne.n	800744e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	88db      	ldrh	r3, [r3, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d016      	beq.n	8007446 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007418:	893b      	ldrh	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00e      	beq.n	800743c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	88da      	ldrh	r2, [r3, #6]
 8007422:	893b      	ldrh	r3, [r7, #8]
 8007424:	4293      	cmp	r3, r2
 8007426:	bf28      	it	cs
 8007428:	4613      	movcs	r3, r2
 800742a:	b29b      	uxth	r3, r3
 800742c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800742e:	893b      	ldrh	r3, [r7, #8]
 8007430:	461a      	mov	r2, r3
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fa44 	bl	80078c2 <USBD_CtlSendData>
 800743a:	e009      	b.n	8007450 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f9ce 	bl	80077e0 <USBD_CtlError>
 8007444:	e004      	b.n	8007450 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa95 	bl	8007976 <USBD_CtlSendStatus>
 800744c:	e000      	b.n	8007450 <USBD_GetDescriptor+0x2cc>
    return;
 800744e:	bf00      	nop
  }
}
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop

08007458 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	889b      	ldrh	r3, [r3, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d131      	bne.n	80074ce <USBD_SetAddress+0x76>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	88db      	ldrh	r3, [r3, #6]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d12d      	bne.n	80074ce <USBD_SetAddress+0x76>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	885b      	ldrh	r3, [r3, #2]
 8007476:	2b7f      	cmp	r3, #127	; 0x7f
 8007478:	d829      	bhi.n	80074ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	885b      	ldrh	r3, [r3, #2]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007484:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b03      	cmp	r3, #3
 8007490:	d104      	bne.n	800749c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f9a3 	bl	80077e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749a:	e01d      	b.n	80074d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7bfa      	ldrb	r2, [r7, #15]
 80074a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fefb 	bl	80082a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa61 	bl	8007976 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c2:	e009      	b.n	80074d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074cc:	e004      	b.n	80074d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f985 	bl	80077e0 <USBD_CtlError>
  }
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	885b      	ldrh	r3, [r3, #2]
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	4b4c      	ldr	r3, [pc, #304]	; (8007628 <USBD_SetConfig+0x148>)
 80074f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074f8:	4b4b      	ldr	r3, [pc, #300]	; (8007628 <USBD_SetConfig+0x148>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d905      	bls.n	800750c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f96c 	bl	80077e0 <USBD_CtlError>
    return USBD_FAIL;
 8007508:	2303      	movs	r3, #3
 800750a:	e088      	b.n	800761e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d002      	beq.n	800751e <USBD_SetConfig+0x3e>
 8007518:	2b03      	cmp	r3, #3
 800751a:	d025      	beq.n	8007568 <USBD_SetConfig+0x88>
 800751c:	e071      	b.n	8007602 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800751e:	4b42      	ldr	r3, [pc, #264]	; (8007628 <USBD_SetConfig+0x148>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01c      	beq.n	8007560 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007526:	4b40      	ldr	r3, [pc, #256]	; (8007628 <USBD_SetConfig+0x148>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007530:	4b3d      	ldr	r3, [pc, #244]	; (8007628 <USBD_SetConfig+0x148>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff f948 	bl	80067cc <USBD_SetClassConfig>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d004      	beq.n	8007550 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f949 	bl	80077e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800754e:	e065      	b.n	800761c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa10 	bl	8007976 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2203      	movs	r2, #3
 800755a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800755e:	e05d      	b.n	800761c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fa08 	bl	8007976 <USBD_CtlSendStatus>
      break;
 8007566:	e059      	b.n	800761c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007568:	4b2f      	ldr	r3, [pc, #188]	; (8007628 <USBD_SetConfig+0x148>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d112      	bne.n	8007596 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007578:	4b2b      	ldr	r3, [pc, #172]	; (8007628 <USBD_SetConfig+0x148>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007582:	4b29      	ldr	r3, [pc, #164]	; (8007628 <USBD_SetConfig+0x148>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff f93b 	bl	8006804 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f9f1 	bl	8007976 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007594:	e042      	b.n	800761c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007596:	4b24      	ldr	r3, [pc, #144]	; (8007628 <USBD_SetConfig+0x148>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d02a      	beq.n	80075fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7ff f929 	bl	8006804 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075b2:	4b1d      	ldr	r3, [pc, #116]	; (8007628 <USBD_SetConfig+0x148>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075bc:	4b1a      	ldr	r3, [pc, #104]	; (8007628 <USBD_SetConfig+0x148>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff f902 	bl	80067cc <USBD_SetClassConfig>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00f      	beq.n	80075f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f903 	bl	80077e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff f90e 	bl	8006804 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075f0:	e014      	b.n	800761c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9bf 	bl	8007976 <USBD_CtlSendStatus>
      break;
 80075f8:	e010      	b.n	800761c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9bb 	bl	8007976 <USBD_CtlSendStatus>
      break;
 8007600:	e00c      	b.n	800761c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f8eb 	bl	80077e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <USBD_SetConfig+0x148>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff f8f7 	bl	8006804 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007616:	2303      	movs	r3, #3
 8007618:	73fb      	strb	r3, [r7, #15]
      break;
 800761a:	bf00      	nop
  }

  return ret;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000450 	.word	0x20000450

0800762c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	88db      	ldrh	r3, [r3, #6]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d004      	beq.n	8007648 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f8cd 	bl	80077e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007646:	e023      	b.n	8007690 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	dc02      	bgt.n	800765a <USBD_GetConfig+0x2e>
 8007654:	2b00      	cmp	r3, #0
 8007656:	dc03      	bgt.n	8007660 <USBD_GetConfig+0x34>
 8007658:	e015      	b.n	8007686 <USBD_GetConfig+0x5a>
 800765a:	2b03      	cmp	r3, #3
 800765c:	d00b      	beq.n	8007676 <USBD_GetConfig+0x4a>
 800765e:	e012      	b.n	8007686 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3308      	adds	r3, #8
 800766a:	2201      	movs	r2, #1
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f927 	bl	80078c2 <USBD_CtlSendData>
        break;
 8007674:	e00c      	b.n	8007690 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3304      	adds	r3, #4
 800767a:	2201      	movs	r2, #1
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f91f 	bl	80078c2 <USBD_CtlSendData>
        break;
 8007684:	e004      	b.n	8007690 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f8a9 	bl	80077e0 <USBD_CtlError>
        break;
 800768e:	bf00      	nop
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d81e      	bhi.n	80076ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	88db      	ldrh	r3, [r3, #6]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d004      	beq.n	80076c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f890 	bl	80077e0 <USBD_CtlError>
        break;
 80076c0:	e01a      	b.n	80076f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f043 0202 	orr.w	r2, r3, #2
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	330c      	adds	r3, #12
 80076e2:	2202      	movs	r2, #2
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8eb 	bl	80078c2 <USBD_CtlSendData>
      break;
 80076ec:	e004      	b.n	80076f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f875 	bl	80077e0 <USBD_CtlError>
      break;
 80076f6:	bf00      	nop
  }
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	885b      	ldrh	r3, [r3, #2]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d106      	bne.n	8007720 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f92b 	bl	8007976 <USBD_CtlSendStatus>
  }
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	2b02      	cmp	r3, #2
 800773e:	d80b      	bhi.n	8007758 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	885b      	ldrh	r3, [r3, #2]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d10c      	bne.n	8007762 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f910 	bl	8007976 <USBD_CtlSendStatus>
      }
      break;
 8007756:	e004      	b.n	8007762 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f840 	bl	80077e0 <USBD_CtlError>
      break;
 8007760:	e000      	b.n	8007764 <USBD_ClrFeature+0x3c>
      break;
 8007762:	bf00      	nop
  }
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	781a      	ldrb	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3301      	adds	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fabb 	bl	8006d12 <SWAPBYTE>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3301      	adds	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7ff faae 	bl	8006d12 <SWAPBYTE>
 80077b6:	4603      	mov	r3, r0
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff faa1 	bl	8006d12 <SWAPBYTE>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	80da      	strh	r2, [r3, #6]
}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ea:	2180      	movs	r1, #128	; 0x80
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fcef 	bl	80081d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077f2:	2100      	movs	r1, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fceb 	bl	80081d0 <USBD_LL_StallEP>
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d036      	beq.n	8007886 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800781c:	6938      	ldr	r0, [r7, #16]
 800781e:	f000 f836 	bl	800788e <USBD_GetLen>
 8007822:	4603      	mov	r3, r0
 8007824:	3301      	adds	r3, #1
 8007826:	b29b      	uxth	r3, r3
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	4413      	add	r3, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	701a      	strb	r2, [r3, #0]
  idx++;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	3301      	adds	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	4413      	add	r3, r2
 8007848:	2203      	movs	r2, #3
 800784a:	701a      	strb	r2, [r3, #0]
  idx++;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	3301      	adds	r3, #1
 8007850:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007852:	e013      	b.n	800787c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	4413      	add	r3, r2
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	7812      	ldrb	r2, [r2, #0]
 800785e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	3301      	adds	r3, #1
 8007864:	613b      	str	r3, [r7, #16]
    idx++;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	3301      	adds	r3, #1
 800786a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	4413      	add	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
    idx++;
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	3301      	adds	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e7      	bne.n	8007854 <USBD_GetString+0x52>
 8007884:	e000      	b.n	8007888 <USBD_GetString+0x86>
    return;
 8007886:	bf00      	nop
  }
}
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800789e:	e005      	b.n	80078ac <USBD_GetLen+0x1e>
  {
    len++;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	3301      	adds	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f5      	bne.n	80078a0 <USBD_GetLen+0x12>
  }

  return len;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2202      	movs	r2, #2
 80078d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	2100      	movs	r1, #0
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fcfa 	bl	80082e2 <USBD_LL_Transmit>

  return USBD_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	2100      	movs	r1, #0
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fce9 	bl	80082e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2203      	movs	r2, #3
 800792a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	2100      	movs	r1, #0
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fced 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	2100      	movs	r1, #0
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 fcdc 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2204      	movs	r2, #4
 8007982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007986:	2300      	movs	r3, #0
 8007988:	2200      	movs	r2, #0
 800798a:	2100      	movs	r1, #0
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fca8 	bl	80082e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2205      	movs	r2, #5
 80079a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079ac:	2300      	movs	r3, #0
 80079ae:	2200      	movs	r2, #0
 80079b0:	2100      	movs	r1, #0
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fcb6 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079c8:	2200      	movs	r2, #0
 80079ca:	4912      	ldr	r1, [pc, #72]	; (8007a14 <MX_USB_DEVICE_Init+0x50>)
 80079cc:	4812      	ldr	r0, [pc, #72]	; (8007a18 <MX_USB_DEVICE_Init+0x54>)
 80079ce:	f7fe fe8f 	bl	80066f0 <USBD_Init>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079d8:	f7f9 f8b2 	bl	8000b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079dc:	490f      	ldr	r1, [pc, #60]	; (8007a1c <MX_USB_DEVICE_Init+0x58>)
 80079de:	480e      	ldr	r0, [pc, #56]	; (8007a18 <MX_USB_DEVICE_Init+0x54>)
 80079e0:	f7fe feb6 	bl	8006750 <USBD_RegisterClass>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079ea:	f7f9 f8a9 	bl	8000b40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079ee:	490c      	ldr	r1, [pc, #48]	; (8007a20 <MX_USB_DEVICE_Init+0x5c>)
 80079f0:	4809      	ldr	r0, [pc, #36]	; (8007a18 <MX_USB_DEVICE_Init+0x54>)
 80079f2:	f7fe fdd7 	bl	80065a4 <USBD_CDC_RegisterInterface>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079fc:	f7f9 f8a0 	bl	8000b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a00:	4805      	ldr	r0, [pc, #20]	; (8007a18 <MX_USB_DEVICE_Init+0x54>)
 8007a02:	f7fe fecc 	bl	800679e <USBD_Start>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a0c:	f7f9 f898 	bl	8000b40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a10:	bf00      	nop
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000130 	.word	0x20000130
 8007a18:	20000454 	.word	0x20000454
 8007a1c:	20000018 	.word	0x20000018
 8007a20:	2000011c 	.word	0x2000011c

08007a24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4905      	ldr	r1, [pc, #20]	; (8007a40 <CDC_Init_FS+0x1c>)
 8007a2c:	4805      	ldr	r0, [pc, #20]	; (8007a44 <CDC_Init_FS+0x20>)
 8007a2e:	f7fe fdce 	bl	80065ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a32:	4905      	ldr	r1, [pc, #20]	; (8007a48 <CDC_Init_FS+0x24>)
 8007a34:	4803      	ldr	r0, [pc, #12]	; (8007a44 <CDC_Init_FS+0x20>)
 8007a36:	f7fe fde8 	bl	800660a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000f24 	.word	0x20000f24
 8007a44:	20000454 	.word	0x20000454
 8007a48:	20000724 	.word	0x20000724

08007a4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	71fb      	strb	r3, [r7, #7]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	2b23      	cmp	r3, #35	; 0x23
 8007a70:	d84a      	bhi.n	8007b08 <CDC_Control_FS+0xac>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <CDC_Control_FS+0x1c>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007b09 	.word	0x08007b09
 8007a7c:	08007b09 	.word	0x08007b09
 8007a80:	08007b09 	.word	0x08007b09
 8007a84:	08007b09 	.word	0x08007b09
 8007a88:	08007b09 	.word	0x08007b09
 8007a8c:	08007b09 	.word	0x08007b09
 8007a90:	08007b09 	.word	0x08007b09
 8007a94:	08007b09 	.word	0x08007b09
 8007a98:	08007b09 	.word	0x08007b09
 8007a9c:	08007b09 	.word	0x08007b09
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007b09 	.word	0x08007b09
 8007aa8:	08007b09 	.word	0x08007b09
 8007aac:	08007b09 	.word	0x08007b09
 8007ab0:	08007b09 	.word	0x08007b09
 8007ab4:	08007b09 	.word	0x08007b09
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	08007b09 	.word	0x08007b09
 8007ac0:	08007b09 	.word	0x08007b09
 8007ac4:	08007b09 	.word	0x08007b09
 8007ac8:	08007b09 	.word	0x08007b09
 8007acc:	08007b09 	.word	0x08007b09
 8007ad0:	08007b09 	.word	0x08007b09
 8007ad4:	08007b09 	.word	0x08007b09
 8007ad8:	08007b09 	.word	0x08007b09
 8007adc:	08007b09 	.word	0x08007b09
 8007ae0:	08007b09 	.word	0x08007b09
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b09 	.word	0x08007b09
 8007aec:	08007b09 	.word	0x08007b09
 8007af0:	08007b09 	.word	0x08007b09
 8007af4:	08007b09 	.word	0x08007b09
 8007af8:	08007b09 	.word	0x08007b09
 8007afc:	08007b09 	.word	0x08007b09
 8007b00:	08007b09 	.word	0x08007b09
 8007b04:	08007b09 	.word	0x08007b09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b08:	bf00      	nop
  }

  return (USBD_OK);
 8007b0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4805      	ldr	r0, [pc, #20]	; (8007b3c <CDC_Receive_FS+0x24>)
 8007b26:	f7fe fd70 	bl	800660a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b2a:	4804      	ldr	r0, [pc, #16]	; (8007b3c <CDC_Receive_FS+0x24>)
 8007b2c:	f7fe fdb6 	bl	800669c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000454 	.word	0x20000454

08007b40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b50:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <CDC_Transmit_FS+0x48>)
 8007b52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e00b      	b.n	8007b7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b66:	887b      	ldrh	r3, [r7, #2]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	4806      	ldr	r0, [pc, #24]	; (8007b88 <CDC_Transmit_FS+0x48>)
 8007b6e:	f7fe fd2e 	bl	80065ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b72:	4805      	ldr	r0, [pc, #20]	; (8007b88 <CDC_Transmit_FS+0x48>)
 8007b74:	f7fe fd62 	bl	800663c <USBD_CDC_TransmitPacket>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000454 	.word	0x20000454

08007b8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2212      	movs	r2, #18
 8007bc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bc2:	4b03      	ldr	r3, [pc, #12]	; (8007bd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	2000014c 	.word	0x2000014c

08007bd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	6039      	str	r1, [r7, #0]
 8007bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2204      	movs	r2, #4
 8007be4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007be6:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20000160 	.word	0x20000160

08007bf8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	6039      	str	r1, [r7, #0]
 8007c02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	4907      	ldr	r1, [pc, #28]	; (8007c2c <USBD_FS_ProductStrDescriptor+0x34>)
 8007c0e:	4808      	ldr	r0, [pc, #32]	; (8007c30 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c10:	f7ff fdf7 	bl	8007802 <USBD_GetString>
 8007c14:	e004      	b.n	8007c20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	4904      	ldr	r1, [pc, #16]	; (8007c2c <USBD_FS_ProductStrDescriptor+0x34>)
 8007c1a:	4805      	ldr	r0, [pc, #20]	; (8007c30 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c1c:	f7ff fdf1 	bl	8007802 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c20:	4b02      	ldr	r3, [pc, #8]	; (8007c2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20001724 	.word	0x20001724
 8007c30:	08008dbc 	.word	0x08008dbc

08007c34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	4904      	ldr	r1, [pc, #16]	; (8007c54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c44:	4804      	ldr	r0, [pc, #16]	; (8007c58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c46:	f7ff fddc 	bl	8007802 <USBD_GetString>
  return USBD_StrDesc;
 8007c4a:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20001724 	.word	0x20001724
 8007c58:	08008dd4 	.word	0x08008dd4

08007c5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	6039      	str	r1, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	221a      	movs	r2, #26
 8007c6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c6e:	f000 f843 	bl	8007cf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c72:	4b02      	ldr	r3, [pc, #8]	; (8007c7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000164 	.word	0x20000164

08007c80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	6039      	str	r1, [r7, #0]
 8007c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4907      	ldr	r1, [pc, #28]	; (8007cb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c96:	4808      	ldr	r0, [pc, #32]	; (8007cb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c98:	f7ff fdb3 	bl	8007802 <USBD_GetString>
 8007c9c:	e004      	b.n	8007ca8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4904      	ldr	r1, [pc, #16]	; (8007cb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ca2:	4805      	ldr	r0, [pc, #20]	; (8007cb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ca4:	f7ff fdad 	bl	8007802 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20001724 	.word	0x20001724
 8007cb8:	08008de8 	.word	0x08008de8

08007cbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d105      	bne.n	8007cda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	4907      	ldr	r1, [pc, #28]	; (8007cf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cd2:	4808      	ldr	r0, [pc, #32]	; (8007cf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cd4:	f7ff fd95 	bl	8007802 <USBD_GetString>
 8007cd8:	e004      	b.n	8007ce4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	4904      	ldr	r1, [pc, #16]	; (8007cf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cde:	4805      	ldr	r0, [pc, #20]	; (8007cf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ce0:	f7ff fd8f 	bl	8007802 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20001724 	.word	0x20001724
 8007cf4:	08008df4 	.word	0x08008df4

08007cf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <Get_SerialNum+0x44>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d04:	4b0e      	ldr	r3, [pc, #56]	; (8007d40 <Get_SerialNum+0x48>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d0a:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <Get_SerialNum+0x4c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d1e:	2208      	movs	r2, #8
 8007d20:	4909      	ldr	r1, [pc, #36]	; (8007d48 <Get_SerialNum+0x50>)
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f814 	bl	8007d50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d28:	2204      	movs	r2, #4
 8007d2a:	4908      	ldr	r1, [pc, #32]	; (8007d4c <Get_SerialNum+0x54>)
 8007d2c:	68b8      	ldr	r0, [r7, #8]
 8007d2e:	f000 f80f 	bl	8007d50 <IntToUnicode>
  }
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	1fff7a10 	.word	0x1fff7a10
 8007d40:	1fff7a14 	.word	0x1fff7a14
 8007d44:	1fff7a18 	.word	0x1fff7a18
 8007d48:	20000166 	.word	0x20000166
 8007d4c:	20000176 	.word	0x20000176

08007d50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]
 8007d66:	e027      	b.n	8007db8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	0f1b      	lsrs	r3, r3, #28
 8007d6c:	2b09      	cmp	r3, #9
 8007d6e:	d80b      	bhi.n	8007d88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	0f1b      	lsrs	r3, r3, #28
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	440b      	add	r3, r1
 8007d80:	3230      	adds	r2, #48	; 0x30
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e00a      	b.n	8007d9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	0f1b      	lsrs	r3, r3, #28
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4619      	mov	r1, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	440b      	add	r3, r1
 8007d98:	3237      	adds	r2, #55	; 0x37
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	011b      	lsls	r3, r3, #4
 8007da2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	3301      	adds	r3, #1
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	4413      	add	r3, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	3301      	adds	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
 8007db8:	7dfa      	ldrb	r2, [r7, #23]
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d3d3      	bcc.n	8007d68 <IntToUnicode+0x18>
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08a      	sub	sp, #40	; 0x28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	609a      	str	r2, [r3, #8]
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007df0:	d147      	bne.n	8007e82 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007df2:	2300      	movs	r3, #0
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	4b25      	ldr	r3, [pc, #148]	; (8007e8c <HAL_PCD_MspInit+0xbc>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	4a24      	ldr	r2, [pc, #144]	; (8007e8c <HAL_PCD_MspInit+0xbc>)
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	6313      	str	r3, [r2, #48]	; 0x30
 8007e02:	4b22      	ldr	r3, [pc, #136]	; (8007e8c <HAL_PCD_MspInit+0xbc>)
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e14:	2300      	movs	r3, #0
 8007e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e1c:	f107 0314 	add.w	r3, r7, #20
 8007e20:	4619      	mov	r1, r3
 8007e22:	481b      	ldr	r0, [pc, #108]	; (8007e90 <HAL_PCD_MspInit+0xc0>)
 8007e24:	f7f9 fe28 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e36:	2300      	movs	r3, #0
 8007e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e3a:	230a      	movs	r3, #10
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e3e:	f107 0314 	add.w	r3, r7, #20
 8007e42:	4619      	mov	r1, r3
 8007e44:	4812      	ldr	r0, [pc, #72]	; (8007e90 <HAL_PCD_MspInit+0xc0>)
 8007e46:	f7f9 fe17 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e4a:	4b10      	ldr	r3, [pc, #64]	; (8007e8c <HAL_PCD_MspInit+0xbc>)
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4e:	4a0f      	ldr	r2, [pc, #60]	; (8007e8c <HAL_PCD_MspInit+0xbc>)
 8007e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e54:	6353      	str	r3, [r2, #52]	; 0x34
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <HAL_PCD_MspInit+0xbc>)
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	4a0b      	ldr	r2, [pc, #44]	; (8007e8c <HAL_PCD_MspInit+0xbc>)
 8007e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e64:	6453      	str	r3, [r2, #68]	; 0x44
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <HAL_PCD_MspInit+0xbc>)
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	2043      	movs	r0, #67	; 0x43
 8007e78:	f7f9 fdc7 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e7c:	2043      	movs	r0, #67	; 0x43
 8007e7e:	f7f9 fde0 	bl	8001a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e82:	bf00      	nop
 8007e84:	3728      	adds	r7, #40	; 0x28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	40023800 	.word	0x40023800
 8007e90:	40020000 	.word	0x40020000

08007e94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f7fe fcc2 	bl	8006834 <USBD_LL_SetupStage>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	1a9b      	subs	r3, r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	78fb      	ldrb	r3, [r7, #3]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	f7fe fcfc 	bl	80068de <USBD_LL_DataOutStage>
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	4613      	mov	r3, r2
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	1a9b      	subs	r3, r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	440b      	add	r3, r1
 8007f0e:	3348      	adds	r3, #72	; 0x48
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	4619      	mov	r1, r3
 8007f16:	f7fe fd45 	bl	80069a4 <USBD_LL_DataInStage>
}
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fe59 	bl	8006be8 <USBD_LL_SOF>
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f46:	2301      	movs	r3, #1
 8007f48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
 8007f56:	e008      	b.n	8007f6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d102      	bne.n	8007f66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
 8007f64:	e001      	b.n	8007f6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f66:	f7f8 fdeb 	bl	8000b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f70:	7bfa      	ldrb	r2, [r7, #15]
 8007f72:	4611      	mov	r1, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe fdf9 	bl	8006b6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fda5 	bl	8006ad0 <USBD_LL_Reset>
}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fdf4 	bl	8006b8c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fb6:	f043 0301 	orr.w	r3, r3, #1
 8007fba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <HAL_PCD_SuspendCallback+0x48>)
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	4a03      	ldr	r2, [pc, #12]	; (8007fd8 <HAL_PCD_SuspendCallback+0x48>)
 8007fca:	f043 0306 	orr.w	r3, r3, #6
 8007fce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	e000ed00 	.word	0xe000ed00

08007fdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fde4 	bl	8006bb8 <USBD_LL_Resume>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe fe32 	bl	8006c78 <USBD_LL_IsoOUTIncomplete>
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe fdfa 	bl	8006c2c <USBD_LL_IsoINIncomplete>
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe fe38 	bl	8006cc4 <USBD_LL_DevConnected>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fe35 	bl	8006cda <USBD_LL_DevDisconnected>
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d13c      	bne.n	8008102 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008088:	4a20      	ldr	r2, [pc, #128]	; (800810c <USBD_LL_Init+0x94>)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1e      	ldr	r2, [pc, #120]	; (800810c <USBD_LL_Init+0x94>)
 8008094:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008098:	4b1c      	ldr	r3, [pc, #112]	; (800810c <USBD_LL_Init+0x94>)
 800809a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800809e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80080a0:	4b1a      	ldr	r3, [pc, #104]	; (800810c <USBD_LL_Init+0x94>)
 80080a2:	2204      	movs	r2, #4
 80080a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80080a6:	4b19      	ldr	r3, [pc, #100]	; (800810c <USBD_LL_Init+0x94>)
 80080a8:	2202      	movs	r2, #2
 80080aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080ac:	4b17      	ldr	r3, [pc, #92]	; (800810c <USBD_LL_Init+0x94>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080b2:	4b16      	ldr	r3, [pc, #88]	; (800810c <USBD_LL_Init+0x94>)
 80080b4:	2202      	movs	r2, #2
 80080b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080b8:	4b14      	ldr	r3, [pc, #80]	; (800810c <USBD_LL_Init+0x94>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <USBD_LL_Init+0x94>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80080c4:	4b11      	ldr	r3, [pc, #68]	; (800810c <USBD_LL_Init+0x94>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80080ca:	4b10      	ldr	r3, [pc, #64]	; (800810c <USBD_LL_Init+0x94>)
 80080cc:	2201      	movs	r2, #1
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080d0:	4b0e      	ldr	r3, [pc, #56]	; (800810c <USBD_LL_Init+0x94>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080d6:	480d      	ldr	r0, [pc, #52]	; (800810c <USBD_LL_Init+0x94>)
 80080d8:	f7fa fc9a 	bl	8002a10 <HAL_PCD_Init>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080e2:	f7f8 fd2d 	bl	8000b40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080e6:	2180      	movs	r1, #128	; 0x80
 80080e8:	4808      	ldr	r0, [pc, #32]	; (800810c <USBD_LL_Init+0x94>)
 80080ea:	f7fb fdf8 	bl	8003cde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080ee:	2240      	movs	r2, #64	; 0x40
 80080f0:	2100      	movs	r1, #0
 80080f2:	4806      	ldr	r0, [pc, #24]	; (800810c <USBD_LL_Init+0x94>)
 80080f4:	f7fb fdac 	bl	8003c50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080f8:	2280      	movs	r2, #128	; 0x80
 80080fa:	2101      	movs	r1, #1
 80080fc:	4803      	ldr	r0, [pc, #12]	; (800810c <USBD_LL_Init+0x94>)
 80080fe:	f7fb fda7 	bl	8003c50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20001924 	.word	0x20001924

08008110 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008126:	4618      	mov	r0, r3
 8008128:	f7fa fd8f 	bl	8002c4a <HAL_PCD_Start>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 f942 	bl	80083bc <USBD_Get_USB_Status>
 8008138:	4603      	mov	r3, r0
 800813a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800813c:	7bbb      	ldrb	r3, [r7, #14]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	4608      	mov	r0, r1
 8008150:	4611      	mov	r1, r2
 8008152:	461a      	mov	r2, r3
 8008154:	4603      	mov	r3, r0
 8008156:	70fb      	strb	r3, [r7, #3]
 8008158:	460b      	mov	r3, r1
 800815a:	70bb      	strb	r3, [r7, #2]
 800815c:	4613      	mov	r3, r2
 800815e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800816e:	78bb      	ldrb	r3, [r7, #2]
 8008170:	883a      	ldrh	r2, [r7, #0]
 8008172:	78f9      	ldrb	r1, [r7, #3]
 8008174:	f7fb f973 	bl	800345e <HAL_PCD_EP_Open>
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	4618      	mov	r0, r3
 8008180:	f000 f91c 	bl	80083bc <USBD_Get_USB_Status>
 8008184:	4603      	mov	r3, r0
 8008186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008188:	7bbb      	ldrb	r3, [r7, #14]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081ac:	78fa      	ldrb	r2, [r7, #3]
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fb f9bc 	bl	800352e <HAL_PCD_EP_Close>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f8fd 	bl	80083bc <USBD_Get_USB_Status>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fb fa94 	bl	800371c <HAL_PCD_EP_SetStall>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f8de 	bl	80083bc <USBD_Get_USB_Status>
 8008200:	4603      	mov	r3, r0
 8008202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008204:	7bbb      	ldrb	r3, [r7, #14]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008228:	78fa      	ldrb	r2, [r7, #3]
 800822a:	4611      	mov	r1, r2
 800822c:	4618      	mov	r0, r3
 800822e:	f7fb fad9 	bl	80037e4 <HAL_PCD_EP_ClrStall>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 f8bf 	bl	80083bc <USBD_Get_USB_Status>
 800823e:	4603      	mov	r3, r0
 8008240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008242:	7bbb      	ldrb	r3, [r7, #14]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800825e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008264:	2b00      	cmp	r3, #0
 8008266:	da0b      	bge.n	8008280 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	4613      	mov	r3, r2
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	333e      	adds	r3, #62	; 0x3e
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	e00b      	b.n	8008298 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	4613      	mov	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008296:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fb f8a6 	bl	8003414 <HAL_PCD_SetAddress>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f874 	bl	80083bc <USBD_Get_USB_Status>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b086      	sub	sp, #24
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
 80082ee:	460b      	mov	r3, r1
 80082f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008300:	7af9      	ldrb	r1, [r7, #11]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	f7fb f9bf 	bl	8003688 <HAL_PCD_EP_Transmit>
 800830a:	4603      	mov	r3, r0
 800830c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	4618      	mov	r0, r3
 8008312:	f000 f853 	bl	80083bc <USBD_Get_USB_Status>
 8008316:	4603      	mov	r3, r0
 8008318:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800831a:	7dbb      	ldrb	r3, [r7, #22]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	607a      	str	r2, [r7, #4]
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	460b      	mov	r3, r1
 8008332:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008342:	7af9      	ldrb	r1, [r7, #11]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	f7fb f93b 	bl	80035c2 <HAL_PCD_EP_Receive>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f832 	bl	80083bc <USBD_Get_USB_Status>
 8008358:	4603      	mov	r3, r0
 800835a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800835c:	7dbb      	ldrb	r3, [r7, #22]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008378:	78fa      	ldrb	r2, [r7, #3]
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f7fb f96b 	bl	8003658 <HAL_PCD_EP_GetRxCount>
 8008382:	4603      	mov	r3, r0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008394:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <USBD_static_malloc+0x18>)
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20001d2c 	.word	0x20001d2c

080083a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d817      	bhi.n	8008400 <USBD_Get_USB_Status+0x44>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <USBD_Get_USB_Status+0x1c>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	080083ef 	.word	0x080083ef
 80083e0:	080083f5 	.word	0x080083f5
 80083e4:	080083fb 	.word	0x080083fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
    break;
 80083ec:	e00b      	b.n	8008406 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083ee:	2303      	movs	r3, #3
 80083f0:	73fb      	strb	r3, [r7, #15]
    break;
 80083f2:	e008      	b.n	8008406 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
    break;
 80083f8:	e005      	b.n	8008406 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083fa:	2303      	movs	r3, #3
 80083fc:	73fb      	strb	r3, [r7, #15]
    break;
 80083fe:	e002      	b.n	8008406 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008400:	2303      	movs	r3, #3
 8008402:	73fb      	strb	r3, [r7, #15]
    break;
 8008404:	bf00      	nop
  }
  return usb_status;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <__errno>:
 8008414:	4b01      	ldr	r3, [pc, #4]	; (800841c <__errno+0x8>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	20000180 	.word	0x20000180

08008420 <__libc_init_array>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4d0d      	ldr	r5, [pc, #52]	; (8008458 <__libc_init_array+0x38>)
 8008424:	4c0d      	ldr	r4, [pc, #52]	; (800845c <__libc_init_array+0x3c>)
 8008426:	1b64      	subs	r4, r4, r5
 8008428:	10a4      	asrs	r4, r4, #2
 800842a:	2600      	movs	r6, #0
 800842c:	42a6      	cmp	r6, r4
 800842e:	d109      	bne.n	8008444 <__libc_init_array+0x24>
 8008430:	4d0b      	ldr	r5, [pc, #44]	; (8008460 <__libc_init_array+0x40>)
 8008432:	4c0c      	ldr	r4, [pc, #48]	; (8008464 <__libc_init_array+0x44>)
 8008434:	f000 fca2 	bl	8008d7c <_init>
 8008438:	1b64      	subs	r4, r4, r5
 800843a:	10a4      	asrs	r4, r4, #2
 800843c:	2600      	movs	r6, #0
 800843e:	42a6      	cmp	r6, r4
 8008440:	d105      	bne.n	800844e <__libc_init_array+0x2e>
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	f855 3b04 	ldr.w	r3, [r5], #4
 8008448:	4798      	blx	r3
 800844a:	3601      	adds	r6, #1
 800844c:	e7ee      	b.n	800842c <__libc_init_array+0xc>
 800844e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008452:	4798      	blx	r3
 8008454:	3601      	adds	r6, #1
 8008456:	e7f2      	b.n	800843e <__libc_init_array+0x1e>
 8008458:	08008e58 	.word	0x08008e58
 800845c:	08008e58 	.word	0x08008e58
 8008460:	08008e58 	.word	0x08008e58
 8008464:	08008e5c 	.word	0x08008e5c

08008468 <memset>:
 8008468:	4402      	add	r2, r0
 800846a:	4603      	mov	r3, r0
 800846c:	4293      	cmp	r3, r2
 800846e:	d100      	bne.n	8008472 <memset+0xa>
 8008470:	4770      	bx	lr
 8008472:	f803 1b01 	strb.w	r1, [r3], #1
 8008476:	e7f9      	b.n	800846c <memset+0x4>

08008478 <sniprintf>:
 8008478:	b40c      	push	{r2, r3}
 800847a:	b530      	push	{r4, r5, lr}
 800847c:	4b17      	ldr	r3, [pc, #92]	; (80084dc <sniprintf+0x64>)
 800847e:	1e0c      	subs	r4, r1, #0
 8008480:	681d      	ldr	r5, [r3, #0]
 8008482:	b09d      	sub	sp, #116	; 0x74
 8008484:	da08      	bge.n	8008498 <sniprintf+0x20>
 8008486:	238b      	movs	r3, #139	; 0x8b
 8008488:	602b      	str	r3, [r5, #0]
 800848a:	f04f 30ff 	mov.w	r0, #4294967295
 800848e:	b01d      	add	sp, #116	; 0x74
 8008490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008494:	b002      	add	sp, #8
 8008496:	4770      	bx	lr
 8008498:	f44f 7302 	mov.w	r3, #520	; 0x208
 800849c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084a0:	bf14      	ite	ne
 80084a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084a6:	4623      	moveq	r3, r4
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	9307      	str	r3, [sp, #28]
 80084ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084b0:	9002      	str	r0, [sp, #8]
 80084b2:	9006      	str	r0, [sp, #24]
 80084b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084ba:	ab21      	add	r3, sp, #132	; 0x84
 80084bc:	a902      	add	r1, sp, #8
 80084be:	4628      	mov	r0, r5
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	f000 f869 	bl	8008598 <_svfiprintf_r>
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	bfbc      	itt	lt
 80084ca:	238b      	movlt	r3, #139	; 0x8b
 80084cc:	602b      	strlt	r3, [r5, #0]
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	d0dd      	beq.n	800848e <sniprintf+0x16>
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	e7d9      	b.n	800848e <sniprintf+0x16>
 80084da:	bf00      	nop
 80084dc:	20000180 	.word	0x20000180

080084e0 <__ssputs_r>:
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	688e      	ldr	r6, [r1, #8]
 80084e6:	429e      	cmp	r6, r3
 80084e8:	4682      	mov	sl, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	4690      	mov	r8, r2
 80084ee:	461f      	mov	r7, r3
 80084f0:	d838      	bhi.n	8008564 <__ssputs_r+0x84>
 80084f2:	898a      	ldrh	r2, [r1, #12]
 80084f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084f8:	d032      	beq.n	8008560 <__ssputs_r+0x80>
 80084fa:	6825      	ldr	r5, [r4, #0]
 80084fc:	6909      	ldr	r1, [r1, #16]
 80084fe:	eba5 0901 	sub.w	r9, r5, r1
 8008502:	6965      	ldr	r5, [r4, #20]
 8008504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800850c:	3301      	adds	r3, #1
 800850e:	444b      	add	r3, r9
 8008510:	106d      	asrs	r5, r5, #1
 8008512:	429d      	cmp	r5, r3
 8008514:	bf38      	it	cc
 8008516:	461d      	movcc	r5, r3
 8008518:	0553      	lsls	r3, r2, #21
 800851a:	d531      	bpl.n	8008580 <__ssputs_r+0xa0>
 800851c:	4629      	mov	r1, r5
 800851e:	f000 fb63 	bl	8008be8 <_malloc_r>
 8008522:	4606      	mov	r6, r0
 8008524:	b950      	cbnz	r0, 800853c <__ssputs_r+0x5c>
 8008526:	230c      	movs	r3, #12
 8008528:	f8ca 3000 	str.w	r3, [sl]
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	6921      	ldr	r1, [r4, #16]
 800853e:	464a      	mov	r2, r9
 8008540:	f000 fabe 	bl	8008ac0 <memcpy>
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800854a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	6126      	str	r6, [r4, #16]
 8008552:	6165      	str	r5, [r4, #20]
 8008554:	444e      	add	r6, r9
 8008556:	eba5 0509 	sub.w	r5, r5, r9
 800855a:	6026      	str	r6, [r4, #0]
 800855c:	60a5      	str	r5, [r4, #8]
 800855e:	463e      	mov	r6, r7
 8008560:	42be      	cmp	r6, r7
 8008562:	d900      	bls.n	8008566 <__ssputs_r+0x86>
 8008564:	463e      	mov	r6, r7
 8008566:	6820      	ldr	r0, [r4, #0]
 8008568:	4632      	mov	r2, r6
 800856a:	4641      	mov	r1, r8
 800856c:	f000 fab6 	bl	8008adc <memmove>
 8008570:	68a3      	ldr	r3, [r4, #8]
 8008572:	1b9b      	subs	r3, r3, r6
 8008574:	60a3      	str	r3, [r4, #8]
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	4433      	add	r3, r6
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	2000      	movs	r0, #0
 800857e:	e7db      	b.n	8008538 <__ssputs_r+0x58>
 8008580:	462a      	mov	r2, r5
 8008582:	f000 fba5 	bl	8008cd0 <_realloc_r>
 8008586:	4606      	mov	r6, r0
 8008588:	2800      	cmp	r0, #0
 800858a:	d1e1      	bne.n	8008550 <__ssputs_r+0x70>
 800858c:	6921      	ldr	r1, [r4, #16]
 800858e:	4650      	mov	r0, sl
 8008590:	f000 fabe 	bl	8008b10 <_free_r>
 8008594:	e7c7      	b.n	8008526 <__ssputs_r+0x46>
	...

08008598 <_svfiprintf_r>:
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	4698      	mov	r8, r3
 800859e:	898b      	ldrh	r3, [r1, #12]
 80085a0:	061b      	lsls	r3, r3, #24
 80085a2:	b09d      	sub	sp, #116	; 0x74
 80085a4:	4607      	mov	r7, r0
 80085a6:	460d      	mov	r5, r1
 80085a8:	4614      	mov	r4, r2
 80085aa:	d50e      	bpl.n	80085ca <_svfiprintf_r+0x32>
 80085ac:	690b      	ldr	r3, [r1, #16]
 80085ae:	b963      	cbnz	r3, 80085ca <_svfiprintf_r+0x32>
 80085b0:	2140      	movs	r1, #64	; 0x40
 80085b2:	f000 fb19 	bl	8008be8 <_malloc_r>
 80085b6:	6028      	str	r0, [r5, #0]
 80085b8:	6128      	str	r0, [r5, #16]
 80085ba:	b920      	cbnz	r0, 80085c6 <_svfiprintf_r+0x2e>
 80085bc:	230c      	movs	r3, #12
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	e0d1      	b.n	800876a <_svfiprintf_r+0x1d2>
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	616b      	str	r3, [r5, #20]
 80085ca:	2300      	movs	r3, #0
 80085cc:	9309      	str	r3, [sp, #36]	; 0x24
 80085ce:	2320      	movs	r3, #32
 80085d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d8:	2330      	movs	r3, #48	; 0x30
 80085da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008784 <_svfiprintf_r+0x1ec>
 80085de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085e2:	f04f 0901 	mov.w	r9, #1
 80085e6:	4623      	mov	r3, r4
 80085e8:	469a      	mov	sl, r3
 80085ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ee:	b10a      	cbz	r2, 80085f4 <_svfiprintf_r+0x5c>
 80085f0:	2a25      	cmp	r2, #37	; 0x25
 80085f2:	d1f9      	bne.n	80085e8 <_svfiprintf_r+0x50>
 80085f4:	ebba 0b04 	subs.w	fp, sl, r4
 80085f8:	d00b      	beq.n	8008612 <_svfiprintf_r+0x7a>
 80085fa:	465b      	mov	r3, fp
 80085fc:	4622      	mov	r2, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff ff6d 	bl	80084e0 <__ssputs_r>
 8008606:	3001      	adds	r0, #1
 8008608:	f000 80aa 	beq.w	8008760 <_svfiprintf_r+0x1c8>
 800860c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800860e:	445a      	add	r2, fp
 8008610:	9209      	str	r2, [sp, #36]	; 0x24
 8008612:	f89a 3000 	ldrb.w	r3, [sl]
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 80a2 	beq.w	8008760 <_svfiprintf_r+0x1c8>
 800861c:	2300      	movs	r3, #0
 800861e:	f04f 32ff 	mov.w	r2, #4294967295
 8008622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008626:	f10a 0a01 	add.w	sl, sl, #1
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	9307      	str	r3, [sp, #28]
 800862e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008632:	931a      	str	r3, [sp, #104]	; 0x68
 8008634:	4654      	mov	r4, sl
 8008636:	2205      	movs	r2, #5
 8008638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863c:	4851      	ldr	r0, [pc, #324]	; (8008784 <_svfiprintf_r+0x1ec>)
 800863e:	f7f7 fdcf 	bl	80001e0 <memchr>
 8008642:	9a04      	ldr	r2, [sp, #16]
 8008644:	b9d8      	cbnz	r0, 800867e <_svfiprintf_r+0xe6>
 8008646:	06d0      	lsls	r0, r2, #27
 8008648:	bf44      	itt	mi
 800864a:	2320      	movmi	r3, #32
 800864c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008650:	0711      	lsls	r1, r2, #28
 8008652:	bf44      	itt	mi
 8008654:	232b      	movmi	r3, #43	; 0x2b
 8008656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800865a:	f89a 3000 	ldrb.w	r3, [sl]
 800865e:	2b2a      	cmp	r3, #42	; 0x2a
 8008660:	d015      	beq.n	800868e <_svfiprintf_r+0xf6>
 8008662:	9a07      	ldr	r2, [sp, #28]
 8008664:	4654      	mov	r4, sl
 8008666:	2000      	movs	r0, #0
 8008668:	f04f 0c0a 	mov.w	ip, #10
 800866c:	4621      	mov	r1, r4
 800866e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008672:	3b30      	subs	r3, #48	; 0x30
 8008674:	2b09      	cmp	r3, #9
 8008676:	d94e      	bls.n	8008716 <_svfiprintf_r+0x17e>
 8008678:	b1b0      	cbz	r0, 80086a8 <_svfiprintf_r+0x110>
 800867a:	9207      	str	r2, [sp, #28]
 800867c:	e014      	b.n	80086a8 <_svfiprintf_r+0x110>
 800867e:	eba0 0308 	sub.w	r3, r0, r8
 8008682:	fa09 f303 	lsl.w	r3, r9, r3
 8008686:	4313      	orrs	r3, r2
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	46a2      	mov	sl, r4
 800868c:	e7d2      	b.n	8008634 <_svfiprintf_r+0x9c>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	1d19      	adds	r1, r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	9103      	str	r1, [sp, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	bfbb      	ittet	lt
 800869a:	425b      	neglt	r3, r3
 800869c:	f042 0202 	orrlt.w	r2, r2, #2
 80086a0:	9307      	strge	r3, [sp, #28]
 80086a2:	9307      	strlt	r3, [sp, #28]
 80086a4:	bfb8      	it	lt
 80086a6:	9204      	strlt	r2, [sp, #16]
 80086a8:	7823      	ldrb	r3, [r4, #0]
 80086aa:	2b2e      	cmp	r3, #46	; 0x2e
 80086ac:	d10c      	bne.n	80086c8 <_svfiprintf_r+0x130>
 80086ae:	7863      	ldrb	r3, [r4, #1]
 80086b0:	2b2a      	cmp	r3, #42	; 0x2a
 80086b2:	d135      	bne.n	8008720 <_svfiprintf_r+0x188>
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	1d1a      	adds	r2, r3, #4
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	9203      	str	r2, [sp, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bfb8      	it	lt
 80086c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80086c4:	3402      	adds	r4, #2
 80086c6:	9305      	str	r3, [sp, #20]
 80086c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008794 <_svfiprintf_r+0x1fc>
 80086cc:	7821      	ldrb	r1, [r4, #0]
 80086ce:	2203      	movs	r2, #3
 80086d0:	4650      	mov	r0, sl
 80086d2:	f7f7 fd85 	bl	80001e0 <memchr>
 80086d6:	b140      	cbz	r0, 80086ea <_svfiprintf_r+0x152>
 80086d8:	2340      	movs	r3, #64	; 0x40
 80086da:	eba0 000a 	sub.w	r0, r0, sl
 80086de:	fa03 f000 	lsl.w	r0, r3, r0
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	4303      	orrs	r3, r0
 80086e6:	3401      	adds	r4, #1
 80086e8:	9304      	str	r3, [sp, #16]
 80086ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ee:	4826      	ldr	r0, [pc, #152]	; (8008788 <_svfiprintf_r+0x1f0>)
 80086f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086f4:	2206      	movs	r2, #6
 80086f6:	f7f7 fd73 	bl	80001e0 <memchr>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d038      	beq.n	8008770 <_svfiprintf_r+0x1d8>
 80086fe:	4b23      	ldr	r3, [pc, #140]	; (800878c <_svfiprintf_r+0x1f4>)
 8008700:	bb1b      	cbnz	r3, 800874a <_svfiprintf_r+0x1b2>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	3307      	adds	r3, #7
 8008706:	f023 0307 	bic.w	r3, r3, #7
 800870a:	3308      	adds	r3, #8
 800870c:	9303      	str	r3, [sp, #12]
 800870e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008710:	4433      	add	r3, r6
 8008712:	9309      	str	r3, [sp, #36]	; 0x24
 8008714:	e767      	b.n	80085e6 <_svfiprintf_r+0x4e>
 8008716:	fb0c 3202 	mla	r2, ip, r2, r3
 800871a:	460c      	mov	r4, r1
 800871c:	2001      	movs	r0, #1
 800871e:	e7a5      	b.n	800866c <_svfiprintf_r+0xd4>
 8008720:	2300      	movs	r3, #0
 8008722:	3401      	adds	r4, #1
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	4619      	mov	r1, r3
 8008728:	f04f 0c0a 	mov.w	ip, #10
 800872c:	4620      	mov	r0, r4
 800872e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008732:	3a30      	subs	r2, #48	; 0x30
 8008734:	2a09      	cmp	r2, #9
 8008736:	d903      	bls.n	8008740 <_svfiprintf_r+0x1a8>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0c5      	beq.n	80086c8 <_svfiprintf_r+0x130>
 800873c:	9105      	str	r1, [sp, #20]
 800873e:	e7c3      	b.n	80086c8 <_svfiprintf_r+0x130>
 8008740:	fb0c 2101 	mla	r1, ip, r1, r2
 8008744:	4604      	mov	r4, r0
 8008746:	2301      	movs	r3, #1
 8008748:	e7f0      	b.n	800872c <_svfiprintf_r+0x194>
 800874a:	ab03      	add	r3, sp, #12
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	462a      	mov	r2, r5
 8008750:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <_svfiprintf_r+0x1f8>)
 8008752:	a904      	add	r1, sp, #16
 8008754:	4638      	mov	r0, r7
 8008756:	f3af 8000 	nop.w
 800875a:	1c42      	adds	r2, r0, #1
 800875c:	4606      	mov	r6, r0
 800875e:	d1d6      	bne.n	800870e <_svfiprintf_r+0x176>
 8008760:	89ab      	ldrh	r3, [r5, #12]
 8008762:	065b      	lsls	r3, r3, #25
 8008764:	f53f af2c 	bmi.w	80085c0 <_svfiprintf_r+0x28>
 8008768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800876a:	b01d      	add	sp, #116	; 0x74
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	ab03      	add	r3, sp, #12
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	462a      	mov	r2, r5
 8008776:	4b06      	ldr	r3, [pc, #24]	; (8008790 <_svfiprintf_r+0x1f8>)
 8008778:	a904      	add	r1, sp, #16
 800877a:	4638      	mov	r0, r7
 800877c:	f000 f87a 	bl	8008874 <_printf_i>
 8008780:	e7eb      	b.n	800875a <_svfiprintf_r+0x1c2>
 8008782:	bf00      	nop
 8008784:	08008e1c 	.word	0x08008e1c
 8008788:	08008e26 	.word	0x08008e26
 800878c:	00000000 	.word	0x00000000
 8008790:	080084e1 	.word	0x080084e1
 8008794:	08008e22 	.word	0x08008e22

08008798 <_printf_common>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	4616      	mov	r6, r2
 800879e:	4699      	mov	r9, r3
 80087a0:	688a      	ldr	r2, [r1, #8]
 80087a2:	690b      	ldr	r3, [r1, #16]
 80087a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087a8:	4293      	cmp	r3, r2
 80087aa:	bfb8      	it	lt
 80087ac:	4613      	movlt	r3, r2
 80087ae:	6033      	str	r3, [r6, #0]
 80087b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087b4:	4607      	mov	r7, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	b10a      	cbz	r2, 80087be <_printf_common+0x26>
 80087ba:	3301      	adds	r3, #1
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	0699      	lsls	r1, r3, #26
 80087c2:	bf42      	ittt	mi
 80087c4:	6833      	ldrmi	r3, [r6, #0]
 80087c6:	3302      	addmi	r3, #2
 80087c8:	6033      	strmi	r3, [r6, #0]
 80087ca:	6825      	ldr	r5, [r4, #0]
 80087cc:	f015 0506 	ands.w	r5, r5, #6
 80087d0:	d106      	bne.n	80087e0 <_printf_common+0x48>
 80087d2:	f104 0a19 	add.w	sl, r4, #25
 80087d6:	68e3      	ldr	r3, [r4, #12]
 80087d8:	6832      	ldr	r2, [r6, #0]
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	42ab      	cmp	r3, r5
 80087de:	dc26      	bgt.n	800882e <_printf_common+0x96>
 80087e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087e4:	1e13      	subs	r3, r2, #0
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	bf18      	it	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	0692      	lsls	r2, r2, #26
 80087ee:	d42b      	bmi.n	8008848 <_printf_common+0xb0>
 80087f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087f4:	4649      	mov	r1, r9
 80087f6:	4638      	mov	r0, r7
 80087f8:	47c0      	blx	r8
 80087fa:	3001      	adds	r0, #1
 80087fc:	d01e      	beq.n	800883c <_printf_common+0xa4>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	68e5      	ldr	r5, [r4, #12]
 8008802:	6832      	ldr	r2, [r6, #0]
 8008804:	f003 0306 	and.w	r3, r3, #6
 8008808:	2b04      	cmp	r3, #4
 800880a:	bf08      	it	eq
 800880c:	1aad      	subeq	r5, r5, r2
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	6922      	ldr	r2, [r4, #16]
 8008812:	bf0c      	ite	eq
 8008814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008818:	2500      	movne	r5, #0
 800881a:	4293      	cmp	r3, r2
 800881c:	bfc4      	itt	gt
 800881e:	1a9b      	subgt	r3, r3, r2
 8008820:	18ed      	addgt	r5, r5, r3
 8008822:	2600      	movs	r6, #0
 8008824:	341a      	adds	r4, #26
 8008826:	42b5      	cmp	r5, r6
 8008828:	d11a      	bne.n	8008860 <_printf_common+0xc8>
 800882a:	2000      	movs	r0, #0
 800882c:	e008      	b.n	8008840 <_printf_common+0xa8>
 800882e:	2301      	movs	r3, #1
 8008830:	4652      	mov	r2, sl
 8008832:	4649      	mov	r1, r9
 8008834:	4638      	mov	r0, r7
 8008836:	47c0      	blx	r8
 8008838:	3001      	adds	r0, #1
 800883a:	d103      	bne.n	8008844 <_printf_common+0xac>
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008844:	3501      	adds	r5, #1
 8008846:	e7c6      	b.n	80087d6 <_printf_common+0x3e>
 8008848:	18e1      	adds	r1, r4, r3
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	2030      	movs	r0, #48	; 0x30
 800884e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008852:	4422      	add	r2, r4
 8008854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800885c:	3302      	adds	r3, #2
 800885e:	e7c7      	b.n	80087f0 <_printf_common+0x58>
 8008860:	2301      	movs	r3, #1
 8008862:	4622      	mov	r2, r4
 8008864:	4649      	mov	r1, r9
 8008866:	4638      	mov	r0, r7
 8008868:	47c0      	blx	r8
 800886a:	3001      	adds	r0, #1
 800886c:	d0e6      	beq.n	800883c <_printf_common+0xa4>
 800886e:	3601      	adds	r6, #1
 8008870:	e7d9      	b.n	8008826 <_printf_common+0x8e>
	...

08008874 <_printf_i>:
 8008874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	7e0f      	ldrb	r7, [r1, #24]
 800887a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800887c:	2f78      	cmp	r7, #120	; 0x78
 800887e:	4691      	mov	r9, r2
 8008880:	4680      	mov	r8, r0
 8008882:	460c      	mov	r4, r1
 8008884:	469a      	mov	sl, r3
 8008886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800888a:	d807      	bhi.n	800889c <_printf_i+0x28>
 800888c:	2f62      	cmp	r7, #98	; 0x62
 800888e:	d80a      	bhi.n	80088a6 <_printf_i+0x32>
 8008890:	2f00      	cmp	r7, #0
 8008892:	f000 80d8 	beq.w	8008a46 <_printf_i+0x1d2>
 8008896:	2f58      	cmp	r7, #88	; 0x58
 8008898:	f000 80a3 	beq.w	80089e2 <_printf_i+0x16e>
 800889c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088a4:	e03a      	b.n	800891c <_printf_i+0xa8>
 80088a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088aa:	2b15      	cmp	r3, #21
 80088ac:	d8f6      	bhi.n	800889c <_printf_i+0x28>
 80088ae:	a101      	add	r1, pc, #4	; (adr r1, 80088b4 <_printf_i+0x40>)
 80088b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088b4:	0800890d 	.word	0x0800890d
 80088b8:	08008921 	.word	0x08008921
 80088bc:	0800889d 	.word	0x0800889d
 80088c0:	0800889d 	.word	0x0800889d
 80088c4:	0800889d 	.word	0x0800889d
 80088c8:	0800889d 	.word	0x0800889d
 80088cc:	08008921 	.word	0x08008921
 80088d0:	0800889d 	.word	0x0800889d
 80088d4:	0800889d 	.word	0x0800889d
 80088d8:	0800889d 	.word	0x0800889d
 80088dc:	0800889d 	.word	0x0800889d
 80088e0:	08008a2d 	.word	0x08008a2d
 80088e4:	08008951 	.word	0x08008951
 80088e8:	08008a0f 	.word	0x08008a0f
 80088ec:	0800889d 	.word	0x0800889d
 80088f0:	0800889d 	.word	0x0800889d
 80088f4:	08008a4f 	.word	0x08008a4f
 80088f8:	0800889d 	.word	0x0800889d
 80088fc:	08008951 	.word	0x08008951
 8008900:	0800889d 	.word	0x0800889d
 8008904:	0800889d 	.word	0x0800889d
 8008908:	08008a17 	.word	0x08008a17
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	1d1a      	adds	r2, r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	602a      	str	r2, [r5, #0]
 8008914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800891c:	2301      	movs	r3, #1
 800891e:	e0a3      	b.n	8008a68 <_printf_i+0x1f4>
 8008920:	6820      	ldr	r0, [r4, #0]
 8008922:	6829      	ldr	r1, [r5, #0]
 8008924:	0606      	lsls	r6, r0, #24
 8008926:	f101 0304 	add.w	r3, r1, #4
 800892a:	d50a      	bpl.n	8008942 <_printf_i+0xce>
 800892c:	680e      	ldr	r6, [r1, #0]
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	2e00      	cmp	r6, #0
 8008932:	da03      	bge.n	800893c <_printf_i+0xc8>
 8008934:	232d      	movs	r3, #45	; 0x2d
 8008936:	4276      	negs	r6, r6
 8008938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800893c:	485e      	ldr	r0, [pc, #376]	; (8008ab8 <_printf_i+0x244>)
 800893e:	230a      	movs	r3, #10
 8008940:	e019      	b.n	8008976 <_printf_i+0x102>
 8008942:	680e      	ldr	r6, [r1, #0]
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800894a:	bf18      	it	ne
 800894c:	b236      	sxthne	r6, r6
 800894e:	e7ef      	b.n	8008930 <_printf_i+0xbc>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	6820      	ldr	r0, [r4, #0]
 8008954:	1d19      	adds	r1, r3, #4
 8008956:	6029      	str	r1, [r5, #0]
 8008958:	0601      	lsls	r1, r0, #24
 800895a:	d501      	bpl.n	8008960 <_printf_i+0xec>
 800895c:	681e      	ldr	r6, [r3, #0]
 800895e:	e002      	b.n	8008966 <_printf_i+0xf2>
 8008960:	0646      	lsls	r6, r0, #25
 8008962:	d5fb      	bpl.n	800895c <_printf_i+0xe8>
 8008964:	881e      	ldrh	r6, [r3, #0]
 8008966:	4854      	ldr	r0, [pc, #336]	; (8008ab8 <_printf_i+0x244>)
 8008968:	2f6f      	cmp	r7, #111	; 0x6f
 800896a:	bf0c      	ite	eq
 800896c:	2308      	moveq	r3, #8
 800896e:	230a      	movne	r3, #10
 8008970:	2100      	movs	r1, #0
 8008972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008976:	6865      	ldr	r5, [r4, #4]
 8008978:	60a5      	str	r5, [r4, #8]
 800897a:	2d00      	cmp	r5, #0
 800897c:	bfa2      	ittt	ge
 800897e:	6821      	ldrge	r1, [r4, #0]
 8008980:	f021 0104 	bicge.w	r1, r1, #4
 8008984:	6021      	strge	r1, [r4, #0]
 8008986:	b90e      	cbnz	r6, 800898c <_printf_i+0x118>
 8008988:	2d00      	cmp	r5, #0
 800898a:	d04d      	beq.n	8008a28 <_printf_i+0x1b4>
 800898c:	4615      	mov	r5, r2
 800898e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008992:	fb03 6711 	mls	r7, r3, r1, r6
 8008996:	5dc7      	ldrb	r7, [r0, r7]
 8008998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800899c:	4637      	mov	r7, r6
 800899e:	42bb      	cmp	r3, r7
 80089a0:	460e      	mov	r6, r1
 80089a2:	d9f4      	bls.n	800898e <_printf_i+0x11a>
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d10b      	bne.n	80089c0 <_printf_i+0x14c>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	07de      	lsls	r6, r3, #31
 80089ac:	d508      	bpl.n	80089c0 <_printf_i+0x14c>
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	6861      	ldr	r1, [r4, #4]
 80089b2:	4299      	cmp	r1, r3
 80089b4:	bfde      	ittt	le
 80089b6:	2330      	movle	r3, #48	; 0x30
 80089b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089c0:	1b52      	subs	r2, r2, r5
 80089c2:	6122      	str	r2, [r4, #16]
 80089c4:	f8cd a000 	str.w	sl, [sp]
 80089c8:	464b      	mov	r3, r9
 80089ca:	aa03      	add	r2, sp, #12
 80089cc:	4621      	mov	r1, r4
 80089ce:	4640      	mov	r0, r8
 80089d0:	f7ff fee2 	bl	8008798 <_printf_common>
 80089d4:	3001      	adds	r0, #1
 80089d6:	d14c      	bne.n	8008a72 <_printf_i+0x1fe>
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	b004      	add	sp, #16
 80089de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e2:	4835      	ldr	r0, [pc, #212]	; (8008ab8 <_printf_i+0x244>)
 80089e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089e8:	6829      	ldr	r1, [r5, #0]
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80089f0:	6029      	str	r1, [r5, #0]
 80089f2:	061d      	lsls	r5, r3, #24
 80089f4:	d514      	bpl.n	8008a20 <_printf_i+0x1ac>
 80089f6:	07df      	lsls	r7, r3, #31
 80089f8:	bf44      	itt	mi
 80089fa:	f043 0320 	orrmi.w	r3, r3, #32
 80089fe:	6023      	strmi	r3, [r4, #0]
 8008a00:	b91e      	cbnz	r6, 8008a0a <_printf_i+0x196>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	f023 0320 	bic.w	r3, r3, #32
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	2310      	movs	r3, #16
 8008a0c:	e7b0      	b.n	8008970 <_printf_i+0xfc>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	f043 0320 	orr.w	r3, r3, #32
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	2378      	movs	r3, #120	; 0x78
 8008a18:	4828      	ldr	r0, [pc, #160]	; (8008abc <_printf_i+0x248>)
 8008a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a1e:	e7e3      	b.n	80089e8 <_printf_i+0x174>
 8008a20:	0659      	lsls	r1, r3, #25
 8008a22:	bf48      	it	mi
 8008a24:	b2b6      	uxthmi	r6, r6
 8008a26:	e7e6      	b.n	80089f6 <_printf_i+0x182>
 8008a28:	4615      	mov	r5, r2
 8008a2a:	e7bb      	b.n	80089a4 <_printf_i+0x130>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	6826      	ldr	r6, [r4, #0]
 8008a30:	6961      	ldr	r1, [r4, #20]
 8008a32:	1d18      	adds	r0, r3, #4
 8008a34:	6028      	str	r0, [r5, #0]
 8008a36:	0635      	lsls	r5, r6, #24
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	d501      	bpl.n	8008a40 <_printf_i+0x1cc>
 8008a3c:	6019      	str	r1, [r3, #0]
 8008a3e:	e002      	b.n	8008a46 <_printf_i+0x1d2>
 8008a40:	0670      	lsls	r0, r6, #25
 8008a42:	d5fb      	bpl.n	8008a3c <_printf_i+0x1c8>
 8008a44:	8019      	strh	r1, [r3, #0]
 8008a46:	2300      	movs	r3, #0
 8008a48:	6123      	str	r3, [r4, #16]
 8008a4a:	4615      	mov	r5, r2
 8008a4c:	e7ba      	b.n	80089c4 <_printf_i+0x150>
 8008a4e:	682b      	ldr	r3, [r5, #0]
 8008a50:	1d1a      	adds	r2, r3, #4
 8008a52:	602a      	str	r2, [r5, #0]
 8008a54:	681d      	ldr	r5, [r3, #0]
 8008a56:	6862      	ldr	r2, [r4, #4]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f7f7 fbc0 	bl	80001e0 <memchr>
 8008a60:	b108      	cbz	r0, 8008a66 <_printf_i+0x1f2>
 8008a62:	1b40      	subs	r0, r0, r5
 8008a64:	6060      	str	r0, [r4, #4]
 8008a66:	6863      	ldr	r3, [r4, #4]
 8008a68:	6123      	str	r3, [r4, #16]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a70:	e7a8      	b.n	80089c4 <_printf_i+0x150>
 8008a72:	6923      	ldr	r3, [r4, #16]
 8008a74:	462a      	mov	r2, r5
 8008a76:	4649      	mov	r1, r9
 8008a78:	4640      	mov	r0, r8
 8008a7a:	47d0      	blx	sl
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d0ab      	beq.n	80089d8 <_printf_i+0x164>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	079b      	lsls	r3, r3, #30
 8008a84:	d413      	bmi.n	8008aae <_printf_i+0x23a>
 8008a86:	68e0      	ldr	r0, [r4, #12]
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	4298      	cmp	r0, r3
 8008a8c:	bfb8      	it	lt
 8008a8e:	4618      	movlt	r0, r3
 8008a90:	e7a4      	b.n	80089dc <_printf_i+0x168>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4632      	mov	r2, r6
 8008a96:	4649      	mov	r1, r9
 8008a98:	4640      	mov	r0, r8
 8008a9a:	47d0      	blx	sl
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d09b      	beq.n	80089d8 <_printf_i+0x164>
 8008aa0:	3501      	adds	r5, #1
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	9903      	ldr	r1, [sp, #12]
 8008aa6:	1a5b      	subs	r3, r3, r1
 8008aa8:	42ab      	cmp	r3, r5
 8008aaa:	dcf2      	bgt.n	8008a92 <_printf_i+0x21e>
 8008aac:	e7eb      	b.n	8008a86 <_printf_i+0x212>
 8008aae:	2500      	movs	r5, #0
 8008ab0:	f104 0619 	add.w	r6, r4, #25
 8008ab4:	e7f5      	b.n	8008aa2 <_printf_i+0x22e>
 8008ab6:	bf00      	nop
 8008ab8:	08008e2d 	.word	0x08008e2d
 8008abc:	08008e3e 	.word	0x08008e3e

08008ac0 <memcpy>:
 8008ac0:	440a      	add	r2, r1
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ac8:	d100      	bne.n	8008acc <memcpy+0xc>
 8008aca:	4770      	bx	lr
 8008acc:	b510      	push	{r4, lr}
 8008ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d1f9      	bne.n	8008ace <memcpy+0xe>
 8008ada:	bd10      	pop	{r4, pc}

08008adc <memmove>:
 8008adc:	4288      	cmp	r0, r1
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	eb01 0402 	add.w	r4, r1, r2
 8008ae4:	d902      	bls.n	8008aec <memmove+0x10>
 8008ae6:	4284      	cmp	r4, r0
 8008ae8:	4623      	mov	r3, r4
 8008aea:	d807      	bhi.n	8008afc <memmove+0x20>
 8008aec:	1e43      	subs	r3, r0, #1
 8008aee:	42a1      	cmp	r1, r4
 8008af0:	d008      	beq.n	8008b04 <memmove+0x28>
 8008af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008afa:	e7f8      	b.n	8008aee <memmove+0x12>
 8008afc:	4402      	add	r2, r0
 8008afe:	4601      	mov	r1, r0
 8008b00:	428a      	cmp	r2, r1
 8008b02:	d100      	bne.n	8008b06 <memmove+0x2a>
 8008b04:	bd10      	pop	{r4, pc}
 8008b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b0e:	e7f7      	b.n	8008b00 <memmove+0x24>

08008b10 <_free_r>:
 8008b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d044      	beq.n	8008ba0 <_free_r+0x90>
 8008b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b1a:	9001      	str	r0, [sp, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b22:	bfb8      	it	lt
 8008b24:	18e4      	addlt	r4, r4, r3
 8008b26:	f000 f913 	bl	8008d50 <__malloc_lock>
 8008b2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ba4 <_free_r+0x94>)
 8008b2c:	9801      	ldr	r0, [sp, #4]
 8008b2e:	6813      	ldr	r3, [r2, #0]
 8008b30:	b933      	cbnz	r3, 8008b40 <_free_r+0x30>
 8008b32:	6063      	str	r3, [r4, #4]
 8008b34:	6014      	str	r4, [r2, #0]
 8008b36:	b003      	add	sp, #12
 8008b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b3c:	f000 b90e 	b.w	8008d5c <__malloc_unlock>
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d908      	bls.n	8008b56 <_free_r+0x46>
 8008b44:	6825      	ldr	r5, [r4, #0]
 8008b46:	1961      	adds	r1, r4, r5
 8008b48:	428b      	cmp	r3, r1
 8008b4a:	bf01      	itttt	eq
 8008b4c:	6819      	ldreq	r1, [r3, #0]
 8008b4e:	685b      	ldreq	r3, [r3, #4]
 8008b50:	1949      	addeq	r1, r1, r5
 8008b52:	6021      	streq	r1, [r4, #0]
 8008b54:	e7ed      	b.n	8008b32 <_free_r+0x22>
 8008b56:	461a      	mov	r2, r3
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	b10b      	cbz	r3, 8008b60 <_free_r+0x50>
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d9fa      	bls.n	8008b56 <_free_r+0x46>
 8008b60:	6811      	ldr	r1, [r2, #0]
 8008b62:	1855      	adds	r5, r2, r1
 8008b64:	42a5      	cmp	r5, r4
 8008b66:	d10b      	bne.n	8008b80 <_free_r+0x70>
 8008b68:	6824      	ldr	r4, [r4, #0]
 8008b6a:	4421      	add	r1, r4
 8008b6c:	1854      	adds	r4, r2, r1
 8008b6e:	42a3      	cmp	r3, r4
 8008b70:	6011      	str	r1, [r2, #0]
 8008b72:	d1e0      	bne.n	8008b36 <_free_r+0x26>
 8008b74:	681c      	ldr	r4, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	6053      	str	r3, [r2, #4]
 8008b7a:	4421      	add	r1, r4
 8008b7c:	6011      	str	r1, [r2, #0]
 8008b7e:	e7da      	b.n	8008b36 <_free_r+0x26>
 8008b80:	d902      	bls.n	8008b88 <_free_r+0x78>
 8008b82:	230c      	movs	r3, #12
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	e7d6      	b.n	8008b36 <_free_r+0x26>
 8008b88:	6825      	ldr	r5, [r4, #0]
 8008b8a:	1961      	adds	r1, r4, r5
 8008b8c:	428b      	cmp	r3, r1
 8008b8e:	bf04      	itt	eq
 8008b90:	6819      	ldreq	r1, [r3, #0]
 8008b92:	685b      	ldreq	r3, [r3, #4]
 8008b94:	6063      	str	r3, [r4, #4]
 8008b96:	bf04      	itt	eq
 8008b98:	1949      	addeq	r1, r1, r5
 8008b9a:	6021      	streq	r1, [r4, #0]
 8008b9c:	6054      	str	r4, [r2, #4]
 8008b9e:	e7ca      	b.n	8008b36 <_free_r+0x26>
 8008ba0:	b003      	add	sp, #12
 8008ba2:	bd30      	pop	{r4, r5, pc}
 8008ba4:	20001f4c 	.word	0x20001f4c

08008ba8 <sbrk_aligned>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	4e0e      	ldr	r6, [pc, #56]	; (8008be4 <sbrk_aligned+0x3c>)
 8008bac:	460c      	mov	r4, r1
 8008bae:	6831      	ldr	r1, [r6, #0]
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	b911      	cbnz	r1, 8008bba <sbrk_aligned+0x12>
 8008bb4:	f000 f8bc 	bl	8008d30 <_sbrk_r>
 8008bb8:	6030      	str	r0, [r6, #0]
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f000 f8b7 	bl	8008d30 <_sbrk_r>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d00a      	beq.n	8008bdc <sbrk_aligned+0x34>
 8008bc6:	1cc4      	adds	r4, r0, #3
 8008bc8:	f024 0403 	bic.w	r4, r4, #3
 8008bcc:	42a0      	cmp	r0, r4
 8008bce:	d007      	beq.n	8008be0 <sbrk_aligned+0x38>
 8008bd0:	1a21      	subs	r1, r4, r0
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f000 f8ac 	bl	8008d30 <_sbrk_r>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d101      	bne.n	8008be0 <sbrk_aligned+0x38>
 8008bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8008be0:	4620      	mov	r0, r4
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	20001f50 	.word	0x20001f50

08008be8 <_malloc_r>:
 8008be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bec:	1ccd      	adds	r5, r1, #3
 8008bee:	f025 0503 	bic.w	r5, r5, #3
 8008bf2:	3508      	adds	r5, #8
 8008bf4:	2d0c      	cmp	r5, #12
 8008bf6:	bf38      	it	cc
 8008bf8:	250c      	movcc	r5, #12
 8008bfa:	2d00      	cmp	r5, #0
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	db01      	blt.n	8008c04 <_malloc_r+0x1c>
 8008c00:	42a9      	cmp	r1, r5
 8008c02:	d905      	bls.n	8008c10 <_malloc_r+0x28>
 8008c04:	230c      	movs	r3, #12
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	2600      	movs	r6, #0
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	4e2e      	ldr	r6, [pc, #184]	; (8008ccc <_malloc_r+0xe4>)
 8008c12:	f000 f89d 	bl	8008d50 <__malloc_lock>
 8008c16:	6833      	ldr	r3, [r6, #0]
 8008c18:	461c      	mov	r4, r3
 8008c1a:	bb34      	cbnz	r4, 8008c6a <_malloc_r+0x82>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f7ff ffc2 	bl	8008ba8 <sbrk_aligned>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	4604      	mov	r4, r0
 8008c28:	d14d      	bne.n	8008cc6 <_malloc_r+0xde>
 8008c2a:	6834      	ldr	r4, [r6, #0]
 8008c2c:	4626      	mov	r6, r4
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	d140      	bne.n	8008cb4 <_malloc_r+0xcc>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	4631      	mov	r1, r6
 8008c36:	4638      	mov	r0, r7
 8008c38:	eb04 0803 	add.w	r8, r4, r3
 8008c3c:	f000 f878 	bl	8008d30 <_sbrk_r>
 8008c40:	4580      	cmp	r8, r0
 8008c42:	d13a      	bne.n	8008cba <_malloc_r+0xd2>
 8008c44:	6821      	ldr	r1, [r4, #0]
 8008c46:	3503      	adds	r5, #3
 8008c48:	1a6d      	subs	r5, r5, r1
 8008c4a:	f025 0503 	bic.w	r5, r5, #3
 8008c4e:	3508      	adds	r5, #8
 8008c50:	2d0c      	cmp	r5, #12
 8008c52:	bf38      	it	cc
 8008c54:	250c      	movcc	r5, #12
 8008c56:	4629      	mov	r1, r5
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff ffa5 	bl	8008ba8 <sbrk_aligned>
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d02b      	beq.n	8008cba <_malloc_r+0xd2>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	442b      	add	r3, r5
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	e00e      	b.n	8008c88 <_malloc_r+0xa0>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	1b52      	subs	r2, r2, r5
 8008c6e:	d41e      	bmi.n	8008cae <_malloc_r+0xc6>
 8008c70:	2a0b      	cmp	r2, #11
 8008c72:	d916      	bls.n	8008ca2 <_malloc_r+0xba>
 8008c74:	1961      	adds	r1, r4, r5
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	6025      	str	r5, [r4, #0]
 8008c7a:	bf18      	it	ne
 8008c7c:	6059      	strne	r1, [r3, #4]
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	bf08      	it	eq
 8008c82:	6031      	streq	r1, [r6, #0]
 8008c84:	5162      	str	r2, [r4, r5]
 8008c86:	604b      	str	r3, [r1, #4]
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f104 060b 	add.w	r6, r4, #11
 8008c8e:	f000 f865 	bl	8008d5c <__malloc_unlock>
 8008c92:	f026 0607 	bic.w	r6, r6, #7
 8008c96:	1d23      	adds	r3, r4, #4
 8008c98:	1af2      	subs	r2, r6, r3
 8008c9a:	d0b6      	beq.n	8008c0a <_malloc_r+0x22>
 8008c9c:	1b9b      	subs	r3, r3, r6
 8008c9e:	50a3      	str	r3, [r4, r2]
 8008ca0:	e7b3      	b.n	8008c0a <_malloc_r+0x22>
 8008ca2:	6862      	ldr	r2, [r4, #4]
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	bf0c      	ite	eq
 8008ca8:	6032      	streq	r2, [r6, #0]
 8008caa:	605a      	strne	r2, [r3, #4]
 8008cac:	e7ec      	b.n	8008c88 <_malloc_r+0xa0>
 8008cae:	4623      	mov	r3, r4
 8008cb0:	6864      	ldr	r4, [r4, #4]
 8008cb2:	e7b2      	b.n	8008c1a <_malloc_r+0x32>
 8008cb4:	4634      	mov	r4, r6
 8008cb6:	6876      	ldr	r6, [r6, #4]
 8008cb8:	e7b9      	b.n	8008c2e <_malloc_r+0x46>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f000 f84c 	bl	8008d5c <__malloc_unlock>
 8008cc4:	e7a1      	b.n	8008c0a <_malloc_r+0x22>
 8008cc6:	6025      	str	r5, [r4, #0]
 8008cc8:	e7de      	b.n	8008c88 <_malloc_r+0xa0>
 8008cca:	bf00      	nop
 8008ccc:	20001f4c 	.word	0x20001f4c

08008cd0 <_realloc_r>:
 8008cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd4:	4680      	mov	r8, r0
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	460e      	mov	r6, r1
 8008cda:	b921      	cbnz	r1, 8008ce6 <_realloc_r+0x16>
 8008cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	f7ff bf81 	b.w	8008be8 <_malloc_r>
 8008ce6:	b92a      	cbnz	r2, 8008cf4 <_realloc_r+0x24>
 8008ce8:	f7ff ff12 	bl	8008b10 <_free_r>
 8008cec:	4625      	mov	r5, r4
 8008cee:	4628      	mov	r0, r5
 8008cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf4:	f000 f838 	bl	8008d68 <_malloc_usable_size_r>
 8008cf8:	4284      	cmp	r4, r0
 8008cfa:	4607      	mov	r7, r0
 8008cfc:	d802      	bhi.n	8008d04 <_realloc_r+0x34>
 8008cfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d02:	d812      	bhi.n	8008d2a <_realloc_r+0x5a>
 8008d04:	4621      	mov	r1, r4
 8008d06:	4640      	mov	r0, r8
 8008d08:	f7ff ff6e 	bl	8008be8 <_malloc_r>
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d0ed      	beq.n	8008cee <_realloc_r+0x1e>
 8008d12:	42bc      	cmp	r4, r7
 8008d14:	4622      	mov	r2, r4
 8008d16:	4631      	mov	r1, r6
 8008d18:	bf28      	it	cs
 8008d1a:	463a      	movcs	r2, r7
 8008d1c:	f7ff fed0 	bl	8008ac0 <memcpy>
 8008d20:	4631      	mov	r1, r6
 8008d22:	4640      	mov	r0, r8
 8008d24:	f7ff fef4 	bl	8008b10 <_free_r>
 8008d28:	e7e1      	b.n	8008cee <_realloc_r+0x1e>
 8008d2a:	4635      	mov	r5, r6
 8008d2c:	e7df      	b.n	8008cee <_realloc_r+0x1e>
	...

08008d30 <_sbrk_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d06      	ldr	r5, [pc, #24]	; (8008d4c <_sbrk_r+0x1c>)
 8008d34:	2300      	movs	r3, #0
 8008d36:	4604      	mov	r4, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	f7f8 f8b6 	bl	8000eac <_sbrk>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_sbrk_r+0x1a>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_sbrk_r+0x1a>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20001f54 	.word	0x20001f54

08008d50 <__malloc_lock>:
 8008d50:	4801      	ldr	r0, [pc, #4]	; (8008d58 <__malloc_lock+0x8>)
 8008d52:	f000 b811 	b.w	8008d78 <__retarget_lock_acquire_recursive>
 8008d56:	bf00      	nop
 8008d58:	20001f58 	.word	0x20001f58

08008d5c <__malloc_unlock>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	; (8008d64 <__malloc_unlock+0x8>)
 8008d5e:	f000 b80c 	b.w	8008d7a <__retarget_lock_release_recursive>
 8008d62:	bf00      	nop
 8008d64:	20001f58 	.word	0x20001f58

08008d68 <_malloc_usable_size_r>:
 8008d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d6c:	1f18      	subs	r0, r3, #4
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bfbc      	itt	lt
 8008d72:	580b      	ldrlt	r3, [r1, r0]
 8008d74:	18c0      	addlt	r0, r0, r3
 8008d76:	4770      	bx	lr

08008d78 <__retarget_lock_acquire_recursive>:
 8008d78:	4770      	bx	lr

08008d7a <__retarget_lock_release_recursive>:
 8008d7a:	4770      	bx	lr

08008d7c <_init>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr

08008d88 <_fini>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	bf00      	nop
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr
