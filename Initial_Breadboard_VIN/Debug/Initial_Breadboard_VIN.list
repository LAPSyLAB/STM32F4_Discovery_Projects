
Initial_Breadboard_VIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d7c  08008d7c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d7c  08008d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d84  08008d84  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d80  200001e4  08008f70  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f64  08008f70  00021f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8cc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d66  00000000  00000000  0003bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00040af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025fb8  00000000  00000000  00041c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ad1  00000000  00000000  00067be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d74b0  00000000  00000000  000816b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158b61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005144  00000000  00000000  00158bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ca8 	.word	0x08008ca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008ca8 	.word	0x08008ca8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fd01 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f86b 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9b9 	bl	80008fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800058a:	f000 f923 	bl	80007d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800058e:	f000 f94f 	bl	8000830 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000592:	f000 f97d 	bl	8000890 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000596:	f007 f9eb 	bl	8007970 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800059a:	f000 f8c9 	bl	8000730 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_ADC_Start(&hadc1);
 800059e:	4827      	ldr	r0, [pc, #156]	; (800063c <main+0xc4>)
 80005a0:	f000 fdca 	bl	8001138 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a4:	f04f 31ff 	mov.w	r1, #4294967295
 80005a8:	4824      	ldr	r0, [pc, #144]	; (800063c <main+0xc4>)
 80005aa:	f000 fe97 	bl	80012dc <HAL_ADC_PollForConversion>
	    AnalogValue = HAL_ADC_GetValue(&hadc1);
 80005ae:	4823      	ldr	r0, [pc, #140]	; (800063c <main+0xc4>)
 80005b0:	f000 ff1f 	bl	80013f2 <HAL_ADC_GetValue>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <main+0xc8>)
 80005ba:	601a      	str	r2, [r3, #0]

	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4820      	ldr	r0, [pc, #128]	; (8000644 <main+0xcc>)
 80005c2:	f001 fc20 	bl	8001e06 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	481e      	ldr	r0, [pc, #120]	; (8000644 <main+0xcc>)
 80005cc:	f001 fc1b 	bl	8001e06 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xcc>)
 80005d6:	f001 fc16 	bl	8001e06 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	4819      	ldr	r0, [pc, #100]	; (8000644 <main+0xcc>)
 80005e0:	f001 fc11 	bl	8001e06 <HAL_GPIO_TogglePin>

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);   //External LED on PB5
 80005e4:	2120      	movs	r1, #32
 80005e6:	4818      	ldr	r0, [pc, #96]	; (8000648 <main+0xd0>)
 80005e8:	f001 fc0d 	bl	8001e06 <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4); //External Key on PB4
 80005ec:	2110      	movs	r1, #16
 80005ee:	4816      	ldr	r0, [pc, #88]	; (8000648 <main+0xd0>)
 80005f0:	f001 fbd8 	bl	8001da4 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <main+0xd4>)
 80005fa:	601a      	str	r2, [r3, #0]



	    snprintf (SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Analog:%d\r\n",Counter++, 1-KeyState, AnalogValue);
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <main+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	4913      	ldr	r1, [pc, #76]	; (8000650 <main+0xd8>)
 8000604:	600a      	str	r2, [r1, #0]
 8000606:	4a11      	ldr	r2, [pc, #68]	; (800064c <main+0xd4>)
 8000608:	6812      	ldr	r2, [r2, #0]
 800060a:	f1c2 0201 	rsb	r2, r2, #1
 800060e:	490c      	ldr	r1, [pc, #48]	; (8000640 <main+0xc8>)
 8000610:	6809      	ldr	r1, [r1, #0]
 8000612:	9101      	str	r1, [sp, #4]
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <main+0xdc>)
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <main+0xe0>)
 800061e:	f007 ff01 	bl	8008424 <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0xe0>)
 8000624:	f7ff fdd4 	bl	80001d0 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	4619      	mov	r1, r3
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <main+0xe0>)
 800062e:	f007 fa5d 	bl	8007aec <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f000 fd17 	bl	8001068 <HAL_Delay>
  {
 800063a:	e7b0      	b.n	800059e <main+0x26>
 800063c:	2000048c 	.word	0x2000048c
 8000640:	20000204 	.word	0x20000204
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40020400 	.word	0x40020400
 800064c:	20000200 	.word	0x20000200
 8000650:	200004d4 	.word	0x200004d4
 8000654:	08008cc0 	.word	0x08008cc0
 8000658:	200004d8 	.word	0x200004d8

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 fed2 	bl	8008414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006da:	2307      	movs	r3, #7
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fb12 	bl	8003d0c <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ee:	f000 fa21 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2105      	movs	r1, #5
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fd73 	bl	80041fc <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800071c:	f000 fa0a 	bl	8000b34 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	; 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <MX_ADC1_Init+0x9c>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC1_Init+0x98>)
 800074a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_ADC1_Init+0xa0>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC1_Init+0x98>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x98>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000792:	f000 fc8d 	bl	80010b0 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 f9ca 	bl	8000b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC1_Init+0x98>)
 80007b2:	f000 fe2b 	bl	800140c <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 f9ba 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000048c 	.word	0x2000048c
 80007cc:	40012000 	.word	0x40012000
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C1_Init+0x50>)
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_I2C1_Init+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_I2C1_Init+0x58>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_I2C1_Init+0x50>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_I2C1_Init+0x50>)
 8000812:	f001 fb13 	bl	8001e3c <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 f98a 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000438 	.word	0x20000438
 8000828:	40005400 	.word	0x40005400
 800082c:	000186a0 	.word	0x000186a0

08000830 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_I2S3_Init+0x54>)
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <MX_I2S3_Init+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2S3_Init+0x54>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_I2S3_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2S3_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_I2S3_Init+0x54>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_I2S3_Init+0x54>)
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <MX_I2S3_Init+0x5c>)
 800085a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2S3_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_I2S3_Init+0x54>)
 8000870:	f001 fc28 	bl	80020c4 <HAL_I2S_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800087a:	f000 f95b 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000630 	.word	0x20000630
 8000888:	40003c00 	.word	0x40003c00
 800088c:	00017700 	.word	0x00017700

08000890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_SPI1_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MX_SPI1_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008e2:	f003 ffb3 	bl	800484c <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 f922 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200005d8 	.word	0x200005d8
 80008f8:	40013000 	.word	0x40013000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	4b81      	ldr	r3, [pc, #516]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a80      	ldr	r2, [pc, #512]	; (8000b1c <MX_GPIO_Init+0x220>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b7e      	ldr	r3, [pc, #504]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	4b7a      	ldr	r3, [pc, #488]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a79      	ldr	r2, [pc, #484]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b77      	ldr	r3, [pc, #476]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b73      	ldr	r3, [pc, #460]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a72      	ldr	r2, [pc, #456]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b70      	ldr	r3, [pc, #448]	; (8000b1c <MX_GPIO_Init+0x220>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b6c      	ldr	r3, [pc, #432]	; (8000b1c <MX_GPIO_Init+0x220>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a6b      	ldr	r2, [pc, #428]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b69      	ldr	r3, [pc, #420]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b65      	ldr	r3, [pc, #404]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a64      	ldr	r2, [pc, #400]	; (8000b1c <MX_GPIO_Init+0x220>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b62      	ldr	r3, [pc, #392]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <MX_GPIO_Init+0x220>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a5d      	ldr	r2, [pc, #372]	; (8000b1c <MX_GPIO_Init+0x220>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b5b      	ldr	r3, [pc, #364]	; (8000b1c <MX_GPIO_Init+0x220>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2108      	movs	r1, #8
 80009be:	4858      	ldr	r0, [pc, #352]	; (8000b20 <MX_GPIO_Init+0x224>)
 80009c0:	f001 fa08 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	4856      	ldr	r0, [pc, #344]	; (8000b24 <MX_GPIO_Init+0x228>)
 80009ca:	f001 fa03 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ce:	2200      	movs	r2, #0
 80009d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009d4:	4854      	ldr	r0, [pc, #336]	; (8000b28 <MX_GPIO_Init+0x22c>)
 80009d6:	f001 f9fd 	bl	8001dd4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	4853      	ldr	r0, [pc, #332]	; (8000b2c <MX_GPIO_Init+0x230>)
 80009e0:	f001 f9f8 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e4:	2308      	movs	r3, #8
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4849      	ldr	r0, [pc, #292]	; (8000b20 <MX_GPIO_Init+0x224>)
 80009fc:	f001 f836 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4843      	ldr	r0, [pc, #268]	; (8000b24 <MX_GPIO_Init+0x228>)
 8000a18:	f001 f828 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	483b      	ldr	r0, [pc, #236]	; (8000b24 <MX_GPIO_Init+0x228>)
 8000a38:	f001 f818 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a40:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4837      	ldr	r0, [pc, #220]	; (8000b30 <MX_GPIO_Init+0x234>)
 8000a52:	f001 f80b 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4831      	ldr	r0, [pc, #196]	; (8000b30 <MX_GPIO_Init+0x234>)
 8000a6a:	f000 ffff 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB4 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_4;
 8000a6e:	2314      	movs	r3, #20
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482a      	ldr	r0, [pc, #168]	; (8000b2c <MX_GPIO_Init+0x230>)
 8000a82:	f000 fff3 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4822      	ldr	r0, [pc, #136]	; (8000b2c <MX_GPIO_Init+0x230>)
 8000aa4:	f000 ffe2 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aa8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000aac:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <MX_GPIO_Init+0x22c>)
 8000ac2:	f000 ffd3 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <MX_GPIO_Init+0x22c>)
 8000ada:	f000 ffc7 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_GPIO_Init+0x230>)
 8000af6:	f000 ffb9 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000afe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_GPIO_Init+0x224>)
 8000b10:	f000 ffac 	bl	8001a6c <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020000 	.word	0x40020000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f000 ff32 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_ADC_MspInit+0x7c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d127      	bne.n	8000c02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_ADC_MspInit+0x80>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_ADC_MspInit+0x80>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bea:	2302      	movs	r3, #2
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_ADC_MspInit+0x84>)
 8000bfe:	f000 ff35 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40012000 	.word	0x40012000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12c      	bne.n	8000c94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <HAL_I2C_MspInit+0x8c>)
 8000c74:	f000 fefa 	bl	8001a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a31      	ldr	r2, [pc, #196]	; (8000d98 <HAL_I2S_MspInit+0xf0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d15a      	bne.n	8000d8e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cdc:	23c0      	movs	r3, #192	; 0xc0
 8000cde:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fc6f 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cf4:	f7ff ff1e 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a26      	ldr	r2, [pc, #152]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_I2S_MspInit+0xf4>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	480e      	ldr	r0, [pc, #56]	; (8000da0 <HAL_I2S_MspInit+0xf8>)
 8000d68:	f000 fe80 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d6c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <HAL_I2S_MspInit+0xfc>)
 8000d8a:	f000 fe6f 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3738      	adds	r7, #56	; 0x38
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40003c00 	.word	0x40003c00
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020800 	.word	0x40020800

08000da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_SPI_MspInit+0x84>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12b      	bne.n	8000e22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_SPI_MspInit+0x88>)
 8000dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_SPI_MspInit+0x88>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_SPI_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_SPI_MspInit+0x88>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_SPI_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e02:	23e0      	movs	r3, #224	; 0xe0
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e12:	2305      	movs	r3, #5
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000e1e:	f000 fe25 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40013000 	.word	0x40013000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 f8d0 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <OTG_FS_IRQHandler+0x10>)
 8000e92:	f001 ff07 	bl	8002ca4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20001b4c 	.word	0x20001b4c

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f007 fa76 	bl	80083c0 <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20020000 	.word	0x20020000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000208 	.word	0x20000208
 8000f08:	20001f68 	.word	0x20001f68

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f36:	490e      	ldr	r1, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f4c:	4c0b      	ldr	r4, [pc, #44]	; (8000f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f5a:	f7ff ffd7 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f007 fa35 	bl	80083cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fb09 	bl	8000578 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000f74:	08008d8c 	.word	0x08008d8c
  ldr r2, =_sbss
 8000f78:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000f7c:	20001f64 	.word	0x20001f64

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <HAL_Init+0x40>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_Init+0x40>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_Init+0x40>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 fd1b 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fdc2 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023c00 	.word	0x40023c00

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fd33 	bl	8001a52 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 fcfb 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	20000678 	.word	0x20000678

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000678 	.word	0x20000678

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fd5e 	bl	8000b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 faa4 	bl	8001650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Start+0x1a>
 800114e:	2302      	movs	r3, #2
 8001150:	e0b2      	b.n	80012b8 <HAL_ADC_Start+0x180>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b01      	cmp	r3, #1
 8001166:	d018      	beq.n	800119a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001178:	4b52      	ldr	r3, [pc, #328]	; (80012c4 <HAL_ADC_Start+0x18c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_ADC_Start+0x190>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0c9a      	lsrs	r2, r3, #18
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800118c:	e002      	b.n	8001194 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3b01      	subs	r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d17a      	bne.n	800129e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e6:	d106      	bne.n	80011f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	f023 0206 	bic.w	r2, r3, #6
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
 80011f4:	e002      	b.n	80011fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_ADC_Start+0x194>)
 8001206:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001210:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	2b00      	cmp	r3, #0
 800121c:	d12a      	bne.n	8001274 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <HAL_ADC_Start+0x198>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d015      	beq.n	8001254 <HAL_ADC_Start+0x11c>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <HAL_ADC_Start+0x19c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d105      	bne.n	800123e <HAL_ADC_Start+0x106>
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_ADC_Start+0x194>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00a      	beq.n	8001254 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_ADC_Start+0x1a0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d136      	bne.n	80012b6 <HAL_ADC_Start+0x17e>
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_ADC_Start+0x194>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b00      	cmp	r3, #0
 8001252:	d130      	bne.n	80012b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d129      	bne.n	80012b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	e020      	b.n	80012b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <HAL_ADC_Start+0x198>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d11b      	bne.n	80012b6 <HAL_ADC_Start+0x17e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d114      	bne.n	80012b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e00b      	b.n	80012b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f043 0210 	orr.w	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20000000 	.word	0x20000000
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	40012300 	.word	0x40012300
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40012100 	.word	0x40012100
 80012d8:	40012200 	.word	0x40012200

080012dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f8:	d113      	bne.n	8001322 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001308:	d10b      	bne.n	8001322 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f043 0220 	orr.w	r2, r3, #32
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e063      	b.n	80013ea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001322:	f7ff fe95 	bl	8001050 <HAL_GetTick>
 8001326:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001328:	e021      	b.n	800136e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d01d      	beq.n	800136e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_ADC_PollForConversion+0x6c>
 8001338:	f7ff fe8a 	bl	8001050 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d212      	bcs.n	800136e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b02      	cmp	r3, #2
 8001354:	d00b      	beq.n	800136e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f043 0204 	orr.w	r2, r3, #4
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e03d      	b.n	80013ea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b02      	cmp	r3, #2
 800137a:	d1d6      	bne.n	800132a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f06f 0212 	mvn.w	r2, #18
 8001384:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d123      	bne.n	80013e8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d11f      	bne.n	80013e8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d111      	bne.n	80013e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1c>
 8001424:	2302      	movs	r3, #2
 8001426:	e105      	b.n	8001634 <HAL_ADC_ConfigChannel+0x228>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b09      	cmp	r3, #9
 8001436:	d925      	bls.n	8001484 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68d9      	ldr	r1, [r3, #12]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	3b1e      	subs	r3, #30
 800144e:	2207      	movs	r2, #7
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43da      	mvns	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	400a      	ands	r2, r1
 800145c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68d9      	ldr	r1, [r3, #12]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	4603      	mov	r3, r0
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4403      	add	r3, r0
 8001476:	3b1e      	subs	r3, #30
 8001478:	409a      	lsls	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	e022      	b.n	80014ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6919      	ldr	r1, [r3, #16]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	2207      	movs	r2, #7
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	400a      	ands	r2, r1
 80014a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6919      	ldr	r1, [r3, #16]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4403      	add	r3, r0
 80014c0:	409a      	lsls	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d824      	bhi.n	800151c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	3b05      	subs	r3, #5
 80014e4:	221f      	movs	r2, #31
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	400a      	ands	r2, r1
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	3b05      	subs	r3, #5
 800150e:	fa00 f203 	lsl.w	r2, r0, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
 800151a:	e04c      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b0c      	cmp	r3, #12
 8001522:	d824      	bhi.n	800156e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b23      	subs	r3, #35	; 0x23
 8001536:	221f      	movs	r2, #31
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43da      	mvns	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	400a      	ands	r2, r1
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b23      	subs	r3, #35	; 0x23
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
 800156c:	e023      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b41      	subs	r3, #65	; 0x41
 8001580:	221f      	movs	r2, #31
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b41      	subs	r3, #65	; 0x41
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_ADC_ConfigChannel+0x234>)
 80015b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a21      	ldr	r2, [pc, #132]	; (8001644 <HAL_ADC_ConfigChannel+0x238>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d109      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1cc>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_ADC_ConfigChannel+0x238>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d123      	bne.n	800162a <HAL_ADC_ConfigChannel+0x21e>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d003      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x1e6>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b11      	cmp	r3, #17
 80015f0:	d11b      	bne.n	800162a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b10      	cmp	r3, #16
 8001604:	d111      	bne.n	800162a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_ADC_ConfigChannel+0x23c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_ADC_ConfigChannel+0x240>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9a      	lsrs	r2, r3, #18
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800161c:	e002      	b.n	8001624 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3b01      	subs	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f9      	bne.n	800161e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40012300 	.word	0x40012300
 8001644:	40012000 	.word	0x40012000
 8001648:	20000000 	.word	0x20000000
 800164c:	431bde83 	.word	0x431bde83

08001650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001658:	4b79      	ldr	r3, [pc, #484]	; (8001840 <ADC_Init+0x1f0>)
 800165a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	431a      	orrs	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	021a      	lsls	r2, r3, #8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6899      	ldr	r1, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	4a58      	ldr	r2, [pc, #352]	; (8001844 <ADC_Init+0x1f4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d022      	beq.n	800172e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6899      	ldr	r1, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	e00f      	b.n	800174e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800173c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800174c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0202 	bic.w	r2, r2, #2
 800175c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6899      	ldr	r1, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e1b      	ldrb	r3, [r3, #24]
 8001768:	005a      	lsls	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01b      	beq.n	80017b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800179a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	035a      	lsls	r2, r3, #13
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	e007      	b.n	80017c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	3b01      	subs	r3, #1
 80017e0:	051a      	lsls	r2, r3, #20
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001806:	025a      	lsls	r2, r3, #9
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	029a      	lsls	r2, r3, #10
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40012300 	.word	0x40012300
 8001844:	0f000001 	.word	0x0f000001

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff29 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff3e 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff31 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e16b      	b.n	8001d60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 815a 	bne.w	8001d5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d005      	beq.n	8001abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d130      	bne.n	8001b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 0201 	and.w	r2, r3, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d017      	beq.n	8001b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d123      	bne.n	8001bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0203 	and.w	r2, r3, #3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80b4 	beq.w	8001d5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b60      	ldr	r3, [pc, #384]	; (8001d78 <HAL_GPIO_Init+0x30c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a5f      	ldr	r2, [pc, #380]	; (8001d78 <HAL_GPIO_Init+0x30c>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <HAL_GPIO_Init+0x30c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0e:	4a5b      	ldr	r2, [pc, #364]	; (8001d7c <HAL_GPIO_Init+0x310>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_GPIO_Init+0x314>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02b      	beq.n	8001c92 <HAL_GPIO_Init+0x226>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_GPIO_Init+0x318>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d025      	beq.n	8001c8e <HAL_GPIO_Init+0x222>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a50      	ldr	r2, [pc, #320]	; (8001d88 <HAL_GPIO_Init+0x31c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01f      	beq.n	8001c8a <HAL_GPIO_Init+0x21e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x21a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	; (8001d90 <HAL_GPIO_Init+0x324>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x216>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4d      	ldr	r2, [pc, #308]	; (8001d94 <HAL_GPIO_Init+0x328>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x212>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_GPIO_Init+0x32c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x20e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x20a>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e00e      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c76:	2308      	movs	r3, #8
 8001c78:	e00c      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e00a      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c7e:	2305      	movs	r3, #5
 8001c80:	e008      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e004      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c92:	2300      	movs	r3, #0
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f002 0203 	and.w	r2, r2, #3
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca4:	4935      	ldr	r1, [pc, #212]	; (8001d7c <HAL_GPIO_Init+0x310>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd6:	4a32      	ldr	r2, [pc, #200]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cdc:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d00:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	f67f ae90 	bls.w	8001a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40021400 	.word	0x40021400
 8001d98:	40021800 	.word	0x40021800
 8001d9c:	40021c00 	.word	0x40021c00
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df0:	e003      	b.n	8001dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	619a      	str	r2, [r3, #24]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	041a      	lsls	r2, r3, #16
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	400b      	ands	r3, r1
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e12b      	b.n	80020a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fed8 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2224      	movs	r2, #36	; 0x24
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea0:	f002 fb80 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8001ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a81      	ldr	r2, [pc, #516]	; (80020b0 <HAL_I2C_Init+0x274>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d807      	bhi.n	8001ec0 <HAL_I2C_Init+0x84>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a80      	ldr	r2, [pc, #512]	; (80020b4 <HAL_I2C_Init+0x278>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e006      	b.n	8001ece <HAL_I2C_Init+0x92>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a7d      	ldr	r2, [pc, #500]	; (80020b8 <HAL_I2C_Init+0x27c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	bf94      	ite	ls
 8001ec8:	2301      	movls	r3, #1
 8001eca:	2300      	movhi	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0e7      	b.n	80020a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a78      	ldr	r2, [pc, #480]	; (80020bc <HAL_I2C_Init+0x280>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a6a      	ldr	r2, [pc, #424]	; (80020b0 <HAL_I2C_Init+0x274>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d802      	bhi.n	8001f10 <HAL_I2C_Init+0xd4>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	e009      	b.n	8001f24 <HAL_I2C_Init+0xe8>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	4a69      	ldr	r2, [pc, #420]	; (80020c0 <HAL_I2C_Init+0x284>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	3301      	adds	r3, #1
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	495c      	ldr	r1, [pc, #368]	; (80020b0 <HAL_I2C_Init+0x274>)
 8001f40:	428b      	cmp	r3, r1
 8001f42:	d819      	bhi.n	8001f78 <HAL_I2C_Init+0x13c>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e59      	subs	r1, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f52:	1c59      	adds	r1, r3, #1
 8001f54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f58:	400b      	ands	r3, r1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_I2C_Init+0x138>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1e59      	subs	r1, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f72:	e051      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e04f      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d111      	bne.n	8001fa4 <HAL_I2C_Init+0x168>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	440b      	add	r3, r1
 8001f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e012      	b.n	8001fca <HAL_I2C_Init+0x18e>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	0099      	lsls	r1, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Init+0x196>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e022      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_I2C_Init+0x1bc>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1e58      	subs	r0, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	440b      	add	r3, r1
 8001fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff6:	e00f      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	0099      	lsls	r1, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	6809      	ldr	r1, [r1, #0]
 800201c:	4313      	orrs	r3, r2
 800201e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002046:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6911      	ldr	r1, [r2, #16]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68d2      	ldr	r2, [r2, #12]
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	430b      	orrs	r3, r1
 800205a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	000186a0 	.word	0x000186a0
 80020b4:	001e847f 	.word	0x001e847f
 80020b8:	003d08ff 	.word	0x003d08ff
 80020bc:	431bde83 	.word	0x431bde83
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e128      	b.n	8002328 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a90      	ldr	r2, [pc, #576]	; (8002330 <HAL_I2S_Init+0x26c>)
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe fdd9 	bl	8000ca8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800210c:	f023 030f 	bic.w	r3, r3, #15
 8002110:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2202      	movs	r2, #2
 8002118:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d060      	beq.n	80021e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800212a:	2310      	movs	r3, #16
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e001      	b.n	8002134 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b20      	cmp	r3, #32
 800213a:	d802      	bhi.n	8002142 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002142:	2001      	movs	r0, #1
 8002144:	f002 fb24 	bl	8004790 <HAL_RCCEx_GetPeriphCLKFreq>
 8002148:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002152:	d125      	bne.n	80021a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	fbb2 f2f3 	udiv	r2, r2, r3
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	3305      	adds	r3, #5
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e01f      	b.n	80021be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	fbb2 f2f3 	udiv	r2, r2, r3
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	3305      	adds	r3, #5
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e00e      	b.n	80021be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	3305      	adds	r3, #5
 80021bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4a5c      	ldr	r2, [pc, #368]	; (8002334 <HAL_I2S_Init+0x270>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	08db      	lsrs	r3, r3, #3
 80021c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	e003      	b.n	80021ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d902      	bls.n	80021f8 <HAL_I2S_Init+0x134>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2bff      	cmp	r3, #255	; 0xff
 80021f6:	d907      	bls.n	8002208 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f043 0210 	orr.w	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e08f      	b.n	8002328 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	ea42 0103 	orr.w	r1, r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	430a      	orrs	r2, r1
 800221a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002226:	f023 030f 	bic.w	r3, r3, #15
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6851      	ldr	r1, [r2, #4]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6892      	ldr	r2, [r2, #8]
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68d2      	ldr	r2, [r2, #12]
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6992      	ldr	r2, [r2, #24]
 800223e:	430a      	orrs	r2, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d161      	bne.n	8002318 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a38      	ldr	r2, [pc, #224]	; (8002338 <HAL_I2S_Init+0x274>)
 8002258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a37      	ldr	r2, [pc, #220]	; (800233c <HAL_I2S_Init+0x278>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_I2S_Init+0x1a4>
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_I2S_Init+0x27c>)
 8002266:	e001      	b.n	800226c <HAL_I2S_Init+0x1a8>
 8002268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4932      	ldr	r1, [pc, #200]	; (800233c <HAL_I2S_Init+0x278>)
 8002274:	428a      	cmp	r2, r1
 8002276:	d101      	bne.n	800227c <HAL_I2S_Init+0x1b8>
 8002278:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_I2S_Init+0x27c>)
 800227a:	e001      	b.n	8002280 <HAL_I2S_Init+0x1bc>
 800227c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002280:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002284:	f023 030f 	bic.w	r3, r3, #15
 8002288:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2b      	ldr	r2, [pc, #172]	; (800233c <HAL_I2S_Init+0x278>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_I2S_Init+0x1d4>
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <HAL_I2S_Init+0x27c>)
 8002296:	e001      	b.n	800229c <HAL_I2S_Init+0x1d8>
 8002298:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800229c:	2202      	movs	r2, #2
 800229e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <HAL_I2S_Init+0x278>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_I2S_Init+0x1ea>
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_I2S_Init+0x27c>)
 80022ac:	e001      	b.n	80022b2 <HAL_I2S_Init+0x1ee>
 80022ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022be:	d003      	beq.n	80022c8 <HAL_I2S_Init+0x204>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	e001      	b.n	80022d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022de:	4313      	orrs	r3, r2
 80022e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002300:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_I2S_Init+0x278>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_I2S_Init+0x24c>
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_I2S_Init+0x27c>)
 800230e:	e001      	b.n	8002314 <HAL_I2S_Init+0x250>
 8002310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002314:	897a      	ldrh	r2, [r7, #10]
 8002316:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	0800243b 	.word	0x0800243b
 8002334:	cccccccd 	.word	0xcccccccd
 8002338:	08002551 	.word	0x08002551
 800233c:	40003800 	.word	0x40003800
 8002340:	40003400 	.word	0x40003400

08002344 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	1c9a      	adds	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10e      	bne.n	80023d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffb8 	bl	8002344 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	b292      	uxth	r2, r2
 80023f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	1c9a      	adds	r2, r3, #2
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10e      	bne.n	8002432 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002422:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff93 	bl	8002358 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b04      	cmp	r3, #4
 8002454:	d13a      	bne.n	80024cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d109      	bne.n	8002474 <I2S_IRQHandler+0x3a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d102      	bne.n	8002474 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffb4 	bl	80023dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d126      	bne.n	80024cc <I2S_IRQHandler+0x92>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b20      	cmp	r3, #32
 800248a:	d11f      	bne.n	80024cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800249a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ff50 	bl	800236c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d136      	bne.n	8002546 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d109      	bne.n	80024f6 <I2S_IRQHandler+0xbc>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d102      	bne.n	80024f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff45 	bl	8002380 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d122      	bne.n	8002546 <I2S_IRQHandler+0x10c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b20      	cmp	r3, #32
 800250c:	d11b      	bne.n	8002546 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800251c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f043 0204 	orr.w	r2, r3, #4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff13 	bl	800236c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4aa2      	ldr	r2, [pc, #648]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800256a:	4ba2      	ldr	r3, [pc, #648]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800256c:	e001      	b.n	8002572 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800256e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a9b      	ldr	r2, [pc, #620]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002588:	4b9a      	ldr	r3, [pc, #616]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800258a:	e001      	b.n	8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800258c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259c:	d004      	beq.n	80025a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 8099 	bne.w	80026da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f925 	bl	800280c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9c8 	bl	800296c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d13a      	bne.n	800265c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d035      	beq.n	800265c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a7e      	ldr	r2, [pc, #504]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80025fa:	4b7e      	ldr	r3, [pc, #504]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025fc:	e001      	b.n	8002602 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80025fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4979      	ldr	r1, [pc, #484]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800260a:	428b      	cmp	r3, r1
 800260c:	d101      	bne.n	8002612 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800260e:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002610:	e001      	b.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002616:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800261a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800262a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fe88 	bl	800236c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	f040 80be 	bne.w	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80b8 	beq.w	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002682:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a59      	ldr	r2, [pc, #356]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800268e:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002690:	e001      	b.n	8002696 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4954      	ldr	r1, [pc, #336]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800269e:	428b      	cmp	r3, r1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80026a2:	4b54      	ldr	r3, [pc, #336]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026a4:	e001      	b.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80026a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fe4a 	bl	800236c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026d8:	e084      	b.n	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d107      	bne.n	80026f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8be 	bl	8002870 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f8fd 	bl	8002908 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d12f      	bne.n	8002778 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02a      	beq.n	8002778 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002730:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2e      	ldr	r2, [pc, #184]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800273c:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800273e:	e001      	b.n	8002744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002740:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4929      	ldr	r1, [pc, #164]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800274c:	428b      	cmp	r3, r1
 800274e:	d101      	bne.n	8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002752:	e001      	b.n	8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800275c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fdfa 	bl	800236c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d131      	bne.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02c      	beq.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d101      	bne.n	800279a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002798:	e001      	b.n	800279e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800279a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4912      	ldr	r1, [pc, #72]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027a6:	428b      	cmp	r3, r1
 80027a8:	d101      	bne.n	80027ae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027ac:	e001      	b.n	80027b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80027ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027c6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f043 0204 	orr.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fdc5 	bl	800236c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027e2:	e000      	b.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027e4:	bf00      	nop
}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40003800 	.word	0x40003800
 80027f4:	40003400 	.word	0x40003400

080027f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c99      	adds	r1, r3, #2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6251      	str	r1, [r2, #36]	; 0x24
 800281e:	881a      	ldrh	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d113      	bne.n	8002866 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800284c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ffc9 	bl	80027f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	1c99      	adds	r1, r3, #2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6251      	str	r1, [r2, #36]	; 0x24
 8002882:	8819      	ldrh	r1, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <I2SEx_TxISR_I2SExt+0x90>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <I2SEx_TxISR_I2SExt+0x22>
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <I2SEx_TxISR_I2SExt+0x94>)
 8002890:	e001      	b.n	8002896 <I2SEx_TxISR_I2SExt+0x26>
 8002892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002896:	460a      	mov	r2, r1
 8002898:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d121      	bne.n	80028f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <I2SEx_TxISR_I2SExt+0x90>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <I2SEx_TxISR_I2SExt+0x50>
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <I2SEx_TxISR_I2SExt+0x94>)
 80028be:	e001      	b.n	80028c4 <I2SEx_TxISR_I2SExt+0x54>
 80028c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	490d      	ldr	r1, [pc, #52]	; (8002900 <I2SEx_TxISR_I2SExt+0x90>)
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d101      	bne.n	80028d4 <I2SEx_TxISR_I2SExt+0x64>
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <I2SEx_TxISR_I2SExt+0x94>)
 80028d2:	e001      	b.n	80028d8 <I2SEx_TxISR_I2SExt+0x68>
 80028d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ff81 	bl	80027f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40003800 	.word	0x40003800
 8002904:	40003400 	.word	0x40003400

08002908 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68d8      	ldr	r0, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	1c99      	adds	r1, r3, #2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002920:	b282      	uxth	r2, r0
 8002922:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d113      	bne.n	8002964 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800294a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff4a 	bl	80027f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a20      	ldr	r2, [pc, #128]	; (80029fc <I2SEx_RxISR_I2SExt+0x90>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <I2SEx_RxISR_I2SExt+0x16>
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <I2SEx_RxISR_I2SExt+0x94>)
 8002980:	e001      	b.n	8002986 <I2SEx_RxISR_I2SExt+0x1a>
 8002982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002986:	68d8      	ldr	r0, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	1c99      	adds	r1, r3, #2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002992:	b282      	uxth	r2, r0
 8002994:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d121      	bne.n	80029f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <I2SEx_RxISR_I2SExt+0x90>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <I2SEx_RxISR_I2SExt+0x50>
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <I2SEx_RxISR_I2SExt+0x94>)
 80029ba:	e001      	b.n	80029c0 <I2SEx_RxISR_I2SExt+0x54>
 80029bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	490d      	ldr	r1, [pc, #52]	; (80029fc <I2SEx_RxISR_I2SExt+0x90>)
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d101      	bne.n	80029d0 <I2SEx_RxISR_I2SExt+0x64>
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <I2SEx_RxISR_I2SExt+0x94>)
 80029ce:	e001      	b.n	80029d4 <I2SEx_RxISR_I2SExt+0x68>
 80029d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff03 	bl	80027f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40003800 	.word	0x40003800
 8002a00:	40003400 	.word	0x40003400

08002a04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a06:	b08f      	sub	sp, #60	; 0x3c
 8002a08:	af0a      	add	r7, sp, #40	; 0x28
 8002a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e10f      	b.n	8002c36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f005 f9a3 	bl	8007d7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 f896 	bl	8004b86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	687e      	ldr	r6, [r7, #4]
 8002a62:	466d      	mov	r5, sp
 8002a64:	f106 0410 	add.w	r4, r6, #16
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a78:	1d33      	adds	r3, r6, #4
 8002a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	f001 ff6e 	bl	800495e <USB_CoreInit>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0d0      	b.n	8002c36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 f884 	bl	8004ba8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	e04a      	b.n	8002b3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	333d      	adds	r3, #61	; 0x3d
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	333c      	adds	r3, #60	; 0x3c
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	b298      	uxth	r0, r3
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3342      	adds	r3, #66	; 0x42
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	333f      	adds	r3, #63	; 0x3f
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3344      	adds	r3, #68	; 0x44
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3348      	adds	r3, #72	; 0x48
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3350      	adds	r3, #80	; 0x50
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d3af      	bcc.n	8002aa6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e044      	b.n	8002bd6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d3b5      	bcc.n	8002b4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	687e      	ldr	r6, [r7, #4]
 8002be8:	466d      	mov	r5, sp
 8002bea:	f106 0410 	add.w	r4, r6, #16
 8002bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bfe:	1d33      	adds	r3, r6, #4
 8002c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c02:	6838      	ldr	r0, [r7, #0]
 8002c04:	f002 f81c 	bl	8004c40 <USB_DevInit>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00d      	b.n	8002c36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 f898 	bl	8005d64 <USB_DevDisconnect>

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_PCD_Start+0x1c>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e020      	b.n	8002c9c <HAL_PCD_Start+0x5e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d109      	bne.n	8002c7e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d005      	beq.n	8002c7e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 ff6e 	bl	8004b64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 f848 	bl	8005d22 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b08d      	sub	sp, #52	; 0x34
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 f906 	bl	8005ecc <USB_GetMode>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 839d 	bne.w	8003402 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 f86a 	bl	8005da6 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8393 	beq.w	8003400 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 f861 	bl	8005da6 <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d107      	bne.n	8002cfe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f002 0202 	and.w	r2, r2, #2
 8002cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 f84f 	bl	8005da6 <USB_ReadInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d161      	bne.n	8002dd6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0210 	bic.w	r2, r2, #16
 8002d20:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	0c5b      	lsrs	r3, r3, #17
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d124      	bne.n	8002d98 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d035      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6a38      	ldr	r0, [r7, #32]
 8002d6e:	f002 fe86 	bl	8005a7e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7e:	441a      	add	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d90:	441a      	add	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	619a      	str	r2, [r3, #24]
 8002d96:	e016      	b.n	8002dc6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	0c5b      	lsrs	r3, r3, #17
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	2b06      	cmp	r3, #6
 8002da2:	d110      	bne.n	8002dc6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002daa:	2208      	movs	r2, #8
 8002dac:	4619      	mov	r1, r3
 8002dae:	6a38      	ldr	r0, [r7, #32]
 8002db0:	f002 fe65 	bl	8005a7e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc0:	441a      	add	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0210 	orr.w	r2, r2, #16
 8002dd4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 ffe3 	bl	8005da6 <USB_ReadInterrupts>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dea:	d16e      	bne.n	8002eca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f002 ffe9 	bl	8005dcc <USB_ReadDevAllOutEpInterrupt>
 8002dfa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002dfc:	e062      	b.n	8002ec4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d057      	beq.n	8002eb8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 f80e 	bl	8005e34 <USB_ReadDevOutEPInterrupt>
 8002e18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e30:	461a      	mov	r2, r3
 8002e32:	2301      	movs	r3, #1
 8002e34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fdb1 	bl	80039a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e54:	461a      	mov	r2, r3
 8002e56:	2308      	movs	r3, #8
 8002e58:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 feab 	bl	8003bb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	2320      	movs	r3, #32
 8002e98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eb6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	3301      	adds	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d199      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 ff69 	bl	8005da6 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ede:	f040 80c0 	bne.w	8003062 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 ff8a 	bl	8005e00 <USB_ReadDevAllInEpInterrupt>
 8002eec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ef2:	e0b2      	b.n	800305a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a7 	beq.w	800304e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 ffb0 	bl	8005e70 <USB_ReadDevInEPInterrupt>
 8002f10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d057      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	2201      	movs	r2, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69f9      	ldr	r1, [r7, #28]
 8002f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2301      	movs	r3, #1
 8002f50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d132      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3348      	adds	r3, #72	; 0x48
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4403      	add	r3, r0
 8002f7a:	3344      	adds	r3, #68	; 0x44
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4419      	add	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4403      	add	r3, r0
 8002f8e:	3348      	adds	r3, #72	; 0x48
 8002f90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d113      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x31c>
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3350      	adds	r3, #80	; 0x50
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d108      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2101      	movs	r1, #1
 8002fbc:	f002 ffb8 	bl	8005f30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f004 ff67 	bl	8007e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	461a      	mov	r2, r3
 8003000:	2310      	movs	r3, #16
 8003002:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301a:	461a      	mov	r2, r3
 800301c:	2340      	movs	r3, #64	; 0x40
 800301e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003036:	461a      	mov	r2, r3
 8003038:	2302      	movs	r3, #2
 800303a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fc1b 	bl	8003884 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	3301      	adds	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	f47f af49 	bne.w	8002ef4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f002 fe9d 	bl	8005da6 <USB_ReadInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003076:	d122      	bne.n	80030be <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003092:	2b01      	cmp	r3, #1
 8003094:	d108      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800309e:	2100      	movs	r1, #0
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fe27 	bl	8003cf4 <HAL_PCDEx_LPM_Callback>
 80030a6:	e002      	b.n	80030ae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f004 ff6d 	bl	8007f88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f002 fe6f 	bl	8005da6 <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d2:	d112      	bne.n	80030fa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f004 ff29 	bl	8007f3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f002 fe51 	bl	8005da6 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	f040 80c7 	bne.w	80032a0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2110      	movs	r1, #16
 800312c:	4618      	mov	r0, r3
 800312e:	f001 feeb 	bl	8004f08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003132:	2300      	movs	r3, #0
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003136:	e056      	b.n	80031e6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003144:	461a      	mov	r2, r3
 8003146:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800314a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315c:	0151      	lsls	r1, r2, #5
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	440a      	add	r2, r1
 8003162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800316a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317c:	0151      	lsls	r1, r2, #5
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	440a      	add	r2, r1
 8003182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003186:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800318a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800319e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b0:	0151      	lsls	r1, r2, #5
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	440a      	add	r2, r1
 80031b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d0:	0151      	lsls	r1, r2, #5
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	440a      	add	r2, r1
 80031d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	3301      	adds	r3, #1
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d3a3      	bcc.n	8003138 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003202:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800321c:	f043 030b 	orr.w	r3, r3, #11
 8003220:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003232:	f043 030b 	orr.w	r3, r3, #11
 8003236:	6453      	str	r3, [r2, #68]	; 0x44
 8003238:	e015      	b.n	8003266 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003248:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800324c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003250:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003260:	f043 030b 	orr.w	r3, r3, #11
 8003264:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003274:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003278:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800328a:	461a      	mov	r2, r3
 800328c:	f002 fe50 	bl	8005f30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800329e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fd7e 	bl	8005da6 <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b4:	d124      	bne.n	8003300 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f002 fe14 	bl	8005ee8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 fe7c 	bl	8004fc2 <USB_GetDevSpeed>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681c      	ldr	r4, [r3, #0]
 80032d6:	f001 f959 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80032da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	4620      	mov	r0, r4
 80032e6:	f001 fb9b 	bl	8004a20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f004 fdfd 	bl	8007eea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f002 fd4e 	bl	8005da6 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b08      	cmp	r3, #8
 8003312:	d10a      	bne.n	800332a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f004 fdda 	bl	8007ece <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f002 0208 	and.w	r2, r2, #8
 8003328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f002 fd39 	bl	8005da6 <USB_ReadInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333e:	d10f      	bne.n	8003360 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f004 fe3c 	bl	8007fc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800335e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fd1e 	bl	8005da6 <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003374:	d10f      	bne.n	8003396 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4619      	mov	r1, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f004 fe0f 	bl	8007fa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fd03 	bl	8005da6 <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033aa:	d10a      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f004 fe1d 	bl	8007fec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 fced 	bl	8005da6 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d115      	bne.n	8003402 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f004 fe0d 	bl	8008008 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	e000      	b.n	8003402 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003400:	bf00      	nop
    }
  }
}
 8003402:	3734      	adds	r7, #52	; 0x34
 8003404:	46bd      	mov	sp, r7
 8003406:	bd90      	pop	{r4, r7, pc}

08003408 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_PCD_SetAddress+0x1a>
 800341e:	2302      	movs	r3, #2
 8003420:	e013      	b.n	800344a <HAL_PCD_SetAddress+0x42>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f002 fc4b 	bl	8005cd6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	4608      	mov	r0, r1
 800345c:	4611      	mov	r1, r2
 800345e:	461a      	mov	r2, r3
 8003460:	4603      	mov	r3, r0
 8003462:	70fb      	strb	r3, [r7, #3]
 8003464:	460b      	mov	r3, r1
 8003466:	803b      	strh	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003474:	2b00      	cmp	r3, #0
 8003476:	da0f      	bge.n	8003498 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	3338      	adds	r3, #56	; 0x38
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4413      	add	r3, r2
 800348c:	3304      	adds	r3, #4
 800348e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	705a      	strb	r2, [r3, #1]
 8003496:	e00f      	b.n	80034b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	3304      	adds	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034c4:	883a      	ldrh	r2, [r7, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	78ba      	ldrb	r2, [r7, #2]
 80034ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034e2:	78bb      	ldrb	r3, [r7, #2]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d102      	bne.n	80034ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_PCD_EP_Open+0xaa>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e00e      	b.n	800351a <HAL_PCD_EP_Open+0xc8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fd7e 	bl	800500c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003518:	7afb      	ldrb	r3, [r7, #11]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800352e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003532:	2b00      	cmp	r3, #0
 8003534:	da0f      	bge.n	8003556 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	3338      	adds	r3, #56	; 0x38
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	705a      	strb	r2, [r3, #1]
 8003554:	e00f      	b.n	8003576 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 020f 	and.w	r2, r3, #15
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	3304      	adds	r3, #4
 800356e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_PCD_EP_Close+0x6e>
 800358c:	2302      	movs	r3, #2
 800358e:	e00e      	b.n	80035ae <HAL_PCD_EP_Close+0x8c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fdbc 	bl	800511c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	460b      	mov	r3, r1
 80035c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d102      	bne.n	8003612 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003612:	7afb      	ldrb	r3, [r7, #11]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	6979      	ldr	r1, [r7, #20]
 800362a:	f002 f897 	bl	800575c <USB_EP0StartXfer>
 800362e:	e008      	b.n	8003642 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	6979      	ldr	r1, [r7, #20]
 800363e:	f001 fe49 	bl	80052d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 020f 	and.w	r2, r3, #15
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	460b      	mov	r3, r1
 800368a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800368c:	7afb      	ldrb	r3, [r7, #11]
 800368e:	f003 020f 	and.w	r2, r3, #15
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	3338      	adds	r3, #56	; 0x38
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	3304      	adds	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2201      	movs	r2, #1
 80036ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036bc:	7afb      	ldrb	r3, [r7, #11]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d102      	bne.n	80036d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	6979      	ldr	r1, [r7, #20]
 80036ee:	f002 f835 	bl	800575c <USB_EP0StartXfer>
 80036f2:	e008      	b.n	8003706 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	6979      	ldr	r1, [r7, #20]
 8003702:	f001 fde7 	bl	80052d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d901      	bls.n	800372e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e050      	b.n	80037d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800372e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003732:	2b00      	cmp	r3, #0
 8003734:	da0f      	bge.n	8003756 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	f003 020f 	and.w	r2, r3, #15
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3338      	adds	r3, #56	; 0x38
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	705a      	strb	r2, [r3, #1]
 8003754:	e00d      	b.n	8003772 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_PCD_EP_SetStall+0x82>
 800378e:	2302      	movs	r3, #2
 8003790:	e01e      	b.n	80037d0 <HAL_PCD_EP_SetStall+0xc0>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68f9      	ldr	r1, [r7, #12]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f002 f9c4 	bl	8005b2e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	b2d9      	uxtb	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037c0:	461a      	mov	r2, r3
 80037c2:	f002 fbb5 	bl	8005f30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 020f 	and.w	r2, r3, #15
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d901      	bls.n	80037f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e042      	b.n	800387c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da0f      	bge.n	800381e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3338      	adds	r3, #56	; 0x38
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	705a      	strb	r2, [r3, #1]
 800381c:	e00f      	b.n	800383e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_PCD_EP_ClrStall+0x86>
 800385a:	2302      	movs	r3, #2
 800385c:	e00e      	b.n	800387c <HAL_PCD_EP_ClrStall+0xa4>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	4618      	mov	r0, r3
 800386e:	f002 f9cc 	bl	8005c0a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af02      	add	r7, sp, #8
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	3338      	adds	r3, #56	; 0x38
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	3304      	adds	r3, #4
 80038aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d901      	bls.n	80038bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e06c      	b.n	8003996 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d902      	bls.n	80038d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3303      	adds	r3, #3
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038e0:	e02b      	b.n	800393a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d902      	bls.n	80038fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3303      	adds	r3, #3
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68d9      	ldr	r1, [r3, #12]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003916:	b2db      	uxtb	r3, r3
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	4603      	mov	r3, r0
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	f002 f870 	bl	8005a02 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	441a      	add	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	b29b      	uxth	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	429a      	cmp	r2, r3
 800394e:	d809      	bhi.n	8003964 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003958:	429a      	cmp	r2, r3
 800395a:	d203      	bcs.n	8003964 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1be      	bne.n	80038e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	d811      	bhi.n	8003994 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	2201      	movs	r2, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	43db      	mvns	r3, r3
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003990:	4013      	ands	r3, r2
 8003992:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	333c      	adds	r3, #60	; 0x3c
 80039b8:	3304      	adds	r3, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	f040 80a0 	bne.w	8003b18 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d015      	beq.n	8003a0e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4a72      	ldr	r2, [pc, #456]	; (8003bb0 <PCD_EP_OutXfrComplete_int+0x210>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	f240 80dd 	bls.w	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80d7 	beq.w	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0a:	6093      	str	r3, [r2, #8]
 8003a0c:	e0cb      	b.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	461a      	mov	r2, r3
 8003a26:	2320      	movs	r3, #32
 8003a28:	6093      	str	r3, [r2, #8]
 8003a2a:	e0bc      	b.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 80b7 	bne.w	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a5d      	ldr	r2, [pc, #372]	; (8003bb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d90f      	bls.n	8003a60 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	461a      	mov	r2, r3
 8003a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5c:	6093      	str	r3, [r2, #8]
 8003a5e:	e0a2      	b.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a72:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	0159      	lsls	r1, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	440b      	add	r3, r1
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a86:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4403      	add	r3, r0
 8003a96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a9a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aae:	6819      	ldr	r1, [r3, #0]
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4403      	add	r3, r0
 8003abe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4419      	add	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4403      	add	r3, r0
 8003ad4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ad8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d114      	bne.n	8003b0a <PCD_EP_OutXfrComplete_int+0x16a>
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b02:	461a      	mov	r2, r3
 8003b04:	2101      	movs	r1, #1
 8003b06:	f002 fa13 	bl	8005f30 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f004 f9a7 	bl	8007e64 <HAL_PCD_DataOutStageCallback>
 8003b16:	e046      	b.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a26      	ldr	r2, [pc, #152]	; (8003bb4 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d124      	bne.n	8003b6a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	461a      	mov	r2, r3
 8003b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3c:	6093      	str	r3, [r2, #8]
 8003b3e:	e032      	b.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b56:	461a      	mov	r2, r3
 8003b58:	2320      	movs	r3, #32
 8003b5a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4619      	mov	r1, r3
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f004 f97e 	bl	8007e64 <HAL_PCD_DataOutStageCallback>
 8003b68:	e01d      	b.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d114      	bne.n	8003b9a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b92:	461a      	mov	r2, r3
 8003b94:	2100      	movs	r1, #0
 8003b96:	f002 f9cb 	bl	8005f30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f004 f95f 	bl	8007e64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	4f54300a 	.word	0x4f54300a
 8003bb4:	4f54310a 	.word	0x4f54310a

08003bb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	333c      	adds	r3, #60	; 0x3c
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d90e      	bls.n	8003c0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	461a      	mov	r2, r3
 8003c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f004 f917 	bl	8007e40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d90c      	bls.n	8003c34 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d108      	bne.n	8003c34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2101      	movs	r1, #1
 8003c30:	f002 f97e 	bl	8005f30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	4f54300a 	.word	0x4f54300a

08003c44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
 8003c50:	4613      	mov	r3, r2
 8003c52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c62:	883b      	ldrh	r3, [r7, #0]
 8003c64:	0419      	lsls	r1, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c70:	e028      	b.n	8003cc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e00d      	b.n	8003ca2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	3340      	adds	r3, #64	; 0x40
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4413      	add	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d3ec      	bcc.n	8003c86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cac:	883b      	ldrh	r3, [r7, #0]
 8003cae:	0418      	lsls	r0, r3, #16
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	4302      	orrs	r2, r0
 8003cbc:	3340      	adds	r3, #64	; 0x40
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e264      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d075      	beq.n	8003e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2a:	4ba3      	ldr	r3, [pc, #652]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d00c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d36:	4ba0      	ldr	r3, [pc, #640]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d112      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b9d      	ldr	r3, [pc, #628]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4e:	d10b      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	4b99      	ldr	r3, [pc, #612]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d05b      	beq.n	8003e14 <HAL_RCC_OscConfig+0x108>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d157      	bne.n	8003e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e23f      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d106      	bne.n	8003d80 <HAL_RCC_OscConfig+0x74>
 8003d72:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a90      	ldr	r2, [pc, #576]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xb0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d8a:	4b8b      	ldr	r3, [pc, #556]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a8a      	ldr	r2, [pc, #552]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b88      	ldr	r3, [pc, #544]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a87      	ldr	r2, [pc, #540]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xb0>
 8003da4:	4b84      	ldr	r3, [pc, #528]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a83      	ldr	r2, [pc, #524]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a80      	ldr	r2, [pc, #512]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd f944 	bl	8001050 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fd f940 	bl	8001050 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e204      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xc0>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd f930 	bl	8001050 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fd f92c 	bl	8001050 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1f0      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0xe8>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e22:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b62      	ldr	r3, [pc, #392]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b5c      	ldr	r3, [pc, #368]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x152>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1c4      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4952      	ldr	r1, [pc, #328]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <HAL_RCC_OscConfig+0x2b0>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fd f8e5 	bl	8001050 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fd f8e1 	bl	8001050 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1a5      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4940      	ldr	r1, [pc, #256]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <HAL_RCC_OscConfig+0x2b0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd f8c4 	bl	8001050 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fd f8c0 	bl	8001050 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e184      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d030      	beq.n	8003f58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <HAL_RCC_OscConfig+0x2b4>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd f8a4 	bl	8001050 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fd f8a0 	bl	8001050 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e164      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x200>
 8003f2a:	e015      	b.n	8003f58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x2b4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fd f88d 	bl	8001050 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fd f889 	bl	8001050 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e14d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a0 	beq.w	80040a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6413      	str	r3, [r2, #64]	; 0x40
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d121      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fd f84f 	bl	8001050 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	e011      	b.n	8003fda <HAL_RCC_OscConfig+0x2ce>
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	42470000 	.word	0x42470000
 8003fc0:	42470e80 	.word	0x42470e80
 8003fc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fd f842 	bl	8001050 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e106      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b85      	ldr	r3, [pc, #532]	; (80041f0 <HAL_RCC_OscConfig+0x4e4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
 8003fee:	4b81      	ldr	r3, [pc, #516]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a80      	ldr	r2, [pc, #512]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	e01c      	b.n	8004036 <HAL_RCC_OscConfig+0x32a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x312>
 8004004:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a7a      	ldr	r2, [pc, #488]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b78      	ldr	r3, [pc, #480]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a77      	ldr	r2, [pc, #476]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0x32a>
 800401e:	4b75      	ldr	r3, [pc, #468]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a74      	ldr	r2, [pc, #464]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b72      	ldr	r3, [pc, #456]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a71      	ldr	r2, [pc, #452]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fd f807 	bl	8001050 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fd f803 	bl	8001050 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0c5      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b65      	ldr	r3, [pc, #404]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x33a>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fc fff1 	bl	8001050 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fc ffed 	bl	8001050 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0af      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b56      	ldr	r3, [pc, #344]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a55      	ldr	r2, [pc, #340]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 809b 	beq.w	80041e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040b0:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d05c      	beq.n	8004176 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d141      	bne.n	8004148 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <HAL_RCC_OscConfig+0x4ec>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fc ffc1 	bl	8001050 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fc ffbd 	bl	8001050 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e081      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e4:	4b43      	ldr	r3, [pc, #268]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f0      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	019b      	lsls	r3, r3, #6
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	3b01      	subs	r3, #1
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	4937      	ldr	r1, [pc, #220]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <HAL_RCC_OscConfig+0x4ec>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fc ff96 	bl	8001050 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fc ff92 	bl	8001050 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e056      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	4b2e      	ldr	r3, [pc, #184]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x41c>
 8004146:	e04e      	b.n	80041e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_OscConfig+0x4ec>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fc ff7f 	bl	8001050 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004156:	f7fc ff7b 	bl	8001050 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e03f      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004168:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x44a>
 8004174:	e037      	b.n	80041e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e032      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d028      	beq.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d121      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d11a      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041b2:	4013      	ands	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d111      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	3b01      	subs	r3, #1
 80041cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40007000 	.word	0x40007000
 80041f4:	40023800 	.word	0x40023800
 80041f8:	42470060 	.word	0x42470060

080041fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0cc      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004210:	4b68      	ldr	r3, [pc, #416]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d90c      	bls.n	8004238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0b8      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d020      	beq.n	8004286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004250:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a58      	ldr	r2, [pc, #352]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800425a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a52      	ldr	r2, [pc, #328]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b50      	ldr	r3, [pc, #320]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	494d      	ldr	r1, [pc, #308]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d044      	beq.n	800431c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d119      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ba:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ca:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e067      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042da:	4b37      	ldr	r3, [pc, #220]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f023 0203 	bic.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4934      	ldr	r1, [pc, #208]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ec:	f7fc feb0 	bl	8001050 <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	e00a      	b.n	800430a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f4:	f7fc feac 	bl	8001050 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e04f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 020c 	and.w	r2, r3, #12
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	429a      	cmp	r2, r3
 800431a:	d1eb      	bne.n	80042f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d20c      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e032      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4916      	ldr	r1, [pc, #88]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	490e      	ldr	r1, [pc, #56]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004382:	f000 f821 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004386:	4602      	mov	r2, r0
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	490a      	ldr	r1, [pc, #40]	; (80043bc <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	5ccb      	ldrb	r3, [r1, r3]
 8004396:	fa22 f303 	lsr.w	r3, r2, r3
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc fe10 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023c00 	.word	0x40023c00
 80043b8:	40023800 	.word	0x40023800
 80043bc:	08008d30 	.word	0x08008d30
 80043c0:	20000000 	.word	0x20000000
 80043c4:	20000004 	.word	0x20000004

080043c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	2300      	movs	r3, #0
 80043da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043e0:	4b67      	ldr	r3, [pc, #412]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d00d      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x40>
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	f200 80bd 	bhi.w	800456c <HAL_RCC_GetSysClockFreq+0x1a4>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x34>
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x3a>
 80043fa:	e0b7      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043fe:	60bb      	str	r3, [r7, #8]
       break;
 8004400:	e0b7      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004402:	4b61      	ldr	r3, [pc, #388]	; (8004588 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004404:	60bb      	str	r3, [r7, #8]
      break;
 8004406:	e0b4      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004408:	4b5d      	ldr	r3, [pc, #372]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004410:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004412:	4b5b      	ldr	r3, [pc, #364]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d04d      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441e:	4b58      	ldr	r3, [pc, #352]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	099b      	lsrs	r3, r3, #6
 8004424:	461a      	mov	r2, r3
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	ea02 0800 	and.w	r8, r2, r0
 8004436:	ea03 0901 	and.w	r9, r3, r1
 800443a:	4640      	mov	r0, r8
 800443c:	4649      	mov	r1, r9
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	014b      	lsls	r3, r1, #5
 8004448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800444c:	0142      	lsls	r2, r0, #5
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	ebb0 0008 	subs.w	r0, r0, r8
 8004456:	eb61 0109 	sbc.w	r1, r1, r9
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	018b      	lsls	r3, r1, #6
 8004464:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004468:	0182      	lsls	r2, r0, #6
 800446a:	1a12      	subs	r2, r2, r0
 800446c:	eb63 0301 	sbc.w	r3, r3, r1
 8004470:	f04f 0000 	mov.w	r0, #0
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	00d9      	lsls	r1, r3, #3
 800447a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800447e:	00d0      	lsls	r0, r2, #3
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	eb12 0208 	adds.w	r2, r2, r8
 8004488:	eb43 0309 	adc.w	r3, r3, r9
 800448c:	f04f 0000 	mov.w	r0, #0
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	0259      	lsls	r1, r3, #9
 8004496:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800449a:	0250      	lsls	r0, r2, #9
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	f7fb fee8 	bl	8000280 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4613      	mov	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e04a      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ba:	4b31      	ldr	r3, [pc, #196]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	099b      	lsrs	r3, r3, #6
 80044c0:	461a      	mov	r2, r3
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	ea02 0400 	and.w	r4, r2, r0
 80044d2:	ea03 0501 	and.w	r5, r3, r1
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	014b      	lsls	r3, r1, #5
 80044e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044e8:	0142      	lsls	r2, r0, #5
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	1b00      	subs	r0, r0, r4
 80044f0:	eb61 0105 	sbc.w	r1, r1, r5
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	018b      	lsls	r3, r1, #6
 80044fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004502:	0182      	lsls	r2, r0, #6
 8004504:	1a12      	subs	r2, r2, r0
 8004506:	eb63 0301 	sbc.w	r3, r3, r1
 800450a:	f04f 0000 	mov.w	r0, #0
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	00d9      	lsls	r1, r3, #3
 8004514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004518:	00d0      	lsls	r0, r2, #3
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	1912      	adds	r2, r2, r4
 8004520:	eb45 0303 	adc.w	r3, r5, r3
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	0299      	lsls	r1, r3, #10
 800452e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004532:	0290      	lsls	r0, r2, #10
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	461a      	mov	r2, r3
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	f7fb fe9c 	bl	8000280 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	60bb      	str	r3, [r7, #8]
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800456e:	60bb      	str	r3, [r7, #8]
      break;
 8004570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004572:	68bb      	ldr	r3, [r7, #8]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	007a1200 	.word	0x007a1200

0800458c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000000 	.word	0x20000000

080045a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a8:	f7ff fff0 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	0a9b      	lsrs	r3, r3, #10
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4903      	ldr	r1, [pc, #12]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08008d40 	.word	0x08008d40

080045cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d035      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045f4:	4b62      	ldr	r3, [pc, #392]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045fa:	f7fc fd29 	bl	8001050 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004602:	f7fc fd25 	bl	8001050 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0b0      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004614:	4b5b      	ldr	r3, [pc, #364]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f0      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	019a      	lsls	r2, r3, #6
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	071b      	lsls	r3, r3, #28
 800462c:	4955      	ldr	r1, [pc, #340]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004634:	4b52      	ldr	r3, [pc, #328]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800463a:	f7fc fd09 	bl	8001050 <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004642:	f7fc fd05 	bl	8001050 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e090      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004654:	4b4b      	ldr	r3, [pc, #300]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8083 	beq.w	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a43      	ldr	r2, [pc, #268]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800468a:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3e      	ldr	r2, [pc, #248]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004696:	f7fc fcdb 	bl	8001050 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fc fcd7 	bl	8001050 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e062      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046bc:	4b31      	ldr	r3, [pc, #196]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02f      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d028      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046da:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e4:	4b29      	ldr	r3, [pc, #164]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ea:	4b28      	ldr	r3, [pc, #160]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d114      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004702:	f7fc fca5 	bl	8001050 <HAL_GetTick>
 8004706:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fc fca1 	bl	8001050 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	; 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e02a      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004720:	4b18      	ldr	r3, [pc, #96]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ee      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004738:	d10d      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800474a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474e:	490d      	ldr	r1, [pc, #52]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004760:	6093      	str	r3, [r2, #8]
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476e:	4905      	ldr	r1, [pc, #20]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	42470068 	.word	0x42470068
 8004784:	40023800 	.word	0x40023800
 8004788:	40007000 	.word	0x40007000
 800478c:	42470e40 	.word	0x42470e40

08004790 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d13e      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047ae:	4b23      	ldr	r3, [pc, #140]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d12f      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047c4:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c6:	617b      	str	r3, [r7, #20]
          break;
 80047c8:	e02f      	b.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d6:	d108      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047d8:	4b18      	ldr	r3, [pc, #96]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e0:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	e007      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f2:	4a15      	ldr	r2, [pc, #84]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004814:	0f1b      	lsrs	r3, r3, #28
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]
          break;
 8004822:	e002      	b.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
          break;
 8004828:	bf00      	nop
        }
      }
      break;
 800482a:	bf00      	nop
    }
  }
  return frequency;
 800482c:	697b      	ldr	r3, [r7, #20]
}
 800482e:	4618      	mov	r0, r3
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	00bb8000 	.word	0x00bb8000
 8004844:	007a1200 	.word	0x007a1200
 8004848:	00f42400 	.word	0x00f42400

0800484c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07b      	b.n	8004956 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486e:	d009      	beq.n	8004884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	61da      	str	r2, [r3, #28]
 8004876:	e005      	b.n	8004884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc fa82 	bl	8000da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004908:	ea42 0103 	orr.w	r1, r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	f003 0104 	and.w	r1, r3, #4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f003 0210 	and.w	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800495e:	b084      	sub	sp, #16
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	f107 001c 	add.w	r0, r7, #28
 800496c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	2b01      	cmp	r3, #1
 8004974:	d122      	bne.n	80049bc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800498a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f001 fb1b 	bl	8005fec <USB_CoreReset>
 80049b6:	4603      	mov	r3, r0
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e01a      	b.n	80049f2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f001 fb0f 	bl	8005fec <USB_CoreReset>
 80049ce:	4603      	mov	r3, r0
 80049d0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
 80049e4:	e005      	b.n	80049f2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10b      	bne.n	8004a10 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f043 0206 	orr.w	r2, r3, #6
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a1c:	b004      	add	sp, #16
 8004a1e:	4770      	bx	lr

08004a20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d165      	bne.n	8004b00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <USB_SetTurnaroundTime+0x11c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d906      	bls.n	8004a4a <USB_SetTurnaroundTime+0x2a>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4a40      	ldr	r2, [pc, #256]	; (8004b40 <USB_SetTurnaroundTime+0x120>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d202      	bcs.n	8004a4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a44:	230f      	movs	r3, #15
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e062      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a3c      	ldr	r2, [pc, #240]	; (8004b40 <USB_SetTurnaroundTime+0x120>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d306      	bcc.n	8004a60 <USB_SetTurnaroundTime+0x40>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a3b      	ldr	r2, [pc, #236]	; (8004b44 <USB_SetTurnaroundTime+0x124>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d202      	bcs.n	8004a60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a5a:	230e      	movs	r3, #14
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e057      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4a38      	ldr	r2, [pc, #224]	; (8004b44 <USB_SetTurnaroundTime+0x124>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d306      	bcc.n	8004a76 <USB_SetTurnaroundTime+0x56>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a37      	ldr	r2, [pc, #220]	; (8004b48 <USB_SetTurnaroundTime+0x128>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d202      	bcs.n	8004a76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a70:	230d      	movs	r3, #13
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e04c      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <USB_SetTurnaroundTime+0x128>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d306      	bcc.n	8004a8c <USB_SetTurnaroundTime+0x6c>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4a32      	ldr	r2, [pc, #200]	; (8004b4c <USB_SetTurnaroundTime+0x12c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d802      	bhi.n	8004a8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a86:	230c      	movs	r3, #12
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e041      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4a2f      	ldr	r2, [pc, #188]	; (8004b4c <USB_SetTurnaroundTime+0x12c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d906      	bls.n	8004aa2 <USB_SetTurnaroundTime+0x82>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4a2e      	ldr	r2, [pc, #184]	; (8004b50 <USB_SetTurnaroundTime+0x130>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d802      	bhi.n	8004aa2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a9c:	230b      	movs	r3, #11
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e036      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <USB_SetTurnaroundTime+0x130>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d906      	bls.n	8004ab8 <USB_SetTurnaroundTime+0x98>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a29      	ldr	r2, [pc, #164]	; (8004b54 <USB_SetTurnaroundTime+0x134>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d802      	bhi.n	8004ab8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ab2:	230a      	movs	r3, #10
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e02b      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4a26      	ldr	r2, [pc, #152]	; (8004b54 <USB_SetTurnaroundTime+0x134>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d906      	bls.n	8004ace <USB_SetTurnaroundTime+0xae>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4a25      	ldr	r2, [pc, #148]	; (8004b58 <USB_SetTurnaroundTime+0x138>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d202      	bcs.n	8004ace <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ac8:	2309      	movs	r3, #9
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e020      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <USB_SetTurnaroundTime+0x138>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d306      	bcc.n	8004ae4 <USB_SetTurnaroundTime+0xc4>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <USB_SetTurnaroundTime+0x13c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d802      	bhi.n	8004ae4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ade:	2308      	movs	r3, #8
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	e015      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <USB_SetTurnaroundTime+0x13c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d906      	bls.n	8004afa <USB_SetTurnaroundTime+0xda>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <USB_SetTurnaroundTime+0x140>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d202      	bcs.n	8004afa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004af4:	2307      	movs	r3, #7
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e00a      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004afa:	2306      	movs	r3, #6
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e007      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b06:	2309      	movs	r3, #9
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	e001      	b.n	8004b10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b0c:	2309      	movs	r3, #9
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	00d8acbf 	.word	0x00d8acbf
 8004b40:	00e4e1c0 	.word	0x00e4e1c0
 8004b44:	00f42400 	.word	0x00f42400
 8004b48:	01067380 	.word	0x01067380
 8004b4c:	011a499f 	.word	0x011a499f
 8004b50:	01312cff 	.word	0x01312cff
 8004b54:	014ca43f 	.word	0x014ca43f
 8004b58:	016e3600 	.word	0x016e3600
 8004b5c:	01a6ab1f 	.word	0x01a6ab1f
 8004b60:	01e84800 	.word	0x01e84800

08004b64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 0201 	bic.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d115      	bne.n	8004bf6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	f7fc fa46 	bl	8001068 <HAL_Delay>
      ms++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3301      	adds	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f001 f972 	bl	8005ecc <USB_GetMode>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d01e      	beq.n	8004c2c <USB_SetCurrentMode+0x84>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b31      	cmp	r3, #49	; 0x31
 8004bf2:	d9f0      	bls.n	8004bd6 <USB_SetCurrentMode+0x2e>
 8004bf4:	e01a      	b.n	8004c2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d115      	bne.n	8004c28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c08:	2001      	movs	r0, #1
 8004c0a:	f7fc fa2d 	bl	8001068 <HAL_Delay>
      ms++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f001 f959 	bl	8005ecc <USB_GetMode>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <USB_SetCurrentMode+0x84>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b31      	cmp	r3, #49	; 0x31
 8004c24:	d9f0      	bls.n	8004c08 <USB_SetCurrentMode+0x60>
 8004c26:	e001      	b.n	8004c2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e005      	b.n	8004c38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b32      	cmp	r3, #50	; 0x32
 8004c30:	d101      	bne.n	8004c36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c40:	b084      	sub	sp, #16
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e009      	b.n	8004c74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	3340      	adds	r3, #64	; 0x40
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	3301      	adds	r3, #1
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b0e      	cmp	r3, #14
 8004c78:	d9f2      	bls.n	8004c60 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d11c      	bne.n	8004cba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8e:	f043 0302 	orr.w	r3, r3, #2
 8004c92:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cb8:	e00b      	b.n	8004cd2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	461a      	mov	r2, r3
 8004cee:	680b      	ldr	r3, [r1, #0]
 8004cf0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d10c      	bne.n	8004d12 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f945 	bl	8004f90 <USB_SetDevSpeed>
 8004d06:	e008      	b.n	8004d1a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d08:	2101      	movs	r1, #1
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f940 	bl	8004f90 <USB_SetDevSpeed>
 8004d10:	e003      	b.n	8004d1a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d12:	2103      	movs	r1, #3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f93b 	bl	8004f90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d1a:	2110      	movs	r1, #16
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f8f3 	bl	8004f08 <USB_FlushTxFifo>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f90f 	bl	8004f50 <USB_FlushRxFifo>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	461a      	mov	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	e043      	b.n	8004dee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d7c:	d118      	bne.n	8004db0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	e013      	b.n	8004dc2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da6:	461a      	mov	r2, r3
 8004da8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e008      	b.n	8004dc2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	461a      	mov	r2, r3
 8004de2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004de6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3301      	adds	r3, #1
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3b7      	bcc.n	8004d66 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	e043      	b.n	8004e84 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e12:	d118      	bne.n	8004e46 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	461a      	mov	r2, r3
 8004e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e013      	b.n	8004e58 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e008      	b.n	8004e58 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	461a      	mov	r2, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	461a      	mov	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	461a      	mov	r2, r3
 8004e78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	3301      	adds	r3, #1
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d3b7      	bcc.n	8004dfc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004eac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f043 0210 	orr.w	r2, r3, #16
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <USB_DevInit+0x2c4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f043 0208 	orr.w	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d107      	bne.n	8004ef4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f00:	b004      	add	sp, #16
 8004f02:	4770      	bx	lr
 8004f04:	803c3800 	.word	0x803c3800

08004f08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3301      	adds	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <USB_FlushTxFifo+0x44>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e006      	b.n	8004f40 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d0f1      	beq.n	8004f22 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	00030d40 	.word	0x00030d40

08004f50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2210      	movs	r2, #16
 8004f60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <USB_FlushRxFifo+0x3c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e006      	b.n	8004f80 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d0f1      	beq.n	8004f62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	00030d40 	.word	0x00030d40

08004f90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0306 	and.w	r3, r3, #6
 8004fda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
 8004fe6:	e00a      	b.n	8004ffe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d002      	beq.n	8004ff4 <USB_GetDevSpeed+0x32>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b06      	cmp	r3, #6
 8004ff2:	d102      	bne.n	8004ffa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	75fb      	strb	r3, [r7, #23]
 8004ff8:	e001      	b.n	8004ffe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ffa:	230f      	movs	r3, #15
 8004ffc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d13a      	bne.n	800509e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	2101      	movs	r1, #1
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	b29b      	uxth	r3, r3
 8005040:	68f9      	ldr	r1, [r7, #12]
 8005042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005046:	4313      	orrs	r3, r2
 8005048:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d155      	bne.n	800510c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	78db      	ldrb	r3, [r3, #3]
 800507a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800507c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	059b      	lsls	r3, r3, #22
 8005082:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005084:	4313      	orrs	r3, r2
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e036      	b.n	800510c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	2101      	movs	r1, #1
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050bc:	4313      	orrs	r3, r2
 80050be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d11a      	bne.n	800510c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	78db      	ldrb	r3, [r3, #3]
 80050f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050f2:	430b      	orrs	r3, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d161      	bne.n	80051fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800514e:	d11f      	bne.n	8005190 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800516e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800518e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b0:	4013      	ands	r3, r2
 80051b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	2101      	movs	r1, #1
 80051c6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d4:	4013      	ands	r3, r2
 80051d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	0159      	lsls	r1, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	440b      	add	r3, r1
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	4619      	mov	r1, r3
 80051f4:	4b35      	ldr	r3, [pc, #212]	; (80052cc <USB_DeactivateEndpoint+0x1b0>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
 80051fa:	e060      	b.n	80052be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005212:	d11f      	bne.n	8005254 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005232:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005252:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	43db      	mvns	r3, r3
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005274:	4013      	ands	r3, r2
 8005276:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	43db      	mvns	r3, r3
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005298:	4013      	ands	r3, r2
 800529a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	0159      	lsls	r1, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	4619      	mov	r1, r3
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <USB_DeactivateEndpoint+0x1b4>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	ec337800 	.word	0xec337800
 80052d0:	eff37800 	.word	0xeff37800

080052d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f040 815c 	bne.w	80055ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d132      	bne.n	8005364 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800531c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	0cdb      	lsrs	r3, r3, #19
 800535e:	04db      	lsls	r3, r3, #19
 8005360:	6113      	str	r3, [r2, #16]
 8005362:	e074      	b.n	800544e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	0cdb      	lsrs	r3, r3, #19
 8005380:	04db      	lsls	r3, r3, #19
 8005382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6959      	ldr	r1, [r3, #20]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	440b      	add	r3, r1
 80053c0:	1e59      	subs	r1, r3, #1
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053cc:	4b9d      	ldr	r3, [pc, #628]	; (8005644 <USB_EPStartXfer+0x370>)
 80053ce:	400b      	ands	r3, r1
 80053d0:	69b9      	ldr	r1, [r7, #24]
 80053d2:	0148      	lsls	r0, r1, #5
 80053d4:	69f9      	ldr	r1, [r7, #28]
 80053d6:	4401      	add	r1, r0
 80053d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053dc:	4313      	orrs	r3, r2
 80053de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	0148      	lsls	r0, r1, #5
 80053fa:	69f9      	ldr	r1, [r7, #28]
 80053fc:	4401      	add	r1, r0
 80053fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005402:	4313      	orrs	r3, r2
 8005404:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	78db      	ldrb	r3, [r3, #3]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d11f      	bne.n	800544e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800542c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800544c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d14b      	bne.n	80054ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	78db      	ldrb	r3, [r3, #3]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d128      	bne.n	80054ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d110      	bne.n	80054aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e00f      	b.n	80054ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e12f      	b.n	800574c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005506:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800550a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	78db      	ldrb	r3, [r3, #3]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d015      	beq.n	8005540 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8117 	beq.w	800574c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	69f9      	ldr	r1, [r7, #28]
 8005536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800553a:	4313      	orrs	r3, r2
 800553c:	634b      	str	r3, [r1, #52]	; 0x34
 800553e:	e105      	b.n	800574c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d110      	bne.n	8005572 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e00f      	b.n	8005592 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005590:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	68d9      	ldr	r1, [r3, #12]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	b298      	uxth	r0, r3
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	4603      	mov	r3, r0
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fa2b 	bl	8005a02 <USB_WritePacket>
 80055ac:	e0ce      	b.n	800574c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	0151      	lsls	r1, r2, #5
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	440a      	add	r2, r1
 80055c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c8:	0cdb      	lsrs	r3, r3, #19
 80055ca:	04db      	lsls	r3, r3, #19
 80055cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d126      	bne.n	8005648 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005610:	69b9      	ldr	r1, [r7, #24]
 8005612:	0148      	lsls	r0, r1, #5
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	4401      	add	r1, r0
 8005618:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800561c:	4313      	orrs	r3, r2
 800561e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800563e:	6113      	str	r3, [r2, #16]
 8005640:	e036      	b.n	80056b0 <USB_EPStartXfer+0x3dc>
 8005642:	bf00      	nop
 8005644:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	4413      	add	r3, r2
 8005652:	1e5a      	subs	r2, r3, #1
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	8afb      	ldrh	r3, [r7, #22]
 800566e:	04d9      	lsls	r1, r3, #19
 8005670:	4b39      	ldr	r3, [pc, #228]	; (8005758 <USB_EPStartXfer+0x484>)
 8005672:	400b      	ands	r3, r1
 8005674:	69b9      	ldr	r1, [r7, #24]
 8005676:	0148      	lsls	r0, r1, #5
 8005678:	69f9      	ldr	r1, [r7, #28]
 800567a:	4401      	add	r1, r0
 800567c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005680:	4313      	orrs	r3, r2
 8005682:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	8af9      	ldrh	r1, [r7, #22]
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	0148      	lsls	r0, r1, #5
 80056a4:	69f9      	ldr	r1, [r7, #28]
 80056a6:	4401      	add	r1, r0
 80056a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056ac:	4313      	orrs	r3, r2
 80056ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d10d      	bne.n	80056d2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	68d9      	ldr	r1, [r3, #12]
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	460a      	mov	r2, r1
 80056d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	78db      	ldrb	r3, [r3, #3]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d128      	bne.n	800572c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d110      	bne.n	800570c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005704:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e00f      	b.n	800572c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005746:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800574a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	1ff80000 	.word	0x1ff80000

0800575c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 80cd 	bne.w	8005918 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d132      	bne.n	80057ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e4:	0cdb      	lsrs	r3, r3, #19
 80057e6:	04db      	lsls	r3, r3, #19
 80057e8:	6113      	str	r3, [r2, #16]
 80057ea:	e04e      	b.n	800588a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	0cdb      	lsrs	r3, r3, #19
 8005808:	04db      	lsls	r3, r3, #19
 800580a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800582a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800582e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	d903      	bls.n	8005844 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	0148      	lsls	r0, r1, #5
 800587e:	6979      	ldr	r1, [r7, #20]
 8005880:	4401      	add	r1, r0
 8005882:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005886:	4313      	orrs	r3, r2
 8005888:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d11e      	bne.n	80058ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e092      	b.n	80059f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d07e      	beq.n	80059f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	2101      	movs	r1, #1
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005912:	4313      	orrs	r3, r2
 8005914:	634b      	str	r3, [r1, #52]	; 0x34
 8005916:	e06d      	b.n	80059f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005932:	0cdb      	lsrs	r3, r3, #19
 8005934:	04db      	lsls	r3, r3, #19
 8005936:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005952:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005956:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800595a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800598a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a2:	6939      	ldr	r1, [r7, #16]
 80059a4:	0148      	lsls	r0, r1, #5
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	4401      	add	r1, r0
 80059aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059ae:	4313      	orrs	r3, r2
 80059b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10d      	bne.n	80059d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	68d9      	ldr	r1, [r3, #12]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	460a      	mov	r2, r1
 80059d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b089      	sub	sp, #36	; 0x24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	461a      	mov	r2, r3
 8005a10:	460b      	mov	r3, r1
 8005a12:	71fb      	strb	r3, [r7, #7]
 8005a14:	4613      	mov	r3, r2
 8005a16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d123      	bne.n	8005a70 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a28:	88bb      	ldrh	r3, [r7, #4]
 8005a2a:	3303      	adds	r3, #3
 8005a2c:	089b      	lsrs	r3, r3, #2
 8005a2e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	e018      	b.n	8005a68 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	031a      	lsls	r2, r3, #12
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a42:	461a      	mov	r2, r3
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	3301      	adds	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	3301      	adds	r3, #1
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3e2      	bcc.n	8005a36 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b08b      	sub	sp, #44	; 0x2c
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	e014      	b.n	8005ad4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	3301      	adds	r3, #1
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	3301      	adds	r3, #1
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	3301      	adds	r3, #1
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	6a3a      	ldr	r2, [r7, #32]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d3e6      	bcc.n	8005aaa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005adc:	8bfb      	ldrh	r3, [r7, #30]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01e      	beq.n	8005b20 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	461a      	mov	r2, r3
 8005aee:	f107 0310 	add.w	r3, r7, #16
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	701a      	strb	r2, [r3, #0]
      i++;
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b14:	8bfb      	ldrh	r3, [r7, #30]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b1a:	8bfb      	ldrh	r3, [r7, #30]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ea      	bne.n	8005af6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	372c      	adds	r7, #44	; 0x2c
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d12c      	bne.n	8005ba4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	db12      	blt.n	8005b82 <USB_EPSetStall+0x54>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00f      	beq.n	8005b82 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b80:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e02b      	b.n	8005bfc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	db12      	blt.n	8005bdc <USB_EPSetStall+0xae>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00f      	beq.n	8005bdc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bda:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d128      	bne.n	8005c78 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	78db      	ldrb	r3, [r3, #3]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d003      	beq.n	8005c56 <USB_EPClearStall+0x4c>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	78db      	ldrb	r3, [r3, #3]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d138      	bne.n	8005cc8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e027      	b.n	8005cc8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	78db      	ldrb	r3, [r3, #3]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d003      	beq.n	8005ca8 <USB_EPClearStall+0x9e>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	78db      	ldrb	r3, [r3, #3]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d10f      	bne.n	8005cc8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cf8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d3c:	f023 0303 	bic.w	r3, r3, #3
 8005d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d50:	f023 0302 	bic.w	r3, r3, #2
 8005d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d92:	f043 0302 	orr.w	r3, r3, #2
 8005d96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	0c1b      	lsrs	r3, r3, #16
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4013      	ands	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	b29b      	uxth	r3, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e62:	68bb      	ldr	r3, [r7, #8]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e92:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea0:	01db      	lsls	r3, r3, #7
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	333c      	adds	r3, #60	; 0x3c
 8005f46:	3304      	adds	r3, #4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4a26      	ldr	r2, [pc, #152]	; (8005fe8 <USB_EP0_OutStart+0xb8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d90a      	bls.n	8005f6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f64:	d101      	bne.n	8005f6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e037      	b.n	8005fda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	461a      	mov	r2, r3
 8005f72:	2300      	movs	r3, #0
 8005f74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f98:	f043 0318 	orr.w	r3, r3, #24
 8005f9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d10f      	bne.n	8005fd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	4f54300a 	.word	0x4f54300a

08005fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	4a13      	ldr	r2, [pc, #76]	; (800604c <USB_CoreReset+0x60>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d901      	bls.n	8006008 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e01a      	b.n	800603e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	daf3      	bge.n	8005ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f043 0201 	orr.w	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	4a09      	ldr	r2, [pc, #36]	; (800604c <USB_CoreReset+0x60>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d901      	bls.n	8006030 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e006      	b.n	800603e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b01      	cmp	r3, #1
 800603a:	d0f1      	beq.n	8006020 <USB_CoreReset+0x34>

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	00030d40 	.word	0x00030d40

08006050 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800605c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006060:	f002 f96a 	bl	8008338 <USBD_static_malloc>
 8006064:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d105      	bne.n	8006078 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006074:	2302      	movs	r3, #2
 8006076:	e066      	b.n	8006146 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	7c1b      	ldrb	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d119      	bne.n	80060bc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800608c:	2202      	movs	r2, #2
 800608e:	2181      	movs	r1, #129	; 0x81
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f002 f82e 	bl	80080f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800609c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a0:	2202      	movs	r2, #2
 80060a2:	2101      	movs	r1, #1
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f002 f824 	bl	80080f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2210      	movs	r2, #16
 80060b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80060ba:	e016      	b.n	80060ea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	2202      	movs	r2, #2
 80060c0:	2181      	movs	r1, #129	; 0x81
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f002 f815 	bl	80080f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060ce:	2340      	movs	r3, #64	; 0x40
 80060d0:	2202      	movs	r2, #2
 80060d2:	2101      	movs	r1, #1
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f002 f80c 	bl	80080f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2210      	movs	r2, #16
 80060e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060ea:	2308      	movs	r3, #8
 80060ec:	2203      	movs	r2, #3
 80060ee:	2182      	movs	r1, #130	; 0x82
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 fffe 	bl	80080f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	7c1b      	ldrb	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800612a:	2101      	movs	r1, #1
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f002 f8cf 	bl	80082d0 <USBD_LL_PrepareReceive>
 8006132:	e007      	b.n	8006144 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800613a:	2340      	movs	r3, #64	; 0x40
 800613c:	2101      	movs	r1, #1
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f002 f8c6 	bl	80082d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	460b      	mov	r3, r1
 8006158:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800615a:	2181      	movs	r1, #129	; 0x81
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 ffee 	bl	800813e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006168:	2101      	movs	r1, #1
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 ffe7 	bl	800813e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006178:	2182      	movs	r1, #130	; 0x82
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 ffdf 	bl	800813e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00e      	beq.n	80061b8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061aa:	4618      	mov	r0, r3
 80061ac:	f002 f8d2 	bl	8008354 <USBD_static_free>
    pdev->pClassData = NULL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e0af      	b.n	800634c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d03f      	beq.n	8006278 <USBD_CDC_Setup+0xb4>
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	f040 809f 	bne.w	800633c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	88db      	ldrh	r3, [r3, #6]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02e      	beq.n	8006264 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b25b      	sxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	da16      	bge.n	800623e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800621c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	88d2      	ldrh	r2, [r2, #6]
 8006222:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	88db      	ldrh	r3, [r3, #6]
 8006228:	2b07      	cmp	r3, #7
 800622a:	bf28      	it	cs
 800622c:	2307      	movcs	r3, #7
 800622e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	89fa      	ldrh	r2, [r7, #14]
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 fb19 	bl	800786e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800623c:	e085      	b.n	800634a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	785a      	ldrb	r2, [r3, #1]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	88db      	ldrh	r3, [r3, #6]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006254:	6939      	ldr	r1, [r7, #16]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	88db      	ldrh	r3, [r3, #6]
 800625a:	461a      	mov	r2, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 fb32 	bl	80078c6 <USBD_CtlPrepareRx>
      break;
 8006262:	e072      	b.n	800634a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	7850      	ldrb	r0, [r2, #1]
 8006270:	2200      	movs	r2, #0
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	4798      	blx	r3
      break;
 8006276:	e068      	b.n	800634a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b0b      	cmp	r3, #11
 800627e:	d852      	bhi.n	8006326 <USBD_CDC_Setup+0x162>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <USBD_CDC_Setup+0xc4>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080062b9 	.word	0x080062b9
 800628c:	08006335 	.word	0x08006335
 8006290:	08006327 	.word	0x08006327
 8006294:	08006327 	.word	0x08006327
 8006298:	08006327 	.word	0x08006327
 800629c:	08006327 	.word	0x08006327
 80062a0:	08006327 	.word	0x08006327
 80062a4:	08006327 	.word	0x08006327
 80062a8:	08006327 	.word	0x08006327
 80062ac:	08006327 	.word	0x08006327
 80062b0:	080062e3 	.word	0x080062e3
 80062b4:	0800630d 	.word	0x0800630d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d107      	bne.n	80062d4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062c4:	f107 030a 	add.w	r3, r7, #10
 80062c8:	2202      	movs	r2, #2
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 face 	bl	800786e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062d2:	e032      	b.n	800633a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fa58 	bl	800778c <USBD_CtlError>
            ret = USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	75fb      	strb	r3, [r7, #23]
          break;
 80062e0:	e02b      	b.n	800633a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d107      	bne.n	80062fe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062ee:	f107 030d 	add.w	r3, r7, #13
 80062f2:	2201      	movs	r2, #1
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fab9 	bl	800786e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062fc:	e01d      	b.n	800633a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 fa43 	bl	800778c <USBD_CtlError>
            ret = USBD_FAIL;
 8006306:	2303      	movs	r3, #3
 8006308:	75fb      	strb	r3, [r7, #23]
          break;
 800630a:	e016      	b.n	800633a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d00f      	beq.n	8006338 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fa36 	bl	800778c <USBD_CtlError>
            ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006324:	e008      	b.n	8006338 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fa2f 	bl	800778c <USBD_CtlError>
          ret = USBD_FAIL;
 800632e:	2303      	movs	r3, #3
 8006330:	75fb      	strb	r3, [r7, #23]
          break;
 8006332:	e002      	b.n	800633a <USBD_CDC_Setup+0x176>
          break;
 8006334:	bf00      	nop
 8006336:	e008      	b.n	800634a <USBD_CDC_Setup+0x186>
          break;
 8006338:	bf00      	nop
      }
      break;
 800633a:	e006      	b.n	800634a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fa24 	bl	800778c <USBD_CtlError>
      ret = USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	75fb      	strb	r3, [r7, #23]
      break;
 8006348:	bf00      	nop
  }

  return (uint8_t)ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006372:	2303      	movs	r3, #3
 8006374:	e04f      	b.n	8006416 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800637e:	78fa      	ldrb	r2, [r7, #3]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	440b      	add	r3, r1
 800638c:	3318      	adds	r3, #24
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d029      	beq.n	80063e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	3318      	adds	r3, #24
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	78f9      	ldrb	r1, [r7, #3]
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	460b      	mov	r3, r1
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	1a5b      	subs	r3, r3, r1
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4403      	add	r3, r0
 80063b4:	3344      	adds	r3, #68	; 0x44
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063bc:	fb03 f301 	mul.w	r3, r3, r1
 80063c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d110      	bne.n	80063e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	3318      	adds	r3, #24
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063da:	78f9      	ldrb	r1, [r7, #3]
 80063dc:	2300      	movs	r3, #0
 80063de:	2200      	movs	r2, #0
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 ff54 	bl	800828e <USBD_LL_Transmit>
 80063e6:	e015      	b.n	8006414 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006430:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e015      	b.n	800646c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 ff64 	bl	8008312 <USBD_LL_GetRxDataSize>
 800644a:	4602      	mov	r2, r0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006466:	4611      	mov	r1, r2
 8006468:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006482:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800648a:	2303      	movs	r3, #3
 800648c:	e01b      	b.n	80064c6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d015      	beq.n	80064c4 <USBD_CDC_EP0_RxReady+0x50>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800649e:	2bff      	cmp	r3, #255	; 0xff
 80064a0:	d010      	beq.n	80064c4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064b0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064b8:	b292      	uxth	r2, r2
 80064ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	22ff      	movs	r2, #255	; 0xff
 80064c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2243      	movs	r2, #67	; 0x43
 80064dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80064de:	4b03      	ldr	r3, [pc, #12]	; (80064ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	20000094 	.word	0x20000094

080064f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2243      	movs	r2, #67	; 0x43
 80064fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80064fe:	4b03      	ldr	r3, [pc, #12]	; (800650c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	20000050 	.word	0x20000050

08006510 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2243      	movs	r2, #67	; 0x43
 800651c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800651e:	4b03      	ldr	r3, [pc, #12]	; (800652c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	200000d8 	.word	0x200000d8

08006530 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	220a      	movs	r2, #10
 800653c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	2000000c 	.word	0x2000000c

08006550 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006560:	2303      	movs	r3, #3
 8006562:	e004      	b.n	800656e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800657a:	b480      	push	{r7}
 800657c:	b087      	sub	sp, #28
 800657e:	af00      	add	r7, sp, #0
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800658c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006594:	2303      	movs	r3, #3
 8006596:	e008      	b.n	80065aa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e004      	b.n	80065dc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	e01a      	b.n	8006640 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006610:	2b00      	cmp	r3, #0
 8006612:	d114      	bne.n	800663e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2201      	movs	r2, #1
 8006618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006632:	2181      	movs	r1, #129	; 0x81
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fe2a 	bl	800828e <USBD_LL_Transmit>

    ret = USBD_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006656:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006662:	2303      	movs	r3, #3
 8006664:	e016      	b.n	8006694 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	7c1b      	ldrb	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006678:	2101      	movs	r1, #1
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 fe28 	bl	80082d0 <USBD_LL_PrepareReceive>
 8006680:	e007      	b.n	8006692 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	2101      	movs	r1, #1
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fe1f 	bl	80082d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e01f      	b.n	80066f4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	79fa      	ldrb	r2, [r7, #7]
 80066e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f001 fc9b 	bl	8008024 <USBD_LL_Init>
 80066ee:	4603      	mov	r3, r0
 80066f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006710:	2303      	movs	r3, #3
 8006712:	e016      	b.n	8006742 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00b      	beq.n	8006740 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	f107 020e 	add.w	r2, r7, #14
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
 8006738:	4602      	mov	r2, r0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 fcb2 	bl	80080bc <USBD_LL_Start>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006784:	2303      	movs	r3, #3
 8006786:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	78fa      	ldrb	r2, [r7, #3]
 800679c:	4611      	mov	r1, r2
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	4611      	mov	r1, r2
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
  }

  return USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 ff90 	bl	8007718 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006806:	461a      	mov	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2b02      	cmp	r3, #2
 800681a:	d01a      	beq.n	8006852 <USBD_LL_SetupStage+0x72>
 800681c:	2b02      	cmp	r3, #2
 800681e:	d822      	bhi.n	8006866 <USBD_LL_SetupStage+0x86>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <USBD_LL_SetupStage+0x4a>
 8006824:	2b01      	cmp	r3, #1
 8006826:	d00a      	beq.n	800683e <USBD_LL_SetupStage+0x5e>
 8006828:	e01d      	b.n	8006866 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa62 	bl	8006cfc <USBD_StdDevReq>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]
      break;
 800683c:	e020      	b.n	8006880 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fac6 	bl	8006dd8 <USBD_StdItfReq>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
      break;
 8006850:	e016      	b.n	8006880 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fb05 	bl	8006e6a <USBD_StdEPReq>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]
      break;
 8006864:	e00c      	b.n	8006880 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800686c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006870:	b2db      	uxtb	r3, r3
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fc81 	bl	800817c <USBD_LL_StallEP>
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
      break;
 800687e:	bf00      	nop
  }

  return ret;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	460b      	mov	r3, r1
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d138      	bne.n	8006910 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d14a      	bne.n	8006946 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d913      	bls.n	80068e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	1ad2      	subs	r2, r2, r3
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	4293      	cmp	r3, r2
 80068d4:	bf28      	it	cs
 80068d6:	4613      	movcs	r3, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f001 f80f 	bl	8007900 <USBD_CtlContinueRx>
 80068e2:	e030      	b.n	8006946 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d10b      	bne.n	8006908 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f001 f80a 	bl	8007922 <USBD_CtlSendStatus>
 800690e:	e01a      	b.n	8006946 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b03      	cmp	r3, #3
 800691a:	d114      	bne.n	8006946 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00e      	beq.n	8006946 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	7afa      	ldrb	r2, [r7, #11]
 8006932:	4611      	mov	r1, r2
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	4798      	blx	r3
 8006938:	4603      	mov	r3, r0
 800693a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	e000      	b.n	8006948 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	460b      	mov	r3, r1
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800695e:	7afb      	ldrb	r3, [r7, #11]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d16b      	bne.n	8006a3c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3314      	adds	r3, #20
 8006968:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006970:	2b02      	cmp	r3, #2
 8006972:	d156      	bne.n	8006a22 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	429a      	cmp	r2, r3
 800697e:	d914      	bls.n	80069aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	1ad2      	subs	r2, r2, r3
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	461a      	mov	r2, r3
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 ff84 	bl	80078a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800699c:	2300      	movs	r3, #0
 800699e:	2200      	movs	r2, #0
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 fc94 	bl	80082d0 <USBD_LL_PrepareReceive>
 80069a8:	e03b      	b.n	8006a22 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d11c      	bne.n	80069f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069be:	429a      	cmp	r2, r3
 80069c0:	d316      	bcc.n	80069f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d20f      	bcs.n	80069f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 ff65 	bl	80078a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069e2:	2300      	movs	r3, #0
 80069e4:	2200      	movs	r2, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fc71 	bl	80082d0 <USBD_LL_PrepareReceive>
 80069ee:	e018      	b.n	8006a22 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d10b      	bne.n	8006a14 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a14:	2180      	movs	r1, #128	; 0x80
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f001 fbb0 	bl	800817c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 ff93 	bl	8007948 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d122      	bne.n	8006a72 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff fe98 	bl	8006762 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a3a:	e01a      	b.n	8006a72 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d114      	bne.n	8006a72 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00e      	beq.n	8006a72 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	7afa      	ldrb	r2, [r7, #11]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	4798      	blx	r3
 8006a64:	4603      	mov	r3, r0
 8006a66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	e000      	b.n	8006a74 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e02f      	b.n	8006b10 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00f      	beq.n	8006ada <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d009      	beq.n	8006ada <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6852      	ldr	r2, [r2, #4]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ada:	2340      	movs	r3, #64	; 0x40
 8006adc:	2200      	movs	r2, #0
 8006ade:	2100      	movs	r1, #0
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fb06 	bl	80080f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2240      	movs	r2, #64	; 0x40
 8006af2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006af6:	2340      	movs	r3, #64	; 0x40
 8006af8:	2200      	movs	r2, #0
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 faf8 	bl	80080f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2240      	movs	r2, #64	; 0x40
 8006b0c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2204      	movs	r2, #4
 8006b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d106      	bne.n	8006b86 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e012      	b.n	8006bd0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d10b      	bne.n	8006bce <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e014      	b.n	8006c1c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d10d      	bne.n	8006c1a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d007      	beq.n	8006c1a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	4611      	mov	r1, r2
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e014      	b.n	8006c68 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d10d      	bne.n	8006c66 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	4611      	mov	r1, r2
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6852      	ldr	r2, [r2, #4]
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	4611      	mov	r1, r2
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
  }

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b087      	sub	sp, #28
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006cdc:	8a3b      	ldrh	r3, [r7, #16]
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	b21a      	sxth	r2, r3
 8006ce2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b21b      	sxth	r3, r3
 8006cea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006cec:	89fb      	ldrh	r3, [r7, #14]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d005      	beq.n	8006d22 <USBD_StdDevReq+0x26>
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d853      	bhi.n	8006dc2 <USBD_StdDevReq+0xc6>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <USBD_StdDevReq+0x3a>
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d14f      	bne.n	8006dc2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
      break;
 8006d34:	e04a      	b.n	8006dcc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b09      	cmp	r3, #9
 8006d3c:	d83b      	bhi.n	8006db6 <USBD_StdDevReq+0xba>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <USBD_StdDevReq+0x48>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006dad 	.word	0x08006dad
 8006d4c:	08006db7 	.word	0x08006db7
 8006d50:	08006da3 	.word	0x08006da3
 8006d54:	08006db7 	.word	0x08006db7
 8006d58:	08006d77 	.word	0x08006d77
 8006d5c:	08006d6d 	.word	0x08006d6d
 8006d60:	08006db7 	.word	0x08006db7
 8006d64:	08006d8f 	.word	0x08006d8f
 8006d68:	08006d81 	.word	0x08006d81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9de 	bl	8007130 <USBD_GetDescriptor>
          break;
 8006d74:	e024      	b.n	8006dc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fb43 	bl	8007404 <USBD_SetAddress>
          break;
 8006d7e:	e01f      	b.n	8006dc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fb82 	bl	800748c <USBD_SetConfig>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
          break;
 8006d8c:	e018      	b.n	8006dc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc21 	bl	80075d8 <USBD_GetConfig>
          break;
 8006d96:	e013      	b.n	8006dc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fc52 	bl	8007644 <USBD_GetStatus>
          break;
 8006da0:	e00e      	b.n	8006dc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc81 	bl	80076ac <USBD_SetFeature>
          break;
 8006daa:	e009      	b.n	8006dc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fc90 	bl	80076d4 <USBD_ClrFeature>
          break;
 8006db4:	e004      	b.n	8006dc0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fce7 	bl	800778c <USBD_CtlError>
          break;
 8006dbe:	bf00      	nop
      }
      break;
 8006dc0:	e004      	b.n	8006dcc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fce1 	bl	800778c <USBD_CtlError>
      break;
 8006dca:	bf00      	nop
  }

  return ret;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop

08006dd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d005      	beq.n	8006dfe <USBD_StdItfReq+0x26>
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d82f      	bhi.n	8006e56 <USBD_StdItfReq+0x7e>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <USBD_StdItfReq+0x26>
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d12b      	bne.n	8006e56 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d81d      	bhi.n	8006e48 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	889b      	ldrh	r3, [r3, #4]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d813      	bhi.n	8006e3e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4798      	blx	r3
 8006e24:	4603      	mov	r3, r0
 8006e26:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	88db      	ldrh	r3, [r3, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d110      	bne.n	8006e52 <USBD_StdItfReq+0x7a>
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10d      	bne.n	8006e52 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fd73 	bl	8007922 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e3c:	e009      	b.n	8006e52 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fca3 	bl	800778c <USBD_CtlError>
          break;
 8006e46:	e004      	b.n	8006e52 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fc9e 	bl	800778c <USBD_CtlError>
          break;
 8006e50:	e000      	b.n	8006e54 <USBD_StdItfReq+0x7c>
          break;
 8006e52:	bf00      	nop
      }
      break;
 8006e54:	e004      	b.n	8006e60 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc97 	bl	800778c <USBD_CtlError>
      break;
 8006e5e:	bf00      	nop
  }

  return ret;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	889b      	ldrh	r3, [r3, #4]
 8006e7c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	d007      	beq.n	8006e9a <USBD_StdEPReq+0x30>
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	f200 8145 	bhi.w	800711a <USBD_StdEPReq+0x2b0>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00c      	beq.n	8006eae <USBD_StdEPReq+0x44>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	f040 8140 	bne.w	800711a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006eac:	e13a      	b.n	8007124 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d007      	beq.n	8006ec6 <USBD_StdEPReq+0x5c>
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	f300 8129 	bgt.w	800710e <USBD_StdEPReq+0x2a4>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d07f      	beq.n	8006fc0 <USBD_StdEPReq+0x156>
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d03c      	beq.n	8006f3e <USBD_StdEPReq+0xd4>
 8006ec4:	e123      	b.n	800710e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d002      	beq.n	8006ed8 <USBD_StdEPReq+0x6e>
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d016      	beq.n	8006f04 <USBD_StdEPReq+0x9a>
 8006ed6:	e02c      	b.n	8006f32 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00d      	beq.n	8006efa <USBD_StdEPReq+0x90>
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b80      	cmp	r3, #128	; 0x80
 8006ee2:	d00a      	beq.n	8006efa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f947 	bl	800817c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eee:	2180      	movs	r1, #128	; 0x80
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 f943 	bl	800817c <USBD_LL_StallEP>
 8006ef6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ef8:	e020      	b.n	8006f3c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fc45 	bl	800778c <USBD_CtlError>
              break;
 8006f02:	e01b      	b.n	8006f3c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	885b      	ldrh	r3, [r3, #2]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10e      	bne.n	8006f2a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <USBD_StdEPReq+0xc0>
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d008      	beq.n	8006f2a <USBD_StdEPReq+0xc0>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	88db      	ldrh	r3, [r3, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f929 	bl	800817c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fcf9 	bl	8007922 <USBD_CtlSendStatus>

              break;
 8006f30:	e004      	b.n	8006f3c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fc29 	bl	800778c <USBD_CtlError>
              break;
 8006f3a:	bf00      	nop
          }
          break;
 8006f3c:	e0ec      	b.n	8007118 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d002      	beq.n	8006f50 <USBD_StdEPReq+0xe6>
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d016      	beq.n	8006f7c <USBD_StdEPReq+0x112>
 8006f4e:	e030      	b.n	8006fb2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <USBD_StdEPReq+0x108>
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b80      	cmp	r3, #128	; 0x80
 8006f5a:	d00a      	beq.n	8006f72 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 f90b 	bl	800817c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f66:	2180      	movs	r1, #128	; 0x80
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f907 	bl	800817c <USBD_LL_StallEP>
 8006f6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f70:	e025      	b.n	8006fbe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fc09 	bl	800778c <USBD_CtlError>
              break;
 8006f7a:	e020      	b.n	8006fbe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	885b      	ldrh	r3, [r3, #2]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11b      	bne.n	8006fbc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 f911 	bl	80081ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fcc2 	bl	8007922 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006fb0:	e004      	b.n	8006fbc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fbe9 	bl	800778c <USBD_CtlError>
              break;
 8006fba:	e000      	b.n	8006fbe <USBD_StdEPReq+0x154>
              break;
 8006fbc:	bf00      	nop
          }
          break;
 8006fbe:	e0ab      	b.n	8007118 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d002      	beq.n	8006fd2 <USBD_StdEPReq+0x168>
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d032      	beq.n	8007036 <USBD_StdEPReq+0x1cc>
 8006fd0:	e097      	b.n	8007102 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <USBD_StdEPReq+0x17e>
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b80      	cmp	r3, #128	; 0x80
 8006fdc:	d004      	beq.n	8006fe8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fbd3 	bl	800778c <USBD_CtlError>
                break;
 8006fe6:	e091      	b.n	800710c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da0b      	bge.n	8007008 <USBD_StdEPReq+0x19e>
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	3310      	adds	r3, #16
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	3304      	adds	r3, #4
 8007006:	e00b      	b.n	8007020 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	3304      	adds	r3, #4
 8007020:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2202      	movs	r2, #2
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fc1d 	bl	800786e <USBD_CtlSendData>
              break;
 8007034:	e06a      	b.n	800710c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	da11      	bge.n	8007062 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	f003 020f 	and.w	r2, r3, #15
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	440b      	add	r3, r1
 8007050:	3324      	adds	r3, #36	; 0x24
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d117      	bne.n	8007088 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb96 	bl	800778c <USBD_CtlError>
                  break;
 8007060:	e054      	b.n	800710c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	f003 020f 	and.w	r2, r3, #15
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	440b      	add	r3, r1
 8007074:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fb83 	bl	800778c <USBD_CtlError>
                  break;
 8007086:	e041      	b.n	800710c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800708c:	2b00      	cmp	r3, #0
 800708e:	da0b      	bge.n	80070a8 <USBD_StdEPReq+0x23e>
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	3310      	adds	r3, #16
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	3304      	adds	r3, #4
 80070a6:	e00b      	b.n	80070c0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	3304      	adds	r3, #4
 80070c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <USBD_StdEPReq+0x264>
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b80      	cmp	r3, #128	; 0x80
 80070cc:	d103      	bne.n	80070d6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e00e      	b.n	80070f4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 f88c 	bl	80081f8 <USBD_LL_IsStallEP>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2201      	movs	r2, #1
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e002      	b.n	80070f4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2202      	movs	r2, #2
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fbb7 	bl	800786e <USBD_CtlSendData>
              break;
 8007100:	e004      	b.n	800710c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fb41 	bl	800778c <USBD_CtlError>
              break;
 800710a:	bf00      	nop
          }
          break;
 800710c:	e004      	b.n	8007118 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fb3b 	bl	800778c <USBD_CtlError>
          break;
 8007116:	bf00      	nop
      }
      break;
 8007118:	e004      	b.n	8007124 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fb35 	bl	800778c <USBD_CtlError>
      break;
 8007122:	bf00      	nop
  }

  return ret;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	885b      	ldrh	r3, [r3, #2]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	2b06      	cmp	r3, #6
 8007152:	f200 8128 	bhi.w	80073a6 <USBD_GetDescriptor+0x276>
 8007156:	a201      	add	r2, pc, #4	; (adr r2, 800715c <USBD_GetDescriptor+0x2c>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	08007179 	.word	0x08007179
 8007160:	08007191 	.word	0x08007191
 8007164:	080071d1 	.word	0x080071d1
 8007168:	080073a7 	.word	0x080073a7
 800716c:	080073a7 	.word	0x080073a7
 8007170:	08007347 	.word	0x08007347
 8007174:	08007373 	.word	0x08007373
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	7c12      	ldrb	r2, [r2, #16]
 8007184:	f107 0108 	add.w	r1, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
      break;
 800718e:	e112      	b.n	80073b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	7c1b      	ldrb	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10d      	bne.n	80071b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	f107 0208 	add.w	r2, r7, #8
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	2202      	movs	r2, #2
 80071b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071b2:	e100      	b.n	80073b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	f107 0208 	add.w	r2, r7, #8
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
 80071c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3301      	adds	r3, #1
 80071ca:	2202      	movs	r2, #2
 80071cc:	701a      	strb	r2, [r3, #0]
      break;
 80071ce:	e0f2      	b.n	80073b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	885b      	ldrh	r3, [r3, #2]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	f200 80ac 	bhi.w	8007334 <USBD_GetDescriptor+0x204>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <USBD_GetDescriptor+0xb4>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	080071fd 	.word	0x080071fd
 80071e8:	08007231 	.word	0x08007231
 80071ec:	08007265 	.word	0x08007265
 80071f0:	08007299 	.word	0x08007299
 80071f4:	080072cd 	.word	0x080072cd
 80071f8:	08007301 	.word	0x08007301
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	7c12      	ldrb	r2, [r2, #16]
 8007214:	f107 0108 	add.w	r1, r7, #8
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
 800721c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800721e:	e091      	b.n	8007344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fab2 	bl	800778c <USBD_CtlError>
            err++;
 8007228:	7afb      	ldrb	r3, [r7, #11]
 800722a:	3301      	adds	r3, #1
 800722c:	72fb      	strb	r3, [r7, #11]
          break;
 800722e:	e089      	b.n	8007344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	7c12      	ldrb	r2, [r2, #16]
 8007248:	f107 0108 	add.w	r1, r7, #8
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007252:	e077      	b.n	8007344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa98 	bl	800778c <USBD_CtlError>
            err++;
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	3301      	adds	r3, #1
 8007260:	72fb      	strb	r3, [r7, #11]
          break;
 8007262:	e06f      	b.n	8007344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7c12      	ldrb	r2, [r2, #16]
 800727c:	f107 0108 	add.w	r1, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007286:	e05d      	b.n	8007344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa7e 	bl	800778c <USBD_CtlError>
            err++;
 8007290:	7afb      	ldrb	r3, [r7, #11]
 8007292:	3301      	adds	r3, #1
 8007294:	72fb      	strb	r3, [r7, #11]
          break;
 8007296:	e055      	b.n	8007344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	7c12      	ldrb	r2, [r2, #16]
 80072b0:	f107 0108 	add.w	r1, r7, #8
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
 80072b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ba:	e043      	b.n	8007344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa64 	bl	800778c <USBD_CtlError>
            err++;
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	3301      	adds	r3, #1
 80072c8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ca:	e03b      	b.n	8007344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7c12      	ldrb	r2, [r2, #16]
 80072e4:	f107 0108 	add.w	r1, r7, #8
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
 80072ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ee:	e029      	b.n	8007344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa4a 	bl	800778c <USBD_CtlError>
            err++;
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	3301      	adds	r3, #1
 80072fc:	72fb      	strb	r3, [r7, #11]
          break;
 80072fe:	e021      	b.n	8007344 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00b      	beq.n	8007324 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007322:	e00f      	b.n	8007344 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa30 	bl	800778c <USBD_CtlError>
            err++;
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	3301      	adds	r3, #1
 8007330:	72fb      	strb	r3, [r7, #11]
          break;
 8007332:	e007      	b.n	8007344 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa28 	bl	800778c <USBD_CtlError>
          err++;
 800733c:	7afb      	ldrb	r3, [r7, #11]
 800733e:	3301      	adds	r3, #1
 8007340:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007342:	bf00      	nop
      }
      break;
 8007344:	e037      	b.n	80073b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7c1b      	ldrb	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007356:	f107 0208 	add.w	r2, r7, #8
 800735a:	4610      	mov	r0, r2
 800735c:	4798      	blx	r3
 800735e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007360:	e029      	b.n	80073b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fa11 	bl	800778c <USBD_CtlError>
        err++;
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	3301      	adds	r3, #1
 800736e:	72fb      	strb	r3, [r7, #11]
      break;
 8007370:	e021      	b.n	80073b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	7c1b      	ldrb	r3, [r3, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10d      	bne.n	8007396 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	f107 0208 	add.w	r2, r7, #8
 8007386:	4610      	mov	r0, r2
 8007388:	4798      	blx	r3
 800738a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	2207      	movs	r2, #7
 8007392:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007394:	e00f      	b.n	80073b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f9f7 	bl	800778c <USBD_CtlError>
        err++;
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	3301      	adds	r3, #1
 80073a2:	72fb      	strb	r3, [r7, #11]
      break;
 80073a4:	e007      	b.n	80073b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f9ef 	bl	800778c <USBD_CtlError>
      err++;
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	3301      	adds	r3, #1
 80073b2:	72fb      	strb	r3, [r7, #11]
      break;
 80073b4:	bf00      	nop
  }

  if (err != 0U)
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d11e      	bne.n	80073fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	88db      	ldrh	r3, [r3, #6]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d016      	beq.n	80073f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80073c4:	893b      	ldrh	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00e      	beq.n	80073e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	88da      	ldrh	r2, [r3, #6]
 80073ce:	893b      	ldrh	r3, [r7, #8]
 80073d0:	4293      	cmp	r3, r2
 80073d2:	bf28      	it	cs
 80073d4:	4613      	movcs	r3, r2
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073da:	893b      	ldrh	r3, [r7, #8]
 80073dc:	461a      	mov	r2, r3
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa44 	bl	800786e <USBD_CtlSendData>
 80073e6:	e009      	b.n	80073fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f9ce 	bl	800778c <USBD_CtlError>
 80073f0:	e004      	b.n	80073fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa95 	bl	8007922 <USBD_CtlSendStatus>
 80073f8:	e000      	b.n	80073fc <USBD_GetDescriptor+0x2cc>
    return;
 80073fa:	bf00      	nop
  }
}
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop

08007404 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	889b      	ldrh	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d131      	bne.n	800747a <USBD_SetAddress+0x76>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	88db      	ldrh	r3, [r3, #6]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d12d      	bne.n	800747a <USBD_SetAddress+0x76>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	885b      	ldrh	r3, [r3, #2]
 8007422:	2b7f      	cmp	r3, #127	; 0x7f
 8007424:	d829      	bhi.n	800747a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007430:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b03      	cmp	r3, #3
 800743c:	d104      	bne.n	8007448 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f9a3 	bl	800778c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007446:	e01d      	b.n	8007484 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7bfa      	ldrb	r2, [r7, #15]
 800744c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fefb 	bl	8008250 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa61 	bl	8007922 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746e:	e009      	b.n	8007484 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007478:	e004      	b.n	8007484 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f985 	bl	800778c <USBD_CtlError>
  }
}
 8007482:	bf00      	nop
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	885b      	ldrh	r3, [r3, #2]
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	4b4c      	ldr	r3, [pc, #304]	; (80075d4 <USBD_SetConfig+0x148>)
 80074a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074a4:	4b4b      	ldr	r3, [pc, #300]	; (80075d4 <USBD_SetConfig+0x148>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d905      	bls.n	80074b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f96c 	bl	800778c <USBD_CtlError>
    return USBD_FAIL;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e088      	b.n	80075ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d002      	beq.n	80074ca <USBD_SetConfig+0x3e>
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d025      	beq.n	8007514 <USBD_SetConfig+0x88>
 80074c8:	e071      	b.n	80075ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80074ca:	4b42      	ldr	r3, [pc, #264]	; (80075d4 <USBD_SetConfig+0x148>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01c      	beq.n	800750c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80074d2:	4b40      	ldr	r3, [pc, #256]	; (80075d4 <USBD_SetConfig+0x148>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074dc:	4b3d      	ldr	r3, [pc, #244]	; (80075d4 <USBD_SetConfig+0x148>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff f948 	bl	8006778 <USBD_SetClassConfig>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f949 	bl	800778c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074fa:	e065      	b.n	80075c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fa10 	bl	8007922 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2203      	movs	r2, #3
 8007506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800750a:	e05d      	b.n	80075c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fa08 	bl	8007922 <USBD_CtlSendStatus>
      break;
 8007512:	e059      	b.n	80075c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007514:	4b2f      	ldr	r3, [pc, #188]	; (80075d4 <USBD_SetConfig+0x148>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d112      	bne.n	8007542 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007524:	4b2b      	ldr	r3, [pc, #172]	; (80075d4 <USBD_SetConfig+0x148>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800752e:	4b29      	ldr	r3, [pc, #164]	; (80075d4 <USBD_SetConfig+0x148>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff f93b 	bl	80067b0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f9f1 	bl	8007922 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007540:	e042      	b.n	80075c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007542:	4b24      	ldr	r3, [pc, #144]	; (80075d4 <USBD_SetConfig+0x148>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	d02a      	beq.n	80075a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff f929 	bl	80067b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800755e:	4b1d      	ldr	r3, [pc, #116]	; (80075d4 <USBD_SetConfig+0x148>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007568:	4b1a      	ldr	r3, [pc, #104]	; (80075d4 <USBD_SetConfig+0x148>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff f902 	bl	8006778 <USBD_SetClassConfig>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00f      	beq.n	800759e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f903 	bl	800778c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	b2db      	uxtb	r3, r3
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff f90e 	bl	80067b0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800759c:	e014      	b.n	80075c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f9bf 	bl	8007922 <USBD_CtlSendStatus>
      break;
 80075a4:	e010      	b.n	80075c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f9bb 	bl	8007922 <USBD_CtlSendStatus>
      break;
 80075ac:	e00c      	b.n	80075c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8eb 	bl	800778c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075b6:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <USBD_SetConfig+0x148>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff f8f7 	bl	80067b0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	73fb      	strb	r3, [r7, #15]
      break;
 80075c6:	bf00      	nop
  }

  return ret;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	2000020c 	.word	0x2000020c

080075d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	88db      	ldrh	r3, [r3, #6]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d004      	beq.n	80075f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f8cd 	bl	800778c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075f2:	e023      	b.n	800763c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	dc02      	bgt.n	8007606 <USBD_GetConfig+0x2e>
 8007600:	2b00      	cmp	r3, #0
 8007602:	dc03      	bgt.n	800760c <USBD_GetConfig+0x34>
 8007604:	e015      	b.n	8007632 <USBD_GetConfig+0x5a>
 8007606:	2b03      	cmp	r3, #3
 8007608:	d00b      	beq.n	8007622 <USBD_GetConfig+0x4a>
 800760a:	e012      	b.n	8007632 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3308      	adds	r3, #8
 8007616:	2201      	movs	r2, #1
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f927 	bl	800786e <USBD_CtlSendData>
        break;
 8007620:	e00c      	b.n	800763c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3304      	adds	r3, #4
 8007626:	2201      	movs	r2, #1
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f91f 	bl	800786e <USBD_CtlSendData>
        break;
 8007630:	e004      	b.n	800763c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f8a9 	bl	800778c <USBD_CtlError>
        break;
 800763a:	bf00      	nop
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007654:	b2db      	uxtb	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	2b02      	cmp	r3, #2
 800765a:	d81e      	bhi.n	800769a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88db      	ldrh	r3, [r3, #6]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d004      	beq.n	800766e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f890 	bl	800778c <USBD_CtlError>
        break;
 800766c:	e01a      	b.n	80076a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f043 0202 	orr.w	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	330c      	adds	r3, #12
 800768e:	2202      	movs	r2, #2
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f8eb 	bl	800786e <USBD_CtlSendData>
      break;
 8007698:	e004      	b.n	80076a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f875 	bl	800778c <USBD_CtlError>
      break;
 80076a2:	bf00      	nop
  }
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	885b      	ldrh	r3, [r3, #2]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d106      	bne.n	80076cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f92b 	bl	8007922 <USBD_CtlSendStatus>
  }
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d80b      	bhi.n	8007704 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	885b      	ldrh	r3, [r3, #2]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d10c      	bne.n	800770e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f910 	bl	8007922 <USBD_CtlSendStatus>
      }
      break;
 8007702:	e004      	b.n	800770e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f840 	bl	800778c <USBD_CtlError>
      break;
 800770c:	e000      	b.n	8007710 <USBD_ClrFeature+0x3c>
      break;
 800770e:	bf00      	nop
  }
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	781a      	ldrb	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff fabb 	bl	8006cbe <SWAPBYTE>
 8007748:	4603      	mov	r3, r0
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3301      	adds	r3, #1
 8007754:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f7ff faae 	bl	8006cbe <SWAPBYTE>
 8007762:	4603      	mov	r3, r0
 8007764:	461a      	mov	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff faa1 	bl	8006cbe <SWAPBYTE>
 800777c:	4603      	mov	r3, r0
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	80da      	strh	r2, [r3, #6]
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007796:	2180      	movs	r1, #128	; 0x80
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fcef 	bl	800817c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800779e:	2100      	movs	r1, #0
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fceb 	bl	800817c <USBD_LL_StallEP>
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d036      	beq.n	8007832 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077c8:	6938      	ldr	r0, [r7, #16]
 80077ca:	f000 f836 	bl	800783a <USBD_GetLen>
 80077ce:	4603      	mov	r3, r0
 80077d0:	3301      	adds	r3, #1
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	4413      	add	r3, r2
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	7812      	ldrb	r2, [r2, #0]
 80077e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	3301      	adds	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	4413      	add	r3, r2
 80077f4:	2203      	movs	r2, #3
 80077f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	3301      	adds	r3, #1
 80077fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077fe:	e013      	b.n	8007828 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	4413      	add	r3, r2
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	7812      	ldrb	r2, [r2, #0]
 800780a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3301      	adds	r3, #1
 8007810:	613b      	str	r3, [r7, #16]
    idx++;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	3301      	adds	r3, #1
 8007816:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	4413      	add	r3, r2
 800781e:	2200      	movs	r2, #0
 8007820:	701a      	strb	r2, [r3, #0]
    idx++;
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	3301      	adds	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e7      	bne.n	8007800 <USBD_GetString+0x52>
 8007830:	e000      	b.n	8007834 <USBD_GetString+0x86>
    return;
 8007832:	bf00      	nop
  }
}
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800784a:	e005      	b.n	8007858 <USBD_GetLen+0x1e>
  {
    len++;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	3301      	adds	r3, #1
 8007850:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	3301      	adds	r3, #1
 8007856:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f5      	bne.n	800784c <USBD_GetLen+0x12>
  }

  return len;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	2100      	movs	r1, #0
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fcfa 	bl	800828e <USBD_LL_Transmit>

  return USBD_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	2100      	movs	r1, #0
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 fce9 	bl	800828e <USBD_LL_Transmit>

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2203      	movs	r2, #3
 80078d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	2100      	movs	r1, #0
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fced 	bl	80082d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	2100      	movs	r1, #0
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fcdc 	bl	80082d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2204      	movs	r2, #4
 800792e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007932:	2300      	movs	r3, #0
 8007934:	2200      	movs	r2, #0
 8007936:	2100      	movs	r1, #0
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fca8 	bl	800828e <USBD_LL_Transmit>

  return USBD_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2205      	movs	r2, #5
 8007954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007958:	2300      	movs	r3, #0
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fcb6 	bl	80082d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007974:	2200      	movs	r2, #0
 8007976:	4912      	ldr	r1, [pc, #72]	; (80079c0 <MX_USB_DEVICE_Init+0x50>)
 8007978:	4812      	ldr	r0, [pc, #72]	; (80079c4 <MX_USB_DEVICE_Init+0x54>)
 800797a:	f7fe fe8f 	bl	800669c <USBD_Init>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007984:	f7f9 f8d6 	bl	8000b34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007988:	490f      	ldr	r1, [pc, #60]	; (80079c8 <MX_USB_DEVICE_Init+0x58>)
 800798a:	480e      	ldr	r0, [pc, #56]	; (80079c4 <MX_USB_DEVICE_Init+0x54>)
 800798c:	f7fe feb6 	bl	80066fc <USBD_RegisterClass>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007996:	f7f9 f8cd 	bl	8000b34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800799a:	490c      	ldr	r1, [pc, #48]	; (80079cc <MX_USB_DEVICE_Init+0x5c>)
 800799c:	4809      	ldr	r0, [pc, #36]	; (80079c4 <MX_USB_DEVICE_Init+0x54>)
 800799e:	f7fe fdd7 	bl	8006550 <USBD_CDC_RegisterInterface>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079a8:	f7f9 f8c4 	bl	8000b34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079ac:	4805      	ldr	r0, [pc, #20]	; (80079c4 <MX_USB_DEVICE_Init+0x54>)
 80079ae:	f7fe fecc 	bl	800674a <USBD_Start>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079b8:	f7f9 f8bc 	bl	8000b34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079bc:	bf00      	nop
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000130 	.word	0x20000130
 80079c4:	2000067c 	.word	0x2000067c
 80079c8:	20000018 	.word	0x20000018
 80079cc:	2000011c 	.word	0x2000011c

080079d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079d4:	2200      	movs	r2, #0
 80079d6:	4905      	ldr	r1, [pc, #20]	; (80079ec <CDC_Init_FS+0x1c>)
 80079d8:	4805      	ldr	r0, [pc, #20]	; (80079f0 <CDC_Init_FS+0x20>)
 80079da:	f7fe fdce 	bl	800657a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079de:	4905      	ldr	r1, [pc, #20]	; (80079f4 <CDC_Init_FS+0x24>)
 80079e0:	4803      	ldr	r0, [pc, #12]	; (80079f0 <CDC_Init_FS+0x20>)
 80079e2:	f7fe fde8 	bl	80065b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	2000114c 	.word	0x2000114c
 80079f0:	2000067c 	.word	0x2000067c
 80079f4:	2000094c 	.word	0x2000094c

080079f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
 8007a14:	4613      	mov	r3, r2
 8007a16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	2b23      	cmp	r3, #35	; 0x23
 8007a1c:	d84a      	bhi.n	8007ab4 <CDC_Control_FS+0xac>
 8007a1e:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <CDC_Control_FS+0x1c>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007ab5 	.word	0x08007ab5
 8007a28:	08007ab5 	.word	0x08007ab5
 8007a2c:	08007ab5 	.word	0x08007ab5
 8007a30:	08007ab5 	.word	0x08007ab5
 8007a34:	08007ab5 	.word	0x08007ab5
 8007a38:	08007ab5 	.word	0x08007ab5
 8007a3c:	08007ab5 	.word	0x08007ab5
 8007a40:	08007ab5 	.word	0x08007ab5
 8007a44:	08007ab5 	.word	0x08007ab5
 8007a48:	08007ab5 	.word	0x08007ab5
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007ab5 	.word	0x08007ab5
 8007a54:	08007ab5 	.word	0x08007ab5
 8007a58:	08007ab5 	.word	0x08007ab5
 8007a5c:	08007ab5 	.word	0x08007ab5
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007ab5 	.word	0x08007ab5
 8007a68:	08007ab5 	.word	0x08007ab5
 8007a6c:	08007ab5 	.word	0x08007ab5
 8007a70:	08007ab5 	.word	0x08007ab5
 8007a74:	08007ab5 	.word	0x08007ab5
 8007a78:	08007ab5 	.word	0x08007ab5
 8007a7c:	08007ab5 	.word	0x08007ab5
 8007a80:	08007ab5 	.word	0x08007ab5
 8007a84:	08007ab5 	.word	0x08007ab5
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007ab5 	.word	0x08007ab5
 8007a9c:	08007ab5 	.word	0x08007ab5
 8007aa0:	08007ab5 	.word	0x08007ab5
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ab5 	.word	0x08007ab5
 8007aac:	08007ab5 	.word	0x08007ab5
 8007ab0:	08007ab5 	.word	0x08007ab5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ab4:	bf00      	nop
  }

  return (USBD_OK);
 8007ab6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	4805      	ldr	r0, [pc, #20]	; (8007ae8 <CDC_Receive_FS+0x24>)
 8007ad2:	f7fe fd70 	bl	80065b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ad6:	4804      	ldr	r0, [pc, #16]	; (8007ae8 <CDC_Receive_FS+0x24>)
 8007ad8:	f7fe fdb6 	bl	8006648 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007adc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	2000067c 	.word	0x2000067c

08007aec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007afc:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <CDC_Transmit_FS+0x48>)
 8007afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e00b      	b.n	8007b2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b12:	887b      	ldrh	r3, [r7, #2]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4806      	ldr	r0, [pc, #24]	; (8007b34 <CDC_Transmit_FS+0x48>)
 8007b1a:	f7fe fd2e 	bl	800657a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b1e:	4805      	ldr	r0, [pc, #20]	; (8007b34 <CDC_Transmit_FS+0x48>)
 8007b20:	f7fe fd62 	bl	80065e8 <USBD_CDC_TransmitPacket>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	2000067c 	.word	0x2000067c

08007b38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
	...

08007b5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	6039      	str	r1, [r7, #0]
 8007b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2212      	movs	r2, #18
 8007b6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b6e:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	2000014c 	.word	0x2000014c

08007b80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b92:	4b03      	ldr	r3, [pc, #12]	; (8007ba0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20000160 	.word	0x20000160

08007ba4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d105      	bne.n	8007bc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	4907      	ldr	r1, [pc, #28]	; (8007bd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bba:	4808      	ldr	r0, [pc, #32]	; (8007bdc <USBD_FS_ProductStrDescriptor+0x38>)
 8007bbc:	f7ff fdf7 	bl	80077ae <USBD_GetString>
 8007bc0:	e004      	b.n	8007bcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4904      	ldr	r1, [pc, #16]	; (8007bd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bc6:	4805      	ldr	r0, [pc, #20]	; (8007bdc <USBD_FS_ProductStrDescriptor+0x38>)
 8007bc8:	f7ff fdf1 	bl	80077ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bcc:	4b02      	ldr	r3, [pc, #8]	; (8007bd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	2000194c 	.word	0x2000194c
 8007bdc:	08008ce8 	.word	0x08008ce8

08007be0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	6039      	str	r1, [r7, #0]
 8007bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	4904      	ldr	r1, [pc, #16]	; (8007c00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bf0:	4804      	ldr	r0, [pc, #16]	; (8007c04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bf2:	f7ff fddc 	bl	80077ae <USBD_GetString>
  return USBD_StrDesc;
 8007bf6:	4b02      	ldr	r3, [pc, #8]	; (8007c00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	2000194c 	.word	0x2000194c
 8007c04:	08008d00 	.word	0x08008d00

08007c08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	6039      	str	r1, [r7, #0]
 8007c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	221a      	movs	r2, #26
 8007c18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c1a:	f000 f843 	bl	8007ca4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c1e:	4b02      	ldr	r3, [pc, #8]	; (8007c28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20000164 	.word	0x20000164

08007c2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	4907      	ldr	r1, [pc, #28]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c42:	4808      	ldr	r0, [pc, #32]	; (8007c64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c44:	f7ff fdb3 	bl	80077ae <USBD_GetString>
 8007c48:	e004      	b.n	8007c54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4904      	ldr	r1, [pc, #16]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c4e:	4805      	ldr	r0, [pc, #20]	; (8007c64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c50:	f7ff fdad 	bl	80077ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	2000194c 	.word	0x2000194c
 8007c64:	08008d14 	.word	0x08008d14

08007c68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	4907      	ldr	r1, [pc, #28]	; (8007c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c7e:	4808      	ldr	r0, [pc, #32]	; (8007ca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c80:	f7ff fd95 	bl	80077ae <USBD_GetString>
 8007c84:	e004      	b.n	8007c90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4904      	ldr	r1, [pc, #16]	; (8007c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c8a:	4805      	ldr	r0, [pc, #20]	; (8007ca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c8c:	f7ff fd8f 	bl	80077ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c90:	4b02      	ldr	r3, [pc, #8]	; (8007c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	2000194c 	.word	0x2000194c
 8007ca0:	08008d20 	.word	0x08008d20

08007ca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007caa:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <Get_SerialNum+0x44>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cb0:	4b0e      	ldr	r3, [pc, #56]	; (8007cec <Get_SerialNum+0x48>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cb6:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <Get_SerialNum+0x4c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cca:	2208      	movs	r2, #8
 8007ccc:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <Get_SerialNum+0x50>)
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f814 	bl	8007cfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	4908      	ldr	r1, [pc, #32]	; (8007cf8 <Get_SerialNum+0x54>)
 8007cd8:	68b8      	ldr	r0, [r7, #8]
 8007cda:	f000 f80f 	bl	8007cfc <IntToUnicode>
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	1fff7a10 	.word	0x1fff7a10
 8007cec:	1fff7a14 	.word	0x1fff7a14
 8007cf0:	1fff7a18 	.word	0x1fff7a18
 8007cf4:	20000166 	.word	0x20000166
 8007cf8:	20000176 	.word	0x20000176

08007cfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4613      	mov	r3, r2
 8007d08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75fb      	strb	r3, [r7, #23]
 8007d12:	e027      	b.n	8007d64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	0f1b      	lsrs	r3, r3, #28
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	d80b      	bhi.n	8007d34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	0f1b      	lsrs	r3, r3, #28
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	4619      	mov	r1, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	440b      	add	r3, r1
 8007d2c:	3230      	adds	r2, #48	; 0x30
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	e00a      	b.n	8007d4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	0f1b      	lsrs	r3, r3, #28
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4619      	mov	r1, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	440b      	add	r3, r1
 8007d44:	3237      	adds	r2, #55	; 0x37
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	3301      	adds	r3, #1
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	4413      	add	r3, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	3301      	adds	r3, #1
 8007d62:	75fb      	strb	r3, [r7, #23]
 8007d64:	7dfa      	ldrb	r2, [r7, #23]
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d3d3      	bcc.n	8007d14 <IntToUnicode+0x18>
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
	...

08007d7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d84:	f107 0314 	add.w	r3, r7, #20
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	605a      	str	r2, [r3, #4]
 8007d8e:	609a      	str	r2, [r3, #8]
 8007d90:	60da      	str	r2, [r3, #12]
 8007d92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d9c:	d147      	bne.n	8007e2e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d9e:	2300      	movs	r3, #0
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <HAL_PCD_MspInit+0xbc>)
 8007da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da6:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <HAL_PCD_MspInit+0xbc>)
 8007da8:	f043 0301 	orr.w	r3, r3, #1
 8007dac:	6313      	str	r3, [r2, #48]	; 0x30
 8007dae:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <HAL_PCD_MspInit+0xbc>)
 8007db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	613b      	str	r3, [r7, #16]
 8007db8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007dc8:	f107 0314 	add.w	r3, r7, #20
 8007dcc:	4619      	mov	r1, r3
 8007dce:	481b      	ldr	r0, [pc, #108]	; (8007e3c <HAL_PCD_MspInit+0xc0>)
 8007dd0:	f7f9 fe4c 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007dd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007de2:	2300      	movs	r3, #0
 8007de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007de6:	230a      	movs	r3, #10
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dea:	f107 0314 	add.w	r3, r7, #20
 8007dee:	4619      	mov	r1, r3
 8007df0:	4812      	ldr	r0, [pc, #72]	; (8007e3c <HAL_PCD_MspInit+0xc0>)
 8007df2:	f7f9 fe3b 	bl	8001a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007df6:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <HAL_PCD_MspInit+0xbc>)
 8007df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfa:	4a0f      	ldr	r2, [pc, #60]	; (8007e38 <HAL_PCD_MspInit+0xbc>)
 8007dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e00:	6353      	str	r3, [r2, #52]	; 0x34
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <HAL_PCD_MspInit+0xbc>)
 8007e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0a:	4a0b      	ldr	r2, [pc, #44]	; (8007e38 <HAL_PCD_MspInit+0xbc>)
 8007e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e10:	6453      	str	r3, [r2, #68]	; 0x44
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <HAL_PCD_MspInit+0xbc>)
 8007e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2100      	movs	r1, #0
 8007e22:	2043      	movs	r0, #67	; 0x43
 8007e24:	f7f9 fdeb 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e28:	2043      	movs	r0, #67	; 0x43
 8007e2a:	f7f9 fe04 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3728      	adds	r7, #40	; 0x28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	40020000 	.word	0x40020000

08007e40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7fe fcc2 	bl	80067e0 <USBD_LL_SetupStage>
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f7fe fcfc 	bl	800688a <USBD_LL_DataOutStage>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	3348      	adds	r3, #72	; 0x48
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	f7fe fd45 	bl	8006950 <USBD_LL_DataInStage>
}
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fe59 	bl	8006b94 <USBD_LL_SOF>
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
 8007f02:	e008      	b.n	8007f16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d102      	bne.n	8007f12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
 8007f10:	e001      	b.n	8007f16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f12:	f7f8 fe0f 	bl	8000b34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f1c:	7bfa      	ldrb	r2, [r7, #15]
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fdf9 	bl	8006b18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe fda5 	bl	8006a7c <USBD_LL_Reset>
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fdf4 	bl	8006b38 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6812      	ldr	r2, [r2, #0]
 8007f5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f62:	f043 0301 	orr.w	r3, r3, #1
 8007f66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <HAL_PCD_SuspendCallback+0x48>)
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	4a03      	ldr	r2, [pc, #12]	; (8007f84 <HAL_PCD_SuspendCallback+0x48>)
 8007f76:	f043 0306 	orr.w	r3, r3, #6
 8007f7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	e000ed00 	.word	0xe000ed00

08007f88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fde4 	bl	8006b64 <USBD_LL_Resume>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fe32 	bl	8006c24 <USBD_LL_IsoOUTIncomplete>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fdfa 	bl	8006bd8 <USBD_LL_IsoINIncomplete>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fe38 	bl	8006c70 <USBD_LL_DevConnected>
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe fe35 	bl	8006c86 <USBD_LL_DevDisconnected>
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d13c      	bne.n	80080ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008034:	4a20      	ldr	r2, [pc, #128]	; (80080b8 <USBD_LL_Init+0x94>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a1e      	ldr	r2, [pc, #120]	; (80080b8 <USBD_LL_Init+0x94>)
 8008040:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008044:	4b1c      	ldr	r3, [pc, #112]	; (80080b8 <USBD_LL_Init+0x94>)
 8008046:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800804a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800804c:	4b1a      	ldr	r3, [pc, #104]	; (80080b8 <USBD_LL_Init+0x94>)
 800804e:	2204      	movs	r2, #4
 8008050:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008052:	4b19      	ldr	r3, [pc, #100]	; (80080b8 <USBD_LL_Init+0x94>)
 8008054:	2202      	movs	r2, #2
 8008056:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008058:	4b17      	ldr	r3, [pc, #92]	; (80080b8 <USBD_LL_Init+0x94>)
 800805a:	2200      	movs	r2, #0
 800805c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800805e:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <USBD_LL_Init+0x94>)
 8008060:	2202      	movs	r2, #2
 8008062:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008064:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <USBD_LL_Init+0x94>)
 8008066:	2200      	movs	r2, #0
 8008068:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <USBD_LL_Init+0x94>)
 800806c:	2200      	movs	r2, #0
 800806e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008070:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <USBD_LL_Init+0x94>)
 8008072:	2200      	movs	r2, #0
 8008074:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008076:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <USBD_LL_Init+0x94>)
 8008078:	2201      	movs	r2, #1
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <USBD_LL_Init+0x94>)
 800807e:	2200      	movs	r2, #0
 8008080:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008082:	480d      	ldr	r0, [pc, #52]	; (80080b8 <USBD_LL_Init+0x94>)
 8008084:	f7fa fcbe 	bl	8002a04 <HAL_PCD_Init>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800808e:	f7f8 fd51 	bl	8000b34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008092:	2180      	movs	r1, #128	; 0x80
 8008094:	4808      	ldr	r0, [pc, #32]	; (80080b8 <USBD_LL_Init+0x94>)
 8008096:	f7fb fe1c 	bl	8003cd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800809a:	2240      	movs	r2, #64	; 0x40
 800809c:	2100      	movs	r1, #0
 800809e:	4806      	ldr	r0, [pc, #24]	; (80080b8 <USBD_LL_Init+0x94>)
 80080a0:	f7fb fdd0 	bl	8003c44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080a4:	2280      	movs	r2, #128	; 0x80
 80080a6:	2101      	movs	r1, #1
 80080a8:	4803      	ldr	r0, [pc, #12]	; (80080b8 <USBD_LL_Init+0x94>)
 80080aa:	f7fb fdcb 	bl	8003c44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20001b4c 	.word	0x20001b4c

080080bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fa fdb3 	bl	8002c3e <HAL_PCD_Start>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f942 	bl	8008368 <USBD_Get_USB_Status>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	4608      	mov	r0, r1
 80080fc:	4611      	mov	r1, r2
 80080fe:	461a      	mov	r2, r3
 8008100:	4603      	mov	r3, r0
 8008102:	70fb      	strb	r3, [r7, #3]
 8008104:	460b      	mov	r3, r1
 8008106:	70bb      	strb	r3, [r7, #2]
 8008108:	4613      	mov	r3, r2
 800810a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800811a:	78bb      	ldrb	r3, [r7, #2]
 800811c:	883a      	ldrh	r2, [r7, #0]
 800811e:	78f9      	ldrb	r1, [r7, #3]
 8008120:	f7fb f997 	bl	8003452 <HAL_PCD_EP_Open>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f91c 	bl	8008368 <USBD_Get_USB_Status>
 8008130:	4603      	mov	r3, r0
 8008132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008134:	7bbb      	ldrb	r3, [r7, #14]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008158:	78fa      	ldrb	r2, [r7, #3]
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f7fb f9e0 	bl	8003522 <HAL_PCD_EP_Close>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f8fd 	bl	8008368 <USBD_Get_USB_Status>
 800816e:	4603      	mov	r3, r0
 8008170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008172:	7bbb      	ldrb	r3, [r7, #14]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7fb fab8 	bl	8003710 <HAL_PCD_EP_SetStall>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 f8de 	bl	8008368 <USBD_Get_USB_Status>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fb fafd 	bl	80037d8 <HAL_PCD_EP_ClrStall>
 80081de:	4603      	mov	r3, r0
 80081e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 f8bf 	bl	8008368 <USBD_Get_USB_Status>
 80081ea:	4603      	mov	r3, r0
 80081ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800820a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800820c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008210:	2b00      	cmp	r3, #0
 8008212:	da0b      	bge.n	800822c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800821a:	68f9      	ldr	r1, [r7, #12]
 800821c:	4613      	mov	r3, r2
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	333e      	adds	r3, #62	; 0x3e
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	e00b      	b.n	8008244 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008242:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800826a:	78fa      	ldrb	r2, [r7, #3]
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f7fb f8ca 	bl	8003408 <HAL_PCD_SetAddress>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f874 	bl	8008368 <USBD_Get_USB_Status>
 8008280:	4603      	mov	r3, r0
 8008282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008284:	7bbb      	ldrb	r3, [r7, #14]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	460b      	mov	r3, r1
 800829c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082ac:	7af9      	ldrb	r1, [r7, #11]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	f7fb f9e3 	bl	800367c <HAL_PCD_EP_Transmit>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 f853 	bl	8008368 <USBD_Get_USB_Status>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	607a      	str	r2, [r7, #4]
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	460b      	mov	r3, r1
 80082de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082ee:	7af9      	ldrb	r1, [r7, #11]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	f7fb f95f 	bl	80035b6 <HAL_PCD_EP_Receive>
 80082f8:	4603      	mov	r3, r0
 80082fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f832 	bl	8008368 <USBD_Get_USB_Status>
 8008304:	4603      	mov	r3, r0
 8008306:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008308:	7dbb      	ldrb	r3, [r7, #22]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f7fb f98f 	bl	800364c <HAL_PCD_EP_GetRxCount>
 800832e:	4603      	mov	r3, r0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008340:	4b03      	ldr	r3, [pc, #12]	; (8008350 <USBD_static_malloc+0x18>)
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	20000210 	.word	0x20000210

08008354 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]

}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d817      	bhi.n	80083ac <USBD_Get_USB_Status+0x44>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <USBD_Get_USB_Status+0x1c>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008395 	.word	0x08008395
 8008388:	0800839b 	.word	0x0800839b
 800838c:	080083a1 	.word	0x080083a1
 8008390:	080083a7 	.word	0x080083a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
    break;
 8008398:	e00b      	b.n	80083b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800839a:	2303      	movs	r3, #3
 800839c:	73fb      	strb	r3, [r7, #15]
    break;
 800839e:	e008      	b.n	80083b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083a0:	2301      	movs	r3, #1
 80083a2:	73fb      	strb	r3, [r7, #15]
    break;
 80083a4:	e005      	b.n	80083b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083a6:	2303      	movs	r3, #3
 80083a8:	73fb      	strb	r3, [r7, #15]
    break;
 80083aa:	e002      	b.n	80083b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	73fb      	strb	r3, [r7, #15]
    break;
 80083b0:	bf00      	nop
  }
  return usb_status;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <__errno>:
 80083c0:	4b01      	ldr	r3, [pc, #4]	; (80083c8 <__errno+0x8>)
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000180 	.word	0x20000180

080083cc <__libc_init_array>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4d0d      	ldr	r5, [pc, #52]	; (8008404 <__libc_init_array+0x38>)
 80083d0:	4c0d      	ldr	r4, [pc, #52]	; (8008408 <__libc_init_array+0x3c>)
 80083d2:	1b64      	subs	r4, r4, r5
 80083d4:	10a4      	asrs	r4, r4, #2
 80083d6:	2600      	movs	r6, #0
 80083d8:	42a6      	cmp	r6, r4
 80083da:	d109      	bne.n	80083f0 <__libc_init_array+0x24>
 80083dc:	4d0b      	ldr	r5, [pc, #44]	; (800840c <__libc_init_array+0x40>)
 80083de:	4c0c      	ldr	r4, [pc, #48]	; (8008410 <__libc_init_array+0x44>)
 80083e0:	f000 fc62 	bl	8008ca8 <_init>
 80083e4:	1b64      	subs	r4, r4, r5
 80083e6:	10a4      	asrs	r4, r4, #2
 80083e8:	2600      	movs	r6, #0
 80083ea:	42a6      	cmp	r6, r4
 80083ec:	d105      	bne.n	80083fa <__libc_init_array+0x2e>
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f4:	4798      	blx	r3
 80083f6:	3601      	adds	r6, #1
 80083f8:	e7ee      	b.n	80083d8 <__libc_init_array+0xc>
 80083fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fe:	4798      	blx	r3
 8008400:	3601      	adds	r6, #1
 8008402:	e7f2      	b.n	80083ea <__libc_init_array+0x1e>
 8008404:	08008d84 	.word	0x08008d84
 8008408:	08008d84 	.word	0x08008d84
 800840c:	08008d84 	.word	0x08008d84
 8008410:	08008d88 	.word	0x08008d88

08008414 <memset>:
 8008414:	4402      	add	r2, r0
 8008416:	4603      	mov	r3, r0
 8008418:	4293      	cmp	r3, r2
 800841a:	d100      	bne.n	800841e <memset+0xa>
 800841c:	4770      	bx	lr
 800841e:	f803 1b01 	strb.w	r1, [r3], #1
 8008422:	e7f9      	b.n	8008418 <memset+0x4>

08008424 <sniprintf>:
 8008424:	b40c      	push	{r2, r3}
 8008426:	b530      	push	{r4, r5, lr}
 8008428:	4b17      	ldr	r3, [pc, #92]	; (8008488 <sniprintf+0x64>)
 800842a:	1e0c      	subs	r4, r1, #0
 800842c:	681d      	ldr	r5, [r3, #0]
 800842e:	b09d      	sub	sp, #116	; 0x74
 8008430:	da08      	bge.n	8008444 <sniprintf+0x20>
 8008432:	238b      	movs	r3, #139	; 0x8b
 8008434:	602b      	str	r3, [r5, #0]
 8008436:	f04f 30ff 	mov.w	r0, #4294967295
 800843a:	b01d      	add	sp, #116	; 0x74
 800843c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008440:	b002      	add	sp, #8
 8008442:	4770      	bx	lr
 8008444:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008448:	f8ad 3014 	strh.w	r3, [sp, #20]
 800844c:	bf14      	ite	ne
 800844e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008452:	4623      	moveq	r3, r4
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800845c:	9002      	str	r0, [sp, #8]
 800845e:	9006      	str	r0, [sp, #24]
 8008460:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008464:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008466:	ab21      	add	r3, sp, #132	; 0x84
 8008468:	a902      	add	r1, sp, #8
 800846a:	4628      	mov	r0, r5
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	f000 f869 	bl	8008544 <_svfiprintf_r>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	bfbc      	itt	lt
 8008476:	238b      	movlt	r3, #139	; 0x8b
 8008478:	602b      	strlt	r3, [r5, #0]
 800847a:	2c00      	cmp	r4, #0
 800847c:	d0dd      	beq.n	800843a <sniprintf+0x16>
 800847e:	9b02      	ldr	r3, [sp, #8]
 8008480:	2200      	movs	r2, #0
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	e7d9      	b.n	800843a <sniprintf+0x16>
 8008486:	bf00      	nop
 8008488:	20000180 	.word	0x20000180

0800848c <__ssputs_r>:
 800848c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	688e      	ldr	r6, [r1, #8]
 8008492:	429e      	cmp	r6, r3
 8008494:	4682      	mov	sl, r0
 8008496:	460c      	mov	r4, r1
 8008498:	4690      	mov	r8, r2
 800849a:	461f      	mov	r7, r3
 800849c:	d838      	bhi.n	8008510 <__ssputs_r+0x84>
 800849e:	898a      	ldrh	r2, [r1, #12]
 80084a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084a4:	d032      	beq.n	800850c <__ssputs_r+0x80>
 80084a6:	6825      	ldr	r5, [r4, #0]
 80084a8:	6909      	ldr	r1, [r1, #16]
 80084aa:	eba5 0901 	sub.w	r9, r5, r1
 80084ae:	6965      	ldr	r5, [r4, #20]
 80084b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084b8:	3301      	adds	r3, #1
 80084ba:	444b      	add	r3, r9
 80084bc:	106d      	asrs	r5, r5, #1
 80084be:	429d      	cmp	r5, r3
 80084c0:	bf38      	it	cc
 80084c2:	461d      	movcc	r5, r3
 80084c4:	0553      	lsls	r3, r2, #21
 80084c6:	d531      	bpl.n	800852c <__ssputs_r+0xa0>
 80084c8:	4629      	mov	r1, r5
 80084ca:	f000 fb47 	bl	8008b5c <_malloc_r>
 80084ce:	4606      	mov	r6, r0
 80084d0:	b950      	cbnz	r0, 80084e8 <__ssputs_r+0x5c>
 80084d2:	230c      	movs	r3, #12
 80084d4:	f8ca 3000 	str.w	r3, [sl]
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084de:	81a3      	strh	r3, [r4, #12]
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295
 80084e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e8:	6921      	ldr	r1, [r4, #16]
 80084ea:	464a      	mov	r2, r9
 80084ec:	f000 fabe 	bl	8008a6c <memcpy>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	6126      	str	r6, [r4, #16]
 80084fe:	6165      	str	r5, [r4, #20]
 8008500:	444e      	add	r6, r9
 8008502:	eba5 0509 	sub.w	r5, r5, r9
 8008506:	6026      	str	r6, [r4, #0]
 8008508:	60a5      	str	r5, [r4, #8]
 800850a:	463e      	mov	r6, r7
 800850c:	42be      	cmp	r6, r7
 800850e:	d900      	bls.n	8008512 <__ssputs_r+0x86>
 8008510:	463e      	mov	r6, r7
 8008512:	4632      	mov	r2, r6
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	4641      	mov	r1, r8
 8008518:	f000 fab6 	bl	8008a88 <memmove>
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	6822      	ldr	r2, [r4, #0]
 8008520:	1b9b      	subs	r3, r3, r6
 8008522:	4432      	add	r2, r6
 8008524:	60a3      	str	r3, [r4, #8]
 8008526:	6022      	str	r2, [r4, #0]
 8008528:	2000      	movs	r0, #0
 800852a:	e7db      	b.n	80084e4 <__ssputs_r+0x58>
 800852c:	462a      	mov	r2, r5
 800852e:	f000 fb6f 	bl	8008c10 <_realloc_r>
 8008532:	4606      	mov	r6, r0
 8008534:	2800      	cmp	r0, #0
 8008536:	d1e1      	bne.n	80084fc <__ssputs_r+0x70>
 8008538:	6921      	ldr	r1, [r4, #16]
 800853a:	4650      	mov	r0, sl
 800853c:	f000 fabe 	bl	8008abc <_free_r>
 8008540:	e7c7      	b.n	80084d2 <__ssputs_r+0x46>
	...

08008544 <_svfiprintf_r>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	4698      	mov	r8, r3
 800854a:	898b      	ldrh	r3, [r1, #12]
 800854c:	061b      	lsls	r3, r3, #24
 800854e:	b09d      	sub	sp, #116	; 0x74
 8008550:	4607      	mov	r7, r0
 8008552:	460d      	mov	r5, r1
 8008554:	4614      	mov	r4, r2
 8008556:	d50e      	bpl.n	8008576 <_svfiprintf_r+0x32>
 8008558:	690b      	ldr	r3, [r1, #16]
 800855a:	b963      	cbnz	r3, 8008576 <_svfiprintf_r+0x32>
 800855c:	2140      	movs	r1, #64	; 0x40
 800855e:	f000 fafd 	bl	8008b5c <_malloc_r>
 8008562:	6028      	str	r0, [r5, #0]
 8008564:	6128      	str	r0, [r5, #16]
 8008566:	b920      	cbnz	r0, 8008572 <_svfiprintf_r+0x2e>
 8008568:	230c      	movs	r3, #12
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	f04f 30ff 	mov.w	r0, #4294967295
 8008570:	e0d1      	b.n	8008716 <_svfiprintf_r+0x1d2>
 8008572:	2340      	movs	r3, #64	; 0x40
 8008574:	616b      	str	r3, [r5, #20]
 8008576:	2300      	movs	r3, #0
 8008578:	9309      	str	r3, [sp, #36]	; 0x24
 800857a:	2320      	movs	r3, #32
 800857c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008580:	f8cd 800c 	str.w	r8, [sp, #12]
 8008584:	2330      	movs	r3, #48	; 0x30
 8008586:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008730 <_svfiprintf_r+0x1ec>
 800858a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800858e:	f04f 0901 	mov.w	r9, #1
 8008592:	4623      	mov	r3, r4
 8008594:	469a      	mov	sl, r3
 8008596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800859a:	b10a      	cbz	r2, 80085a0 <_svfiprintf_r+0x5c>
 800859c:	2a25      	cmp	r2, #37	; 0x25
 800859e:	d1f9      	bne.n	8008594 <_svfiprintf_r+0x50>
 80085a0:	ebba 0b04 	subs.w	fp, sl, r4
 80085a4:	d00b      	beq.n	80085be <_svfiprintf_r+0x7a>
 80085a6:	465b      	mov	r3, fp
 80085a8:	4622      	mov	r2, r4
 80085aa:	4629      	mov	r1, r5
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff ff6d 	bl	800848c <__ssputs_r>
 80085b2:	3001      	adds	r0, #1
 80085b4:	f000 80aa 	beq.w	800870c <_svfiprintf_r+0x1c8>
 80085b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ba:	445a      	add	r2, fp
 80085bc:	9209      	str	r2, [sp, #36]	; 0x24
 80085be:	f89a 3000 	ldrb.w	r3, [sl]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80a2 	beq.w	800870c <_svfiprintf_r+0x1c8>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f04f 32ff 	mov.w	r2, #4294967295
 80085ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085d2:	f10a 0a01 	add.w	sl, sl, #1
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	9307      	str	r3, [sp, #28]
 80085da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085de:	931a      	str	r3, [sp, #104]	; 0x68
 80085e0:	4654      	mov	r4, sl
 80085e2:	2205      	movs	r2, #5
 80085e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e8:	4851      	ldr	r0, [pc, #324]	; (8008730 <_svfiprintf_r+0x1ec>)
 80085ea:	f7f7 fdf9 	bl	80001e0 <memchr>
 80085ee:	9a04      	ldr	r2, [sp, #16]
 80085f0:	b9d8      	cbnz	r0, 800862a <_svfiprintf_r+0xe6>
 80085f2:	06d0      	lsls	r0, r2, #27
 80085f4:	bf44      	itt	mi
 80085f6:	2320      	movmi	r3, #32
 80085f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085fc:	0711      	lsls	r1, r2, #28
 80085fe:	bf44      	itt	mi
 8008600:	232b      	movmi	r3, #43	; 0x2b
 8008602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008606:	f89a 3000 	ldrb.w	r3, [sl]
 800860a:	2b2a      	cmp	r3, #42	; 0x2a
 800860c:	d015      	beq.n	800863a <_svfiprintf_r+0xf6>
 800860e:	9a07      	ldr	r2, [sp, #28]
 8008610:	4654      	mov	r4, sl
 8008612:	2000      	movs	r0, #0
 8008614:	f04f 0c0a 	mov.w	ip, #10
 8008618:	4621      	mov	r1, r4
 800861a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800861e:	3b30      	subs	r3, #48	; 0x30
 8008620:	2b09      	cmp	r3, #9
 8008622:	d94e      	bls.n	80086c2 <_svfiprintf_r+0x17e>
 8008624:	b1b0      	cbz	r0, 8008654 <_svfiprintf_r+0x110>
 8008626:	9207      	str	r2, [sp, #28]
 8008628:	e014      	b.n	8008654 <_svfiprintf_r+0x110>
 800862a:	eba0 0308 	sub.w	r3, r0, r8
 800862e:	fa09 f303 	lsl.w	r3, r9, r3
 8008632:	4313      	orrs	r3, r2
 8008634:	9304      	str	r3, [sp, #16]
 8008636:	46a2      	mov	sl, r4
 8008638:	e7d2      	b.n	80085e0 <_svfiprintf_r+0x9c>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	1d19      	adds	r1, r3, #4
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	9103      	str	r1, [sp, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	bfbb      	ittet	lt
 8008646:	425b      	neglt	r3, r3
 8008648:	f042 0202 	orrlt.w	r2, r2, #2
 800864c:	9307      	strge	r3, [sp, #28]
 800864e:	9307      	strlt	r3, [sp, #28]
 8008650:	bfb8      	it	lt
 8008652:	9204      	strlt	r2, [sp, #16]
 8008654:	7823      	ldrb	r3, [r4, #0]
 8008656:	2b2e      	cmp	r3, #46	; 0x2e
 8008658:	d10c      	bne.n	8008674 <_svfiprintf_r+0x130>
 800865a:	7863      	ldrb	r3, [r4, #1]
 800865c:	2b2a      	cmp	r3, #42	; 0x2a
 800865e:	d135      	bne.n	80086cc <_svfiprintf_r+0x188>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	1d1a      	adds	r2, r3, #4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	9203      	str	r2, [sp, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	bfb8      	it	lt
 800866c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008670:	3402      	adds	r4, #2
 8008672:	9305      	str	r3, [sp, #20]
 8008674:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008740 <_svfiprintf_r+0x1fc>
 8008678:	7821      	ldrb	r1, [r4, #0]
 800867a:	2203      	movs	r2, #3
 800867c:	4650      	mov	r0, sl
 800867e:	f7f7 fdaf 	bl	80001e0 <memchr>
 8008682:	b140      	cbz	r0, 8008696 <_svfiprintf_r+0x152>
 8008684:	2340      	movs	r3, #64	; 0x40
 8008686:	eba0 000a 	sub.w	r0, r0, sl
 800868a:	fa03 f000 	lsl.w	r0, r3, r0
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	4303      	orrs	r3, r0
 8008692:	3401      	adds	r4, #1
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869a:	4826      	ldr	r0, [pc, #152]	; (8008734 <_svfiprintf_r+0x1f0>)
 800869c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086a0:	2206      	movs	r2, #6
 80086a2:	f7f7 fd9d 	bl	80001e0 <memchr>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d038      	beq.n	800871c <_svfiprintf_r+0x1d8>
 80086aa:	4b23      	ldr	r3, [pc, #140]	; (8008738 <_svfiprintf_r+0x1f4>)
 80086ac:	bb1b      	cbnz	r3, 80086f6 <_svfiprintf_r+0x1b2>
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	3307      	adds	r3, #7
 80086b2:	f023 0307 	bic.w	r3, r3, #7
 80086b6:	3308      	adds	r3, #8
 80086b8:	9303      	str	r3, [sp, #12]
 80086ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086bc:	4433      	add	r3, r6
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	e767      	b.n	8008592 <_svfiprintf_r+0x4e>
 80086c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086c6:	460c      	mov	r4, r1
 80086c8:	2001      	movs	r0, #1
 80086ca:	e7a5      	b.n	8008618 <_svfiprintf_r+0xd4>
 80086cc:	2300      	movs	r3, #0
 80086ce:	3401      	adds	r4, #1
 80086d0:	9305      	str	r3, [sp, #20]
 80086d2:	4619      	mov	r1, r3
 80086d4:	f04f 0c0a 	mov.w	ip, #10
 80086d8:	4620      	mov	r0, r4
 80086da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086de:	3a30      	subs	r2, #48	; 0x30
 80086e0:	2a09      	cmp	r2, #9
 80086e2:	d903      	bls.n	80086ec <_svfiprintf_r+0x1a8>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0c5      	beq.n	8008674 <_svfiprintf_r+0x130>
 80086e8:	9105      	str	r1, [sp, #20]
 80086ea:	e7c3      	b.n	8008674 <_svfiprintf_r+0x130>
 80086ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80086f0:	4604      	mov	r4, r0
 80086f2:	2301      	movs	r3, #1
 80086f4:	e7f0      	b.n	80086d8 <_svfiprintf_r+0x194>
 80086f6:	ab03      	add	r3, sp, #12
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	462a      	mov	r2, r5
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <_svfiprintf_r+0x1f8>)
 80086fe:	a904      	add	r1, sp, #16
 8008700:	4638      	mov	r0, r7
 8008702:	f3af 8000 	nop.w
 8008706:	1c42      	adds	r2, r0, #1
 8008708:	4606      	mov	r6, r0
 800870a:	d1d6      	bne.n	80086ba <_svfiprintf_r+0x176>
 800870c:	89ab      	ldrh	r3, [r5, #12]
 800870e:	065b      	lsls	r3, r3, #25
 8008710:	f53f af2c 	bmi.w	800856c <_svfiprintf_r+0x28>
 8008714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008716:	b01d      	add	sp, #116	; 0x74
 8008718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871c:	ab03      	add	r3, sp, #12
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	462a      	mov	r2, r5
 8008722:	4b06      	ldr	r3, [pc, #24]	; (800873c <_svfiprintf_r+0x1f8>)
 8008724:	a904      	add	r1, sp, #16
 8008726:	4638      	mov	r0, r7
 8008728:	f000 f87a 	bl	8008820 <_printf_i>
 800872c:	e7eb      	b.n	8008706 <_svfiprintf_r+0x1c2>
 800872e:	bf00      	nop
 8008730:	08008d48 	.word	0x08008d48
 8008734:	08008d52 	.word	0x08008d52
 8008738:	00000000 	.word	0x00000000
 800873c:	0800848d 	.word	0x0800848d
 8008740:	08008d4e 	.word	0x08008d4e

08008744 <_printf_common>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	4616      	mov	r6, r2
 800874a:	4699      	mov	r9, r3
 800874c:	688a      	ldr	r2, [r1, #8]
 800874e:	690b      	ldr	r3, [r1, #16]
 8008750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008754:	4293      	cmp	r3, r2
 8008756:	bfb8      	it	lt
 8008758:	4613      	movlt	r3, r2
 800875a:	6033      	str	r3, [r6, #0]
 800875c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008760:	4607      	mov	r7, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b10a      	cbz	r2, 800876a <_printf_common+0x26>
 8008766:	3301      	adds	r3, #1
 8008768:	6033      	str	r3, [r6, #0]
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	0699      	lsls	r1, r3, #26
 800876e:	bf42      	ittt	mi
 8008770:	6833      	ldrmi	r3, [r6, #0]
 8008772:	3302      	addmi	r3, #2
 8008774:	6033      	strmi	r3, [r6, #0]
 8008776:	6825      	ldr	r5, [r4, #0]
 8008778:	f015 0506 	ands.w	r5, r5, #6
 800877c:	d106      	bne.n	800878c <_printf_common+0x48>
 800877e:	f104 0a19 	add.w	sl, r4, #25
 8008782:	68e3      	ldr	r3, [r4, #12]
 8008784:	6832      	ldr	r2, [r6, #0]
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	42ab      	cmp	r3, r5
 800878a:	dc26      	bgt.n	80087da <_printf_common+0x96>
 800878c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008790:	1e13      	subs	r3, r2, #0
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	bf18      	it	ne
 8008796:	2301      	movne	r3, #1
 8008798:	0692      	lsls	r2, r2, #26
 800879a:	d42b      	bmi.n	80087f4 <_printf_common+0xb0>
 800879c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087a0:	4649      	mov	r1, r9
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c0      	blx	r8
 80087a6:	3001      	adds	r0, #1
 80087a8:	d01e      	beq.n	80087e8 <_printf_common+0xa4>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	68e5      	ldr	r5, [r4, #12]
 80087ae:	6832      	ldr	r2, [r6, #0]
 80087b0:	f003 0306 	and.w	r3, r3, #6
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	bf08      	it	eq
 80087b8:	1aad      	subeq	r5, r5, r2
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	bf0c      	ite	eq
 80087c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087c4:	2500      	movne	r5, #0
 80087c6:	4293      	cmp	r3, r2
 80087c8:	bfc4      	itt	gt
 80087ca:	1a9b      	subgt	r3, r3, r2
 80087cc:	18ed      	addgt	r5, r5, r3
 80087ce:	2600      	movs	r6, #0
 80087d0:	341a      	adds	r4, #26
 80087d2:	42b5      	cmp	r5, r6
 80087d4:	d11a      	bne.n	800880c <_printf_common+0xc8>
 80087d6:	2000      	movs	r0, #0
 80087d8:	e008      	b.n	80087ec <_printf_common+0xa8>
 80087da:	2301      	movs	r3, #1
 80087dc:	4652      	mov	r2, sl
 80087de:	4649      	mov	r1, r9
 80087e0:	4638      	mov	r0, r7
 80087e2:	47c0      	blx	r8
 80087e4:	3001      	adds	r0, #1
 80087e6:	d103      	bne.n	80087f0 <_printf_common+0xac>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f0:	3501      	adds	r5, #1
 80087f2:	e7c6      	b.n	8008782 <_printf_common+0x3e>
 80087f4:	18e1      	adds	r1, r4, r3
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	2030      	movs	r0, #48	; 0x30
 80087fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087fe:	4422      	add	r2, r4
 8008800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008808:	3302      	adds	r3, #2
 800880a:	e7c7      	b.n	800879c <_printf_common+0x58>
 800880c:	2301      	movs	r3, #1
 800880e:	4622      	mov	r2, r4
 8008810:	4649      	mov	r1, r9
 8008812:	4638      	mov	r0, r7
 8008814:	47c0      	blx	r8
 8008816:	3001      	adds	r0, #1
 8008818:	d0e6      	beq.n	80087e8 <_printf_common+0xa4>
 800881a:	3601      	adds	r6, #1
 800881c:	e7d9      	b.n	80087d2 <_printf_common+0x8e>
	...

08008820 <_printf_i>:
 8008820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	460c      	mov	r4, r1
 8008826:	4691      	mov	r9, r2
 8008828:	7e27      	ldrb	r7, [r4, #24]
 800882a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800882c:	2f78      	cmp	r7, #120	; 0x78
 800882e:	4680      	mov	r8, r0
 8008830:	469a      	mov	sl, r3
 8008832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008836:	d807      	bhi.n	8008848 <_printf_i+0x28>
 8008838:	2f62      	cmp	r7, #98	; 0x62
 800883a:	d80a      	bhi.n	8008852 <_printf_i+0x32>
 800883c:	2f00      	cmp	r7, #0
 800883e:	f000 80d8 	beq.w	80089f2 <_printf_i+0x1d2>
 8008842:	2f58      	cmp	r7, #88	; 0x58
 8008844:	f000 80a3 	beq.w	800898e <_printf_i+0x16e>
 8008848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800884c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008850:	e03a      	b.n	80088c8 <_printf_i+0xa8>
 8008852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008856:	2b15      	cmp	r3, #21
 8008858:	d8f6      	bhi.n	8008848 <_printf_i+0x28>
 800885a:	a001      	add	r0, pc, #4	; (adr r0, 8008860 <_printf_i+0x40>)
 800885c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008860:	080088b9 	.word	0x080088b9
 8008864:	080088cd 	.word	0x080088cd
 8008868:	08008849 	.word	0x08008849
 800886c:	08008849 	.word	0x08008849
 8008870:	08008849 	.word	0x08008849
 8008874:	08008849 	.word	0x08008849
 8008878:	080088cd 	.word	0x080088cd
 800887c:	08008849 	.word	0x08008849
 8008880:	08008849 	.word	0x08008849
 8008884:	08008849 	.word	0x08008849
 8008888:	08008849 	.word	0x08008849
 800888c:	080089d9 	.word	0x080089d9
 8008890:	080088fd 	.word	0x080088fd
 8008894:	080089bb 	.word	0x080089bb
 8008898:	08008849 	.word	0x08008849
 800889c:	08008849 	.word	0x08008849
 80088a0:	080089fb 	.word	0x080089fb
 80088a4:	08008849 	.word	0x08008849
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008849 	.word	0x08008849
 80088b0:	08008849 	.word	0x08008849
 80088b4:	080089c3 	.word	0x080089c3
 80088b8:	680b      	ldr	r3, [r1, #0]
 80088ba:	1d1a      	adds	r2, r3, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	600a      	str	r2, [r1, #0]
 80088c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0a3      	b.n	8008a14 <_printf_i+0x1f4>
 80088cc:	6825      	ldr	r5, [r4, #0]
 80088ce:	6808      	ldr	r0, [r1, #0]
 80088d0:	062e      	lsls	r6, r5, #24
 80088d2:	f100 0304 	add.w	r3, r0, #4
 80088d6:	d50a      	bpl.n	80088ee <_printf_i+0xce>
 80088d8:	6805      	ldr	r5, [r0, #0]
 80088da:	600b      	str	r3, [r1, #0]
 80088dc:	2d00      	cmp	r5, #0
 80088de:	da03      	bge.n	80088e8 <_printf_i+0xc8>
 80088e0:	232d      	movs	r3, #45	; 0x2d
 80088e2:	426d      	negs	r5, r5
 80088e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e8:	485e      	ldr	r0, [pc, #376]	; (8008a64 <_printf_i+0x244>)
 80088ea:	230a      	movs	r3, #10
 80088ec:	e019      	b.n	8008922 <_printf_i+0x102>
 80088ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80088f2:	6805      	ldr	r5, [r0, #0]
 80088f4:	600b      	str	r3, [r1, #0]
 80088f6:	bf18      	it	ne
 80088f8:	b22d      	sxthne	r5, r5
 80088fa:	e7ef      	b.n	80088dc <_printf_i+0xbc>
 80088fc:	680b      	ldr	r3, [r1, #0]
 80088fe:	6825      	ldr	r5, [r4, #0]
 8008900:	1d18      	adds	r0, r3, #4
 8008902:	6008      	str	r0, [r1, #0]
 8008904:	0628      	lsls	r0, r5, #24
 8008906:	d501      	bpl.n	800890c <_printf_i+0xec>
 8008908:	681d      	ldr	r5, [r3, #0]
 800890a:	e002      	b.n	8008912 <_printf_i+0xf2>
 800890c:	0669      	lsls	r1, r5, #25
 800890e:	d5fb      	bpl.n	8008908 <_printf_i+0xe8>
 8008910:	881d      	ldrh	r5, [r3, #0]
 8008912:	4854      	ldr	r0, [pc, #336]	; (8008a64 <_printf_i+0x244>)
 8008914:	2f6f      	cmp	r7, #111	; 0x6f
 8008916:	bf0c      	ite	eq
 8008918:	2308      	moveq	r3, #8
 800891a:	230a      	movne	r3, #10
 800891c:	2100      	movs	r1, #0
 800891e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008922:	6866      	ldr	r6, [r4, #4]
 8008924:	60a6      	str	r6, [r4, #8]
 8008926:	2e00      	cmp	r6, #0
 8008928:	bfa2      	ittt	ge
 800892a:	6821      	ldrge	r1, [r4, #0]
 800892c:	f021 0104 	bicge.w	r1, r1, #4
 8008930:	6021      	strge	r1, [r4, #0]
 8008932:	b90d      	cbnz	r5, 8008938 <_printf_i+0x118>
 8008934:	2e00      	cmp	r6, #0
 8008936:	d04d      	beq.n	80089d4 <_printf_i+0x1b4>
 8008938:	4616      	mov	r6, r2
 800893a:	fbb5 f1f3 	udiv	r1, r5, r3
 800893e:	fb03 5711 	mls	r7, r3, r1, r5
 8008942:	5dc7      	ldrb	r7, [r0, r7]
 8008944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008948:	462f      	mov	r7, r5
 800894a:	42bb      	cmp	r3, r7
 800894c:	460d      	mov	r5, r1
 800894e:	d9f4      	bls.n	800893a <_printf_i+0x11a>
 8008950:	2b08      	cmp	r3, #8
 8008952:	d10b      	bne.n	800896c <_printf_i+0x14c>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	07df      	lsls	r7, r3, #31
 8008958:	d508      	bpl.n	800896c <_printf_i+0x14c>
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	6861      	ldr	r1, [r4, #4]
 800895e:	4299      	cmp	r1, r3
 8008960:	bfde      	ittt	le
 8008962:	2330      	movle	r3, #48	; 0x30
 8008964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008968:	f106 36ff 	addle.w	r6, r6, #4294967295
 800896c:	1b92      	subs	r2, r2, r6
 800896e:	6122      	str	r2, [r4, #16]
 8008970:	f8cd a000 	str.w	sl, [sp]
 8008974:	464b      	mov	r3, r9
 8008976:	aa03      	add	r2, sp, #12
 8008978:	4621      	mov	r1, r4
 800897a:	4640      	mov	r0, r8
 800897c:	f7ff fee2 	bl	8008744 <_printf_common>
 8008980:	3001      	adds	r0, #1
 8008982:	d14c      	bne.n	8008a1e <_printf_i+0x1fe>
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	b004      	add	sp, #16
 800898a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898e:	4835      	ldr	r0, [pc, #212]	; (8008a64 <_printf_i+0x244>)
 8008990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	680e      	ldr	r6, [r1, #0]
 8008998:	061f      	lsls	r7, r3, #24
 800899a:	f856 5b04 	ldr.w	r5, [r6], #4
 800899e:	600e      	str	r6, [r1, #0]
 80089a0:	d514      	bpl.n	80089cc <_printf_i+0x1ac>
 80089a2:	07d9      	lsls	r1, r3, #31
 80089a4:	bf44      	itt	mi
 80089a6:	f043 0320 	orrmi.w	r3, r3, #32
 80089aa:	6023      	strmi	r3, [r4, #0]
 80089ac:	b91d      	cbnz	r5, 80089b6 <_printf_i+0x196>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	f023 0320 	bic.w	r3, r3, #32
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	2310      	movs	r3, #16
 80089b8:	e7b0      	b.n	800891c <_printf_i+0xfc>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	f043 0320 	orr.w	r3, r3, #32
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	2378      	movs	r3, #120	; 0x78
 80089c4:	4828      	ldr	r0, [pc, #160]	; (8008a68 <_printf_i+0x248>)
 80089c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089ca:	e7e3      	b.n	8008994 <_printf_i+0x174>
 80089cc:	065e      	lsls	r6, r3, #25
 80089ce:	bf48      	it	mi
 80089d0:	b2ad      	uxthmi	r5, r5
 80089d2:	e7e6      	b.n	80089a2 <_printf_i+0x182>
 80089d4:	4616      	mov	r6, r2
 80089d6:	e7bb      	b.n	8008950 <_printf_i+0x130>
 80089d8:	680b      	ldr	r3, [r1, #0]
 80089da:	6826      	ldr	r6, [r4, #0]
 80089dc:	6960      	ldr	r0, [r4, #20]
 80089de:	1d1d      	adds	r5, r3, #4
 80089e0:	600d      	str	r5, [r1, #0]
 80089e2:	0635      	lsls	r5, r6, #24
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0x1cc>
 80089e8:	6018      	str	r0, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0x1d2>
 80089ec:	0671      	lsls	r1, r6, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0x1c8>
 80089f0:	8018      	strh	r0, [r3, #0]
 80089f2:	2300      	movs	r3, #0
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	4616      	mov	r6, r2
 80089f8:	e7ba      	b.n	8008970 <_printf_i+0x150>
 80089fa:	680b      	ldr	r3, [r1, #0]
 80089fc:	1d1a      	adds	r2, r3, #4
 80089fe:	600a      	str	r2, [r1, #0]
 8008a00:	681e      	ldr	r6, [r3, #0]
 8008a02:	6862      	ldr	r2, [r4, #4]
 8008a04:	2100      	movs	r1, #0
 8008a06:	4630      	mov	r0, r6
 8008a08:	f7f7 fbea 	bl	80001e0 <memchr>
 8008a0c:	b108      	cbz	r0, 8008a12 <_printf_i+0x1f2>
 8008a0e:	1b80      	subs	r0, r0, r6
 8008a10:	6060      	str	r0, [r4, #4]
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	2300      	movs	r3, #0
 8008a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a1c:	e7a8      	b.n	8008970 <_printf_i+0x150>
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	4632      	mov	r2, r6
 8008a22:	4649      	mov	r1, r9
 8008a24:	4640      	mov	r0, r8
 8008a26:	47d0      	blx	sl
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d0ab      	beq.n	8008984 <_printf_i+0x164>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	079b      	lsls	r3, r3, #30
 8008a30:	d413      	bmi.n	8008a5a <_printf_i+0x23a>
 8008a32:	68e0      	ldr	r0, [r4, #12]
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	4298      	cmp	r0, r3
 8008a38:	bfb8      	it	lt
 8008a3a:	4618      	movlt	r0, r3
 8008a3c:	e7a4      	b.n	8008988 <_printf_i+0x168>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4632      	mov	r2, r6
 8008a42:	4649      	mov	r1, r9
 8008a44:	4640      	mov	r0, r8
 8008a46:	47d0      	blx	sl
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d09b      	beq.n	8008984 <_printf_i+0x164>
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	68e3      	ldr	r3, [r4, #12]
 8008a50:	9903      	ldr	r1, [sp, #12]
 8008a52:	1a5b      	subs	r3, r3, r1
 8008a54:	42ab      	cmp	r3, r5
 8008a56:	dcf2      	bgt.n	8008a3e <_printf_i+0x21e>
 8008a58:	e7eb      	b.n	8008a32 <_printf_i+0x212>
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	f104 0619 	add.w	r6, r4, #25
 8008a60:	e7f5      	b.n	8008a4e <_printf_i+0x22e>
 8008a62:	bf00      	nop
 8008a64:	08008d59 	.word	0x08008d59
 8008a68:	08008d6a 	.word	0x08008d6a

08008a6c <memcpy>:
 8008a6c:	440a      	add	r2, r1
 8008a6e:	4291      	cmp	r1, r2
 8008a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a74:	d100      	bne.n	8008a78 <memcpy+0xc>
 8008a76:	4770      	bx	lr
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a82:	4291      	cmp	r1, r2
 8008a84:	d1f9      	bne.n	8008a7a <memcpy+0xe>
 8008a86:	bd10      	pop	{r4, pc}

08008a88 <memmove>:
 8008a88:	4288      	cmp	r0, r1
 8008a8a:	b510      	push	{r4, lr}
 8008a8c:	eb01 0402 	add.w	r4, r1, r2
 8008a90:	d902      	bls.n	8008a98 <memmove+0x10>
 8008a92:	4284      	cmp	r4, r0
 8008a94:	4623      	mov	r3, r4
 8008a96:	d807      	bhi.n	8008aa8 <memmove+0x20>
 8008a98:	1e43      	subs	r3, r0, #1
 8008a9a:	42a1      	cmp	r1, r4
 8008a9c:	d008      	beq.n	8008ab0 <memmove+0x28>
 8008a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aa6:	e7f8      	b.n	8008a9a <memmove+0x12>
 8008aa8:	4402      	add	r2, r0
 8008aaa:	4601      	mov	r1, r0
 8008aac:	428a      	cmp	r2, r1
 8008aae:	d100      	bne.n	8008ab2 <memmove+0x2a>
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aba:	e7f7      	b.n	8008aac <memmove+0x24>

08008abc <_free_r>:
 8008abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008abe:	2900      	cmp	r1, #0
 8008ac0:	d048      	beq.n	8008b54 <_free_r+0x98>
 8008ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ac6:	9001      	str	r0, [sp, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f1a1 0404 	sub.w	r4, r1, #4
 8008ace:	bfb8      	it	lt
 8008ad0:	18e4      	addlt	r4, r4, r3
 8008ad2:	f000 f8d3 	bl	8008c7c <__malloc_lock>
 8008ad6:	4a20      	ldr	r2, [pc, #128]	; (8008b58 <_free_r+0x9c>)
 8008ad8:	9801      	ldr	r0, [sp, #4]
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	4615      	mov	r5, r2
 8008ade:	b933      	cbnz	r3, 8008aee <_free_r+0x32>
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	6014      	str	r4, [r2, #0]
 8008ae4:	b003      	add	sp, #12
 8008ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008aea:	f000 b8cd 	b.w	8008c88 <__malloc_unlock>
 8008aee:	42a3      	cmp	r3, r4
 8008af0:	d90b      	bls.n	8008b0a <_free_r+0x4e>
 8008af2:	6821      	ldr	r1, [r4, #0]
 8008af4:	1862      	adds	r2, r4, r1
 8008af6:	4293      	cmp	r3, r2
 8008af8:	bf04      	itt	eq
 8008afa:	681a      	ldreq	r2, [r3, #0]
 8008afc:	685b      	ldreq	r3, [r3, #4]
 8008afe:	6063      	str	r3, [r4, #4]
 8008b00:	bf04      	itt	eq
 8008b02:	1852      	addeq	r2, r2, r1
 8008b04:	6022      	streq	r2, [r4, #0]
 8008b06:	602c      	str	r4, [r5, #0]
 8008b08:	e7ec      	b.n	8008ae4 <_free_r+0x28>
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	b10b      	cbz	r3, 8008b14 <_free_r+0x58>
 8008b10:	42a3      	cmp	r3, r4
 8008b12:	d9fa      	bls.n	8008b0a <_free_r+0x4e>
 8008b14:	6811      	ldr	r1, [r2, #0]
 8008b16:	1855      	adds	r5, r2, r1
 8008b18:	42a5      	cmp	r5, r4
 8008b1a:	d10b      	bne.n	8008b34 <_free_r+0x78>
 8008b1c:	6824      	ldr	r4, [r4, #0]
 8008b1e:	4421      	add	r1, r4
 8008b20:	1854      	adds	r4, r2, r1
 8008b22:	42a3      	cmp	r3, r4
 8008b24:	6011      	str	r1, [r2, #0]
 8008b26:	d1dd      	bne.n	8008ae4 <_free_r+0x28>
 8008b28:	681c      	ldr	r4, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	6053      	str	r3, [r2, #4]
 8008b2e:	4421      	add	r1, r4
 8008b30:	6011      	str	r1, [r2, #0]
 8008b32:	e7d7      	b.n	8008ae4 <_free_r+0x28>
 8008b34:	d902      	bls.n	8008b3c <_free_r+0x80>
 8008b36:	230c      	movs	r3, #12
 8008b38:	6003      	str	r3, [r0, #0]
 8008b3a:	e7d3      	b.n	8008ae4 <_free_r+0x28>
 8008b3c:	6825      	ldr	r5, [r4, #0]
 8008b3e:	1961      	adds	r1, r4, r5
 8008b40:	428b      	cmp	r3, r1
 8008b42:	bf04      	itt	eq
 8008b44:	6819      	ldreq	r1, [r3, #0]
 8008b46:	685b      	ldreq	r3, [r3, #4]
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	bf04      	itt	eq
 8008b4c:	1949      	addeq	r1, r1, r5
 8008b4e:	6021      	streq	r1, [r4, #0]
 8008b50:	6054      	str	r4, [r2, #4]
 8008b52:	e7c7      	b.n	8008ae4 <_free_r+0x28>
 8008b54:	b003      	add	sp, #12
 8008b56:	bd30      	pop	{r4, r5, pc}
 8008b58:	20000430 	.word	0x20000430

08008b5c <_malloc_r>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	1ccd      	adds	r5, r1, #3
 8008b60:	f025 0503 	bic.w	r5, r5, #3
 8008b64:	3508      	adds	r5, #8
 8008b66:	2d0c      	cmp	r5, #12
 8008b68:	bf38      	it	cc
 8008b6a:	250c      	movcc	r5, #12
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	4606      	mov	r6, r0
 8008b70:	db01      	blt.n	8008b76 <_malloc_r+0x1a>
 8008b72:	42a9      	cmp	r1, r5
 8008b74:	d903      	bls.n	8008b7e <_malloc_r+0x22>
 8008b76:	230c      	movs	r3, #12
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7e:	f000 f87d 	bl	8008c7c <__malloc_lock>
 8008b82:	4921      	ldr	r1, [pc, #132]	; (8008c08 <_malloc_r+0xac>)
 8008b84:	680a      	ldr	r2, [r1, #0]
 8008b86:	4614      	mov	r4, r2
 8008b88:	b99c      	cbnz	r4, 8008bb2 <_malloc_r+0x56>
 8008b8a:	4f20      	ldr	r7, [pc, #128]	; (8008c0c <_malloc_r+0xb0>)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	b923      	cbnz	r3, 8008b9a <_malloc_r+0x3e>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4630      	mov	r0, r6
 8008b94:	f000 f862 	bl	8008c5c <_sbrk_r>
 8008b98:	6038      	str	r0, [r7, #0]
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f000 f85d 	bl	8008c5c <_sbrk_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d123      	bne.n	8008bee <_malloc_r+0x92>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	6033      	str	r3, [r6, #0]
 8008baa:	4630      	mov	r0, r6
 8008bac:	f000 f86c 	bl	8008c88 <__malloc_unlock>
 8008bb0:	e7e3      	b.n	8008b7a <_malloc_r+0x1e>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	1b5b      	subs	r3, r3, r5
 8008bb6:	d417      	bmi.n	8008be8 <_malloc_r+0x8c>
 8008bb8:	2b0b      	cmp	r3, #11
 8008bba:	d903      	bls.n	8008bc4 <_malloc_r+0x68>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	441c      	add	r4, r3
 8008bc0:	6025      	str	r5, [r4, #0]
 8008bc2:	e004      	b.n	8008bce <_malloc_r+0x72>
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	42a2      	cmp	r2, r4
 8008bc8:	bf0c      	ite	eq
 8008bca:	600b      	streq	r3, [r1, #0]
 8008bcc:	6053      	strne	r3, [r2, #4]
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f85a 	bl	8008c88 <__malloc_unlock>
 8008bd4:	f104 000b 	add.w	r0, r4, #11
 8008bd8:	1d23      	adds	r3, r4, #4
 8008bda:	f020 0007 	bic.w	r0, r0, #7
 8008bde:	1ac2      	subs	r2, r0, r3
 8008be0:	d0cc      	beq.n	8008b7c <_malloc_r+0x20>
 8008be2:	1a1b      	subs	r3, r3, r0
 8008be4:	50a3      	str	r3, [r4, r2]
 8008be6:	e7c9      	b.n	8008b7c <_malloc_r+0x20>
 8008be8:	4622      	mov	r2, r4
 8008bea:	6864      	ldr	r4, [r4, #4]
 8008bec:	e7cc      	b.n	8008b88 <_malloc_r+0x2c>
 8008bee:	1cc4      	adds	r4, r0, #3
 8008bf0:	f024 0403 	bic.w	r4, r4, #3
 8008bf4:	42a0      	cmp	r0, r4
 8008bf6:	d0e3      	beq.n	8008bc0 <_malloc_r+0x64>
 8008bf8:	1a21      	subs	r1, r4, r0
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f000 f82e 	bl	8008c5c <_sbrk_r>
 8008c00:	3001      	adds	r0, #1
 8008c02:	d1dd      	bne.n	8008bc0 <_malloc_r+0x64>
 8008c04:	e7cf      	b.n	8008ba6 <_malloc_r+0x4a>
 8008c06:	bf00      	nop
 8008c08:	20000430 	.word	0x20000430
 8008c0c:	20000434 	.word	0x20000434

08008c10 <_realloc_r>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	4607      	mov	r7, r0
 8008c14:	4614      	mov	r4, r2
 8008c16:	460e      	mov	r6, r1
 8008c18:	b921      	cbnz	r1, 8008c24 <_realloc_r+0x14>
 8008c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c1e:	4611      	mov	r1, r2
 8008c20:	f7ff bf9c 	b.w	8008b5c <_malloc_r>
 8008c24:	b922      	cbnz	r2, 8008c30 <_realloc_r+0x20>
 8008c26:	f7ff ff49 	bl	8008abc <_free_r>
 8008c2a:	4625      	mov	r5, r4
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	f000 f830 	bl	8008c94 <_malloc_usable_size_r>
 8008c34:	42a0      	cmp	r0, r4
 8008c36:	d20f      	bcs.n	8008c58 <_realloc_r+0x48>
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f7ff ff8e 	bl	8008b5c <_malloc_r>
 8008c40:	4605      	mov	r5, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0f2      	beq.n	8008c2c <_realloc_r+0x1c>
 8008c46:	4631      	mov	r1, r6
 8008c48:	4622      	mov	r2, r4
 8008c4a:	f7ff ff0f 	bl	8008a6c <memcpy>
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff ff33 	bl	8008abc <_free_r>
 8008c56:	e7e9      	b.n	8008c2c <_realloc_r+0x1c>
 8008c58:	4635      	mov	r5, r6
 8008c5a:	e7e7      	b.n	8008c2c <_realloc_r+0x1c>

08008c5c <_sbrk_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d06      	ldr	r5, [pc, #24]	; (8008c78 <_sbrk_r+0x1c>)
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7f8 f91a 	bl	8000ea0 <_sbrk>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_sbrk_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_sbrk_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	20001f54 	.word	0x20001f54

08008c7c <__malloc_lock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_lock+0x8>)
 8008c7e:	f000 b811 	b.w	8008ca4 <__retarget_lock_acquire_recursive>
 8008c82:	bf00      	nop
 8008c84:	20001f5c 	.word	0x20001f5c

08008c88 <__malloc_unlock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_unlock+0x8>)
 8008c8a:	f000 b80c 	b.w	8008ca6 <__retarget_lock_release_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20001f5c 	.word	0x20001f5c

08008c94 <_malloc_usable_size_r>:
 8008c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c98:	1f18      	subs	r0, r3, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfbc      	itt	lt
 8008c9e:	580b      	ldrlt	r3, [r1, r0]
 8008ca0:	18c0      	addlt	r0, r0, r3
 8008ca2:	4770      	bx	lr

08008ca4 <__retarget_lock_acquire_recursive>:
 8008ca4:	4770      	bx	lr

08008ca6 <__retarget_lock_release_recursive>:
 8008ca6:	4770      	bx	lr

08008ca8 <_init>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	bf00      	nop
 8008cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cae:	bc08      	pop	{r3}
 8008cb0:	469e      	mov	lr, r3
 8008cb2:	4770      	bx	lr

08008cb4 <_fini>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	bf00      	nop
 8008cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cba:	bc08      	pop	{r3}
 8008cbc:	469e      	mov	lr, r3
 8008cbe:	4770      	bx	lr
