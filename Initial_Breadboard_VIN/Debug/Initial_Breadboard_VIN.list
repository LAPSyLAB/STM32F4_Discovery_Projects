
Initial_Breadboard_VIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008c14  08008c14  00018c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cd0  08008cd0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd8  08008cd8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d80  200001e4  08008ec4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f64  08008ec4  00021f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b864  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d66  00000000  00000000  0003ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00040a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f2b  00000000  00000000  00041bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199ec  00000000  00000000  00067aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e8a  00000000  00000000  000814d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158361  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005144  00000000  00000000  001583b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bfc 	.word	0x08008bfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008bfc 	.word	0x08008bfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fcff 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f869 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9cf 	bl	8000928 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058a:	f000 f939 	bl	8000800 <MX_I2C1_Init>
  MX_I2S3_Init();
 800058e:	f000 f965 	bl	800085c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000592:	f000 f993 	bl	80008bc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000596:	f007 f995 	bl	80078c4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800059a:	f000 f8df 	bl	800075c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_ADC_Start(&hadc1);
 800059e:	4826      	ldr	r0, [pc, #152]	; (8000638 <main+0xc0>)
 80005a0:	f000 fdc8 	bl	8001134 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a4:	f04f 31ff 	mov.w	r1, #4294967295
 80005a8:	4823      	ldr	r0, [pc, #140]	; (8000638 <main+0xc0>)
 80005aa:	f000 fe95 	bl	80012d8 <HAL_ADC_PollForConversion>
	    AnalogValue = HAL_ADC_GetValue(&hadc1);
 80005ae:	4822      	ldr	r0, [pc, #136]	; (8000638 <main+0xc0>)
 80005b0:	f000 ff1d 	bl	80013ee <HAL_ADC_GetValue>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <main+0xc4>)
 80005ba:	601a      	str	r2, [r3, #0]

	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	481f      	ldr	r0, [pc, #124]	; (8000640 <main+0xc8>)
 80005c2:	f001 fc1e 	bl	8001e02 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	481d      	ldr	r0, [pc, #116]	; (8000640 <main+0xc8>)
 80005cc:	f001 fc19 	bl	8001e02 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	481a      	ldr	r0, [pc, #104]	; (8000640 <main+0xc8>)
 80005d6:	f001 fc14 	bl	8001e02 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	4818      	ldr	r0, [pc, #96]	; (8000640 <main+0xc8>)
 80005e0:	f001 fc0f 	bl	8001e02 <HAL_GPIO_TogglePin>

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);   //External LED on PB5
 80005e4:	2120      	movs	r1, #32
 80005e6:	4817      	ldr	r0, [pc, #92]	; (8000644 <main+0xcc>)
 80005e8:	f001 fc0b 	bl	8001e02 <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4); //External Key on PB4
 80005ec:	2110      	movs	r1, #16
 80005ee:	4815      	ldr	r0, [pc, #84]	; (8000644 <main+0xcc>)
 80005f0:	f001 fbd6 	bl	8001da0 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <main+0xd0>)
 80005fa:	601a      	str	r2, [r3, #0]



	    snprintf (SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Analog:%d\r\n",Counter++, KeyState, AnalogValue);
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	4912      	ldr	r1, [pc, #72]	; (800064c <main+0xd4>)
 8000604:	600a      	str	r2, [r1, #0]
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <main+0xd0>)
 8000608:	6812      	ldr	r2, [r2, #0]
 800060a:	490c      	ldr	r1, [pc, #48]	; (800063c <main+0xc4>)
 800060c:	6809      	ldr	r1, [r1, #0]
 800060e:	9101      	str	r1, [sp, #4]
 8000610:	9200      	str	r2, [sp, #0]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <main+0xd8>)
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480e      	ldr	r0, [pc, #56]	; (8000654 <main+0xdc>)
 800061a:	f007 fead 	bl	8008378 <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <main+0xdc>)
 8000620:	f7ff fdd6 	bl	80001d0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	4619      	mov	r1, r3
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <main+0xdc>)
 800062a:	f007 fa09 	bl	8007a40 <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        HAL_Delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f000 fd17 	bl	8001064 <HAL_Delay>
  {
 8000636:	e7b2      	b.n	800059e <main+0x26>
 8000638:	2000048c 	.word	0x2000048c
 800063c:	20000204 	.word	0x20000204
 8000640:	40020c00 	.word	0x40020c00
 8000644:	40020400 	.word	0x40020400
 8000648:	20000200 	.word	0x20000200
 800064c:	200004d4 	.word	0x200004d4
 8000650:	08008c14 	.word	0x08008c14
 8000654:	200004d8 	.word	0x200004d8

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b098      	sub	sp, #96	; 0x60
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fe7e 	bl	8008368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b31      	ldr	r3, [pc, #196]	; (8000754 <SystemClock_Config+0xfc>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a30      	ldr	r2, [pc, #192]	; (8000754 <SystemClock_Config+0xfc>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <SystemClock_Config+0xfc>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <SystemClock_Config+0x100>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <SystemClock_Config+0x100>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0x100>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d6:	2308      	movs	r3, #8
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006da:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fb0b 	bl	8003d08 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006f8:	f000 fa32 	bl	8000b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	2105      	movs	r1, #5
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fd6c 	bl	80041f8 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000726:	f000 fa1b 	bl	8000b60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800072e:	23c0      	movs	r3, #192	; 0xc0
 8000730:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4618      	mov	r0, r3
 800073c:	f003 ff44 	bl	80045c8 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000746:	f000 fa0b 	bl	8000b60 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3760      	adds	r7, #96	; 0x60
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <MX_ADC1_Init+0x9c>)
 8000772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800077a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x98>)
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_ADC1_Init+0xa0>)
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007be:	f000 fc75 	bl	80010ac <HAL_ADC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c8:	f000 f9ca 	bl	8000b60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007de:	f000 fe13 	bl	8001408 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e8:	f000 f9ba 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000048c 	.word	0x2000048c
 80007f8:	40012000 	.word	0x40012000
 80007fc:	0f000001 	.word	0x0f000001

08000800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_I2C1_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2C1_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_I2C1_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_I2C1_Init+0x50>)
 800083e:	f001 fafb 	bl	8001e38 <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 f98a 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000438 	.word	0x20000438
 8000854:	40005400 	.word	0x40005400
 8000858:	000186a0 	.word	0x000186a0

0800085c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000862:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <MX_I2S3_Init+0x58>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_I2S3_Init+0x54>)
 800087c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000880:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000884:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <MX_I2S3_Init+0x5c>)
 8000886:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2S3_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_I2S3_Init+0x54>)
 800089c:	f001 fc10 	bl	80020c0 <HAL_I2S_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008a6:	f000 f95b 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000630 	.word	0x20000630
 80008b4:	40003c00 	.word	0x40003c00
 80008b8:	00017700 	.word	0x00017700

080008bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_SPI1_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_SPI1_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_SPI1_Init+0x64>)
 80008c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_SPI1_Init+0x64>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SPI1_Init+0x64>)
 8000908:	220a      	movs	r2, #10
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_SPI1_Init+0x64>)
 800090e:	f003 ff9b 	bl	8004848 <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 f922 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200005d8 	.word	0x200005d8
 8000924:	40013000 	.word	0x40013000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	4b80      	ldr	r3, [pc, #512]	; (8000b44 <MX_GPIO_Init+0x21c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a7f      	ldr	r2, [pc, #508]	; (8000b44 <MX_GPIO_Init+0x21c>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b7d      	ldr	r3, [pc, #500]	; (8000b44 <MX_GPIO_Init+0x21c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	4b79      	ldr	r3, [pc, #484]	; (8000b44 <MX_GPIO_Init+0x21c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a78      	ldr	r2, [pc, #480]	; (8000b44 <MX_GPIO_Init+0x21c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b76      	ldr	r3, [pc, #472]	; (8000b44 <MX_GPIO_Init+0x21c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b72      	ldr	r3, [pc, #456]	; (8000b44 <MX_GPIO_Init+0x21c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a71      	ldr	r2, [pc, #452]	; (8000b44 <MX_GPIO_Init+0x21c>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b6f      	ldr	r3, [pc, #444]	; (8000b44 <MX_GPIO_Init+0x21c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b6b      	ldr	r3, [pc, #428]	; (8000b44 <MX_GPIO_Init+0x21c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a6a      	ldr	r2, [pc, #424]	; (8000b44 <MX_GPIO_Init+0x21c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <MX_GPIO_Init+0x21c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	4b64      	ldr	r3, [pc, #400]	; (8000b44 <MX_GPIO_Init+0x21c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a63      	ldr	r2, [pc, #396]	; (8000b44 <MX_GPIO_Init+0x21c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b61      	ldr	r3, [pc, #388]	; (8000b44 <MX_GPIO_Init+0x21c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b5d      	ldr	r3, [pc, #372]	; (8000b44 <MX_GPIO_Init+0x21c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a5c      	ldr	r2, [pc, #368]	; (8000b44 <MX_GPIO_Init+0x21c>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b5a      	ldr	r3, [pc, #360]	; (8000b44 <MX_GPIO_Init+0x21c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2108      	movs	r1, #8
 80009ea:	4857      	ldr	r0, [pc, #348]	; (8000b48 <MX_GPIO_Init+0x220>)
 80009ec:	f001 f9f0 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2101      	movs	r1, #1
 80009f4:	4855      	ldr	r0, [pc, #340]	; (8000b4c <MX_GPIO_Init+0x224>)
 80009f6:	f001 f9eb 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009fa:	2200      	movs	r2, #0
 80009fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a00:	4853      	ldr	r0, [pc, #332]	; (8000b50 <MX_GPIO_Init+0x228>)
 8000a02:	f001 f9e5 	bl	8001dd0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4852      	ldr	r0, [pc, #328]	; (8000b54 <MX_GPIO_Init+0x22c>)
 8000a0c:	f001 f9e0 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a10:	2308      	movs	r3, #8
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4848      	ldr	r0, [pc, #288]	; (8000b48 <MX_GPIO_Init+0x220>)
 8000a28:	f001 f81e 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4842      	ldr	r0, [pc, #264]	; (8000b4c <MX_GPIO_Init+0x224>)
 8000a44:	f001 f810 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	483a      	ldr	r0, [pc, #232]	; (8000b4c <MX_GPIO_Init+0x224>)
 8000a64:	f001 f800 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <MX_GPIO_Init+0x230>)
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4838      	ldr	r0, [pc, #224]	; (8000b5c <MX_GPIO_Init+0x234>)
 8000a7c:	f000 fff4 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4832      	ldr	r0, [pc, #200]	; (8000b5c <MX_GPIO_Init+0x234>)
 8000a94:	f000 ffe8 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB4 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_4;
 8000a98:	2314      	movs	r3, #20
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482a      	ldr	r0, [pc, #168]	; (8000b54 <MX_GPIO_Init+0x22c>)
 8000aac:	f000 ffdc 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4821      	ldr	r0, [pc, #132]	; (8000b54 <MX_GPIO_Init+0x22c>)
 8000ace:	f000 ffcb 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ad2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ad6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4819      	ldr	r0, [pc, #100]	; (8000b50 <MX_GPIO_Init+0x228>)
 8000aec:	f000 ffbc 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af0:	2320      	movs	r3, #32
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_GPIO_Init+0x228>)
 8000b04:	f000 ffb0 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_GPIO_Init+0x22c>)
 8000b20:	f000 ffa2 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_GPIO_Init+0x230>)
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_GPIO_Init+0x220>)
 8000b38:	f000 ff96 	bl	8001a68 <HAL_GPIO_Init>

}
 8000b3c:	bf00      	nop
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	40020400 	.word	0x40020400
 8000b58:	10120000 	.word	0x10120000
 8000b5c:	40020000 	.word	0x40020000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f000 ff1a 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_ADC_MspInit+0x7c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d127      	bne.n	8000c2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_ADC_MspInit+0x84>)
 8000c2a:	f000 ff1d 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40012000 	.word	0x40012000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_I2C_MspInit+0x84>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12c      	bne.n	8000cc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_I2C_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_I2C_MspInit+0x88>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_I2C_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c88:	2312      	movs	r3, #18
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c94:	2304      	movs	r3, #4
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <HAL_I2C_MspInit+0x8c>)
 8000ca0:	f000 fee2 	bl	8001a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_I2C_MspInit+0x88>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_I2C_MspInit+0x88>)
 8000cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_I2C_MspInit+0x88>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a28      	ldr	r2, [pc, #160]	; (8000d94 <HAL_I2S_MspInit+0xc0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d14a      	bne.n	8000d8c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a26      	ldr	r2, [pc, #152]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_I2S_MspInit+0xc4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <HAL_I2S_MspInit+0xc8>)
 8000d66:	f000 fe7f 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d6a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <HAL_I2S_MspInit+0xcc>)
 8000d88:	f000 fe6e 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40003c00 	.word	0x40003c00
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020800 	.word	0x40020800

08000da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_SPI_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12b      	bne.n	8000e1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dfe:	23e0      	movs	r3, #224	; 0xe0
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_SPI_MspInit+0x8c>)
 8000e1a:	f000 fe25 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40013000 	.word	0x40013000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 f8d0 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <OTG_FS_IRQHandler+0x10>)
 8000e8e:	f001 ff07 	bl	8002ca0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20001b4c 	.word	0x20001b4c

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f007 fa22 	bl	8008314 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20020000 	.word	0x20020000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000208 	.word	0x20000208
 8000f04:	20001f68 	.word	0x20001f68

08000f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f48:	4c0b      	ldr	r4, [pc, #44]	; (8000f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f56:	f7ff ffd7 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f007 f9e1 	bl	8008320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fb0b 	bl	8000578 <main>
  bx  lr    
 8000f62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000f70:	08008ce0 	.word	0x08008ce0
  ldr r2, =_sbss
 8000f74:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000f78:	20001f64 	.word	0x20001f64

08000f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fd1b 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fdda 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fd33 	bl	8001a4e <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 fcfb 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	20000678 	.word	0x20000678

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000678 	.word	0x20000678

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008

080010ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e033      	b.n	800112a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fd76 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d118      	bne.n	800111c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f2:	f023 0302 	bic.w	r3, r3, #2
 80010f6:	f043 0202 	orr.w	r2, r3, #2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 faa4 	bl	800164c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
 800111a:	e001      	b.n	8001120 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_ADC_Start+0x1a>
 800114a:	2302      	movs	r3, #2
 800114c:	e0b2      	b.n	80012b4 <HAL_ADC_Start+0x180>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d018      	beq.n	8001196 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <HAL_ADC_Start+0x18c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_ADC_Start+0x190>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9a      	lsrs	r2, r3, #18
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001188:	e002      	b.n	8001190 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3b01      	subs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f9      	bne.n	800118a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d17a      	bne.n	800129a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e2:	d106      	bne.n	80011f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f023 0206 	bic.w	r2, r3, #6
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <HAL_ADC_Start+0x194>)
 8001202:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800120c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	2b00      	cmp	r3, #0
 8001218:	d12a      	bne.n	8001270 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a2b      	ldr	r2, [pc, #172]	; (80012cc <HAL_ADC_Start+0x198>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d015      	beq.n	8001250 <HAL_ADC_Start+0x11c>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <HAL_ADC_Start+0x19c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d105      	bne.n	800123a <HAL_ADC_Start+0x106>
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_ADC_Start+0x194>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <HAL_ADC_Start+0x1a0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d136      	bne.n	80012b2 <HAL_ADC_Start+0x17e>
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_ADC_Start+0x194>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d130      	bne.n	80012b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d129      	bne.n	80012b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	e020      	b.n	80012b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a15      	ldr	r2, [pc, #84]	; (80012cc <HAL_ADC_Start+0x198>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d11b      	bne.n	80012b2 <HAL_ADC_Start+0x17e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d114      	bne.n	80012b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e00b      	b.n	80012b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	40012300 	.word	0x40012300
 80012cc:	40012000 	.word	0x40012000
 80012d0:	40012100 	.word	0x40012100
 80012d4:	40012200 	.word	0x40012200

080012d8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f4:	d113      	bne.n	800131e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001304:	d10b      	bne.n	800131e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f043 0220 	orr.w	r2, r3, #32
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e063      	b.n	80013e6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800131e:	f7ff fe95 	bl	800104c <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001324:	e021      	b.n	800136a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d01d      	beq.n	800136a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_ADC_PollForConversion+0x6c>
 8001334:	f7ff fe8a 	bl	800104c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d212      	bcs.n	800136a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d00b      	beq.n	800136a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f043 0204 	orr.w	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e03d      	b.n	80013e6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b02      	cmp	r3, #2
 8001376:	d1d6      	bne.n	8001326 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f06f 0212 	mvn.w	r2, #18
 8001380:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d123      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11f      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d111      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1c>
 8001420:	2302      	movs	r3, #2
 8001422:	e105      	b.n	8001630 <HAL_ADC_ConfigChannel+0x228>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d925      	bls.n	8001480 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68d9      	ldr	r1, [r3, #12]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	3b1e      	subs	r3, #30
 800144a:	2207      	movs	r2, #7
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68d9      	ldr	r1, [r3, #12]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	4603      	mov	r3, r0
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4403      	add	r3, r0
 8001472:	3b1e      	subs	r3, #30
 8001474:	409a      	lsls	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	e022      	b.n	80014c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6919      	ldr	r1, [r3, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	2207      	movs	r2, #7
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	400a      	ands	r2, r1
 80014a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4403      	add	r3, r0
 80014bc:	409a      	lsls	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d824      	bhi.n	8001518 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b05      	subs	r3, #5
 80014e0:	221f      	movs	r2, #31
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b05      	subs	r3, #5
 800150a:	fa00 f203 	lsl.w	r2, r0, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
 8001516:	e04c      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d824      	bhi.n	800156a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b23      	subs	r3, #35	; 0x23
 8001532:	221f      	movs	r2, #31
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	400a      	ands	r2, r1
 8001540:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b23      	subs	r3, #35	; 0x23
 800155c:	fa00 f203 	lsl.w	r2, r0, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	e023      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b41      	subs	r3, #65	; 0x41
 800157c:	221f      	movs	r2, #31
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3b41      	subs	r3, #65	; 0x41
 80015a6:	fa00 f203 	lsl.w	r2, r0, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_ADC_ConfigChannel+0x234>)
 80015b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a21      	ldr	r2, [pc, #132]	; (8001640 <HAL_ADC_ConfigChannel+0x238>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d109      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1cc>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b12      	cmp	r3, #18
 80015c6:	d105      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_ADC_ConfigChannel+0x238>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d123      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x21e>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d003      	beq.n	80015ee <HAL_ADC_ConfigChannel+0x1e6>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b11      	cmp	r3, #17
 80015ec:	d11b      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d111      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_ADC_ConfigChannel+0x23c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_ADC_ConfigChannel+0x240>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9a      	lsrs	r2, r3, #18
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001618:	e002      	b.n	8001620 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3b01      	subs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f9      	bne.n	800161a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40012300 	.word	0x40012300
 8001640:	40012000 	.word	0x40012000
 8001644:	20000000 	.word	0x20000000
 8001648:	431bde83 	.word	0x431bde83

0800164c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001654:	4b79      	ldr	r3, [pc, #484]	; (800183c <ADC_Init+0x1f0>)
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	431a      	orrs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	021a      	lsls	r2, r3, #8
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6899      	ldr	r1, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	4a58      	ldr	r2, [pc, #352]	; (8001840 <ADC_Init+0x1f4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d022      	beq.n	800172a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6899      	ldr	r1, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	e00f      	b.n	800174a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001748:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0202 	bic.w	r2, r2, #2
 8001758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6899      	ldr	r1, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7e1b      	ldrb	r3, [r3, #24]
 8001764:	005a      	lsls	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01b      	beq.n	80017b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001786:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001796:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6859      	ldr	r1, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	3b01      	subs	r3, #1
 80017a4:	035a      	lsls	r2, r3, #13
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	e007      	b.n	80017c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	3b01      	subs	r3, #1
 80017dc:	051a      	lsls	r2, r3, #20
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6899      	ldr	r1, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001802:	025a      	lsls	r2, r3, #9
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6899      	ldr	r1, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	029a      	lsls	r2, r3, #10
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40012300 	.word	0x40012300
 8001840:	0f000001 	.word	0x0f000001

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff29 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff3e 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff8e 	bl	8001938 <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5d 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff31 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa2 	bl	80019a0 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e16b      	b.n	8001d5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 815a 	bne.w	8001d56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d017      	beq.n	8001b58 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80b4 	beq.w	8001d56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b60      	ldr	r3, [pc, #384]	; (8001d74 <HAL_GPIO_Init+0x30c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a5f      	ldr	r2, [pc, #380]	; (8001d74 <HAL_GPIO_Init+0x30c>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <HAL_GPIO_Init+0x30c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0a:	4a5b      	ldr	r2, [pc, #364]	; (8001d78 <HAL_GPIO_Init+0x310>)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_GPIO_Init+0x314>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02b      	beq.n	8001c8e <HAL_GPIO_Init+0x226>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a51      	ldr	r2, [pc, #324]	; (8001d80 <HAL_GPIO_Init+0x318>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d025      	beq.n	8001c8a <HAL_GPIO_Init+0x222>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a50      	ldr	r2, [pc, #320]	; (8001d84 <HAL_GPIO_Init+0x31c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01f      	beq.n	8001c86 <HAL_GPIO_Init+0x21e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4f      	ldr	r2, [pc, #316]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d019      	beq.n	8001c82 <HAL_GPIO_Init+0x21a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4e      	ldr	r2, [pc, #312]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x216>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4d      	ldr	r2, [pc, #308]	; (8001d90 <HAL_GPIO_Init+0x328>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4c      	ldr	r2, [pc, #304]	; (8001d94 <HAL_GPIO_Init+0x32c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x20e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_GPIO_Init+0x330>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x20a>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e00e      	b.n	8001c90 <HAL_GPIO_Init+0x228>
 8001c72:	2308      	movs	r3, #8
 8001c74:	e00c      	b.n	8001c90 <HAL_GPIO_Init+0x228>
 8001c76:	2306      	movs	r3, #6
 8001c78:	e00a      	b.n	8001c90 <HAL_GPIO_Init+0x228>
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	e008      	b.n	8001c90 <HAL_GPIO_Init+0x228>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x228>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e004      	b.n	8001c90 <HAL_GPIO_Init+0x228>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_Init+0x228>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x228>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	f002 0203 	and.w	r2, r2, #3
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca0:	4935      	ldr	r1, [pc, #212]	; (8001d78 <HAL_GPIO_Init+0x310>)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd2:	4a32      	ldr	r2, [pc, #200]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd8:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	f67f ae90 	bls.w	8001a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020c00 	.word	0x40020c00
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40021400 	.word	0x40021400
 8001d94:	40021800 	.word	0x40021800
 8001d98:	40021c00 	.word	0x40021c00
 8001d9c:	40013c00 	.word	0x40013c00

08001da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e14:	887a      	ldrh	r2, [r7, #2]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	041a      	lsls	r2, r3, #16
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	400b      	ands	r3, r1
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	619a      	str	r2, [r3, #24]
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e12b      	b.n	80020a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fef0 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2224      	movs	r2, #36	; 0x24
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f002 fb80 	bl	80045a0 <HAL_RCC_GetPCLK1Freq>
 8001ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a81      	ldr	r2, [pc, #516]	; (80020ac <HAL_I2C_Init+0x274>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d807      	bhi.n	8001ebc <HAL_I2C_Init+0x84>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a80      	ldr	r2, [pc, #512]	; (80020b0 <HAL_I2C_Init+0x278>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	bf94      	ite	ls
 8001eb4:	2301      	movls	r3, #1
 8001eb6:	2300      	movhi	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e006      	b.n	8001eca <HAL_I2C_Init+0x92>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a7d      	ldr	r2, [pc, #500]	; (80020b4 <HAL_I2C_Init+0x27c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf94      	ite	ls
 8001ec4:	2301      	movls	r3, #1
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0e7      	b.n	80020a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a78      	ldr	r2, [pc, #480]	; (80020b8 <HAL_I2C_Init+0x280>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a6a      	ldr	r2, [pc, #424]	; (80020ac <HAL_I2C_Init+0x274>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d802      	bhi.n	8001f0c <HAL_I2C_Init+0xd4>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	e009      	b.n	8001f20 <HAL_I2C_Init+0xe8>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	4a69      	ldr	r2, [pc, #420]	; (80020bc <HAL_I2C_Init+0x284>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	099b      	lsrs	r3, r3, #6
 8001f1e:	3301      	adds	r3, #1
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	495c      	ldr	r1, [pc, #368]	; (80020ac <HAL_I2C_Init+0x274>)
 8001f3c:	428b      	cmp	r3, r1
 8001f3e:	d819      	bhi.n	8001f74 <HAL_I2C_Init+0x13c>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e59      	subs	r1, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f4e:	1c59      	adds	r1, r3, #1
 8001f50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f54:	400b      	ands	r3, r1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_I2C_Init+0x138>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1e59      	subs	r1, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6e:	e051      	b.n	8002014 <HAL_I2C_Init+0x1dc>
 8001f70:	2304      	movs	r3, #4
 8001f72:	e04f      	b.n	8002014 <HAL_I2C_Init+0x1dc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d111      	bne.n	8001fa0 <HAL_I2C_Init+0x168>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1e58      	subs	r0, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	440b      	add	r3, r1
 8001f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e012      	b.n	8001fc6 <HAL_I2C_Init+0x18e>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e58      	subs	r0, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	0099      	lsls	r1, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Init+0x196>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e022      	b.n	8002014 <HAL_I2C_Init+0x1dc>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_I2C_Init+0x1bc>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1e58      	subs	r0, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	440b      	add	r3, r1
 8001fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff2:	e00f      	b.n	8002014 <HAL_I2C_Init+0x1dc>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e58      	subs	r0, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	0099      	lsls	r1, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	fbb0 f3f3 	udiv	r3, r0, r3
 800200a:	3301      	adds	r3, #1
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	6809      	ldr	r1, [r1, #0]
 8002018:	4313      	orrs	r3, r2
 800201a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002042:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6911      	ldr	r1, [r2, #16]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68d2      	ldr	r2, [r2, #12]
 800204e:	4311      	orrs	r1, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	430b      	orrs	r3, r1
 8002056:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	000186a0 	.word	0x000186a0
 80020b0:	001e847f 	.word	0x001e847f
 80020b4:	003d08ff 	.word	0x003d08ff
 80020b8:	431bde83 	.word	0x431bde83
 80020bc:	10624dd3 	.word	0x10624dd3

080020c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e128      	b.n	8002324 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a90      	ldr	r2, [pc, #576]	; (800232c <HAL_I2S_Init+0x26c>)
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe fdf1 	bl	8000cd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002108:	f023 030f 	bic.w	r3, r3, #15
 800210c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2202      	movs	r2, #2
 8002114:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d060      	beq.n	80021e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002126:	2310      	movs	r3, #16
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e001      	b.n	8002130 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b20      	cmp	r3, #32
 8002136:	d802      	bhi.n	800213e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800213e:	2001      	movs	r0, #1
 8002140:	f002 fb24 	bl	800478c <HAL_RCCEx_GetPeriphCLKFreq>
 8002144:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214e:	d125      	bne.n	800219c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	3305      	adds	r3, #5
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e01f      	b.n	80021ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	fbb2 f2f3 	udiv	r2, r2, r3
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	3305      	adds	r3, #5
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	e00e      	b.n	80021ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	3305      	adds	r3, #5
 80021b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4a5c      	ldr	r2, [pc, #368]	; (8002330 <HAL_I2S_Init+0x270>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	08db      	lsrs	r3, r3, #3
 80021c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e003      	b.n	80021e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d902      	bls.n	80021f4 <HAL_I2S_Init+0x134>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2bff      	cmp	r3, #255	; 0xff
 80021f2:	d907      	bls.n	8002204 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	f043 0210 	orr.w	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e08f      	b.n	8002324 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	ea42 0103 	orr.w	r1, r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	430a      	orrs	r2, r1
 8002216:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002222:	f023 030f 	bic.w	r3, r3, #15
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6851      	ldr	r1, [r2, #4]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6892      	ldr	r2, [r2, #8]
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68d2      	ldr	r2, [r2, #12]
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6992      	ldr	r2, [r2, #24]
 800223a:	430a      	orrs	r2, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002246:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d161      	bne.n	8002314 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a38      	ldr	r2, [pc, #224]	; (8002334 <HAL_I2S_Init+0x274>)
 8002254:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a37      	ldr	r2, [pc, #220]	; (8002338 <HAL_I2S_Init+0x278>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_I2S_Init+0x1a4>
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_I2S_Init+0x27c>)
 8002262:	e001      	b.n	8002268 <HAL_I2S_Init+0x1a8>
 8002264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	4932      	ldr	r1, [pc, #200]	; (8002338 <HAL_I2S_Init+0x278>)
 8002270:	428a      	cmp	r2, r1
 8002272:	d101      	bne.n	8002278 <HAL_I2S_Init+0x1b8>
 8002274:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_I2S_Init+0x27c>)
 8002276:	e001      	b.n	800227c <HAL_I2S_Init+0x1bc>
 8002278:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800227c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002280:	f023 030f 	bic.w	r3, r3, #15
 8002284:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <HAL_I2S_Init+0x278>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d101      	bne.n	8002294 <HAL_I2S_Init+0x1d4>
 8002290:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_I2S_Init+0x27c>)
 8002292:	e001      	b.n	8002298 <HAL_I2S_Init+0x1d8>
 8002294:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002298:	2202      	movs	r2, #2
 800229a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a25      	ldr	r2, [pc, #148]	; (8002338 <HAL_I2S_Init+0x278>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_I2S_Init+0x1ea>
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_I2S_Init+0x27c>)
 80022a8:	e001      	b.n	80022ae <HAL_I2S_Init+0x1ee>
 80022aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ba:	d003      	beq.n	80022c4 <HAL_I2S_Init+0x204>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	e001      	b.n	80022d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022da:	4313      	orrs	r3, r2
 80022dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	897b      	ldrh	r3, [r7, #10]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_I2S_Init+0x278>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_I2S_Init+0x24c>
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_I2S_Init+0x27c>)
 800230a:	e001      	b.n	8002310 <HAL_I2S_Init+0x250>
 800230c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002310:	897a      	ldrh	r2, [r7, #10]
 8002312:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	08002437 	.word	0x08002437
 8002330:	cccccccd 	.word	0xcccccccd
 8002334:	0800254d 	.word	0x0800254d
 8002338:	40003800 	.word	0x40003800
 800233c:	40003400 	.word	0x40003400

08002340 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	1c9a      	adds	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10e      	bne.n	80023d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffb8 	bl	8002340 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	b292      	uxth	r2, r2
 80023ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	1c9a      	adds	r2, r3, #2
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10e      	bne.n	800242e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800241e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff93 	bl	8002354 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b04      	cmp	r3, #4
 8002450:	d13a      	bne.n	80024c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d109      	bne.n	8002470 <I2S_IRQHandler+0x3a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b40      	cmp	r3, #64	; 0x40
 8002468:	d102      	bne.n	8002470 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffb4 	bl	80023d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d126      	bne.n	80024c8 <I2S_IRQHandler+0x92>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b20      	cmp	r3, #32
 8002486:	d11f      	bne.n	80024c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002496:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f043 0202 	orr.w	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff50 	bl	8002368 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d136      	bne.n	8002542 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d109      	bne.n	80024f2 <I2S_IRQHandler+0xbc>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d102      	bne.n	80024f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff45 	bl	800237c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d122      	bne.n	8002542 <I2S_IRQHandler+0x10c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b20      	cmp	r3, #32
 8002508:	d11b      	bne.n	8002542 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002518:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f043 0204 	orr.w	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff13 	bl	8002368 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4aa2      	ldr	r2, [pc, #648]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002566:	4ba2      	ldr	r3, [pc, #648]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002568:	e001      	b.n	800256e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800256a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a9b      	ldr	r2, [pc, #620]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002584:	4b9a      	ldr	r3, [pc, #616]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002586:	e001      	b.n	800258c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d004      	beq.n	80025a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 8099 	bne.w	80026d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d107      	bne.n	80025be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f925 	bl	8002808 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f9c8 	bl	8002968 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d13a      	bne.n	8002658 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d035      	beq.n	8002658 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7e      	ldr	r2, [pc, #504]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80025f6:	4b7e      	ldr	r3, [pc, #504]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025f8:	e001      	b.n	80025fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80025fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4979      	ldr	r1, [pc, #484]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002606:	428b      	cmp	r3, r1
 8002608:	d101      	bne.n	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800260a:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800260c:	e001      	b.n	8002612 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800260e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002616:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002626:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f043 0202 	orr.w	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fe88 	bl	8002368 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b08      	cmp	r3, #8
 8002660:	f040 80be 	bne.w	80027e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80b8 	beq.w	80027e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800267e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a59      	ldr	r2, [pc, #356]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800268a:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800268c:	e001      	b.n	8002692 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800268e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4954      	ldr	r1, [pc, #336]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800269a:	428b      	cmp	r3, r1
 800269c:	d101      	bne.n	80026a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800269e:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026a0:	e001      	b.n	80026a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80026a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f043 0204 	orr.w	r2, r3, #4
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fe4a 	bl	8002368 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026d4:	e084      	b.n	80027e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d107      	bne.n	80026f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8be 	bl	800286c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8fd 	bl	8002904 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d12f      	bne.n	8002774 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d02a      	beq.n	8002774 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800272c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2e      	ldr	r2, [pc, #184]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002738:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800273a:	e001      	b.n	8002740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800273c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4929      	ldr	r1, [pc, #164]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002748:	428b      	cmp	r3, r1
 800274a:	d101      	bne.n	8002750 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800274e:	e001      	b.n	8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002750:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002754:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002758:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f043 0202 	orr.w	r2, r3, #2
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff fdfa 	bl	8002368 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b08      	cmp	r3, #8
 800277c:	d131      	bne.n	80027e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d02c      	beq.n	80027e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002794:	e001      	b.n	800279a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4912      	ldr	r1, [pc, #72]	; (80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027a2:	428b      	cmp	r3, r1
 80027a4:	d101      	bne.n	80027aa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027a8:	e001      	b.n	80027ae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80027aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027c2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	f043 0204 	orr.w	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fdc5 	bl	8002368 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027de:	e000      	b.n	80027e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027e0:	bf00      	nop
}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40003800 	.word	0x40003800
 80027f0:	40003400 	.word	0x40003400

080027f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	1c99      	adds	r1, r3, #2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6251      	str	r1, [r2, #36]	; 0x24
 800281a:	881a      	ldrh	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d113      	bne.n	8002862 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002848:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ffc9 	bl	80027f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c99      	adds	r1, r3, #2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6251      	str	r1, [r2, #36]	; 0x24
 800287e:	8819      	ldrh	r1, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <I2SEx_TxISR_I2SExt+0x90>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <I2SEx_TxISR_I2SExt+0x22>
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <I2SEx_TxISR_I2SExt+0x94>)
 800288c:	e001      	b.n	8002892 <I2SEx_TxISR_I2SExt+0x26>
 800288e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002892:	460a      	mov	r2, r1
 8002894:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d121      	bne.n	80028f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <I2SEx_TxISR_I2SExt+0x90>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <I2SEx_TxISR_I2SExt+0x50>
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <I2SEx_TxISR_I2SExt+0x94>)
 80028ba:	e001      	b.n	80028c0 <I2SEx_TxISR_I2SExt+0x54>
 80028bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	490d      	ldr	r1, [pc, #52]	; (80028fc <I2SEx_TxISR_I2SExt+0x90>)
 80028c8:	428b      	cmp	r3, r1
 80028ca:	d101      	bne.n	80028d0 <I2SEx_TxISR_I2SExt+0x64>
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <I2SEx_TxISR_I2SExt+0x94>)
 80028ce:	e001      	b.n	80028d4 <I2SEx_TxISR_I2SExt+0x68>
 80028d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff81 	bl	80027f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40003800 	.word	0x40003800
 8002900:	40003400 	.word	0x40003400

08002904 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68d8      	ldr	r0, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	1c99      	adds	r1, r3, #2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800291c:	b282      	uxth	r2, r0
 800291e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002946:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ff4a 	bl	80027f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <I2SEx_RxISR_I2SExt+0x90>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <I2SEx_RxISR_I2SExt+0x16>
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <I2SEx_RxISR_I2SExt+0x94>)
 800297c:	e001      	b.n	8002982 <I2SEx_RxISR_I2SExt+0x1a>
 800297e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002982:	68d8      	ldr	r0, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	1c99      	adds	r1, r3, #2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800298e:	b282      	uxth	r2, r0
 8002990:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d121      	bne.n	80029ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <I2SEx_RxISR_I2SExt+0x90>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <I2SEx_RxISR_I2SExt+0x50>
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <I2SEx_RxISR_I2SExt+0x94>)
 80029b6:	e001      	b.n	80029bc <I2SEx_RxISR_I2SExt+0x54>
 80029b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	490d      	ldr	r1, [pc, #52]	; (80029f8 <I2SEx_RxISR_I2SExt+0x90>)
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d101      	bne.n	80029cc <I2SEx_RxISR_I2SExt+0x64>
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <I2SEx_RxISR_I2SExt+0x94>)
 80029ca:	e001      	b.n	80029d0 <I2SEx_RxISR_I2SExt+0x68>
 80029cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff03 	bl	80027f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40003800 	.word	0x40003800
 80029fc:	40003400 	.word	0x40003400

08002a00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a02:	b08f      	sub	sp, #60	; 0x3c
 8002a04:	af0a      	add	r7, sp, #40	; 0x28
 8002a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e10f      	b.n	8002c32 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f005 f94f 	bl	8007cd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 f896 	bl	8004b82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	687e      	ldr	r6, [r7, #4]
 8002a5e:	466d      	mov	r5, sp
 8002a60:	f106 0410 	add.w	r4, r6, #16
 8002a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a74:	1d33      	adds	r3, r6, #4
 8002a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a78:	6838      	ldr	r0, [r7, #0]
 8002a7a:	f001 ff6e 	bl	800495a <USB_CoreInit>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0d0      	b.n	8002c32 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 f884 	bl	8004ba4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	e04a      	b.n	8002b38 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	333d      	adds	r3, #61	; 0x3d
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	333c      	adds	r3, #60	; 0x3c
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	b298      	uxth	r0, r3
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3342      	adds	r3, #66	; 0x42
 8002ade:	4602      	mov	r2, r0
 8002ae0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	333f      	adds	r3, #63	; 0x3f
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3344      	adds	r3, #68	; 0x44
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3348      	adds	r3, #72	; 0x48
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3350      	adds	r3, #80	; 0x50
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	3301      	adds	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d3af      	bcc.n	8002aa2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e044      	b.n	8002bd2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3b5      	bcc.n	8002b48 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	687e      	ldr	r6, [r7, #4]
 8002be4:	466d      	mov	r5, sp
 8002be6:	f106 0410 	add.w	r4, r6, #16
 8002bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bfa:	1d33      	adds	r3, r6, #4
 8002bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfe:	6838      	ldr	r0, [r7, #0]
 8002c00:	f001 fffa 	bl	8004bf8 <USB_DevInit>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00d      	b.n	8002c32 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 f842 	bl	8005cb4 <USB_DevDisconnect>

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_PCD_Start+0x1c>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e020      	b.n	8002c98 <HAL_PCD_Start+0x5e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d109      	bne.n	8002c7a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d005      	beq.n	8002c7a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 ff6e 	bl	8004b60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 fff2 	bl	8005c72 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b08d      	sub	sp, #52	; 0x34
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 f8b0 	bl	8005e1c <USB_GetMode>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 839d 	bne.w	80033fe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 f814 	bl	8005cf6 <USB_ReadInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8393 	beq.w	80033fc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 f80b 	bl	8005cf6 <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d107      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 0202 	and.w	r2, r2, #2
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fff9 	bl	8005cf6 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d161      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0210 	bic.w	r2, r2, #16
 8002d1c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	0c5b      	lsrs	r3, r3, #17
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d124      	bne.n	8002d94 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d035      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	6a38      	ldr	r0, [r7, #32]
 8002d6a:	f002 fe5f 	bl	8005a2c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7a:	441a      	add	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8c:	441a      	add	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	619a      	str	r2, [r3, #24]
 8002d92:	e016      	b.n	8002dc2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	0c5b      	lsrs	r3, r3, #17
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d110      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002da6:	2208      	movs	r2, #8
 8002da8:	4619      	mov	r1, r3
 8002daa:	6a38      	ldr	r0, [r7, #32]
 8002dac:	f002 fe3e 	bl	8005a2c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dbc:	441a      	add	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0210 	orr.w	r2, r2, #16
 8002dd0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 ff8d 	bl	8005cf6 <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002de6:	d16e      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 ff93 	bl	8005d1c <USB_ReadDevAllOutEpInterrupt>
 8002df6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002df8:	e062      	b.n	8002ec0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d057      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 ffb8 	bl	8005d84 <USB_ReadDevOutEPInterrupt>
 8002e14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2301      	movs	r3, #1
 8002e30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fdb1 	bl	800399c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e50:	461a      	mov	r2, r3
 8002e52:	2308      	movs	r3, #8
 8002e54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 feab 	bl	8003bb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e74:	461a      	mov	r2, r3
 8002e76:	2310      	movs	r3, #16
 8002e78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e90:	461a      	mov	r2, r3
 8002e92:	2320      	movs	r3, #32
 8002e94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eac:	461a      	mov	r2, r3
 8002eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d199      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 ff13 	bl	8005cf6 <USB_ReadInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eda:	f040 80c0 	bne.w	800305e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 ff34 	bl	8005d50 <USB_ReadDevAllInEpInterrupt>
 8002ee8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002eee:	e0b2      	b.n	8003056 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a7 	beq.w	800304a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 ff5a 	bl	8005dc0 <USB_ReadDevInEPInterrupt>
 8002f0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d057      	beq.n	8002fc8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	2201      	movs	r2, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69f9      	ldr	r1, [r7, #28]
 8002f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f38:	4013      	ands	r3, r2
 8002f3a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d132      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3348      	adds	r3, #72	; 0x48
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4403      	add	r3, r0
 8002f76:	3344      	adds	r3, #68	; 0x44
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4419      	add	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4403      	add	r3, r0
 8002f8a:	3348      	adds	r3, #72	; 0x48
 8002f8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d113      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x31c>
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3350      	adds	r3, #80	; 0x50
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d108      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f002 ff62 	bl	8005e80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f004 ff13 	bl	8007dee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003016:	461a      	mov	r2, r3
 8003018:	2340      	movs	r3, #64	; 0x40
 800301a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003032:	461a      	mov	r2, r3
 8003034:	2302      	movs	r3, #2
 8003036:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fc1b 	bl	8003880 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	3301      	adds	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f af49 	bne.w	8002ef0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f002 fe47 	bl	8005cf6 <USB_ReadInterrupts>
 8003068:	4603      	mov	r3, r0
 800306a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800306e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003072:	d122      	bne.n	80030ba <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800309a:	2100      	movs	r1, #0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fe27 	bl	8003cf0 <HAL_PCDEx_LPM_Callback>
 80030a2:	e002      	b.n	80030aa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f004 ff19 	bl	8007edc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fe19 	bl	8005cf6 <USB_ReadInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ce:	d112      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d102      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f004 fed5 	bl	8007e90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030f4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fdfb 	bl	8005cf6 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	f040 80c7 	bne.w	800329c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2110      	movs	r1, #16
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fec9 	bl	8004ec0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003132:	e056      	b.n	80031e2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003140:	461a      	mov	r2, r3
 8003142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003146:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003158:	0151      	lsls	r1, r2, #5
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	440a      	add	r2, r1
 800315e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003166:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003178:	0151      	lsls	r1, r2, #5
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	440a      	add	r2, r1
 800317e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800319a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031cc:	0151      	lsls	r1, r2, #5
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	440a      	add	r2, r1
 80031d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	3301      	adds	r3, #1
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3a3      	bcc.n	8003134 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	2b00      	cmp	r3, #0
 8003206:	d016      	beq.n	8003236 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003218:	f043 030b 	orr.w	r3, r3, #11
 800321c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322e:	f043 030b 	orr.w	r3, r3, #11
 8003232:	6453      	str	r3, [r2, #68]	; 0x44
 8003234:	e015      	b.n	8003262 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003248:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800324c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800325c:	f043 030b 	orr.w	r3, r3, #11
 8003260:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003270:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003274:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003286:	461a      	mov	r2, r3
 8003288:	f002 fdfa 	bl	8005e80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800329a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 fd28 	bl	8005cf6 <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b0:	d124      	bne.n	80032fc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 fdbe 	bl	8005e38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f001 fe5e 	bl	8004f82 <USB_GetDevSpeed>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681c      	ldr	r4, [r3, #0]
 80032d2:	f001 f959 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80032d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	4620      	mov	r0, r4
 80032e2:	f001 fb9b 	bl	8004a1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f004 fda9 	bl	8007e3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f002 fcf8 	bl	8005cf6 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d10a      	bne.n	8003326 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f004 fd86 	bl	8007e22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f002 0208 	and.w	r2, r2, #8
 8003324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f002 fce3 	bl	8005cf6 <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333a:	d10f      	bne.n	800335c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	b2db      	uxtb	r3, r3
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f004 fde8 	bl	8007f1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800335a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f002 fcc8 	bl	8005cf6 <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003370:	d10f      	bne.n	8003392 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	b2db      	uxtb	r3, r3
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f004 fdbb 	bl	8007ef8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fcad 	bl	8005cf6 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d10a      	bne.n	80033be <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f004 fdc9 	bl	8007f40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 fc97 	bl	8005cf6 <USB_ReadInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d115      	bne.n	80033fe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f004 fdb9 	bl	8007f5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	e000      	b.n	80033fe <HAL_PCD_IRQHandler+0x75e>
      return;
 80033fc:	bf00      	nop
    }
  }
}
 80033fe:	3734      	adds	r7, #52	; 0x34
 8003400:	46bd      	mov	sp, r7
 8003402:	bd90      	pop	{r4, r7, pc}

08003404 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_PCD_SetAddress+0x1a>
 800341a:	2302      	movs	r3, #2
 800341c:	e013      	b.n	8003446 <HAL_PCD_SetAddress+0x42>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f002 fbf5 	bl	8005c26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	4608      	mov	r0, r1
 8003458:	4611      	mov	r1, r2
 800345a:	461a      	mov	r2, r3
 800345c:	4603      	mov	r3, r0
 800345e:	70fb      	strb	r3, [r7, #3]
 8003460:	460b      	mov	r3, r1
 8003462:	803b      	strh	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800346c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da0f      	bge.n	8003494 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	3338      	adds	r3, #56	; 0x38
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	705a      	strb	r2, [r3, #1]
 8003492:	e00f      	b.n	80034b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034c0:	883a      	ldrh	r2, [r7, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	78ba      	ldrb	r2, [r7, #2]
 80034ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034de:	78bb      	ldrb	r3, [r7, #2]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d102      	bne.n	80034ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_PCD_EP_Open+0xaa>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e00e      	b.n	8003516 <HAL_PCD_EP_Open+0xc8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68f9      	ldr	r1, [r7, #12]
 8003506:	4618      	mov	r0, r3
 8003508:	f001 fd60 	bl	8004fcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003514:	7afb      	ldrb	r3, [r7, #11]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800352a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da0f      	bge.n	8003552 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3338      	adds	r3, #56	; 0x38
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	705a      	strb	r2, [r3, #1]
 8003550:	e00f      	b.n	8003572 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_PCD_EP_Close+0x6e>
 8003588:	2302      	movs	r3, #2
 800358a:	e00e      	b.n	80035aa <HAL_PCD_EP_Close+0x8c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fd9e 	bl	80050dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	460b      	mov	r3, r1
 80035c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c2:	7afb      	ldrb	r3, [r7, #11]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d102      	bne.n	800360e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	f002 f879 	bl	800571c <USB_EP0StartXfer>
 800362a:	e008      	b.n	800363e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	f001 fe2b 	bl	8005294 <USB_EPStartXfer>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 020f 	and.w	r2, r3, #15
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	460b      	mov	r3, r1
 8003686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	3338      	adds	r3, #56	; 0x38
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2200      	movs	r2, #0
 80036b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2201      	movs	r2, #1
 80036b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d102      	bne.n	80036d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	6979      	ldr	r1, [r7, #20]
 80036ea:	f002 f817 	bl	800571c <USB_EP0StartXfer>
 80036ee:	e008      	b.n	8003702 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	6979      	ldr	r1, [r7, #20]
 80036fe:	f001 fdc9 	bl	8005294 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d901      	bls.n	800372a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e050      	b.n	80037cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800372a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800372e:	2b00      	cmp	r3, #0
 8003730:	da0f      	bge.n	8003752 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	3338      	adds	r3, #56	; 0x38
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	3304      	adds	r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	705a      	strb	r2, [r3, #1]
 8003750:	e00d      	b.n	800376e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_PCD_EP_SetStall+0x82>
 800378a:	2302      	movs	r3, #2
 800378c:	e01e      	b.n	80037cc <HAL_PCD_EP_SetStall+0xc0>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	f002 f96e 	bl	8005a7e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	b2d9      	uxtb	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037bc:	461a      	mov	r2, r3
 80037be:	f002 fb5f 	bl	8005e80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d901      	bls.n	80037f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e042      	b.n	8003878 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da0f      	bge.n	800381a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	3338      	adds	r3, #56	; 0x38
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	3304      	adds	r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	705a      	strb	r2, [r3, #1]
 8003818:	e00f      	b.n	800383a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_EP_ClrStall+0x86>
 8003856:	2302      	movs	r3, #2
 8003858:	e00e      	b.n	8003878 <HAL_PCD_EP_ClrStall+0xa4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	4618      	mov	r0, r3
 800386a:	f002 f976 	bl	8005b5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	3338      	adds	r3, #56	; 0x38
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d901      	bls.n	80038b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e06c      	b.n	8003992 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d902      	bls.n	80038d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3303      	adds	r3, #3
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038dc:	e02b      	b.n	8003936 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d902      	bls.n	80038fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3303      	adds	r3, #3
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68d9      	ldr	r1, [r3, #12]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003912:	b2db      	uxtb	r3, r3
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4603      	mov	r3, r0
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f002 f852 	bl	80059c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	b29b      	uxth	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d809      	bhi.n	8003960 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003954:	429a      	cmp	r2, r3
 8003956:	d203      	bcs.n	8003960 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1be      	bne.n	80038de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	429a      	cmp	r2, r3
 800396a:	d811      	bhi.n	8003990 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	43db      	mvns	r3, r3
 8003986:	6939      	ldr	r1, [r7, #16]
 8003988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800398c:	4013      	ands	r3, r2
 800398e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	333c      	adds	r3, #60	; 0x3c
 80039b4:	3304      	adds	r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	f040 80a0 	bne.w	8003b14 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d015      	beq.n	8003a0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a72      	ldr	r2, [pc, #456]	; (8003bac <PCD_EP_OutXfrComplete_int+0x210>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	f240 80dd 	bls.w	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80d7 	beq.w	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	461a      	mov	r2, r3
 8003a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a06:	6093      	str	r3, [r2, #8]
 8003a08:	e0cb      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2320      	movs	r3, #32
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	e0bc      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 80b7 	bne.w	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <PCD_EP_OutXfrComplete_int+0x210>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d90f      	bls.n	8003a5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	461a      	mov	r2, r3
 8003a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a58:	6093      	str	r3, [r2, #8]
 8003a5a:	e0a2      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	0159      	lsls	r1, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	440b      	add	r3, r1
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aaa:	6819      	ldr	r1, [r3, #0]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4403      	add	r3, r0
 8003aba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4419      	add	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4403      	add	r3, r0
 8003ad0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ad4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d114      	bne.n	8003b06 <PCD_EP_OutXfrComplete_int+0x16a>
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d108      	bne.n	8003b06 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003afe:	461a      	mov	r2, r3
 8003b00:	2101      	movs	r1, #1
 8003b02:	f002 f9bd 	bl	8005e80 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f004 f953 	bl	8007db8 <HAL_PCD_DataOutStageCallback>
 8003b12:	e046      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a26      	ldr	r2, [pc, #152]	; (8003bb0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d124      	bne.n	8003b66 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	461a      	mov	r2, r3
 8003b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b38:	6093      	str	r3, [r2, #8]
 8003b3a:	e032      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b52:	461a      	mov	r2, r3
 8003b54:	2320      	movs	r3, #32
 8003b56:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f004 f92a 	bl	8007db8 <HAL_PCD_DataOutStageCallback>
 8003b64:	e01d      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d114      	bne.n	8003b96 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d108      	bne.n	8003b96 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2100      	movs	r1, #0
 8003b92:	f002 f975 	bl	8005e80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f004 f90b 	bl	8007db8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	4f54300a 	.word	0x4f54300a
 8003bb0:	4f54310a 	.word	0x4f54310a

08003bb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	333c      	adds	r3, #60	; 0x3c
 8003bcc:	3304      	adds	r3, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <PCD_EP_OutSetupPacket_int+0x88>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d90e      	bls.n	8003c08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	461a      	mov	r2, r3
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f004 f8c3 	bl	8007d94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d90c      	bls.n	8003c30 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f002 f928 	bl	8005e80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	4f54300a 	.word	0x4f54300a

08003c40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c5e:	883b      	ldrh	r3, [r7, #0]
 8003c60:	0419      	lsls	r1, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c6c:	e028      	b.n	8003cc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4413      	add	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e00d      	b.n	8003c9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3340      	adds	r3, #64	; 0x40
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d3ec      	bcc.n	8003c82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ca8:	883b      	ldrh	r3, [r7, #0]
 8003caa:	0418      	lsls	r0, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	4302      	orrs	r2, r0
 8003cb8:	3340      	adds	r3, #64	; 0x40
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e264      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	4ba3      	ldr	r3, [pc, #652]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4ba0      	ldr	r3, [pc, #640]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b9d      	ldr	r3, [pc, #628]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b99      	ldr	r3, [pc, #612]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e23f      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x74>
 8003d6e:	4b91      	ldr	r3, [pc, #580]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a90      	ldr	r2, [pc, #576]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x98>
 8003d86:	4b8b      	ldr	r3, [pc, #556]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a8a      	ldr	r2, [pc, #552]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a87      	ldr	r2, [pc, #540]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003da0:	4b84      	ldr	r3, [pc, #528]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a83      	ldr	r2, [pc, #524]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a80      	ldr	r2, [pc, #512]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd f944 	bl	800104c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd f940 	bl	800104c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e204      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b76      	ldr	r3, [pc, #472]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xc0>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd f930 	bl	800104c <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fd f92c 	bl	800104c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1f0      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b6c      	ldr	r3, [pc, #432]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe8>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	4b65      	ldr	r3, [pc, #404]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b5f      	ldr	r3, [pc, #380]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b5c      	ldr	r3, [pc, #368]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1c4      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b56      	ldr	r3, [pc, #344]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4952      	ldr	r1, [pc, #328]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b4f      	ldr	r3, [pc, #316]	; (8003fb8 <HAL_RCC_OscConfig+0x2b0>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd f8e5 	bl	800104c <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd f8e1 	bl	800104c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1a5      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b43      	ldr	r3, [pc, #268]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4940      	ldr	r1, [pc, #256]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_RCC_OscConfig+0x2b0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd f8c4 	bl	800104c <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fd f8c0 	bl	800104c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e184      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d030      	beq.n	8003f54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_RCC_OscConfig+0x2b4>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fd f8a4 	bl	800104c <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fd f8a0 	bl	800104c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e164      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x200>
 8003f26:	e015      	b.n	8003f54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <HAL_RCC_OscConfig+0x2b4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd f88d 	bl	800104c <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fd f889 	bl	800104c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e14d      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a0 	beq.w	80040a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d121      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fd f84f 	bl	800104c <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCC_OscConfig+0x2ce>
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	42470000 	.word	0x42470000
 8003fbc:	42470e80 	.word	0x42470e80
 8003fc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc4:	f7fd f842 	bl	800104c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e106      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4b85      	ldr	r3, [pc, #532]	; (80041ec <HAL_RCC_OscConfig+0x4e4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2f0>
 8003fea:	4b81      	ldr	r3, [pc, #516]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a80      	ldr	r2, [pc, #512]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	e01c      	b.n	8004032 <HAL_RCC_OscConfig+0x32a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_OscConfig+0x312>
 8004000:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a7a      	ldr	r2, [pc, #488]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
 800400c:	4b78      	ldr	r3, [pc, #480]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a77      	ldr	r2, [pc, #476]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
 8004018:	e00b      	b.n	8004032 <HAL_RCC_OscConfig+0x32a>
 800401a:	4b75      	ldr	r3, [pc, #468]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a74      	ldr	r2, [pc, #464]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	4b72      	ldr	r3, [pc, #456]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a71      	ldr	r2, [pc, #452]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d015      	beq.n	8004066 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fd f807 	bl	800104c <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fd f803 	bl	800104c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0c5      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ee      	beq.n	8004042 <HAL_RCC_OscConfig+0x33a>
 8004064:	e014      	b.n	8004090 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fc fff1 	bl	800104c <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fc ffed 	bl	800104c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0af      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004084:	4b5a      	ldr	r3, [pc, #360]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ee      	bne.n	800406e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b56      	ldr	r3, [pc, #344]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a55      	ldr	r2, [pc, #340]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 809b 	beq.w	80041e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ac:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d05c      	beq.n	8004172 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d141      	bne.n	8004144 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fc ffc1 	bl	800104c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fc ffbd 	bl	800104c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e081      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e0:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	019b      	lsls	r3, r3, #6
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	3b01      	subs	r3, #1
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	061b      	lsls	r3, r3, #24
 8004110:	4937      	ldr	r1, [pc, #220]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004116:	4b37      	ldr	r3, [pc, #220]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fc ff96 	bl	800104c <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004124:	f7fc ff92 	bl	800104c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e056      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x41c>
 8004142:	e04e      	b.n	80041e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fc ff7f 	bl	800104c <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004152:	f7fc ff7b 	bl	800104c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e03f      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x44a>
 8004170:	e037      	b.n	80041e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e032      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d028      	beq.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d121      	bne.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d11a      	bne.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041ae:	4013      	ands	r3, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d111      	bne.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	3b01      	subs	r3, #1
 80041c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d107      	bne.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40007000 	.word	0x40007000
 80041f0:	40023800 	.word	0x40023800
 80041f4:	42470060 	.word	0x42470060

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fc feb0 	bl	800104c <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fc feac 	bl	800104c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f821 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc fe10 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08008c84 	.word	0x08008c84
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20000004 	.word	0x20000004

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	2300      	movs	r3, #0
 80043d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043dc:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d00d      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x40>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f200 80bd 	bhi.w	8004568 <HAL_RCC_GetSysClockFreq+0x1a4>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x34>
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x3a>
 80043f6:	e0b7      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b61      	ldr	r3, [pc, #388]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043fa:	60bb      	str	r3, [r7, #8]
       break;
 80043fc:	e0b7      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fe:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004400:	60bb      	str	r3, [r7, #8]
      break;
 8004402:	e0b4      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004404:	4b5d      	ldr	r3, [pc, #372]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440e:	4b5b      	ldr	r3, [pc, #364]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d04d      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441a:	4b58      	ldr	r3, [pc, #352]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	461a      	mov	r2, r3
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800442a:	f04f 0100 	mov.w	r1, #0
 800442e:	ea02 0800 	and.w	r8, r2, r0
 8004432:	ea03 0901 	and.w	r9, r3, r1
 8004436:	4640      	mov	r0, r8
 8004438:	4649      	mov	r1, r9
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	014b      	lsls	r3, r1, #5
 8004444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004448:	0142      	lsls	r2, r0, #5
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	ebb0 0008 	subs.w	r0, r0, r8
 8004452:	eb61 0109 	sbc.w	r1, r1, r9
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	018b      	lsls	r3, r1, #6
 8004460:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004464:	0182      	lsls	r2, r0, #6
 8004466:	1a12      	subs	r2, r2, r0
 8004468:	eb63 0301 	sbc.w	r3, r3, r1
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	00d9      	lsls	r1, r3, #3
 8004476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800447a:	00d0      	lsls	r0, r2, #3
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	eb12 0208 	adds.w	r2, r2, r8
 8004484:	eb43 0309 	adc.w	r3, r3, r9
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	0259      	lsls	r1, r3, #9
 8004492:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004496:	0250      	lsls	r0, r2, #9
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	f7fb feea 	bl	8000280 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e04a      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b6:	4b31      	ldr	r3, [pc, #196]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	099b      	lsrs	r3, r3, #6
 80044bc:	461a      	mov	r2, r3
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	ea02 0400 	and.w	r4, r2, r0
 80044ce:	ea03 0501 	and.w	r5, r3, r1
 80044d2:	4620      	mov	r0, r4
 80044d4:	4629      	mov	r1, r5
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	014b      	lsls	r3, r1, #5
 80044e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044e4:	0142      	lsls	r2, r0, #5
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	1b00      	subs	r0, r0, r4
 80044ec:	eb61 0105 	sbc.w	r1, r1, r5
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	018b      	lsls	r3, r1, #6
 80044fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044fe:	0182      	lsls	r2, r0, #6
 8004500:	1a12      	subs	r2, r2, r0
 8004502:	eb63 0301 	sbc.w	r3, r3, r1
 8004506:	f04f 0000 	mov.w	r0, #0
 800450a:	f04f 0100 	mov.w	r1, #0
 800450e:	00d9      	lsls	r1, r3, #3
 8004510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004514:	00d0      	lsls	r0, r2, #3
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	1912      	adds	r2, r2, r4
 800451c:	eb45 0303 	adc.w	r3, r5, r3
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	0299      	lsls	r1, r3, #10
 800452a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800452e:	0290      	lsls	r0, r2, #10
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	461a      	mov	r2, r3
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	f7fb fe9e 	bl	8000280 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4613      	mov	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	3301      	adds	r3, #1
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	60bb      	str	r3, [r7, #8]
      break;
 8004566:	e002      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800456a:	60bb      	str	r3, [r7, #8]
      break;
 800456c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456e:	68bb      	ldr	r3, [r7, #8]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	00f42400 	.word	0x00f42400
 8004584:	007a1200 	.word	0x007a1200

08004588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_RCC_GetHCLKFreq+0x14>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000000 	.word	0x20000000

080045a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a4:	f7ff fff0 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0a9b      	lsrs	r3, r3, #10
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	08008c94 	.word	0x08008c94

080045c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d035      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045f0:	4b62      	ldr	r3, [pc, #392]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045f6:	f7fc fd29 	bl	800104c <HAL_GetTick>
 80045fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045fe:	f7fc fd25 	bl	800104c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0b0      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004610:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	019a      	lsls	r2, r3, #6
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	071b      	lsls	r3, r3, #28
 8004628:	4955      	ldr	r1, [pc, #340]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004630:	4b52      	ldr	r3, [pc, #328]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004636:	f7fc fd09 	bl	800104c <HAL_GetTick>
 800463a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800463e:	f7fc fd05 	bl	800104c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e090      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004650:	4b4b      	ldr	r3, [pc, #300]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8083 	beq.w	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	4b44      	ldr	r3, [pc, #272]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a43      	ldr	r2, [pc, #268]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3e      	ldr	r2, [pc, #248]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004692:	f7fc fcdb 	bl	800104c <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fc fcd7 	bl	800104c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e062      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046ac:	4b35      	ldr	r3, [pc, #212]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b8:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02f      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d028      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d6:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e0:	4b29      	ldr	r3, [pc, #164]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e6:	4b28      	ldr	r3, [pc, #160]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046ec:	4a24      	ldr	r2, [pc, #144]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046f2:	4b23      	ldr	r3, [pc, #140]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d114      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fc fca5 	bl	800104c <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fc fca1 	bl	800104c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e02a      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ee      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004734:	d10d      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	490d      	ldr	r1, [pc, #52]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]
 8004750:	e005      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800475c:	6093      	str	r3, [r2, #8]
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476a:	4905      	ldr	r1, [pc, #20]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	42470068 	.word	0x42470068
 8004780:	40023800 	.word	0x40023800
 8004784:	40007000 	.word	0x40007000
 8004788:	42470e40 	.word	0x42470e40

0800478c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d13e      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047aa:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d12f      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c2:	617b      	str	r3, [r7, #20]
          break;
 80047c4:	e02f      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d108      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047dc:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	e007      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	099b      	lsrs	r3, r3, #6
 80047fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004810:	0f1b      	lsrs	r3, r3, #28
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]
          break;
 800481e:	e002      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
          break;
 8004824:	bf00      	nop
        }
      }
      break;
 8004826:	bf00      	nop
    }
  }
  return frequency;
 8004828:	697b      	ldr	r3, [r7, #20]
}
 800482a:	4618      	mov	r0, r3
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	00bb8000 	.word	0x00bb8000
 8004840:	007a1200 	.word	0x007a1200
 8004844:	00f42400 	.word	0x00f42400

08004848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07b      	b.n	8004952 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486a:	d009      	beq.n	8004880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
 8004872:	e005      	b.n	8004880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fc fa82 	bl	8000da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	ea42 0103 	orr.w	r1, r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	f003 0104 	and.w	r1, r3, #4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0210 	and.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004940:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800495a:	b084      	sub	sp, #16
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	f107 001c 	add.w	r0, r7, #28
 8004968:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	2b01      	cmp	r3, #1
 8004970:	d122      	bne.n	80049b8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d105      	bne.n	80049ac <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f001 fac5 	bl	8005f3c <USB_CoreReset>
 80049b2:	4603      	mov	r3, r0
 80049b4:	73fb      	strb	r3, [r7, #15]
 80049b6:	e01a      	b.n	80049ee <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fab9 	bl	8005f3c <USB_CoreReset>
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
 80049e0:	e005      	b.n	80049ee <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d10b      	bne.n	8004a0c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f043 0206 	orr.w	r2, r3, #6
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a18:	b004      	add	sp, #16
 8004a1a:	4770      	bx	lr

08004a1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d165      	bne.n	8004afc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a41      	ldr	r2, [pc, #260]	; (8004b38 <USB_SetTurnaroundTime+0x11c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d906      	bls.n	8004a46 <USB_SetTurnaroundTime+0x2a>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a40      	ldr	r2, [pc, #256]	; (8004b3c <USB_SetTurnaroundTime+0x120>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d202      	bcs.n	8004a46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a40:	230f      	movs	r3, #15
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e062      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a3c      	ldr	r2, [pc, #240]	; (8004b3c <USB_SetTurnaroundTime+0x120>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d306      	bcc.n	8004a5c <USB_SetTurnaroundTime+0x40>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4a3b      	ldr	r2, [pc, #236]	; (8004b40 <USB_SetTurnaroundTime+0x124>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d202      	bcs.n	8004a5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a56:	230e      	movs	r3, #14
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e057      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4a38      	ldr	r2, [pc, #224]	; (8004b40 <USB_SetTurnaroundTime+0x124>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d306      	bcc.n	8004a72 <USB_SetTurnaroundTime+0x56>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <USB_SetTurnaroundTime+0x128>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d202      	bcs.n	8004a72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a6c:	230d      	movs	r3, #13
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e04c      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4a33      	ldr	r2, [pc, #204]	; (8004b44 <USB_SetTurnaroundTime+0x128>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d306      	bcc.n	8004a88 <USB_SetTurnaroundTime+0x6c>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4a32      	ldr	r2, [pc, #200]	; (8004b48 <USB_SetTurnaroundTime+0x12c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d802      	bhi.n	8004a88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a82:	230c      	movs	r3, #12
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e041      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a2f      	ldr	r2, [pc, #188]	; (8004b48 <USB_SetTurnaroundTime+0x12c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d906      	bls.n	8004a9e <USB_SetTurnaroundTime+0x82>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4a2e      	ldr	r2, [pc, #184]	; (8004b4c <USB_SetTurnaroundTime+0x130>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d802      	bhi.n	8004a9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a98:	230b      	movs	r3, #11
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e036      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <USB_SetTurnaroundTime+0x130>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d906      	bls.n	8004ab4 <USB_SetTurnaroundTime+0x98>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4a29      	ldr	r2, [pc, #164]	; (8004b50 <USB_SetTurnaroundTime+0x134>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d802      	bhi.n	8004ab4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aae:	230a      	movs	r3, #10
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e02b      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <USB_SetTurnaroundTime+0x134>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d906      	bls.n	8004aca <USB_SetTurnaroundTime+0xae>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a25      	ldr	r2, [pc, #148]	; (8004b54 <USB_SetTurnaroundTime+0x138>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d202      	bcs.n	8004aca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ac4:	2309      	movs	r3, #9
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	e020      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4a21      	ldr	r2, [pc, #132]	; (8004b54 <USB_SetTurnaroundTime+0x138>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d306      	bcc.n	8004ae0 <USB_SetTurnaroundTime+0xc4>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a20      	ldr	r2, [pc, #128]	; (8004b58 <USB_SetTurnaroundTime+0x13c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d802      	bhi.n	8004ae0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ada:	2308      	movs	r3, #8
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	e015      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <USB_SetTurnaroundTime+0x13c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d906      	bls.n	8004af6 <USB_SetTurnaroundTime+0xda>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <USB_SetTurnaroundTime+0x140>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d202      	bcs.n	8004af6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004af0:	2307      	movs	r3, #7
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e00a      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004af6:	2306      	movs	r3, #6
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e007      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b02:	2309      	movs	r3, #9
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e001      	b.n	8004b0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b08:	2309      	movs	r3, #9
 8004b0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	029b      	lsls	r3, r3, #10
 8004b20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	00d8acbf 	.word	0x00d8acbf
 8004b3c:	00e4e1c0 	.word	0x00e4e1c0
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	01067380 	.word	0x01067380
 8004b48:	011a499f 	.word	0x011a499f
 8004b4c:	01312cff 	.word	0x01312cff
 8004b50:	014ca43f 	.word	0x014ca43f
 8004b54:	016e3600 	.word	0x016e3600
 8004b58:	01a6ab1f 	.word	0x01a6ab1f
 8004b5c:	01e84800 	.word	0x01e84800

08004b60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f023 0201 	bic.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d106      	bne.n	8004bd0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60da      	str	r2, [r3, #12]
 8004bce:	e00b      	b.n	8004be8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	e001      	b.n	8004be8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e003      	b.n	8004bf0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004be8:	2032      	movs	r0, #50	; 0x32
 8004bea:	f7fc fa3b 	bl	8001064 <HAL_Delay>

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	e009      	b.n	8004c2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3340      	adds	r3, #64	; 0x40
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b0e      	cmp	r3, #14
 8004c30:	d9f2      	bls.n	8004c18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11c      	bne.n	8004c72 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c46:	f043 0302 	orr.w	r3, r3, #2
 8004c4a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38
 8004c70:	e00b      	b.n	8004c8a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	680b      	ldr	r3, [r1, #0]
 8004ca8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10c      	bne.n	8004cca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f949 	bl	8004f50 <USB_SetDevSpeed>
 8004cbe:	e008      	b.n	8004cd2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f944 	bl	8004f50 <USB_SetDevSpeed>
 8004cc8:	e003      	b.n	8004cd2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cca:	2103      	movs	r1, #3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f93f 	bl	8004f50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cd2:	2110      	movs	r1, #16
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f8f3 	bl	8004ec0 <USB_FlushTxFifo>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f911 	bl	8004f0c <USB_FlushRxFifo>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	461a      	mov	r2, r3
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	e043      	b.n	8004da6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d34:	d118      	bne.n	8004d68 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	e013      	b.n	8004d7a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e008      	b.n	8004d7a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	461a      	mov	r2, r3
 8004d76:	2300      	movs	r3, #0
 8004d78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3301      	adds	r3, #1
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d3b7      	bcc.n	8004d1e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e043      	b.n	8004e3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dca:	d118      	bne.n	8004dfe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	461a      	mov	r2, r3
 8004de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e013      	b.n	8004e10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	461a      	mov	r2, r3
 8004df6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e008      	b.n	8004e10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d3b7      	bcc.n	8004db4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d105      	bne.n	8004e78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f043 0210 	orr.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <USB_DevInit+0x2c4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f043 0208 	orr.w	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea4:	f043 0304 	orr.w	r3, r3, #4
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb8:	b004      	add	sp, #16
 8004eba:	4770      	bx	lr
 8004ebc:	803c3800 	.word	0x803c3800

08004ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	019b      	lsls	r3, r3, #6
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <USB_FlushTxFifo+0x48>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e006      	b.n	8004efa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d0f0      	beq.n	8004eda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	00030d40 	.word	0x00030d40

08004f0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <USB_FlushRxFifo+0x40>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d0f0      	beq.n	8004f1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	00030d40 	.word	0x00030d40

08004f50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0306 	and.w	r3, r3, #6
 8004f9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
 8004fa6:	e00a      	b.n	8004fbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d002      	beq.n	8004fb4 <USB_GetDevSpeed+0x32>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b06      	cmp	r3, #6
 8004fb2:	d102      	bne.n	8004fba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	75fb      	strb	r3, [r7, #23]
 8004fb8:	e001      	b.n	8004fbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fba:	230f      	movs	r3, #15
 8004fbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d13a      	bne.n	800505e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005006:	4313      	orrs	r3, r2
 8005008:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d155      	bne.n	80050cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	78db      	ldrb	r3, [r3, #3]
 800503a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800503c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	059b      	lsls	r3, r3, #22
 8005042:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005044:	4313      	orrs	r3, r2
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e036      	b.n	80050cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	69da      	ldr	r2, [r3, #28]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	2101      	movs	r1, #1
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800507c:	4313      	orrs	r3, r2
 800507e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d11a      	bne.n	80050cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	78db      	ldrb	r3, [r3, #3]
 80050b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050b2:	430b      	orrs	r3, r1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d161      	bne.n	80051bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800510a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510e:	d11f      	bne.n	8005150 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800512e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800514e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	2101      	movs	r1, #1
 8005162:	fa01 f303 	lsl.w	r3, r1, r3
 8005166:	b29b      	uxth	r3, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005170:	4013      	ands	r3, r2
 8005172:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	2101      	movs	r1, #1
 8005186:	fa01 f303 	lsl.w	r3, r1, r3
 800518a:	b29b      	uxth	r3, r3
 800518c:	43db      	mvns	r3, r3
 800518e:	68f9      	ldr	r1, [r7, #12]
 8005190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005194:	4013      	ands	r3, r2
 8005196:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	0159      	lsls	r1, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	440b      	add	r3, r1
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	4619      	mov	r1, r3
 80051b4:	4b35      	ldr	r3, [pc, #212]	; (800528c <USB_DeactivateEndpoint+0x1b0>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
 80051ba:	e060      	b.n	800527e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d2:	d11f      	bne.n	8005214 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005212:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	43db      	mvns	r3, r3
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005234:	4013      	ands	r3, r2
 8005236:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	43db      	mvns	r3, r3
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005258:	4013      	ands	r3, r2
 800525a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	0159      	lsls	r1, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	440b      	add	r3, r1
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	4619      	mov	r1, r3
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <USB_DeactivateEndpoint+0x1b4>)
 800527a:	4013      	ands	r3, r2
 800527c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	ec337800 	.word	0xec337800
 8005290:	eff37800 	.word	0xeff37800

08005294 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	f040 815c 	bne.w	800556e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d132      	bne.n	8005324 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531c:	0cdb      	lsrs	r3, r3, #19
 800531e:	04db      	lsls	r3, r3, #19
 8005320:	6113      	str	r3, [r2, #16]
 8005322:	e074      	b.n	800540e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533e:	0cdb      	lsrs	r3, r3, #19
 8005340:	04db      	lsls	r3, r3, #19
 8005342:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005362:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	6959      	ldr	r1, [r3, #20]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	440b      	add	r3, r1
 8005380:	1e59      	subs	r1, r3, #1
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	fbb1 f3f3 	udiv	r3, r1, r3
 800538a:	04d9      	lsls	r1, r3, #19
 800538c:	4b9d      	ldr	r3, [pc, #628]	; (8005604 <USB_EPStartXfer+0x370>)
 800538e:	400b      	ands	r3, r1
 8005390:	69b9      	ldr	r1, [r7, #24]
 8005392:	0148      	lsls	r0, r1, #5
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	4401      	add	r1, r0
 8005398:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800539c:	4313      	orrs	r3, r2
 800539e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b6:	69b9      	ldr	r1, [r7, #24]
 80053b8:	0148      	lsls	r0, r1, #5
 80053ba:	69f9      	ldr	r1, [r7, #28]
 80053bc:	4401      	add	r1, r0
 80053be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	78db      	ldrb	r3, [r3, #3]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d11f      	bne.n	800540e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80053ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800540c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d14b      	bne.n	80054ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	461a      	mov	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	78db      	ldrb	r3, [r3, #3]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d128      	bne.n	800548a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d110      	bne.n	800546a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e00f      	b.n	800548a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e12f      	b.n	800570c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	78db      	ldrb	r3, [r3, #3]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d015      	beq.n	8005500 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8117 	beq.w	800570c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	69f9      	ldr	r1, [r7, #28]
 80054f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054fa:	4313      	orrs	r3, r2
 80054fc:	634b      	str	r3, [r1, #52]	; 0x34
 80054fe:	e105      	b.n	800570c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d110      	bne.n	8005532 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e00f      	b.n	8005552 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005550:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68d9      	ldr	r1, [r3, #12]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	b298      	uxth	r0, r3
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	4603      	mov	r3, r0
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fa2b 	bl	80059c2 <USB_WritePacket>
 800556c:	e0ce      	b.n	800570c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005588:	0cdb      	lsrs	r3, r3, #19
 800558a:	04db      	lsls	r3, r3, #19
 800558c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d126      	bne.n	8005608 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d0:	69b9      	ldr	r1, [r7, #24]
 80055d2:	0148      	lsls	r0, r1, #5
 80055d4:	69f9      	ldr	r1, [r7, #28]
 80055d6:	4401      	add	r1, r0
 80055d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055dc:	4313      	orrs	r3, r2
 80055de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055fe:	6113      	str	r3, [r2, #16]
 8005600:	e036      	b.n	8005670 <USB_EPStartXfer+0x3dc>
 8005602:	bf00      	nop
 8005604:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4413      	add	r3, r2
 8005612:	1e5a      	subs	r2, r3, #1
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	8afb      	ldrh	r3, [r7, #22]
 800562e:	04d9      	lsls	r1, r3, #19
 8005630:	4b39      	ldr	r3, [pc, #228]	; (8005718 <USB_EPStartXfer+0x484>)
 8005632:	400b      	ands	r3, r1
 8005634:	69b9      	ldr	r1, [r7, #24]
 8005636:	0148      	lsls	r0, r1, #5
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	4401      	add	r1, r0
 800563c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005640:	4313      	orrs	r3, r2
 8005642:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	8af9      	ldrh	r1, [r7, #22]
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005660:	69b9      	ldr	r1, [r7, #24]
 8005662:	0148      	lsls	r0, r1, #5
 8005664:	69f9      	ldr	r1, [r7, #28]
 8005666:	4401      	add	r1, r0
 8005668:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800566c:	4313      	orrs	r3, r2
 800566e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d10d      	bne.n	8005692 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68d9      	ldr	r1, [r3, #12]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	460a      	mov	r2, r1
 8005690:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	78db      	ldrb	r3, [r3, #3]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d128      	bne.n	80056ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d110      	bne.n	80056cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e00f      	b.n	80056ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800570a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	1ff80000 	.word	0x1ff80000

0800571c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	2b01      	cmp	r3, #1
 800573a:	f040 80cd 	bne.w	80058d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d132      	bne.n	80057ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005764:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	0cdb      	lsrs	r3, r3, #19
 80057a6:	04db      	lsls	r3, r3, #19
 80057a8:	6113      	str	r3, [r2, #16]
 80057aa:	e04e      	b.n	800584a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	0cdb      	lsrs	r3, r3, #19
 80057c8:	04db      	lsls	r3, r3, #19
 80057ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d903      	bls.n	8005804 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583a:	6939      	ldr	r1, [r7, #16]
 800583c:	0148      	lsls	r0, r1, #5
 800583e:	6979      	ldr	r1, [r7, #20]
 8005840:	4401      	add	r1, r0
 8005842:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005846:	4313      	orrs	r3, r2
 8005848:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d11e      	bne.n	800588e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	461a      	mov	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e092      	b.n	80059b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d07e      	beq.n	80059b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	2101      	movs	r1, #1
 80058c8:	fa01 f303 	lsl.w	r3, r1, r3
 80058cc:	6979      	ldr	r1, [r7, #20]
 80058ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d2:	4313      	orrs	r3, r2
 80058d4:	634b      	str	r3, [r1, #52]	; 0x34
 80058d6:	e06d      	b.n	80059b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f2:	0cdb      	lsrs	r3, r3, #19
 80058f4:	04db      	lsls	r3, r3, #19
 80058f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005912:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005916:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800591a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800594a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005962:	6939      	ldr	r1, [r7, #16]
 8005964:	0148      	lsls	r0, r1, #5
 8005966:	6979      	ldr	r1, [r7, #20]
 8005968:	4401      	add	r1, r0
 800596a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800596e:	4313      	orrs	r3, r2
 8005970:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d10d      	bne.n	8005994 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	68d9      	ldr	r1, [r3, #12]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	460a      	mov	r2, r1
 8005992:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b089      	sub	sp, #36	; 0x24
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	4611      	mov	r1, r2
 80059ce:	461a      	mov	r2, r3
 80059d0:	460b      	mov	r3, r1
 80059d2:	71fb      	strb	r3, [r7, #7]
 80059d4:	4613      	mov	r3, r2
 80059d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80059e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d11a      	bne.n	8005a1e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059e8:	88bb      	ldrh	r3, [r7, #4]
 80059ea:	3303      	adds	r3, #3
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e00f      	b.n	8005a16 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	031a      	lsls	r2, r3, #12
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a02:	461a      	mov	r2, r3
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	3301      	adds	r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d3eb      	bcc.n	80059f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3724      	adds	r7, #36	; 0x24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	3303      	adds	r3, #3
 8005a46:	089b      	lsrs	r3, r3, #2
 8005a48:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e00b      	b.n	8005a68 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	3301      	adds	r3, #1
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3ef      	bcc.n	8005a50 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005a70:	69fb      	ldr	r3, [r7, #28]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d12c      	bne.n	8005af4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	db12      	blt.n	8005ad2 <USB_EPSetStall+0x54>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00f      	beq.n	8005ad2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ad0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	e02b      	b.n	8005b4c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	db12      	blt.n	8005b2c <USB_EPSetStall+0xae>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00f      	beq.n	8005b2c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b2a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d128      	bne.n	8005bc8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	78db      	ldrb	r3, [r3, #3]
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d003      	beq.n	8005ba6 <USB_EPClearStall+0x4c>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	78db      	ldrb	r3, [r3, #3]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d138      	bne.n	8005c18 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e027      	b.n	8005c18 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005be6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	78db      	ldrb	r3, [r3, #3]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d003      	beq.n	8005bf8 <USB_EPClearStall+0x9e>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	78db      	ldrb	r3, [r3, #3]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d10f      	bne.n	8005c18 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c16:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c48:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c8c:	f023 0303 	bic.w	r3, r3, #3
 8005c90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca0:	f023 0302 	bic.w	r3, r3, #2
 8005ca4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce2:	f043 0302 	orr.w	r3, r3, #2
 8005ce6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	0c1b      	lsrs	r3, r3, #16
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4013      	ands	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	b29b      	uxth	r3, r3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	4013      	ands	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005db2:	68bb      	ldr	r3, [r7, #8]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	01db      	lsls	r3, r3, #7
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	f003 0301 	and.w	r3, r3, #1
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	333c      	adds	r3, #60	; 0x3c
 8005e96:	3304      	adds	r3, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <USB_EP0_OutStart+0xb8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d90a      	bls.n	8005eba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb4:	d101      	bne.n	8005eba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e037      	b.n	8005f2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee8:	f043 0318 	orr.w	r3, r3, #24
 8005eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10f      	bne.n	8005f28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	4f54300a 	.word	0x4f54300a

08005f3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a13      	ldr	r2, [pc, #76]	; (8005fa0 <USB_CoreReset+0x64>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e01b      	b.n	8005f92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	daf2      	bge.n	8005f48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f043 0201 	orr.w	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <USB_CoreReset+0x64>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d901      	bls.n	8005f84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e006      	b.n	8005f92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d0f0      	beq.n	8005f72 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	00030d40 	.word	0x00030d40

08005fa4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fb4:	f002 f96a 	bl	800828c <USBD_static_malloc>
 8005fb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d105      	bne.n	8005fcc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e066      	b.n	800609a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	7c1b      	ldrb	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d119      	bne.n	8006010 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	2181      	movs	r1, #129	; 0x81
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f002 f82e 	bl	8008046 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f002 f824 	bl	8008046 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2210      	movs	r2, #16
 800600a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800600e:	e016      	b.n	800603e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006010:	2340      	movs	r3, #64	; 0x40
 8006012:	2202      	movs	r2, #2
 8006014:	2181      	movs	r1, #129	; 0x81
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f002 f815 	bl	8008046 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006022:	2340      	movs	r3, #64	; 0x40
 8006024:	2202      	movs	r2, #2
 8006026:	2101      	movs	r1, #1
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f002 f80c 	bl	8008046 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2210      	movs	r2, #16
 800603a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800603e:	2308      	movs	r3, #8
 8006040:	2203      	movs	r2, #3
 8006042:	2182      	movs	r1, #130	; 0x82
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 fffe 	bl	8008046 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	7c1b      	ldrb	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d109      	bne.n	8006088 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800607a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800607e:	2101      	movs	r1, #1
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f002 f8cf 	bl	8008224 <USBD_LL_PrepareReceive>
 8006086:	e007      	b.n	8006098 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800608e:	2340      	movs	r3, #64	; 0x40
 8006090:	2101      	movs	r1, #1
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f002 f8c6 	bl	8008224 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060ae:	2181      	movs	r1, #129	; 0x81
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 ffee 	bl	8008092 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060bc:	2101      	movs	r1, #1
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 ffe7 	bl	8008092 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80060cc:	2182      	movs	r1, #130	; 0x82
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 ffdf 	bl	8008092 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00e      	beq.n	800610c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 f8d2 	bl	80082a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006128:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800613c:	2303      	movs	r3, #3
 800613e:	e0af      	b.n	80062a0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006148:	2b00      	cmp	r3, #0
 800614a:	d03f      	beq.n	80061cc <USBD_CDC_Setup+0xb4>
 800614c:	2b20      	cmp	r3, #32
 800614e:	f040 809f 	bne.w	8006290 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	88db      	ldrh	r3, [r3, #6]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d02e      	beq.n	80061b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b25b      	sxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	da16      	bge.n	8006192 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006170:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	88d2      	ldrh	r2, [r2, #6]
 8006176:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	88db      	ldrh	r3, [r3, #6]
 800617c:	2b07      	cmp	r3, #7
 800617e:	bf28      	it	cs
 8006180:	2307      	movcs	r3, #7
 8006182:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	89fa      	ldrh	r2, [r7, #14]
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 fb19 	bl	80077c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006190:	e085      	b.n	800629e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	785a      	ldrb	r2, [r3, #1]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	88db      	ldrh	r3, [r3, #6]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80061a8:	6939      	ldr	r1, [r7, #16]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	88db      	ldrh	r3, [r3, #6]
 80061ae:	461a      	mov	r2, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fb32 	bl	800781a <USBD_CtlPrepareRx>
      break;
 80061b6:	e072      	b.n	800629e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	7850      	ldrb	r0, [r2, #1]
 80061c4:	2200      	movs	r2, #0
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	4798      	blx	r3
      break;
 80061ca:	e068      	b.n	800629e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b0b      	cmp	r3, #11
 80061d2:	d852      	bhi.n	800627a <USBD_CDC_Setup+0x162>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <USBD_CDC_Setup+0xc4>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	0800620d 	.word	0x0800620d
 80061e0:	08006289 	.word	0x08006289
 80061e4:	0800627b 	.word	0x0800627b
 80061e8:	0800627b 	.word	0x0800627b
 80061ec:	0800627b 	.word	0x0800627b
 80061f0:	0800627b 	.word	0x0800627b
 80061f4:	0800627b 	.word	0x0800627b
 80061f8:	0800627b 	.word	0x0800627b
 80061fc:	0800627b 	.word	0x0800627b
 8006200:	0800627b 	.word	0x0800627b
 8006204:	08006237 	.word	0x08006237
 8006208:	08006261 	.word	0x08006261
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b03      	cmp	r3, #3
 8006216:	d107      	bne.n	8006228 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006218:	f107 030a 	add.w	r3, r7, #10
 800621c:	2202      	movs	r2, #2
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 face 	bl	80077c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006226:	e032      	b.n	800628e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fa58 	bl	80076e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	75fb      	strb	r3, [r7, #23]
          break;
 8006234:	e02b      	b.n	800628e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b03      	cmp	r3, #3
 8006240:	d107      	bne.n	8006252 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006242:	f107 030d 	add.w	r3, r7, #13
 8006246:	2201      	movs	r2, #1
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 fab9 	bl	80077c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006250:	e01d      	b.n	800628e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fa43 	bl	80076e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800625a:	2303      	movs	r3, #3
 800625c:	75fb      	strb	r3, [r7, #23]
          break;
 800625e:	e016      	b.n	800628e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b03      	cmp	r3, #3
 800626a:	d00f      	beq.n	800628c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fa36 	bl	80076e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006278:	e008      	b.n	800628c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 fa2f 	bl	80076e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006282:	2303      	movs	r3, #3
 8006284:	75fb      	strb	r3, [r7, #23]
          break;
 8006286:	e002      	b.n	800628e <USBD_CDC_Setup+0x176>
          break;
 8006288:	bf00      	nop
 800628a:	e008      	b.n	800629e <USBD_CDC_Setup+0x186>
          break;
 800628c:	bf00      	nop
      }
      break;
 800628e:	e006      	b.n	800629e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fa24 	bl	80076e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006298:	2303      	movs	r3, #3
 800629a:	75fb      	strb	r3, [r7, #23]
      break;
 800629c:	bf00      	nop
  }

  return (uint8_t)ret;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e04f      	b.n	800636a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3318      	adds	r3, #24
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d029      	beq.n	800633c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	3318      	adds	r3, #24
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	78f9      	ldrb	r1, [r7, #3]
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	460b      	mov	r3, r1
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	1a5b      	subs	r3, r3, r1
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4403      	add	r3, r0
 8006308:	3344      	adds	r3, #68	; 0x44
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006310:	fb03 f301 	mul.w	r3, r3, r1
 8006314:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006316:	2b00      	cmp	r3, #0
 8006318:	d110      	bne.n	800633c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	3318      	adds	r3, #24
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800632e:	78f9      	ldrb	r1, [r7, #3]
 8006330:	2300      	movs	r3, #0
 8006332:	2200      	movs	r2, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 ff54 	bl	80081e2 <USBD_LL_Transmit>
 800633a:	e015      	b.n	8006368 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2200      	movs	r2, #0
 8006340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006384:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	e015      	b.n	80063c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 ff64 	bl	8008266 <USBD_LL_GetRxDataSize>
 800639e:	4602      	mov	r2, r0
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063ba:	4611      	mov	r1, r2
 80063bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80063de:	2303      	movs	r3, #3
 80063e0:	e01b      	b.n	800641a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d015      	beq.n	8006418 <USBD_CDC_EP0_RxReady+0x50>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063f2:	2bff      	cmp	r3, #255	; 0xff
 80063f4:	d010      	beq.n	8006418 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006404:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800640c:	b292      	uxth	r2, r2
 800640e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	22ff      	movs	r2, #255	; 0xff
 8006414:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2243      	movs	r2, #67	; 0x43
 8006430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006432:	4b03      	ldr	r3, [pc, #12]	; (8006440 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000094 	.word	0x20000094

08006444 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2243      	movs	r2, #67	; 0x43
 8006450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006452:	4b03      	ldr	r3, [pc, #12]	; (8006460 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	20000050 	.word	0x20000050

08006464 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2243      	movs	r2, #67	; 0x43
 8006470:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006472:	4b03      	ldr	r3, [pc, #12]	; (8006480 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	200000d8 	.word	0x200000d8

08006484 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	220a      	movs	r2, #10
 8006490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006492:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	2000000c 	.word	0x2000000c

080064a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e004      	b.n	80064c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b087      	sub	sp, #28
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e008      	b.n	80064fe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800651a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006522:	2303      	movs	r3, #3
 8006524:	e004      	b.n	8006530 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800655a:	2303      	movs	r3, #3
 800655c:	e01a      	b.n	8006594 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006564:	2b00      	cmp	r3, #0
 8006566:	d114      	bne.n	8006592 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2201      	movs	r2, #1
 800656c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006586:	2181      	movs	r1, #129	; 0x81
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 fe2a 	bl	80081e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e016      	b.n	80065e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7c1b      	ldrb	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065cc:	2101      	movs	r1, #1
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fe28 	bl	8008224 <USBD_LL_PrepareReceive>
 80065d4:	e007      	b.n	80065e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065dc:	2340      	movs	r3, #64	; 0x40
 80065de:	2101      	movs	r1, #1
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 fe1f 	bl	8008224 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	4613      	mov	r3, r2
 80065fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006604:	2303      	movs	r3, #3
 8006606:	e01f      	b.n	8006648 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	79fa      	ldrb	r2, [r7, #7]
 800663a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f001 fc9b 	bl	8007f78 <USBD_LL_Init>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006664:	2303      	movs	r3, #3
 8006666:	e016      	b.n	8006696 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	f107 020e 	add.w	r2, r7, #14
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	4602      	mov	r2, r0
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fcb2 	bl	8008010 <USBD_LL_Start>
 80066ac:	4603      	mov	r3, r0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80066d8:	2303      	movs	r3, #3
 80066da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	4611      	mov	r1, r2
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	78fa      	ldrb	r2, [r7, #3]
 8006724:	4611      	mov	r1, r2
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
  }

  return USBD_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 ff90 	bl	800766c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800675a:	461a      	mov	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	2b02      	cmp	r3, #2
 800676e:	d01a      	beq.n	80067a6 <USBD_LL_SetupStage+0x72>
 8006770:	2b02      	cmp	r3, #2
 8006772:	d822      	bhi.n	80067ba <USBD_LL_SetupStage+0x86>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <USBD_LL_SetupStage+0x4a>
 8006778:	2b01      	cmp	r3, #1
 800677a:	d00a      	beq.n	8006792 <USBD_LL_SetupStage+0x5e>
 800677c:	e01d      	b.n	80067ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa62 	bl	8006c50 <USBD_StdDevReq>
 800678c:	4603      	mov	r3, r0
 800678e:	73fb      	strb	r3, [r7, #15]
      break;
 8006790:	e020      	b.n	80067d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fac6 	bl	8006d2c <USBD_StdItfReq>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
      break;
 80067a4:	e016      	b.n	80067d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fb05 	bl	8006dbe <USBD_StdEPReq>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]
      break;
 80067b8:	e00c      	b.n	80067d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fc81 	bl	80080d0 <USBD_LL_StallEP>
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]
      break;
 80067d2:	bf00      	nop
  }

  return ret;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	460b      	mov	r3, r1
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80067ec:	7afb      	ldrb	r3, [r7, #11]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d138      	bne.n	8006864 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006800:	2b03      	cmp	r3, #3
 8006802:	d14a      	bne.n	800689a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	429a      	cmp	r2, r3
 800680e:	d913      	bls.n	8006838 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	1ad2      	subs	r2, r2, r3
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	4293      	cmp	r3, r2
 8006828:	bf28      	it	cs
 800682a:	4613      	movcs	r3, r2
 800682c:	461a      	mov	r2, r3
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f001 f80f 	bl	8007854 <USBD_CtlContinueRx>
 8006836:	e030      	b.n	800689a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b03      	cmp	r3, #3
 8006842:	d10b      	bne.n	800685c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f001 f80a 	bl	8007876 <USBD_CtlSendStatus>
 8006862:	e01a      	b.n	800689a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b03      	cmp	r3, #3
 800686e:	d114      	bne.n	800689a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	7afa      	ldrb	r2, [r7, #11]
 8006886:	4611      	mov	r1, r2
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	4798      	blx	r3
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	e000      	b.n	800689c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	460b      	mov	r3, r1
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d16b      	bne.n	8006990 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3314      	adds	r3, #20
 80068bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d156      	bne.n	8006976 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d914      	bls.n	80068fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	1ad2      	subs	r2, r2, r3
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 ff84 	bl	80077f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068f0:	2300      	movs	r3, #0
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f001 fc94 	bl	8008224 <USBD_LL_PrepareReceive>
 80068fc:	e03b      	b.n	8006976 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	429a      	cmp	r2, r3
 8006908:	d11c      	bne.n	8006944 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006912:	429a      	cmp	r2, r3
 8006914:	d316      	bcc.n	8006944 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006920:	429a      	cmp	r2, r3
 8006922:	d20f      	bcs.n	8006944 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006924:	2200      	movs	r2, #0
 8006926:	2100      	movs	r1, #0
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 ff65 	bl	80077f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006936:	2300      	movs	r3, #0
 8006938:	2200      	movs	r2, #0
 800693a:	2100      	movs	r1, #0
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f001 fc71 	bl	8008224 <USBD_LL_PrepareReceive>
 8006942:	e018      	b.n	8006976 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b03      	cmp	r3, #3
 800694e:	d10b      	bne.n	8006968 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006968:	2180      	movs	r1, #128	; 0x80
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f001 fbb0 	bl	80080d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 ff93 	bl	800789c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800697c:	2b01      	cmp	r3, #1
 800697e:	d122      	bne.n	80069c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff fe98 	bl	80066b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800698e:	e01a      	b.n	80069c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b03      	cmp	r3, #3
 800699a:	d114      	bne.n	80069c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00e      	beq.n	80069c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	7afa      	ldrb	r2, [r7, #11]
 80069b2:	4611      	mov	r1, r2
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	4798      	blx	r3
 80069b8:	4603      	mov	r3, r0
 80069ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	e000      	b.n	80069c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e02f      	b.n	8006a64 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00f      	beq.n	8006a2e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6852      	ldr	r2, [r2, #4]
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	4611      	mov	r1, r2
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	2200      	movs	r2, #0
 8006a32:	2100      	movs	r1, #0
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fb06 	bl	8008046 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2240      	movs	r2, #64	; 0x40
 8006a46:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 faf8 	bl	8008046 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2240      	movs	r2, #64	; 0x40
 8006a60:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d106      	bne.n	8006ada <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e012      	b.n	8006b24 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d10b      	bne.n	8006b22 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e014      	b.n	8006b70 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d10d      	bne.n	8006b6e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	78fa      	ldrb	r2, [r7, #3]
 8006b68:	4611      	mov	r1, r2
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e014      	b.n	8006bbc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d10d      	bne.n	8006bba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6852      	ldr	r2, [r2, #4]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	4611      	mov	r1, r2
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
  }

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b087      	sub	sp, #28
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	3301      	adds	r3, #1
 8006c28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c30:	8a3b      	ldrh	r3, [r7, #16]
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	b21a      	sxth	r2, r3
 8006c36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	b21b      	sxth	r3, r3
 8006c3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c40:	89fb      	ldrh	r3, [r7, #14]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d005      	beq.n	8006c76 <USBD_StdDevReq+0x26>
 8006c6a:	2b40      	cmp	r3, #64	; 0x40
 8006c6c:	d853      	bhi.n	8006d16 <USBD_StdDevReq+0xc6>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00b      	beq.n	8006c8a <USBD_StdDevReq+0x3a>
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d14f      	bne.n	8006d16 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
      break;
 8006c88:	e04a      	b.n	8006d20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	785b      	ldrb	r3, [r3, #1]
 8006c8e:	2b09      	cmp	r3, #9
 8006c90:	d83b      	bhi.n	8006d0a <USBD_StdDevReq+0xba>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <USBD_StdDevReq+0x48>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006ced 	.word	0x08006ced
 8006c9c:	08006d01 	.word	0x08006d01
 8006ca0:	08006d0b 	.word	0x08006d0b
 8006ca4:	08006cf7 	.word	0x08006cf7
 8006ca8:	08006d0b 	.word	0x08006d0b
 8006cac:	08006ccb 	.word	0x08006ccb
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006d0b 	.word	0x08006d0b
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	08006cd5 	.word	0x08006cd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9de 	bl	8007084 <USBD_GetDescriptor>
          break;
 8006cc8:	e024      	b.n	8006d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fb43 	bl	8007358 <USBD_SetAddress>
          break;
 8006cd2:	e01f      	b.n	8006d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fb82 	bl	80073e0 <USBD_SetConfig>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
          break;
 8006ce0:	e018      	b.n	8006d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fc21 	bl	800752c <USBD_GetConfig>
          break;
 8006cea:	e013      	b.n	8006d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fc52 	bl	8007598 <USBD_GetStatus>
          break;
 8006cf4:	e00e      	b.n	8006d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fc81 	bl	8007600 <USBD_SetFeature>
          break;
 8006cfe:	e009      	b.n	8006d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fc90 	bl	8007628 <USBD_ClrFeature>
          break;
 8006d08:	e004      	b.n	8006d14 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fce7 	bl	80076e0 <USBD_CtlError>
          break;
 8006d12:	bf00      	nop
      }
      break;
 8006d14:	e004      	b.n	8006d20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fce1 	bl	80076e0 <USBD_CtlError>
      break;
 8006d1e:	bf00      	nop
  }

  return ret;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop

08006d2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d005      	beq.n	8006d52 <USBD_StdItfReq+0x26>
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d82f      	bhi.n	8006daa <USBD_StdItfReq+0x7e>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <USBD_StdItfReq+0x26>
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d12b      	bne.n	8006daa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d81d      	bhi.n	8006d9c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	889b      	ldrh	r3, [r3, #4]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d813      	bhi.n	8006d92 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	88db      	ldrh	r3, [r3, #6]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d110      	bne.n	8006da6 <USBD_StdItfReq+0x7a>
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10d      	bne.n	8006da6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fd73 	bl	8007876 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d90:	e009      	b.n	8006da6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fca3 	bl	80076e0 <USBD_CtlError>
          break;
 8006d9a:	e004      	b.n	8006da6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fc9e 	bl	80076e0 <USBD_CtlError>
          break;
 8006da4:	e000      	b.n	8006da8 <USBD_StdItfReq+0x7c>
          break;
 8006da6:	bf00      	nop
      }
      break;
 8006da8:	e004      	b.n	8006db4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fc97 	bl	80076e0 <USBD_CtlError>
      break;
 8006db2:	bf00      	nop
  }

  return ret;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	889b      	ldrh	r3, [r3, #4]
 8006dd0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d007      	beq.n	8006dee <USBD_StdEPReq+0x30>
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	f200 8145 	bhi.w	800706e <USBD_StdEPReq+0x2b0>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00c      	beq.n	8006e02 <USBD_StdEPReq+0x44>
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	f040 8140 	bne.w	800706e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006e00:	e13a      	b.n	8007078 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d007      	beq.n	8006e1a <USBD_StdEPReq+0x5c>
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	f300 8129 	bgt.w	8007062 <USBD_StdEPReq+0x2a4>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d07f      	beq.n	8006f14 <USBD_StdEPReq+0x156>
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d03c      	beq.n	8006e92 <USBD_StdEPReq+0xd4>
 8006e18:	e123      	b.n	8007062 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d002      	beq.n	8006e2c <USBD_StdEPReq+0x6e>
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d016      	beq.n	8006e58 <USBD_StdEPReq+0x9a>
 8006e2a:	e02c      	b.n	8006e86 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00d      	beq.n	8006e4e <USBD_StdEPReq+0x90>
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b80      	cmp	r3, #128	; 0x80
 8006e36:	d00a      	beq.n	8006e4e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 f947 	bl	80080d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e42:	2180      	movs	r1, #128	; 0x80
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f943 	bl	80080d0 <USBD_LL_StallEP>
 8006e4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e4c:	e020      	b.n	8006e90 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fc45 	bl	80076e0 <USBD_CtlError>
              break;
 8006e56:	e01b      	b.n	8006e90 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	885b      	ldrh	r3, [r3, #2]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10e      	bne.n	8006e7e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <USBD_StdEPReq+0xc0>
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b80      	cmp	r3, #128	; 0x80
 8006e6a:	d008      	beq.n	8006e7e <USBD_StdEPReq+0xc0>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	88db      	ldrh	r3, [r3, #6]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d104      	bne.n	8006e7e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 f929 	bl	80080d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fcf9 	bl	8007876 <USBD_CtlSendStatus>

              break;
 8006e84:	e004      	b.n	8006e90 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc29 	bl	80076e0 <USBD_CtlError>
              break;
 8006e8e:	bf00      	nop
          }
          break;
 8006e90:	e0ec      	b.n	800706c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d002      	beq.n	8006ea4 <USBD_StdEPReq+0xe6>
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d016      	beq.n	8006ed0 <USBD_StdEPReq+0x112>
 8006ea2:	e030      	b.n	8006f06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00d      	beq.n	8006ec6 <USBD_StdEPReq+0x108>
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b80      	cmp	r3, #128	; 0x80
 8006eae:	d00a      	beq.n	8006ec6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 f90b 	bl	80080d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eba:	2180      	movs	r1, #128	; 0x80
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 f907 	bl	80080d0 <USBD_LL_StallEP>
 8006ec2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ec4:	e025      	b.n	8006f12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fc09 	bl	80076e0 <USBD_CtlError>
              break;
 8006ece:	e020      	b.n	8006f12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	885b      	ldrh	r3, [r3, #2]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d11b      	bne.n	8006f10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 f911 	bl	800810e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fcc2 	bl	8007876 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006f04:	e004      	b.n	8006f10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fbe9 	bl	80076e0 <USBD_CtlError>
              break;
 8006f0e:	e000      	b.n	8006f12 <USBD_StdEPReq+0x154>
              break;
 8006f10:	bf00      	nop
          }
          break;
 8006f12:	e0ab      	b.n	800706c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d002      	beq.n	8006f26 <USBD_StdEPReq+0x168>
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d032      	beq.n	8006f8a <USBD_StdEPReq+0x1cc>
 8006f24:	e097      	b.n	8007056 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <USBD_StdEPReq+0x17e>
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d004      	beq.n	8006f3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fbd3 	bl	80076e0 <USBD_CtlError>
                break;
 8006f3a:	e091      	b.n	8007060 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da0b      	bge.n	8006f5c <USBD_StdEPReq+0x19e>
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	3310      	adds	r3, #16
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	3304      	adds	r3, #4
 8006f5a:	e00b      	b.n	8006f74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	4413      	add	r3, r2
 8006f72:	3304      	adds	r3, #4
 8006f74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fc1d 	bl	80077c2 <USBD_CtlSendData>
              break;
 8006f88:	e06a      	b.n	8007060 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	da11      	bge.n	8006fb6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	f003 020f 	and.w	r2, r3, #15
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	3324      	adds	r3, #36	; 0x24
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d117      	bne.n	8006fdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fb96 	bl	80076e0 <USBD_CtlError>
                  break;
 8006fb4:	e054      	b.n	8007060 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fb83 	bl	80076e0 <USBD_CtlError>
                  break;
 8006fda:	e041      	b.n	8007060 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	da0b      	bge.n	8006ffc <USBD_StdEPReq+0x23e>
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	3310      	adds	r3, #16
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	e00b      	b.n	8007014 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	4413      	add	r3, r2
 8007012:	3304      	adds	r3, #4
 8007014:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <USBD_StdEPReq+0x264>
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d103      	bne.n	800702a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	e00e      	b.n	8007048 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 f88c 	bl	800814c <USBD_LL_IsStallEP>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2201      	movs	r2, #1
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e002      	b.n	8007048 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2202      	movs	r2, #2
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fbb7 	bl	80077c2 <USBD_CtlSendData>
              break;
 8007054:	e004      	b.n	8007060 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fb41 	bl	80076e0 <USBD_CtlError>
              break;
 800705e:	bf00      	nop
          }
          break;
 8007060:	e004      	b.n	800706c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fb3b 	bl	80076e0 <USBD_CtlError>
          break;
 800706a:	bf00      	nop
      }
      break;
 800706c:	e004      	b.n	8007078 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fb35 	bl	80076e0 <USBD_CtlError>
      break;
 8007076:	bf00      	nop
  }

  return ret;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	885b      	ldrh	r3, [r3, #2]
 800709e:	0a1b      	lsrs	r3, r3, #8
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	f200 8128 	bhi.w	80072fa <USBD_GetDescriptor+0x276>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <USBD_GetDescriptor+0x2c>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	080070e5 	.word	0x080070e5
 80070b8:	08007125 	.word	0x08007125
 80070bc:	080072fb 	.word	0x080072fb
 80070c0:	080072fb 	.word	0x080072fb
 80070c4:	0800729b 	.word	0x0800729b
 80070c8:	080072c7 	.word	0x080072c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	7c12      	ldrb	r2, [r2, #16]
 80070d8:	f107 0108 	add.w	r1, r7, #8
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	60f8      	str	r0, [r7, #12]
      break;
 80070e2:	e112      	b.n	800730a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	7c1b      	ldrb	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10d      	bne.n	8007108 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	f107 0208 	add.w	r2, r7, #8
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
 80070fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3301      	adds	r3, #1
 8007102:	2202      	movs	r2, #2
 8007104:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007106:	e100      	b.n	800730a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	f107 0208 	add.w	r2, r7, #8
 8007114:	4610      	mov	r0, r2
 8007116:	4798      	blx	r3
 8007118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3301      	adds	r3, #1
 800711e:	2202      	movs	r2, #2
 8007120:	701a      	strb	r2, [r3, #0]
      break;
 8007122:	e0f2      	b.n	800730a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	885b      	ldrh	r3, [r3, #2]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b05      	cmp	r3, #5
 800712c:	f200 80ac 	bhi.w	8007288 <USBD_GetDescriptor+0x204>
 8007130:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <USBD_GetDescriptor+0xb4>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	08007151 	.word	0x08007151
 800713c:	08007185 	.word	0x08007185
 8007140:	080071b9 	.word	0x080071b9
 8007144:	080071ed 	.word	0x080071ed
 8007148:	08007221 	.word	0x08007221
 800714c:	08007255 	.word	0x08007255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	7c12      	ldrb	r2, [r2, #16]
 8007168:	f107 0108 	add.w	r1, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007172:	e091      	b.n	8007298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fab2 	bl	80076e0 <USBD_CtlError>
            err++;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	3301      	adds	r3, #1
 8007180:	72fb      	strb	r3, [r7, #11]
          break;
 8007182:	e089      	b.n	8007298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7c12      	ldrb	r2, [r2, #16]
 800719c:	f107 0108 	add.w	r1, r7, #8
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a6:	e077      	b.n	8007298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa98 	bl	80076e0 <USBD_CtlError>
            err++;
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	3301      	adds	r3, #1
 80071b4:	72fb      	strb	r3, [r7, #11]
          break;
 80071b6:	e06f      	b.n	8007298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071da:	e05d      	b.n	8007298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa7e 	bl	80076e0 <USBD_CtlError>
            err++;
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	3301      	adds	r3, #1
 80071e8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ea:	e055      	b.n	8007298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7c12      	ldrb	r2, [r2, #16]
 8007204:	f107 0108 	add.w	r1, r7, #8
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720e:	e043      	b.n	8007298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa64 	bl	80076e0 <USBD_CtlError>
            err++;
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	3301      	adds	r3, #1
 800721c:	72fb      	strb	r3, [r7, #11]
          break;
 800721e:	e03b      	b.n	8007298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	7c12      	ldrb	r2, [r2, #16]
 8007238:	f107 0108 	add.w	r1, r7, #8
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007242:	e029      	b.n	8007298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa4a 	bl	80076e0 <USBD_CtlError>
            err++;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	3301      	adds	r3, #1
 8007250:	72fb      	strb	r3, [r7, #11]
          break;
 8007252:	e021      	b.n	8007298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7c12      	ldrb	r2, [r2, #16]
 800726c:	f107 0108 	add.w	r1, r7, #8
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007276:	e00f      	b.n	8007298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa30 	bl	80076e0 <USBD_CtlError>
            err++;
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	3301      	adds	r3, #1
 8007284:	72fb      	strb	r3, [r7, #11]
          break;
 8007286:	e007      	b.n	8007298 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa28 	bl	80076e0 <USBD_CtlError>
          err++;
 8007290:	7afb      	ldrb	r3, [r7, #11]
 8007292:	3301      	adds	r3, #1
 8007294:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007296:	bf00      	nop
      }
      break;
 8007298:	e037      	b.n	800730a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7c1b      	ldrb	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072aa:	f107 0208 	add.w	r2, r7, #8
 80072ae:	4610      	mov	r0, r2
 80072b0:	4798      	blx	r3
 80072b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072b4:	e029      	b.n	800730a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fa11 	bl	80076e0 <USBD_CtlError>
        err++;
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	3301      	adds	r3, #1
 80072c2:	72fb      	strb	r3, [r7, #11]
      break;
 80072c4:	e021      	b.n	800730a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	7c1b      	ldrb	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10d      	bne.n	80072ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	f107 0208 	add.w	r2, r7, #8
 80072da:	4610      	mov	r0, r2
 80072dc:	4798      	blx	r3
 80072de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	2207      	movs	r2, #7
 80072e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072e8:	e00f      	b.n	800730a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f9f7 	bl	80076e0 <USBD_CtlError>
        err++;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	3301      	adds	r3, #1
 80072f6:	72fb      	strb	r3, [r7, #11]
      break;
 80072f8:	e007      	b.n	800730a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9ef 	bl	80076e0 <USBD_CtlError>
      err++;
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	3301      	adds	r3, #1
 8007306:	72fb      	strb	r3, [r7, #11]
      break;
 8007308:	bf00      	nop
  }

  if (err != 0U)
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11e      	bne.n	800734e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	88db      	ldrh	r3, [r3, #6]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d016      	beq.n	8007346 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007318:	893b      	ldrh	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00e      	beq.n	800733c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	88da      	ldrh	r2, [r3, #6]
 8007322:	893b      	ldrh	r3, [r7, #8]
 8007324:	4293      	cmp	r3, r2
 8007326:	bf28      	it	cs
 8007328:	4613      	movcs	r3, r2
 800732a:	b29b      	uxth	r3, r3
 800732c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800732e:	893b      	ldrh	r3, [r7, #8]
 8007330:	461a      	mov	r2, r3
 8007332:	68f9      	ldr	r1, [r7, #12]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fa44 	bl	80077c2 <USBD_CtlSendData>
 800733a:	e009      	b.n	8007350 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f9ce 	bl	80076e0 <USBD_CtlError>
 8007344:	e004      	b.n	8007350 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa95 	bl	8007876 <USBD_CtlSendStatus>
 800734c:	e000      	b.n	8007350 <USBD_GetDescriptor+0x2cc>
    return;
 800734e:	bf00      	nop
  }
}
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop

08007358 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	889b      	ldrh	r3, [r3, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d131      	bne.n	80073ce <USBD_SetAddress+0x76>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	88db      	ldrh	r3, [r3, #6]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d12d      	bne.n	80073ce <USBD_SetAddress+0x76>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	885b      	ldrh	r3, [r3, #2]
 8007376:	2b7f      	cmp	r3, #127	; 0x7f
 8007378:	d829      	bhi.n	80073ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	885b      	ldrh	r3, [r3, #2]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007384:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b03      	cmp	r3, #3
 8007390:	d104      	bne.n	800739c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f9a3 	bl	80076e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739a:	e01d      	b.n	80073d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	7bfa      	ldrb	r2, [r7, #15]
 80073a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fefb 	bl	80081a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa61 	bl	8007876 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c2:	e009      	b.n	80073d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073cc:	e004      	b.n	80073d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f985 	bl	80076e0 <USBD_CtlError>
  }
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	4b4c      	ldr	r3, [pc, #304]	; (8007528 <USBD_SetConfig+0x148>)
 80073f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073f8:	4b4b      	ldr	r3, [pc, #300]	; (8007528 <USBD_SetConfig+0x148>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d905      	bls.n	800740c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f96c 	bl	80076e0 <USBD_CtlError>
    return USBD_FAIL;
 8007408:	2303      	movs	r3, #3
 800740a:	e088      	b.n	800751e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d002      	beq.n	800741e <USBD_SetConfig+0x3e>
 8007418:	2b03      	cmp	r3, #3
 800741a:	d025      	beq.n	8007468 <USBD_SetConfig+0x88>
 800741c:	e071      	b.n	8007502 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800741e:	4b42      	ldr	r3, [pc, #264]	; (8007528 <USBD_SetConfig+0x148>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01c      	beq.n	8007460 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007426:	4b40      	ldr	r3, [pc, #256]	; (8007528 <USBD_SetConfig+0x148>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007430:	4b3d      	ldr	r3, [pc, #244]	; (8007528 <USBD_SetConfig+0x148>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff f948 	bl	80066cc <USBD_SetClassConfig>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d004      	beq.n	8007450 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f949 	bl	80076e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800744e:	e065      	b.n	800751c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fa10 	bl	8007876 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2203      	movs	r2, #3
 800745a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800745e:	e05d      	b.n	800751c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fa08 	bl	8007876 <USBD_CtlSendStatus>
      break;
 8007466:	e059      	b.n	800751c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007468:	4b2f      	ldr	r3, [pc, #188]	; (8007528 <USBD_SetConfig+0x148>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d112      	bne.n	8007496 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007478:	4b2b      	ldr	r3, [pc, #172]	; (8007528 <USBD_SetConfig+0x148>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007482:	4b29      	ldr	r3, [pc, #164]	; (8007528 <USBD_SetConfig+0x148>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff f93b 	bl	8006704 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f9f1 	bl	8007876 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007494:	e042      	b.n	800751c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <USBD_SetConfig+0x148>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d02a      	beq.n	80074fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff f929 	bl	8006704 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80074b2:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <USBD_SetConfig+0x148>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074bc:	4b1a      	ldr	r3, [pc, #104]	; (8007528 <USBD_SetConfig+0x148>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff f902 	bl	80066cc <USBD_SetClassConfig>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00f      	beq.n	80074f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f903 	bl	80076e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff f90e 	bl	8006704 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074f0:	e014      	b.n	800751c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9bf 	bl	8007876 <USBD_CtlSendStatus>
      break;
 80074f8:	e010      	b.n	800751c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9bb 	bl	8007876 <USBD_CtlSendStatus>
      break;
 8007500:	e00c      	b.n	800751c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8eb 	bl	80076e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800750a:	4b07      	ldr	r3, [pc, #28]	; (8007528 <USBD_SetConfig+0x148>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff f8f7 	bl	8006704 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007516:	2303      	movs	r3, #3
 8007518:	73fb      	strb	r3, [r7, #15]
      break;
 800751a:	bf00      	nop
  }

  return ret;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	2000020c 	.word	0x2000020c

0800752c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	88db      	ldrh	r3, [r3, #6]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d004      	beq.n	8007548 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8cd 	bl	80076e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007546:	e023      	b.n	8007590 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	dc02      	bgt.n	800755a <USBD_GetConfig+0x2e>
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc03      	bgt.n	8007560 <USBD_GetConfig+0x34>
 8007558:	e015      	b.n	8007586 <USBD_GetConfig+0x5a>
 800755a:	2b03      	cmp	r3, #3
 800755c:	d00b      	beq.n	8007576 <USBD_GetConfig+0x4a>
 800755e:	e012      	b.n	8007586 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3308      	adds	r3, #8
 800756a:	2201      	movs	r2, #1
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f927 	bl	80077c2 <USBD_CtlSendData>
        break;
 8007574:	e00c      	b.n	8007590 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3304      	adds	r3, #4
 800757a:	2201      	movs	r2, #1
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f91f 	bl	80077c2 <USBD_CtlSendData>
        break;
 8007584:	e004      	b.n	8007590 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f8a9 	bl	80076e0 <USBD_CtlError>
        break;
 800758e:	bf00      	nop
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d81e      	bhi.n	80075ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	88db      	ldrh	r3, [r3, #6]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d004      	beq.n	80075c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f890 	bl	80076e0 <USBD_CtlError>
        break;
 80075c0:	e01a      	b.n	80075f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f043 0202 	orr.w	r2, r3, #2
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	330c      	adds	r3, #12
 80075e2:	2202      	movs	r2, #2
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8eb 	bl	80077c2 <USBD_CtlSendData>
      break;
 80075ec:	e004      	b.n	80075f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f875 	bl	80076e0 <USBD_CtlError>
      break;
 80075f6:	bf00      	nop
  }
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	885b      	ldrh	r3, [r3, #2]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d106      	bne.n	8007620 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f92b 	bl	8007876 <USBD_CtlSendStatus>
  }
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007638:	b2db      	uxtb	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	2b02      	cmp	r3, #2
 800763e:	d80b      	bhi.n	8007658 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	885b      	ldrh	r3, [r3, #2]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10c      	bne.n	8007662 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f910 	bl	8007876 <USBD_CtlSendStatus>
      }
      break;
 8007656:	e004      	b.n	8007662 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f840 	bl	80076e0 <USBD_CtlError>
      break;
 8007660:	e000      	b.n	8007664 <USBD_ClrFeature+0x3c>
      break;
 8007662:	bf00      	nop
  }
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3301      	adds	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	781a      	ldrb	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff fabb 	bl	8006c12 <SWAPBYTE>
 800769c:	4603      	mov	r3, r0
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff faae 	bl	8006c12 <SWAPBYTE>
 80076b6:	4603      	mov	r3, r0
 80076b8:	461a      	mov	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff faa1 	bl	8006c12 <SWAPBYTE>
 80076d0:	4603      	mov	r3, r0
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	80da      	strh	r2, [r3, #6]
}
 80076d8:	bf00      	nop
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fcef 	bl	80080d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076f2:	2100      	movs	r1, #0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fceb 	bl	80080d0 <USBD_LL_StallEP>
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b086      	sub	sp, #24
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d036      	beq.n	8007786 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800771c:	6938      	ldr	r0, [r7, #16]
 800771e:	f000 f836 	bl	800778e <USBD_GetLen>
 8007722:	4603      	mov	r3, r0
 8007724:	3301      	adds	r3, #1
 8007726:	b29b      	uxth	r3, r3
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	701a      	strb	r2, [r3, #0]
  idx++;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	3301      	adds	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	2203      	movs	r2, #3
 800774a:	701a      	strb	r2, [r3, #0]
  idx++;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	3301      	adds	r3, #1
 8007750:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007752:	e013      	b.n	800777c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	3301      	adds	r3, #1
 8007764:	613b      	str	r3, [r7, #16]
    idx++;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	3301      	adds	r3, #1
 800776a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	4413      	add	r3, r2
 8007772:	2200      	movs	r2, #0
 8007774:	701a      	strb	r2, [r3, #0]
    idx++;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	3301      	adds	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e7      	bne.n	8007754 <USBD_GetString+0x52>
 8007784:	e000      	b.n	8007788 <USBD_GetString+0x86>
    return;
 8007786:	bf00      	nop
  }
}
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800779e:	e005      	b.n	80077ac <USBD_GetLen+0x1e>
  {
    len++;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	3301      	adds	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3301      	adds	r3, #1
 80077aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1f5      	bne.n	80077a0 <USBD_GetLen+0x12>
  }

  return len;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	2100      	movs	r1, #0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fcfa 	bl	80081e2 <USBD_LL_Transmit>

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	2100      	movs	r1, #0
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fce9 	bl	80081e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2203      	movs	r2, #3
 800782a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	2100      	movs	r1, #0
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fced 	bl	8008224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	2100      	movs	r1, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fcdc 	bl	8008224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2204      	movs	r2, #4
 8007882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007886:	2300      	movs	r3, #0
 8007888:	2200      	movs	r2, #0
 800788a:	2100      	movs	r1, #0
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fca8 	bl	80081e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2205      	movs	r2, #5
 80078a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ac:	2300      	movs	r3, #0
 80078ae:	2200      	movs	r2, #0
 80078b0:	2100      	movs	r1, #0
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fcb6 	bl	8008224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078c8:	2200      	movs	r2, #0
 80078ca:	4912      	ldr	r1, [pc, #72]	; (8007914 <MX_USB_DEVICE_Init+0x50>)
 80078cc:	4812      	ldr	r0, [pc, #72]	; (8007918 <MX_USB_DEVICE_Init+0x54>)
 80078ce:	f7fe fe8f 	bl	80065f0 <USBD_Init>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078d8:	f7f9 f942 	bl	8000b60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078dc:	490f      	ldr	r1, [pc, #60]	; (800791c <MX_USB_DEVICE_Init+0x58>)
 80078de:	480e      	ldr	r0, [pc, #56]	; (8007918 <MX_USB_DEVICE_Init+0x54>)
 80078e0:	f7fe feb6 	bl	8006650 <USBD_RegisterClass>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078ea:	f7f9 f939 	bl	8000b60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078ee:	490c      	ldr	r1, [pc, #48]	; (8007920 <MX_USB_DEVICE_Init+0x5c>)
 80078f0:	4809      	ldr	r0, [pc, #36]	; (8007918 <MX_USB_DEVICE_Init+0x54>)
 80078f2:	f7fe fdd7 	bl	80064a4 <USBD_CDC_RegisterInterface>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078fc:	f7f9 f930 	bl	8000b60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007900:	4805      	ldr	r0, [pc, #20]	; (8007918 <MX_USB_DEVICE_Init+0x54>)
 8007902:	f7fe fecc 	bl	800669e <USBD_Start>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800790c:	f7f9 f928 	bl	8000b60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007910:	bf00      	nop
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000130 	.word	0x20000130
 8007918:	2000067c 	.word	0x2000067c
 800791c:	20000018 	.word	0x20000018
 8007920:	2000011c 	.word	0x2000011c

08007924 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007928:	2200      	movs	r2, #0
 800792a:	4905      	ldr	r1, [pc, #20]	; (8007940 <CDC_Init_FS+0x1c>)
 800792c:	4805      	ldr	r0, [pc, #20]	; (8007944 <CDC_Init_FS+0x20>)
 800792e:	f7fe fdce 	bl	80064ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007932:	4905      	ldr	r1, [pc, #20]	; (8007948 <CDC_Init_FS+0x24>)
 8007934:	4803      	ldr	r0, [pc, #12]	; (8007944 <CDC_Init_FS+0x20>)
 8007936:	f7fe fde8 	bl	800650a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800793a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800793c:	4618      	mov	r0, r3
 800793e:	bd80      	pop	{r7, pc}
 8007940:	2000114c 	.word	0x2000114c
 8007944:	2000067c 	.word	0x2000067c
 8007948:	2000094c 	.word	0x2000094c

0800794c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007950:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007952:	4618      	mov	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
 8007968:	4613      	mov	r3, r2
 800796a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	2b23      	cmp	r3, #35	; 0x23
 8007970:	d84a      	bhi.n	8007a08 <CDC_Control_FS+0xac>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <CDC_Control_FS+0x1c>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007a09 	.word	0x08007a09
 800797c:	08007a09 	.word	0x08007a09
 8007980:	08007a09 	.word	0x08007a09
 8007984:	08007a09 	.word	0x08007a09
 8007988:	08007a09 	.word	0x08007a09
 800798c:	08007a09 	.word	0x08007a09
 8007990:	08007a09 	.word	0x08007a09
 8007994:	08007a09 	.word	0x08007a09
 8007998:	08007a09 	.word	0x08007a09
 800799c:	08007a09 	.word	0x08007a09
 80079a0:	08007a09 	.word	0x08007a09
 80079a4:	08007a09 	.word	0x08007a09
 80079a8:	08007a09 	.word	0x08007a09
 80079ac:	08007a09 	.word	0x08007a09
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007a09 	.word	0x08007a09
 80079bc:	08007a09 	.word	0x08007a09
 80079c0:	08007a09 	.word	0x08007a09
 80079c4:	08007a09 	.word	0x08007a09
 80079c8:	08007a09 	.word	0x08007a09
 80079cc:	08007a09 	.word	0x08007a09
 80079d0:	08007a09 	.word	0x08007a09
 80079d4:	08007a09 	.word	0x08007a09
 80079d8:	08007a09 	.word	0x08007a09
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	08007a09 	.word	0x08007a09
 80079e4:	08007a09 	.word	0x08007a09
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	08007a09 	.word	0x08007a09
 80079f0:	08007a09 	.word	0x08007a09
 80079f4:	08007a09 	.word	0x08007a09
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a09 	.word	0x08007a09
 8007a00:	08007a09 	.word	0x08007a09
 8007a04:	08007a09 	.word	0x08007a09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a08:	bf00      	nop
  }

  return (USBD_OK);
 8007a0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4805      	ldr	r0, [pc, #20]	; (8007a3c <CDC_Receive_FS+0x24>)
 8007a26:	f7fe fd70 	bl	800650a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a2a:	4804      	ldr	r0, [pc, #16]	; (8007a3c <CDC_Receive_FS+0x24>)
 8007a2c:	f7fe fdb6 	bl	800659c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	2000067c 	.word	0x2000067c

08007a40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a50:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <CDC_Transmit_FS+0x48>)
 8007a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e00b      	b.n	8007a7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a66:	887b      	ldrh	r3, [r7, #2]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	4806      	ldr	r0, [pc, #24]	; (8007a88 <CDC_Transmit_FS+0x48>)
 8007a6e:	f7fe fd2e 	bl	80064ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a72:	4805      	ldr	r0, [pc, #20]	; (8007a88 <CDC_Transmit_FS+0x48>)
 8007a74:	f7fe fd62 	bl	800653c <USBD_CDC_TransmitPacket>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	2000067c 	.word	0x2000067c

08007a8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	6039      	str	r1, [r7, #0]
 8007aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2212      	movs	r2, #18
 8007ac0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ac2:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	2000014c 	.word	0x2000014c

08007ad4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ae6:	4b03      	ldr	r3, [pc, #12]	; (8007af4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	20000160 	.word	0x20000160

08007af8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4907      	ldr	r1, [pc, #28]	; (8007b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b0e:	4808      	ldr	r0, [pc, #32]	; (8007b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b10:	f7ff fdf7 	bl	8007702 <USBD_GetString>
 8007b14:	e004      	b.n	8007b20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	4904      	ldr	r1, [pc, #16]	; (8007b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b1a:	4805      	ldr	r0, [pc, #20]	; (8007b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b1c:	f7ff fdf1 	bl	8007702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b20:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	2000194c 	.word	0x2000194c
 8007b30:	08008c3c 	.word	0x08008c3c

08007b34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	4904      	ldr	r1, [pc, #16]	; (8007b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b44:	4804      	ldr	r0, [pc, #16]	; (8007b58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b46:	f7ff fddc 	bl	8007702 <USBD_GetString>
  return USBD_StrDesc;
 8007b4a:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	2000194c 	.word	0x2000194c
 8007b58:	08008c54 	.word	0x08008c54

08007b5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	6039      	str	r1, [r7, #0]
 8007b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	221a      	movs	r2, #26
 8007b6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b6e:	f000 f843 	bl	8007bf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b72:	4b02      	ldr	r3, [pc, #8]	; (8007b7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000164 	.word	0x20000164

08007b80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d105      	bne.n	8007b9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	4907      	ldr	r1, [pc, #28]	; (8007bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b96:	4808      	ldr	r0, [pc, #32]	; (8007bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b98:	f7ff fdb3 	bl	8007702 <USBD_GetString>
 8007b9c:	e004      	b.n	8007ba8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4904      	ldr	r1, [pc, #16]	; (8007bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ba2:	4805      	ldr	r0, [pc, #20]	; (8007bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ba4:	f7ff fdad 	bl	8007702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ba8:	4b02      	ldr	r3, [pc, #8]	; (8007bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	2000194c 	.word	0x2000194c
 8007bb8:	08008c68 	.word	0x08008c68

08007bbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d105      	bne.n	8007bda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4907      	ldr	r1, [pc, #28]	; (8007bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bd2:	4808      	ldr	r0, [pc, #32]	; (8007bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bd4:	f7ff fd95 	bl	8007702 <USBD_GetString>
 8007bd8:	e004      	b.n	8007be4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	4904      	ldr	r1, [pc, #16]	; (8007bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bde:	4805      	ldr	r0, [pc, #20]	; (8007bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007be0:	f7ff fd8f 	bl	8007702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	2000194c 	.word	0x2000194c
 8007bf4:	08008c74 	.word	0x08008c74

08007bf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bfe:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <Get_SerialNum+0x44>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c04:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <Get_SerialNum+0x48>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <Get_SerialNum+0x4c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4413      	add	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c1e:	2208      	movs	r2, #8
 8007c20:	4909      	ldr	r1, [pc, #36]	; (8007c48 <Get_SerialNum+0x50>)
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f814 	bl	8007c50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c28:	2204      	movs	r2, #4
 8007c2a:	4908      	ldr	r1, [pc, #32]	; (8007c4c <Get_SerialNum+0x54>)
 8007c2c:	68b8      	ldr	r0, [r7, #8]
 8007c2e:	f000 f80f 	bl	8007c50 <IntToUnicode>
  }
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	1fff7a10 	.word	0x1fff7a10
 8007c40:	1fff7a14 	.word	0x1fff7a14
 8007c44:	1fff7a18 	.word	0x1fff7a18
 8007c48:	20000166 	.word	0x20000166
 8007c4c:	20000176 	.word	0x20000176

08007c50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c62:	2300      	movs	r3, #0
 8007c64:	75fb      	strb	r3, [r7, #23]
 8007c66:	e027      	b.n	8007cb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	0f1b      	lsrs	r3, r3, #28
 8007c6c:	2b09      	cmp	r3, #9
 8007c6e:	d80b      	bhi.n	8007c88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	0f1b      	lsrs	r3, r3, #28
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	440b      	add	r3, r1
 8007c80:	3230      	adds	r2, #48	; 0x30
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	e00a      	b.n	8007c9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	0f1b      	lsrs	r3, r3, #28
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	4619      	mov	r1, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	440b      	add	r3, r1
 8007c98:	3237      	adds	r2, #55	; 0x37
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	3301      	adds	r3, #1
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	4413      	add	r3, r2
 8007cae:	2200      	movs	r2, #0
 8007cb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
 8007cb8:	7dfa      	ldrb	r2, [r7, #23]
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d3d3      	bcc.n	8007c68 <IntToUnicode+0x18>
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	; 0x28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cd8:	f107 0314 	add.w	r3, r7, #20
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	605a      	str	r2, [r3, #4]
 8007ce2:	609a      	str	r2, [r3, #8]
 8007ce4:	60da      	str	r2, [r3, #12]
 8007ce6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cf0:	d147      	bne.n	8007d82 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	4b25      	ldr	r3, [pc, #148]	; (8007d8c <HAL_PCD_MspInit+0xbc>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	4a24      	ldr	r2, [pc, #144]	; (8007d8c <HAL_PCD_MspInit+0xbc>)
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	6313      	str	r3, [r2, #48]	; 0x30
 8007d02:	4b22      	ldr	r3, [pc, #136]	; (8007d8c <HAL_PCD_MspInit+0xbc>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d1c:	f107 0314 	add.w	r3, r7, #20
 8007d20:	4619      	mov	r1, r3
 8007d22:	481b      	ldr	r0, [pc, #108]	; (8007d90 <HAL_PCD_MspInit+0xc0>)
 8007d24:	f7f9 fea0 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d2e:	2302      	movs	r3, #2
 8007d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d36:	2300      	movs	r3, #0
 8007d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d3a:	230a      	movs	r3, #10
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d3e:	f107 0314 	add.w	r3, r7, #20
 8007d42:	4619      	mov	r1, r3
 8007d44:	4812      	ldr	r0, [pc, #72]	; (8007d90 <HAL_PCD_MspInit+0xc0>)
 8007d46:	f7f9 fe8f 	bl	8001a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d4a:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <HAL_PCD_MspInit+0xbc>)
 8007d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4e:	4a0f      	ldr	r2, [pc, #60]	; (8007d8c <HAL_PCD_MspInit+0xbc>)
 8007d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d54:	6353      	str	r3, [r2, #52]	; 0x34
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <HAL_PCD_MspInit+0xbc>)
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5e:	4a0b      	ldr	r2, [pc, #44]	; (8007d8c <HAL_PCD_MspInit+0xbc>)
 8007d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d64:	6453      	str	r3, [r2, #68]	; 0x44
 8007d66:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <HAL_PCD_MspInit+0xbc>)
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d72:	2200      	movs	r2, #0
 8007d74:	2100      	movs	r1, #0
 8007d76:	2043      	movs	r0, #67	; 0x43
 8007d78:	f7f9 fe3f 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d7c:	2043      	movs	r0, #67	; 0x43
 8007d7e:	f7f9 fe58 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d82:	bf00      	nop
 8007d84:	3728      	adds	r7, #40	; 0x28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40023800 	.word	0x40023800
 8007d90:	40020000 	.word	0x40020000

08007d94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007da8:	4619      	mov	r1, r3
 8007daa:	4610      	mov	r0, r2
 8007dac:	f7fe fcc2 	bl	8006734 <USBD_LL_SetupStage>
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	440b      	add	r3, r1
 8007dd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	4619      	mov	r1, r3
 8007de2:	f7fe fcfc 	bl	80067de <USBD_LL_DataOutStage>
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e00:	78fa      	ldrb	r2, [r7, #3]
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	4613      	mov	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	3348      	adds	r3, #72	; 0x48
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	78fb      	ldrb	r3, [r7, #3]
 8007e14:	4619      	mov	r1, r3
 8007e16:	f7fe fd45 	bl	80068a4 <USBD_LL_DataInStage>
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fe59 	bl	8006ae8 <USBD_LL_SOF>
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e46:	2301      	movs	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]
 8007e56:	e008      	b.n	8007e6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d102      	bne.n	8007e66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e60:	2301      	movs	r3, #1
 8007e62:	73fb      	strb	r3, [r7, #15]
 8007e64:	e001      	b.n	8007e6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e66:	f7f8 fe7b 	bl	8000b60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e70:	7bfa      	ldrb	r2, [r7, #15]
 8007e72:	4611      	mov	r1, r2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fe fdf9 	bl	8006a6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe fda5 	bl	80069d0 <USBD_LL_Reset>
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fdf4 	bl	8006a8c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007eb6:	f043 0301 	orr.w	r3, r3, #1
 8007eba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ec4:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <HAL_PCD_SuspendCallback+0x48>)
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	4a03      	ldr	r2, [pc, #12]	; (8007ed8 <HAL_PCD_SuspendCallback+0x48>)
 8007eca:	f043 0306 	orr.w	r3, r3, #6
 8007ece:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	e000ed00 	.word	0xe000ed00

08007edc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fde4 	bl	8006ab8 <USBD_LL_Resume>
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f0a:	78fa      	ldrb	r2, [r7, #3]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fe32 	bl	8006b78 <USBD_LL_IsoOUTIncomplete>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f2e:	78fa      	ldrb	r2, [r7, #3]
 8007f30:	4611      	mov	r1, r2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fdfa 	bl	8006b2c <USBD_LL_IsoINIncomplete>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fe38 	bl	8006bc4 <USBD_LL_DevConnected>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fe35 	bl	8006bda <USBD_LL_DevDisconnected>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d13c      	bne.n	8008002 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f88:	4a20      	ldr	r2, [pc, #128]	; (800800c <USBD_LL_Init+0x94>)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a1e      	ldr	r2, [pc, #120]	; (800800c <USBD_LL_Init+0x94>)
 8007f94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f98:	4b1c      	ldr	r3, [pc, #112]	; (800800c <USBD_LL_Init+0x94>)
 8007f9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007fa0:	4b1a      	ldr	r3, [pc, #104]	; (800800c <USBD_LL_Init+0x94>)
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fa6:	4b19      	ldr	r3, [pc, #100]	; (800800c <USBD_LL_Init+0x94>)
 8007fa8:	2202      	movs	r2, #2
 8007faa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fac:	4b17      	ldr	r3, [pc, #92]	; (800800c <USBD_LL_Init+0x94>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fb2:	4b16      	ldr	r3, [pc, #88]	; (800800c <USBD_LL_Init+0x94>)
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fb8:	4b14      	ldr	r3, [pc, #80]	; (800800c <USBD_LL_Init+0x94>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <USBD_LL_Init+0x94>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fc4:	4b11      	ldr	r3, [pc, #68]	; (800800c <USBD_LL_Init+0x94>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007fca:	4b10      	ldr	r3, [pc, #64]	; (800800c <USBD_LL_Init+0x94>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fd0:	4b0e      	ldr	r3, [pc, #56]	; (800800c <USBD_LL_Init+0x94>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fd6:	480d      	ldr	r0, [pc, #52]	; (800800c <USBD_LL_Init+0x94>)
 8007fd8:	f7fa fd12 	bl	8002a00 <HAL_PCD_Init>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007fe2:	f7f8 fdbd 	bl	8000b60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007fe6:	2180      	movs	r1, #128	; 0x80
 8007fe8:	4808      	ldr	r0, [pc, #32]	; (800800c <USBD_LL_Init+0x94>)
 8007fea:	f7fb fe70 	bl	8003cce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fee:	2240      	movs	r2, #64	; 0x40
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4806      	ldr	r0, [pc, #24]	; (800800c <USBD_LL_Init+0x94>)
 8007ff4:	f7fb fe24 	bl	8003c40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ff8:	2280      	movs	r2, #128	; 0x80
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4803      	ldr	r0, [pc, #12]	; (800800c <USBD_LL_Init+0x94>)
 8007ffe:	f7fb fe1f 	bl	8003c40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20001b4c 	.word	0x20001b4c

08008010 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008026:	4618      	mov	r0, r3
 8008028:	f7fa fe07 	bl	8002c3a <HAL_PCD_Start>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f942 	bl	80082bc <USBD_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803c:	7bbb      	ldrb	r3, [r7, #14]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	461a      	mov	r2, r3
 8008054:	4603      	mov	r3, r0
 8008056:	70fb      	strb	r3, [r7, #3]
 8008058:	460b      	mov	r3, r1
 800805a:	70bb      	strb	r3, [r7, #2]
 800805c:	4613      	mov	r3, r2
 800805e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800806e:	78bb      	ldrb	r3, [r7, #2]
 8008070:	883a      	ldrh	r2, [r7, #0]
 8008072:	78f9      	ldrb	r1, [r7, #3]
 8008074:	f7fb f9eb 	bl	800344e <HAL_PCD_EP_Open>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f91c 	bl	80082bc <USBD_Get_USB_Status>
 8008084:	4603      	mov	r3, r0
 8008086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008088:	7bbb      	ldrb	r3, [r7, #14]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fb fa34 	bl	800351e <HAL_PCD_EP_Close>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f8fd 	bl	80082bc <USBD_Get_USB_Status>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fb fb0c 	bl	800370c <HAL_PCD_EP_SetStall>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f8de 	bl	80082bc <USBD_Get_USB_Status>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008104:	7bbb      	ldrb	r3, [r7, #14]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	4611      	mov	r1, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f7fb fb51 	bl	80037d4 <HAL_PCD_EP_ClrStall>
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f8bf 	bl	80082bc <USBD_Get_USB_Status>
 800813e:	4603      	mov	r3, r0
 8008140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008142:	7bbb      	ldrb	r3, [r7, #14]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800815e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da0b      	bge.n	8008180 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	4613      	mov	r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	333e      	adds	r3, #62	; 0x3e
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	e00b      	b.n	8008198 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008196:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fb f91e 	bl	8003404 <HAL_PCD_SetAddress>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f874 	bl	80082bc <USBD_Get_USB_Status>
 80081d4:	4603      	mov	r3, r0
 80081d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b086      	sub	sp, #24
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
 80081ee:	460b      	mov	r3, r1
 80081f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008200:	7af9      	ldrb	r1, [r7, #11]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	f7fb fa37 	bl	8003678 <HAL_PCD_EP_Transmit>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	4618      	mov	r0, r3
 8008212:	f000 f853 	bl	80082bc <USBD_Get_USB_Status>
 8008216:	4603      	mov	r3, r0
 8008218:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800821a:	7dbb      	ldrb	r3, [r7, #22]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	607a      	str	r2, [r7, #4]
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	460b      	mov	r3, r1
 8008232:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008242:	7af9      	ldrb	r1, [r7, #11]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	f7fb f9b3 	bl	80035b2 <HAL_PCD_EP_Receive>
 800824c:	4603      	mov	r3, r0
 800824e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f832 	bl	80082bc <USBD_Get_USB_Status>
 8008258:	4603      	mov	r3, r0
 800825a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800825c:	7dbb      	ldrb	r3, [r7, #22]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	4611      	mov	r1, r2
 800827c:	4618      	mov	r0, r3
 800827e:	f7fb f9e3 	bl	8003648 <HAL_PCD_EP_GetRxCount>
 8008282:	4603      	mov	r3, r0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008294:	4b03      	ldr	r3, [pc, #12]	; (80082a4 <USBD_static_malloc+0x18>)
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000210 	.word	0x20000210

080082a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]

}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d817      	bhi.n	8008300 <USBD_Get_USB_Status+0x44>
 80082d0:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <USBD_Get_USB_Status+0x1c>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	080082ef 	.word	0x080082ef
 80082e0:	080082f5 	.word	0x080082f5
 80082e4:	080082fb 	.word	0x080082fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
    break;
 80082ec:	e00b      	b.n	8008306 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082ee:	2303      	movs	r3, #3
 80082f0:	73fb      	strb	r3, [r7, #15]
    break;
 80082f2:	e008      	b.n	8008306 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
    break;
 80082f8:	e005      	b.n	8008306 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082fa:	2303      	movs	r3, #3
 80082fc:	73fb      	strb	r3, [r7, #15]
    break;
 80082fe:	e002      	b.n	8008306 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008300:	2303      	movs	r3, #3
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	bf00      	nop
  }
  return usb_status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <__errno>:
 8008314:	4b01      	ldr	r3, [pc, #4]	; (800831c <__errno+0x8>)
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20000180 	.word	0x20000180

08008320 <__libc_init_array>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	4d0d      	ldr	r5, [pc, #52]	; (8008358 <__libc_init_array+0x38>)
 8008324:	4c0d      	ldr	r4, [pc, #52]	; (800835c <__libc_init_array+0x3c>)
 8008326:	1b64      	subs	r4, r4, r5
 8008328:	10a4      	asrs	r4, r4, #2
 800832a:	2600      	movs	r6, #0
 800832c:	42a6      	cmp	r6, r4
 800832e:	d109      	bne.n	8008344 <__libc_init_array+0x24>
 8008330:	4d0b      	ldr	r5, [pc, #44]	; (8008360 <__libc_init_array+0x40>)
 8008332:	4c0c      	ldr	r4, [pc, #48]	; (8008364 <__libc_init_array+0x44>)
 8008334:	f000 fc62 	bl	8008bfc <_init>
 8008338:	1b64      	subs	r4, r4, r5
 800833a:	10a4      	asrs	r4, r4, #2
 800833c:	2600      	movs	r6, #0
 800833e:	42a6      	cmp	r6, r4
 8008340:	d105      	bne.n	800834e <__libc_init_array+0x2e>
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	f855 3b04 	ldr.w	r3, [r5], #4
 8008348:	4798      	blx	r3
 800834a:	3601      	adds	r6, #1
 800834c:	e7ee      	b.n	800832c <__libc_init_array+0xc>
 800834e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008352:	4798      	blx	r3
 8008354:	3601      	adds	r6, #1
 8008356:	e7f2      	b.n	800833e <__libc_init_array+0x1e>
 8008358:	08008cd8 	.word	0x08008cd8
 800835c:	08008cd8 	.word	0x08008cd8
 8008360:	08008cd8 	.word	0x08008cd8
 8008364:	08008cdc 	.word	0x08008cdc

08008368 <memset>:
 8008368:	4402      	add	r2, r0
 800836a:	4603      	mov	r3, r0
 800836c:	4293      	cmp	r3, r2
 800836e:	d100      	bne.n	8008372 <memset+0xa>
 8008370:	4770      	bx	lr
 8008372:	f803 1b01 	strb.w	r1, [r3], #1
 8008376:	e7f9      	b.n	800836c <memset+0x4>

08008378 <sniprintf>:
 8008378:	b40c      	push	{r2, r3}
 800837a:	b530      	push	{r4, r5, lr}
 800837c:	4b17      	ldr	r3, [pc, #92]	; (80083dc <sniprintf+0x64>)
 800837e:	1e0c      	subs	r4, r1, #0
 8008380:	681d      	ldr	r5, [r3, #0]
 8008382:	b09d      	sub	sp, #116	; 0x74
 8008384:	da08      	bge.n	8008398 <sniprintf+0x20>
 8008386:	238b      	movs	r3, #139	; 0x8b
 8008388:	602b      	str	r3, [r5, #0]
 800838a:	f04f 30ff 	mov.w	r0, #4294967295
 800838e:	b01d      	add	sp, #116	; 0x74
 8008390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008394:	b002      	add	sp, #8
 8008396:	4770      	bx	lr
 8008398:	f44f 7302 	mov.w	r3, #520	; 0x208
 800839c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083a0:	bf14      	ite	ne
 80083a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083a6:	4623      	moveq	r3, r4
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	9307      	str	r3, [sp, #28]
 80083ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083b0:	9002      	str	r0, [sp, #8]
 80083b2:	9006      	str	r0, [sp, #24]
 80083b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083ba:	ab21      	add	r3, sp, #132	; 0x84
 80083bc:	a902      	add	r1, sp, #8
 80083be:	4628      	mov	r0, r5
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	f000 f869 	bl	8008498 <_svfiprintf_r>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	bfbc      	itt	lt
 80083ca:	238b      	movlt	r3, #139	; 0x8b
 80083cc:	602b      	strlt	r3, [r5, #0]
 80083ce:	2c00      	cmp	r4, #0
 80083d0:	d0dd      	beq.n	800838e <sniprintf+0x16>
 80083d2:	9b02      	ldr	r3, [sp, #8]
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e7d9      	b.n	800838e <sniprintf+0x16>
 80083da:	bf00      	nop
 80083dc:	20000180 	.word	0x20000180

080083e0 <__ssputs_r>:
 80083e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e4:	688e      	ldr	r6, [r1, #8]
 80083e6:	429e      	cmp	r6, r3
 80083e8:	4682      	mov	sl, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	4690      	mov	r8, r2
 80083ee:	461f      	mov	r7, r3
 80083f0:	d838      	bhi.n	8008464 <__ssputs_r+0x84>
 80083f2:	898a      	ldrh	r2, [r1, #12]
 80083f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083f8:	d032      	beq.n	8008460 <__ssputs_r+0x80>
 80083fa:	6825      	ldr	r5, [r4, #0]
 80083fc:	6909      	ldr	r1, [r1, #16]
 80083fe:	eba5 0901 	sub.w	r9, r5, r1
 8008402:	6965      	ldr	r5, [r4, #20]
 8008404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800840c:	3301      	adds	r3, #1
 800840e:	444b      	add	r3, r9
 8008410:	106d      	asrs	r5, r5, #1
 8008412:	429d      	cmp	r5, r3
 8008414:	bf38      	it	cc
 8008416:	461d      	movcc	r5, r3
 8008418:	0553      	lsls	r3, r2, #21
 800841a:	d531      	bpl.n	8008480 <__ssputs_r+0xa0>
 800841c:	4629      	mov	r1, r5
 800841e:	f000 fb47 	bl	8008ab0 <_malloc_r>
 8008422:	4606      	mov	r6, r0
 8008424:	b950      	cbnz	r0, 800843c <__ssputs_r+0x5c>
 8008426:	230c      	movs	r3, #12
 8008428:	f8ca 3000 	str.w	r3, [sl]
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843c:	6921      	ldr	r1, [r4, #16]
 800843e:	464a      	mov	r2, r9
 8008440:	f000 fabe 	bl	80089c0 <memcpy>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800844a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	6126      	str	r6, [r4, #16]
 8008452:	6165      	str	r5, [r4, #20]
 8008454:	444e      	add	r6, r9
 8008456:	eba5 0509 	sub.w	r5, r5, r9
 800845a:	6026      	str	r6, [r4, #0]
 800845c:	60a5      	str	r5, [r4, #8]
 800845e:	463e      	mov	r6, r7
 8008460:	42be      	cmp	r6, r7
 8008462:	d900      	bls.n	8008466 <__ssputs_r+0x86>
 8008464:	463e      	mov	r6, r7
 8008466:	4632      	mov	r2, r6
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	4641      	mov	r1, r8
 800846c:	f000 fab6 	bl	80089dc <memmove>
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	1b9b      	subs	r3, r3, r6
 8008476:	4432      	add	r2, r6
 8008478:	60a3      	str	r3, [r4, #8]
 800847a:	6022      	str	r2, [r4, #0]
 800847c:	2000      	movs	r0, #0
 800847e:	e7db      	b.n	8008438 <__ssputs_r+0x58>
 8008480:	462a      	mov	r2, r5
 8008482:	f000 fb6f 	bl	8008b64 <_realloc_r>
 8008486:	4606      	mov	r6, r0
 8008488:	2800      	cmp	r0, #0
 800848a:	d1e1      	bne.n	8008450 <__ssputs_r+0x70>
 800848c:	6921      	ldr	r1, [r4, #16]
 800848e:	4650      	mov	r0, sl
 8008490:	f000 fabe 	bl	8008a10 <_free_r>
 8008494:	e7c7      	b.n	8008426 <__ssputs_r+0x46>
	...

08008498 <_svfiprintf_r>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	4698      	mov	r8, r3
 800849e:	898b      	ldrh	r3, [r1, #12]
 80084a0:	061b      	lsls	r3, r3, #24
 80084a2:	b09d      	sub	sp, #116	; 0x74
 80084a4:	4607      	mov	r7, r0
 80084a6:	460d      	mov	r5, r1
 80084a8:	4614      	mov	r4, r2
 80084aa:	d50e      	bpl.n	80084ca <_svfiprintf_r+0x32>
 80084ac:	690b      	ldr	r3, [r1, #16]
 80084ae:	b963      	cbnz	r3, 80084ca <_svfiprintf_r+0x32>
 80084b0:	2140      	movs	r1, #64	; 0x40
 80084b2:	f000 fafd 	bl	8008ab0 <_malloc_r>
 80084b6:	6028      	str	r0, [r5, #0]
 80084b8:	6128      	str	r0, [r5, #16]
 80084ba:	b920      	cbnz	r0, 80084c6 <_svfiprintf_r+0x2e>
 80084bc:	230c      	movs	r3, #12
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	e0d1      	b.n	800866a <_svfiprintf_r+0x1d2>
 80084c6:	2340      	movs	r3, #64	; 0x40
 80084c8:	616b      	str	r3, [r5, #20]
 80084ca:	2300      	movs	r3, #0
 80084cc:	9309      	str	r3, [sp, #36]	; 0x24
 80084ce:	2320      	movs	r3, #32
 80084d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084d8:	2330      	movs	r3, #48	; 0x30
 80084da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008684 <_svfiprintf_r+0x1ec>
 80084de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084e2:	f04f 0901 	mov.w	r9, #1
 80084e6:	4623      	mov	r3, r4
 80084e8:	469a      	mov	sl, r3
 80084ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ee:	b10a      	cbz	r2, 80084f4 <_svfiprintf_r+0x5c>
 80084f0:	2a25      	cmp	r2, #37	; 0x25
 80084f2:	d1f9      	bne.n	80084e8 <_svfiprintf_r+0x50>
 80084f4:	ebba 0b04 	subs.w	fp, sl, r4
 80084f8:	d00b      	beq.n	8008512 <_svfiprintf_r+0x7a>
 80084fa:	465b      	mov	r3, fp
 80084fc:	4622      	mov	r2, r4
 80084fe:	4629      	mov	r1, r5
 8008500:	4638      	mov	r0, r7
 8008502:	f7ff ff6d 	bl	80083e0 <__ssputs_r>
 8008506:	3001      	adds	r0, #1
 8008508:	f000 80aa 	beq.w	8008660 <_svfiprintf_r+0x1c8>
 800850c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800850e:	445a      	add	r2, fp
 8008510:	9209      	str	r2, [sp, #36]	; 0x24
 8008512:	f89a 3000 	ldrb.w	r3, [sl]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80a2 	beq.w	8008660 <_svfiprintf_r+0x1c8>
 800851c:	2300      	movs	r3, #0
 800851e:	f04f 32ff 	mov.w	r2, #4294967295
 8008522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008526:	f10a 0a01 	add.w	sl, sl, #1
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	9307      	str	r3, [sp, #28]
 800852e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008532:	931a      	str	r3, [sp, #104]	; 0x68
 8008534:	4654      	mov	r4, sl
 8008536:	2205      	movs	r2, #5
 8008538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853c:	4851      	ldr	r0, [pc, #324]	; (8008684 <_svfiprintf_r+0x1ec>)
 800853e:	f7f7 fe4f 	bl	80001e0 <memchr>
 8008542:	9a04      	ldr	r2, [sp, #16]
 8008544:	b9d8      	cbnz	r0, 800857e <_svfiprintf_r+0xe6>
 8008546:	06d0      	lsls	r0, r2, #27
 8008548:	bf44      	itt	mi
 800854a:	2320      	movmi	r3, #32
 800854c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008550:	0711      	lsls	r1, r2, #28
 8008552:	bf44      	itt	mi
 8008554:	232b      	movmi	r3, #43	; 0x2b
 8008556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800855a:	f89a 3000 	ldrb.w	r3, [sl]
 800855e:	2b2a      	cmp	r3, #42	; 0x2a
 8008560:	d015      	beq.n	800858e <_svfiprintf_r+0xf6>
 8008562:	9a07      	ldr	r2, [sp, #28]
 8008564:	4654      	mov	r4, sl
 8008566:	2000      	movs	r0, #0
 8008568:	f04f 0c0a 	mov.w	ip, #10
 800856c:	4621      	mov	r1, r4
 800856e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008572:	3b30      	subs	r3, #48	; 0x30
 8008574:	2b09      	cmp	r3, #9
 8008576:	d94e      	bls.n	8008616 <_svfiprintf_r+0x17e>
 8008578:	b1b0      	cbz	r0, 80085a8 <_svfiprintf_r+0x110>
 800857a:	9207      	str	r2, [sp, #28]
 800857c:	e014      	b.n	80085a8 <_svfiprintf_r+0x110>
 800857e:	eba0 0308 	sub.w	r3, r0, r8
 8008582:	fa09 f303 	lsl.w	r3, r9, r3
 8008586:	4313      	orrs	r3, r2
 8008588:	9304      	str	r3, [sp, #16]
 800858a:	46a2      	mov	sl, r4
 800858c:	e7d2      	b.n	8008534 <_svfiprintf_r+0x9c>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	1d19      	adds	r1, r3, #4
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	9103      	str	r1, [sp, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	bfbb      	ittet	lt
 800859a:	425b      	neglt	r3, r3
 800859c:	f042 0202 	orrlt.w	r2, r2, #2
 80085a0:	9307      	strge	r3, [sp, #28]
 80085a2:	9307      	strlt	r3, [sp, #28]
 80085a4:	bfb8      	it	lt
 80085a6:	9204      	strlt	r2, [sp, #16]
 80085a8:	7823      	ldrb	r3, [r4, #0]
 80085aa:	2b2e      	cmp	r3, #46	; 0x2e
 80085ac:	d10c      	bne.n	80085c8 <_svfiprintf_r+0x130>
 80085ae:	7863      	ldrb	r3, [r4, #1]
 80085b0:	2b2a      	cmp	r3, #42	; 0x2a
 80085b2:	d135      	bne.n	8008620 <_svfiprintf_r+0x188>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	1d1a      	adds	r2, r3, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	9203      	str	r2, [sp, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bfb8      	it	lt
 80085c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80085c4:	3402      	adds	r4, #2
 80085c6:	9305      	str	r3, [sp, #20]
 80085c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008694 <_svfiprintf_r+0x1fc>
 80085cc:	7821      	ldrb	r1, [r4, #0]
 80085ce:	2203      	movs	r2, #3
 80085d0:	4650      	mov	r0, sl
 80085d2:	f7f7 fe05 	bl	80001e0 <memchr>
 80085d6:	b140      	cbz	r0, 80085ea <_svfiprintf_r+0x152>
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	eba0 000a 	sub.w	r0, r0, sl
 80085de:	fa03 f000 	lsl.w	r0, r3, r0
 80085e2:	9b04      	ldr	r3, [sp, #16]
 80085e4:	4303      	orrs	r3, r0
 80085e6:	3401      	adds	r4, #1
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ee:	4826      	ldr	r0, [pc, #152]	; (8008688 <_svfiprintf_r+0x1f0>)
 80085f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085f4:	2206      	movs	r2, #6
 80085f6:	f7f7 fdf3 	bl	80001e0 <memchr>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d038      	beq.n	8008670 <_svfiprintf_r+0x1d8>
 80085fe:	4b23      	ldr	r3, [pc, #140]	; (800868c <_svfiprintf_r+0x1f4>)
 8008600:	bb1b      	cbnz	r3, 800864a <_svfiprintf_r+0x1b2>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	3307      	adds	r3, #7
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	3308      	adds	r3, #8
 800860c:	9303      	str	r3, [sp, #12]
 800860e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008610:	4433      	add	r3, r6
 8008612:	9309      	str	r3, [sp, #36]	; 0x24
 8008614:	e767      	b.n	80084e6 <_svfiprintf_r+0x4e>
 8008616:	fb0c 3202 	mla	r2, ip, r2, r3
 800861a:	460c      	mov	r4, r1
 800861c:	2001      	movs	r0, #1
 800861e:	e7a5      	b.n	800856c <_svfiprintf_r+0xd4>
 8008620:	2300      	movs	r3, #0
 8008622:	3401      	adds	r4, #1
 8008624:	9305      	str	r3, [sp, #20]
 8008626:	4619      	mov	r1, r3
 8008628:	f04f 0c0a 	mov.w	ip, #10
 800862c:	4620      	mov	r0, r4
 800862e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008632:	3a30      	subs	r2, #48	; 0x30
 8008634:	2a09      	cmp	r2, #9
 8008636:	d903      	bls.n	8008640 <_svfiprintf_r+0x1a8>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0c5      	beq.n	80085c8 <_svfiprintf_r+0x130>
 800863c:	9105      	str	r1, [sp, #20]
 800863e:	e7c3      	b.n	80085c8 <_svfiprintf_r+0x130>
 8008640:	fb0c 2101 	mla	r1, ip, r1, r2
 8008644:	4604      	mov	r4, r0
 8008646:	2301      	movs	r3, #1
 8008648:	e7f0      	b.n	800862c <_svfiprintf_r+0x194>
 800864a:	ab03      	add	r3, sp, #12
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	462a      	mov	r2, r5
 8008650:	4b0f      	ldr	r3, [pc, #60]	; (8008690 <_svfiprintf_r+0x1f8>)
 8008652:	a904      	add	r1, sp, #16
 8008654:	4638      	mov	r0, r7
 8008656:	f3af 8000 	nop.w
 800865a:	1c42      	adds	r2, r0, #1
 800865c:	4606      	mov	r6, r0
 800865e:	d1d6      	bne.n	800860e <_svfiprintf_r+0x176>
 8008660:	89ab      	ldrh	r3, [r5, #12]
 8008662:	065b      	lsls	r3, r3, #25
 8008664:	f53f af2c 	bmi.w	80084c0 <_svfiprintf_r+0x28>
 8008668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800866a:	b01d      	add	sp, #116	; 0x74
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	ab03      	add	r3, sp, #12
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	462a      	mov	r2, r5
 8008676:	4b06      	ldr	r3, [pc, #24]	; (8008690 <_svfiprintf_r+0x1f8>)
 8008678:	a904      	add	r1, sp, #16
 800867a:	4638      	mov	r0, r7
 800867c:	f000 f87a 	bl	8008774 <_printf_i>
 8008680:	e7eb      	b.n	800865a <_svfiprintf_r+0x1c2>
 8008682:	bf00      	nop
 8008684:	08008c9c 	.word	0x08008c9c
 8008688:	08008ca6 	.word	0x08008ca6
 800868c:	00000000 	.word	0x00000000
 8008690:	080083e1 	.word	0x080083e1
 8008694:	08008ca2 	.word	0x08008ca2

08008698 <_printf_common>:
 8008698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	4616      	mov	r6, r2
 800869e:	4699      	mov	r9, r3
 80086a0:	688a      	ldr	r2, [r1, #8]
 80086a2:	690b      	ldr	r3, [r1, #16]
 80086a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086a8:	4293      	cmp	r3, r2
 80086aa:	bfb8      	it	lt
 80086ac:	4613      	movlt	r3, r2
 80086ae:	6033      	str	r3, [r6, #0]
 80086b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086b4:	4607      	mov	r7, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	b10a      	cbz	r2, 80086be <_printf_common+0x26>
 80086ba:	3301      	adds	r3, #1
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	0699      	lsls	r1, r3, #26
 80086c2:	bf42      	ittt	mi
 80086c4:	6833      	ldrmi	r3, [r6, #0]
 80086c6:	3302      	addmi	r3, #2
 80086c8:	6033      	strmi	r3, [r6, #0]
 80086ca:	6825      	ldr	r5, [r4, #0]
 80086cc:	f015 0506 	ands.w	r5, r5, #6
 80086d0:	d106      	bne.n	80086e0 <_printf_common+0x48>
 80086d2:	f104 0a19 	add.w	sl, r4, #25
 80086d6:	68e3      	ldr	r3, [r4, #12]
 80086d8:	6832      	ldr	r2, [r6, #0]
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	42ab      	cmp	r3, r5
 80086de:	dc26      	bgt.n	800872e <_printf_common+0x96>
 80086e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e4:	1e13      	subs	r3, r2, #0
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	bf18      	it	ne
 80086ea:	2301      	movne	r3, #1
 80086ec:	0692      	lsls	r2, r2, #26
 80086ee:	d42b      	bmi.n	8008748 <_printf_common+0xb0>
 80086f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f4:	4649      	mov	r1, r9
 80086f6:	4638      	mov	r0, r7
 80086f8:	47c0      	blx	r8
 80086fa:	3001      	adds	r0, #1
 80086fc:	d01e      	beq.n	800873c <_printf_common+0xa4>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	68e5      	ldr	r5, [r4, #12]
 8008702:	6832      	ldr	r2, [r6, #0]
 8008704:	f003 0306 	and.w	r3, r3, #6
 8008708:	2b04      	cmp	r3, #4
 800870a:	bf08      	it	eq
 800870c:	1aad      	subeq	r5, r5, r2
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	6922      	ldr	r2, [r4, #16]
 8008712:	bf0c      	ite	eq
 8008714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008718:	2500      	movne	r5, #0
 800871a:	4293      	cmp	r3, r2
 800871c:	bfc4      	itt	gt
 800871e:	1a9b      	subgt	r3, r3, r2
 8008720:	18ed      	addgt	r5, r5, r3
 8008722:	2600      	movs	r6, #0
 8008724:	341a      	adds	r4, #26
 8008726:	42b5      	cmp	r5, r6
 8008728:	d11a      	bne.n	8008760 <_printf_common+0xc8>
 800872a:	2000      	movs	r0, #0
 800872c:	e008      	b.n	8008740 <_printf_common+0xa8>
 800872e:	2301      	movs	r3, #1
 8008730:	4652      	mov	r2, sl
 8008732:	4649      	mov	r1, r9
 8008734:	4638      	mov	r0, r7
 8008736:	47c0      	blx	r8
 8008738:	3001      	adds	r0, #1
 800873a:	d103      	bne.n	8008744 <_printf_common+0xac>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	3501      	adds	r5, #1
 8008746:	e7c6      	b.n	80086d6 <_printf_common+0x3e>
 8008748:	18e1      	adds	r1, r4, r3
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	2030      	movs	r0, #48	; 0x30
 800874e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008752:	4422      	add	r2, r4
 8008754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800875c:	3302      	adds	r3, #2
 800875e:	e7c7      	b.n	80086f0 <_printf_common+0x58>
 8008760:	2301      	movs	r3, #1
 8008762:	4622      	mov	r2, r4
 8008764:	4649      	mov	r1, r9
 8008766:	4638      	mov	r0, r7
 8008768:	47c0      	blx	r8
 800876a:	3001      	adds	r0, #1
 800876c:	d0e6      	beq.n	800873c <_printf_common+0xa4>
 800876e:	3601      	adds	r6, #1
 8008770:	e7d9      	b.n	8008726 <_printf_common+0x8e>
	...

08008774 <_printf_i>:
 8008774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	460c      	mov	r4, r1
 800877a:	4691      	mov	r9, r2
 800877c:	7e27      	ldrb	r7, [r4, #24]
 800877e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008780:	2f78      	cmp	r7, #120	; 0x78
 8008782:	4680      	mov	r8, r0
 8008784:	469a      	mov	sl, r3
 8008786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800878a:	d807      	bhi.n	800879c <_printf_i+0x28>
 800878c:	2f62      	cmp	r7, #98	; 0x62
 800878e:	d80a      	bhi.n	80087a6 <_printf_i+0x32>
 8008790:	2f00      	cmp	r7, #0
 8008792:	f000 80d8 	beq.w	8008946 <_printf_i+0x1d2>
 8008796:	2f58      	cmp	r7, #88	; 0x58
 8008798:	f000 80a3 	beq.w	80088e2 <_printf_i+0x16e>
 800879c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a4:	e03a      	b.n	800881c <_printf_i+0xa8>
 80087a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087aa:	2b15      	cmp	r3, #21
 80087ac:	d8f6      	bhi.n	800879c <_printf_i+0x28>
 80087ae:	a001      	add	r0, pc, #4	; (adr r0, 80087b4 <_printf_i+0x40>)
 80087b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087b4:	0800880d 	.word	0x0800880d
 80087b8:	08008821 	.word	0x08008821
 80087bc:	0800879d 	.word	0x0800879d
 80087c0:	0800879d 	.word	0x0800879d
 80087c4:	0800879d 	.word	0x0800879d
 80087c8:	0800879d 	.word	0x0800879d
 80087cc:	08008821 	.word	0x08008821
 80087d0:	0800879d 	.word	0x0800879d
 80087d4:	0800879d 	.word	0x0800879d
 80087d8:	0800879d 	.word	0x0800879d
 80087dc:	0800879d 	.word	0x0800879d
 80087e0:	0800892d 	.word	0x0800892d
 80087e4:	08008851 	.word	0x08008851
 80087e8:	0800890f 	.word	0x0800890f
 80087ec:	0800879d 	.word	0x0800879d
 80087f0:	0800879d 	.word	0x0800879d
 80087f4:	0800894f 	.word	0x0800894f
 80087f8:	0800879d 	.word	0x0800879d
 80087fc:	08008851 	.word	0x08008851
 8008800:	0800879d 	.word	0x0800879d
 8008804:	0800879d 	.word	0x0800879d
 8008808:	08008917 	.word	0x08008917
 800880c:	680b      	ldr	r3, [r1, #0]
 800880e:	1d1a      	adds	r2, r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	600a      	str	r2, [r1, #0]
 8008814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800881c:	2301      	movs	r3, #1
 800881e:	e0a3      	b.n	8008968 <_printf_i+0x1f4>
 8008820:	6825      	ldr	r5, [r4, #0]
 8008822:	6808      	ldr	r0, [r1, #0]
 8008824:	062e      	lsls	r6, r5, #24
 8008826:	f100 0304 	add.w	r3, r0, #4
 800882a:	d50a      	bpl.n	8008842 <_printf_i+0xce>
 800882c:	6805      	ldr	r5, [r0, #0]
 800882e:	600b      	str	r3, [r1, #0]
 8008830:	2d00      	cmp	r5, #0
 8008832:	da03      	bge.n	800883c <_printf_i+0xc8>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	426d      	negs	r5, r5
 8008838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883c:	485e      	ldr	r0, [pc, #376]	; (80089b8 <_printf_i+0x244>)
 800883e:	230a      	movs	r3, #10
 8008840:	e019      	b.n	8008876 <_printf_i+0x102>
 8008842:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008846:	6805      	ldr	r5, [r0, #0]
 8008848:	600b      	str	r3, [r1, #0]
 800884a:	bf18      	it	ne
 800884c:	b22d      	sxthne	r5, r5
 800884e:	e7ef      	b.n	8008830 <_printf_i+0xbc>
 8008850:	680b      	ldr	r3, [r1, #0]
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	1d18      	adds	r0, r3, #4
 8008856:	6008      	str	r0, [r1, #0]
 8008858:	0628      	lsls	r0, r5, #24
 800885a:	d501      	bpl.n	8008860 <_printf_i+0xec>
 800885c:	681d      	ldr	r5, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0xf2>
 8008860:	0669      	lsls	r1, r5, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0xe8>
 8008864:	881d      	ldrh	r5, [r3, #0]
 8008866:	4854      	ldr	r0, [pc, #336]	; (80089b8 <_printf_i+0x244>)
 8008868:	2f6f      	cmp	r7, #111	; 0x6f
 800886a:	bf0c      	ite	eq
 800886c:	2308      	moveq	r3, #8
 800886e:	230a      	movne	r3, #10
 8008870:	2100      	movs	r1, #0
 8008872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008876:	6866      	ldr	r6, [r4, #4]
 8008878:	60a6      	str	r6, [r4, #8]
 800887a:	2e00      	cmp	r6, #0
 800887c:	bfa2      	ittt	ge
 800887e:	6821      	ldrge	r1, [r4, #0]
 8008880:	f021 0104 	bicge.w	r1, r1, #4
 8008884:	6021      	strge	r1, [r4, #0]
 8008886:	b90d      	cbnz	r5, 800888c <_printf_i+0x118>
 8008888:	2e00      	cmp	r6, #0
 800888a:	d04d      	beq.n	8008928 <_printf_i+0x1b4>
 800888c:	4616      	mov	r6, r2
 800888e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008892:	fb03 5711 	mls	r7, r3, r1, r5
 8008896:	5dc7      	ldrb	r7, [r0, r7]
 8008898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800889c:	462f      	mov	r7, r5
 800889e:	42bb      	cmp	r3, r7
 80088a0:	460d      	mov	r5, r1
 80088a2:	d9f4      	bls.n	800888e <_printf_i+0x11a>
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d10b      	bne.n	80088c0 <_printf_i+0x14c>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07df      	lsls	r7, r3, #31
 80088ac:	d508      	bpl.n	80088c0 <_printf_i+0x14c>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	6861      	ldr	r1, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	bfde      	ittt	le
 80088b6:	2330      	movle	r3, #48	; 0x30
 80088b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088c0:	1b92      	subs	r2, r2, r6
 80088c2:	6122      	str	r2, [r4, #16]
 80088c4:	f8cd a000 	str.w	sl, [sp]
 80088c8:	464b      	mov	r3, r9
 80088ca:	aa03      	add	r2, sp, #12
 80088cc:	4621      	mov	r1, r4
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff fee2 	bl	8008698 <_printf_common>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d14c      	bne.n	8008972 <_printf_i+0x1fe>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	b004      	add	sp, #16
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	4835      	ldr	r0, [pc, #212]	; (80089b8 <_printf_i+0x244>)
 80088e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	680e      	ldr	r6, [r1, #0]
 80088ec:	061f      	lsls	r7, r3, #24
 80088ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80088f2:	600e      	str	r6, [r1, #0]
 80088f4:	d514      	bpl.n	8008920 <_printf_i+0x1ac>
 80088f6:	07d9      	lsls	r1, r3, #31
 80088f8:	bf44      	itt	mi
 80088fa:	f043 0320 	orrmi.w	r3, r3, #32
 80088fe:	6023      	strmi	r3, [r4, #0]
 8008900:	b91d      	cbnz	r5, 800890a <_printf_i+0x196>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	f023 0320 	bic.w	r3, r3, #32
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	2310      	movs	r3, #16
 800890c:	e7b0      	b.n	8008870 <_printf_i+0xfc>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f043 0320 	orr.w	r3, r3, #32
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	2378      	movs	r3, #120	; 0x78
 8008918:	4828      	ldr	r0, [pc, #160]	; (80089bc <_printf_i+0x248>)
 800891a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800891e:	e7e3      	b.n	80088e8 <_printf_i+0x174>
 8008920:	065e      	lsls	r6, r3, #25
 8008922:	bf48      	it	mi
 8008924:	b2ad      	uxthmi	r5, r5
 8008926:	e7e6      	b.n	80088f6 <_printf_i+0x182>
 8008928:	4616      	mov	r6, r2
 800892a:	e7bb      	b.n	80088a4 <_printf_i+0x130>
 800892c:	680b      	ldr	r3, [r1, #0]
 800892e:	6826      	ldr	r6, [r4, #0]
 8008930:	6960      	ldr	r0, [r4, #20]
 8008932:	1d1d      	adds	r5, r3, #4
 8008934:	600d      	str	r5, [r1, #0]
 8008936:	0635      	lsls	r5, r6, #24
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	d501      	bpl.n	8008940 <_printf_i+0x1cc>
 800893c:	6018      	str	r0, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0x1d2>
 8008940:	0671      	lsls	r1, r6, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0x1c8>
 8008944:	8018      	strh	r0, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	4616      	mov	r6, r2
 800894c:	e7ba      	b.n	80088c4 <_printf_i+0x150>
 800894e:	680b      	ldr	r3, [r1, #0]
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	600a      	str	r2, [r1, #0]
 8008954:	681e      	ldr	r6, [r3, #0]
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	2100      	movs	r1, #0
 800895a:	4630      	mov	r0, r6
 800895c:	f7f7 fc40 	bl	80001e0 <memchr>
 8008960:	b108      	cbz	r0, 8008966 <_printf_i+0x1f2>
 8008962:	1b80      	subs	r0, r0, r6
 8008964:	6060      	str	r0, [r4, #4]
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008970:	e7a8      	b.n	80088c4 <_printf_i+0x150>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	4632      	mov	r2, r6
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	47d0      	blx	sl
 800897c:	3001      	adds	r0, #1
 800897e:	d0ab      	beq.n	80088d8 <_printf_i+0x164>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	d413      	bmi.n	80089ae <_printf_i+0x23a>
 8008986:	68e0      	ldr	r0, [r4, #12]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	4298      	cmp	r0, r3
 800898c:	bfb8      	it	lt
 800898e:	4618      	movlt	r0, r3
 8008990:	e7a4      	b.n	80088dc <_printf_i+0x168>
 8008992:	2301      	movs	r3, #1
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d09b      	beq.n	80088d8 <_printf_i+0x164>
 80089a0:	3501      	adds	r5, #1
 80089a2:	68e3      	ldr	r3, [r4, #12]
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	1a5b      	subs	r3, r3, r1
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dcf2      	bgt.n	8008992 <_printf_i+0x21e>
 80089ac:	e7eb      	b.n	8008986 <_printf_i+0x212>
 80089ae:	2500      	movs	r5, #0
 80089b0:	f104 0619 	add.w	r6, r4, #25
 80089b4:	e7f5      	b.n	80089a2 <_printf_i+0x22e>
 80089b6:	bf00      	nop
 80089b8:	08008cad 	.word	0x08008cad
 80089bc:	08008cbe 	.word	0x08008cbe

080089c0 <memcpy>:
 80089c0:	440a      	add	r2, r1
 80089c2:	4291      	cmp	r1, r2
 80089c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089c8:	d100      	bne.n	80089cc <memcpy+0xc>
 80089ca:	4770      	bx	lr
 80089cc:	b510      	push	{r4, lr}
 80089ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d6:	4291      	cmp	r1, r2
 80089d8:	d1f9      	bne.n	80089ce <memcpy+0xe>
 80089da:	bd10      	pop	{r4, pc}

080089dc <memmove>:
 80089dc:	4288      	cmp	r0, r1
 80089de:	b510      	push	{r4, lr}
 80089e0:	eb01 0402 	add.w	r4, r1, r2
 80089e4:	d902      	bls.n	80089ec <memmove+0x10>
 80089e6:	4284      	cmp	r4, r0
 80089e8:	4623      	mov	r3, r4
 80089ea:	d807      	bhi.n	80089fc <memmove+0x20>
 80089ec:	1e43      	subs	r3, r0, #1
 80089ee:	42a1      	cmp	r1, r4
 80089f0:	d008      	beq.n	8008a04 <memmove+0x28>
 80089f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089fa:	e7f8      	b.n	80089ee <memmove+0x12>
 80089fc:	4402      	add	r2, r0
 80089fe:	4601      	mov	r1, r0
 8008a00:	428a      	cmp	r2, r1
 8008a02:	d100      	bne.n	8008a06 <memmove+0x2a>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a0e:	e7f7      	b.n	8008a00 <memmove+0x24>

08008a10 <_free_r>:
 8008a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a12:	2900      	cmp	r1, #0
 8008a14:	d048      	beq.n	8008aa8 <_free_r+0x98>
 8008a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1a:	9001      	str	r0, [sp, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a22:	bfb8      	it	lt
 8008a24:	18e4      	addlt	r4, r4, r3
 8008a26:	f000 f8d3 	bl	8008bd0 <__malloc_lock>
 8008a2a:	4a20      	ldr	r2, [pc, #128]	; (8008aac <_free_r+0x9c>)
 8008a2c:	9801      	ldr	r0, [sp, #4]
 8008a2e:	6813      	ldr	r3, [r2, #0]
 8008a30:	4615      	mov	r5, r2
 8008a32:	b933      	cbnz	r3, 8008a42 <_free_r+0x32>
 8008a34:	6063      	str	r3, [r4, #4]
 8008a36:	6014      	str	r4, [r2, #0]
 8008a38:	b003      	add	sp, #12
 8008a3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a3e:	f000 b8cd 	b.w	8008bdc <__malloc_unlock>
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	d90b      	bls.n	8008a5e <_free_r+0x4e>
 8008a46:	6821      	ldr	r1, [r4, #0]
 8008a48:	1862      	adds	r2, r4, r1
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	bf04      	itt	eq
 8008a4e:	681a      	ldreq	r2, [r3, #0]
 8008a50:	685b      	ldreq	r3, [r3, #4]
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	bf04      	itt	eq
 8008a56:	1852      	addeq	r2, r2, r1
 8008a58:	6022      	streq	r2, [r4, #0]
 8008a5a:	602c      	str	r4, [r5, #0]
 8008a5c:	e7ec      	b.n	8008a38 <_free_r+0x28>
 8008a5e:	461a      	mov	r2, r3
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	b10b      	cbz	r3, 8008a68 <_free_r+0x58>
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d9fa      	bls.n	8008a5e <_free_r+0x4e>
 8008a68:	6811      	ldr	r1, [r2, #0]
 8008a6a:	1855      	adds	r5, r2, r1
 8008a6c:	42a5      	cmp	r5, r4
 8008a6e:	d10b      	bne.n	8008a88 <_free_r+0x78>
 8008a70:	6824      	ldr	r4, [r4, #0]
 8008a72:	4421      	add	r1, r4
 8008a74:	1854      	adds	r4, r2, r1
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	6011      	str	r1, [r2, #0]
 8008a7a:	d1dd      	bne.n	8008a38 <_free_r+0x28>
 8008a7c:	681c      	ldr	r4, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	6053      	str	r3, [r2, #4]
 8008a82:	4421      	add	r1, r4
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	e7d7      	b.n	8008a38 <_free_r+0x28>
 8008a88:	d902      	bls.n	8008a90 <_free_r+0x80>
 8008a8a:	230c      	movs	r3, #12
 8008a8c:	6003      	str	r3, [r0, #0]
 8008a8e:	e7d3      	b.n	8008a38 <_free_r+0x28>
 8008a90:	6825      	ldr	r5, [r4, #0]
 8008a92:	1961      	adds	r1, r4, r5
 8008a94:	428b      	cmp	r3, r1
 8008a96:	bf04      	itt	eq
 8008a98:	6819      	ldreq	r1, [r3, #0]
 8008a9a:	685b      	ldreq	r3, [r3, #4]
 8008a9c:	6063      	str	r3, [r4, #4]
 8008a9e:	bf04      	itt	eq
 8008aa0:	1949      	addeq	r1, r1, r5
 8008aa2:	6021      	streq	r1, [r4, #0]
 8008aa4:	6054      	str	r4, [r2, #4]
 8008aa6:	e7c7      	b.n	8008a38 <_free_r+0x28>
 8008aa8:	b003      	add	sp, #12
 8008aaa:	bd30      	pop	{r4, r5, pc}
 8008aac:	20000430 	.word	0x20000430

08008ab0 <_malloc_r>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	1ccd      	adds	r5, r1, #3
 8008ab4:	f025 0503 	bic.w	r5, r5, #3
 8008ab8:	3508      	adds	r5, #8
 8008aba:	2d0c      	cmp	r5, #12
 8008abc:	bf38      	it	cc
 8008abe:	250c      	movcc	r5, #12
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	db01      	blt.n	8008aca <_malloc_r+0x1a>
 8008ac6:	42a9      	cmp	r1, r5
 8008ac8:	d903      	bls.n	8008ad2 <_malloc_r+0x22>
 8008aca:	230c      	movs	r3, #12
 8008acc:	6033      	str	r3, [r6, #0]
 8008ace:	2000      	movs	r0, #0
 8008ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ad2:	f000 f87d 	bl	8008bd0 <__malloc_lock>
 8008ad6:	4921      	ldr	r1, [pc, #132]	; (8008b5c <_malloc_r+0xac>)
 8008ad8:	680a      	ldr	r2, [r1, #0]
 8008ada:	4614      	mov	r4, r2
 8008adc:	b99c      	cbnz	r4, 8008b06 <_malloc_r+0x56>
 8008ade:	4f20      	ldr	r7, [pc, #128]	; (8008b60 <_malloc_r+0xb0>)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	b923      	cbnz	r3, 8008aee <_malloc_r+0x3e>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f000 f862 	bl	8008bb0 <_sbrk_r>
 8008aec:	6038      	str	r0, [r7, #0]
 8008aee:	4629      	mov	r1, r5
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 f85d 	bl	8008bb0 <_sbrk_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d123      	bne.n	8008b42 <_malloc_r+0x92>
 8008afa:	230c      	movs	r3, #12
 8008afc:	6033      	str	r3, [r6, #0]
 8008afe:	4630      	mov	r0, r6
 8008b00:	f000 f86c 	bl	8008bdc <__malloc_unlock>
 8008b04:	e7e3      	b.n	8008ace <_malloc_r+0x1e>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	1b5b      	subs	r3, r3, r5
 8008b0a:	d417      	bmi.n	8008b3c <_malloc_r+0x8c>
 8008b0c:	2b0b      	cmp	r3, #11
 8008b0e:	d903      	bls.n	8008b18 <_malloc_r+0x68>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	441c      	add	r4, r3
 8008b14:	6025      	str	r5, [r4, #0]
 8008b16:	e004      	b.n	8008b22 <_malloc_r+0x72>
 8008b18:	6863      	ldr	r3, [r4, #4]
 8008b1a:	42a2      	cmp	r2, r4
 8008b1c:	bf0c      	ite	eq
 8008b1e:	600b      	streq	r3, [r1, #0]
 8008b20:	6053      	strne	r3, [r2, #4]
 8008b22:	4630      	mov	r0, r6
 8008b24:	f000 f85a 	bl	8008bdc <__malloc_unlock>
 8008b28:	f104 000b 	add.w	r0, r4, #11
 8008b2c:	1d23      	adds	r3, r4, #4
 8008b2e:	f020 0007 	bic.w	r0, r0, #7
 8008b32:	1ac2      	subs	r2, r0, r3
 8008b34:	d0cc      	beq.n	8008ad0 <_malloc_r+0x20>
 8008b36:	1a1b      	subs	r3, r3, r0
 8008b38:	50a3      	str	r3, [r4, r2]
 8008b3a:	e7c9      	b.n	8008ad0 <_malloc_r+0x20>
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	6864      	ldr	r4, [r4, #4]
 8008b40:	e7cc      	b.n	8008adc <_malloc_r+0x2c>
 8008b42:	1cc4      	adds	r4, r0, #3
 8008b44:	f024 0403 	bic.w	r4, r4, #3
 8008b48:	42a0      	cmp	r0, r4
 8008b4a:	d0e3      	beq.n	8008b14 <_malloc_r+0x64>
 8008b4c:	1a21      	subs	r1, r4, r0
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f000 f82e 	bl	8008bb0 <_sbrk_r>
 8008b54:	3001      	adds	r0, #1
 8008b56:	d1dd      	bne.n	8008b14 <_malloc_r+0x64>
 8008b58:	e7cf      	b.n	8008afa <_malloc_r+0x4a>
 8008b5a:	bf00      	nop
 8008b5c:	20000430 	.word	0x20000430
 8008b60:	20000434 	.word	0x20000434

08008b64 <_realloc_r>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	4607      	mov	r7, r0
 8008b68:	4614      	mov	r4, r2
 8008b6a:	460e      	mov	r6, r1
 8008b6c:	b921      	cbnz	r1, 8008b78 <_realloc_r+0x14>
 8008b6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b72:	4611      	mov	r1, r2
 8008b74:	f7ff bf9c 	b.w	8008ab0 <_malloc_r>
 8008b78:	b922      	cbnz	r2, 8008b84 <_realloc_r+0x20>
 8008b7a:	f7ff ff49 	bl	8008a10 <_free_r>
 8008b7e:	4625      	mov	r5, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b84:	f000 f830 	bl	8008be8 <_malloc_usable_size_r>
 8008b88:	42a0      	cmp	r0, r4
 8008b8a:	d20f      	bcs.n	8008bac <_realloc_r+0x48>
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f7ff ff8e 	bl	8008ab0 <_malloc_r>
 8008b94:	4605      	mov	r5, r0
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d0f2      	beq.n	8008b80 <_realloc_r+0x1c>
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	f7ff ff0f 	bl	80089c0 <memcpy>
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	f7ff ff33 	bl	8008a10 <_free_r>
 8008baa:	e7e9      	b.n	8008b80 <_realloc_r+0x1c>
 8008bac:	4635      	mov	r5, r6
 8008bae:	e7e7      	b.n	8008b80 <_realloc_r+0x1c>

08008bb0 <_sbrk_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d06      	ldr	r5, [pc, #24]	; (8008bcc <_sbrk_r+0x1c>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f7f8 f96e 	bl	8000e9c <_sbrk>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_sbrk_r+0x1a>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_sbrk_r+0x1a>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	20001f54 	.word	0x20001f54

08008bd0 <__malloc_lock>:
 8008bd0:	4801      	ldr	r0, [pc, #4]	; (8008bd8 <__malloc_lock+0x8>)
 8008bd2:	f000 b811 	b.w	8008bf8 <__retarget_lock_acquire_recursive>
 8008bd6:	bf00      	nop
 8008bd8:	20001f5c 	.word	0x20001f5c

08008bdc <__malloc_unlock>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	; (8008be4 <__malloc_unlock+0x8>)
 8008bde:	f000 b80c 	b.w	8008bfa <__retarget_lock_release_recursive>
 8008be2:	bf00      	nop
 8008be4:	20001f5c 	.word	0x20001f5c

08008be8 <_malloc_usable_size_r>:
 8008be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bec:	1f18      	subs	r0, r3, #4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfbc      	itt	lt
 8008bf2:	580b      	ldrlt	r3, [r1, r0]
 8008bf4:	18c0      	addlt	r0, r0, r3
 8008bf6:	4770      	bx	lr

08008bf8 <__retarget_lock_acquire_recursive>:
 8008bf8:	4770      	bx	lr

08008bfa <__retarget_lock_release_recursive>:
 8008bfa:	4770      	bx	lr

08008bfc <_init>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	bf00      	nop
 8008c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c02:	bc08      	pop	{r3}
 8008c04:	469e      	mov	lr, r3
 8008c06:	4770      	bx	lr

08008c08 <_fini>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr
