
Initial_Breadboard_VIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da8  08008da8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db0  08008db0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d78  200001e4  08008f9c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f5c  08008f9c  00021f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fbf  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c2  00000000  00000000  000361d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00039a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003ad48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e42  00000000  00000000  0003be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019844  00000000  00000000  00061cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6b32  00000000  00000000  0007b4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  00152080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008cd4 	.word	0x08008cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008cd4 	.word	0x08008cd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fd01 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f86b 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f9d1 	bl	8000938 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 f93b 	bl	8000810 <MX_I2C1_Init>
  MX_I2S3_Init();
 800059a:	f000 f967 	bl	800086c <MX_I2S3_Init>
  MX_SPI1_Init();
 800059e:	f000 f995 	bl	80008cc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f007 f9bb 	bl	800791c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8e1 	bl	800076c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_ADC_Start(&hadc1);
 80005aa:	4827      	ldr	r0, [pc, #156]	; (8000648 <main+0xc4>)
 80005ac:	f000 fdca 	bl	8001144 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005b0:	f04f 31ff 	mov.w	r1, #4294967295
 80005b4:	4824      	ldr	r0, [pc, #144]	; (8000648 <main+0xc4>)
 80005b6:	f000 fe97 	bl	80012e8 <HAL_ADC_PollForConversion>
	    AnalogValue = HAL_ADC_GetValue(&hadc1);
 80005ba:	4823      	ldr	r0, [pc, #140]	; (8000648 <main+0xc4>)
 80005bc:	f000 ff1f 	bl	80013fe <HAL_ADC_GetValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <main+0xc8>)
 80005c6:	601a      	str	r2, [r3, #0]

	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	4820      	ldr	r0, [pc, #128]	; (8000650 <main+0xcc>)
 80005ce:	f001 fc20 	bl	8001e12 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	481e      	ldr	r0, [pc, #120]	; (8000650 <main+0xcc>)
 80005d8:	f001 fc1b 	bl	8001e12 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e0:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0xcc>)
 80005e2:	f001 fc16 	bl	8001e12 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <main+0xcc>)
 80005ec:	f001 fc11 	bl	8001e12 <HAL_GPIO_TogglePin>

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);   //External LED on PB5
 80005f0:	2120      	movs	r1, #32
 80005f2:	4818      	ldr	r0, [pc, #96]	; (8000654 <main+0xd0>)
 80005f4:	f001 fc0d 	bl	8001e12 <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4); //External Key on PB4
 80005f8:	2110      	movs	r1, #16
 80005fa:	4816      	ldr	r0, [pc, #88]	; (8000654 <main+0xd0>)
 80005fc:	f001 fbd8 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <main+0xd4>)
 8000606:	601a      	str	r2, [r3, #0]



	    snprintf (SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Analog:%d\r\n",Counter++, 1-KeyState, AnalogValue);
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <main+0xd8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	4913      	ldr	r1, [pc, #76]	; (800065c <main+0xd8>)
 8000610:	600a      	str	r2, [r1, #0]
 8000612:	4a11      	ldr	r2, [pc, #68]	; (8000658 <main+0xd4>)
 8000614:	6812      	ldr	r2, [r2, #0]
 8000616:	f1c2 0201 	rsb	r2, r2, #1
 800061a:	490c      	ldr	r1, [pc, #48]	; (800064c <main+0xc8>)
 800061c:	6809      	ldr	r1, [r1, #0]
 800061e:	9101      	str	r1, [sp, #4]
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <main+0xdc>)
 8000624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0xe0>)
 800062a:	f007 fed1 	bl	80083d0 <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800062e:	480d      	ldr	r0, [pc, #52]	; (8000664 <main+0xe0>)
 8000630:	f7ff fdce 	bl	80001d0 <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	4619      	mov	r1, r3
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <main+0xe0>)
 800063a:	f007 fa2d 	bl	8007a98 <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        HAL_Delay(1000);
 800063e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000642:	f000 fd17 	bl	8001074 <HAL_Delay>
  {
 8000646:	e7b0      	b.n	80005aa <main+0x26>
 8000648:	20000200 	.word	0x20000200
 800064c:	20000444 	.word	0x20000444
 8000650:	40020c00 	.word	0x40020c00
 8000654:	40020400 	.word	0x40020400
 8000658:	20000440 	.word	0x20000440
 800065c:	2000043c 	.word	0x2000043c
 8000660:	08008cec 	.word	0x08008cec
 8000664:	2000033c 	.word	0x2000033c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b098      	sub	sp, #96	; 0x60
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f007 fea2 	bl	80083c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <SystemClock_Config+0xfc>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	4a30      	ldr	r2, [pc, #192]	; (8000764 <SystemClock_Config+0xfc>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	6413      	str	r3, [r2, #64]	; 0x40
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <SystemClock_Config+0xfc>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <SystemClock_Config+0x100>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <SystemClock_Config+0x100>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SystemClock_Config+0x100>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e6:	2308      	movs	r3, #8
 80006e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ea:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fb0b 	bl	8003d18 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000708:	f000 fa32 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fd6c 	bl	8004208 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000736:	f000 fa1b 	bl	8000b70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800073a:	2301      	movs	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800073e:	23c0      	movs	r3, #192	; 0xc0
 8000740:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	4618      	mov	r0, r3
 800074c:	f003 ff68 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000756:	f000 fa0b 	bl	8000b70 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3760      	adds	r7, #96	; 0x60
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC1_Init+0x98>)
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <MX_ADC1_Init+0x9c>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ADC1_Init+0x98>)
 8000786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_ADC1_Init+0xa0>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC1_Init+0x98>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ce:	f000 fc75 	bl	80010bc <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 f9ca 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ee:	f000 fe13 	bl	8001418 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 f9ba 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000200 	.word	0x20000200
 8000808:	40012000 	.word	0x40012000
 800080c:	0f000001 	.word	0x0f000001

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C1_Init+0x50>)
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_I2C1_Init+0x54>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C1_Init+0x50>)
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_I2C1_Init+0x58>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_I2C1_Init+0x50>)
 800082e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_I2C1_Init+0x50>)
 800084e:	f001 fafb 	bl	8001e48 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 f98a 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000248 	.word	0x20000248
 8000864:	40005400 	.word	0x40005400
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <MX_I2S3_Init+0x58>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000894:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <MX_I2S3_Init+0x5c>)
 8000896:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008ac:	f001 fc10 	bl	80020d0 <HAL_I2S_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008b6:	f000 f95b 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000029c 	.word	0x2000029c
 80008c4:	40003c00 	.word	0x40003c00
 80008c8:	00017700 	.word	0x00017700

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_SPI1_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <MX_SPI1_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_SPI1_Init+0x64>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_SPI1_Init+0x64>)
 80008f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_SPI1_Init+0x64>)
 8000918:	220a      	movs	r2, #10
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_SPI1_Init+0x64>)
 800091e:	f003 ffbf 	bl	80048a0 <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 f922 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002e4 	.word	0x200002e4
 8000934:	40013000 	.word	0x40013000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b80      	ldr	r3, [pc, #512]	; (8000b54 <MX_GPIO_Init+0x21c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a7f      	ldr	r2, [pc, #508]	; (8000b54 <MX_GPIO_Init+0x21c>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b7d      	ldr	r3, [pc, #500]	; (8000b54 <MX_GPIO_Init+0x21c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b79      	ldr	r3, [pc, #484]	; (8000b54 <MX_GPIO_Init+0x21c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a78      	ldr	r2, [pc, #480]	; (8000b54 <MX_GPIO_Init+0x21c>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b76      	ldr	r3, [pc, #472]	; (8000b54 <MX_GPIO_Init+0x21c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b72      	ldr	r3, [pc, #456]	; (8000b54 <MX_GPIO_Init+0x21c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a71      	ldr	r2, [pc, #452]	; (8000b54 <MX_GPIO_Init+0x21c>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b6f      	ldr	r3, [pc, #444]	; (8000b54 <MX_GPIO_Init+0x21c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b6b      	ldr	r3, [pc, #428]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a6a      	ldr	r2, [pc, #424]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b68      	ldr	r3, [pc, #416]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b64      	ldr	r3, [pc, #400]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a63      	ldr	r2, [pc, #396]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b61      	ldr	r3, [pc, #388]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b5d      	ldr	r3, [pc, #372]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a5c      	ldr	r2, [pc, #368]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b5a      	ldr	r3, [pc, #360]	; (8000b54 <MX_GPIO_Init+0x21c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	4857      	ldr	r0, [pc, #348]	; (8000b58 <MX_GPIO_Init+0x220>)
 80009fc:	f001 f9f0 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2101      	movs	r1, #1
 8000a04:	4855      	ldr	r0, [pc, #340]	; (8000b5c <MX_GPIO_Init+0x224>)
 8000a06:	f001 f9eb 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a10:	4853      	ldr	r0, [pc, #332]	; (8000b60 <MX_GPIO_Init+0x228>)
 8000a12:	f001 f9e5 	bl	8001de0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4852      	ldr	r0, [pc, #328]	; (8000b64 <MX_GPIO_Init+0x22c>)
 8000a1c:	f001 f9e0 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a20:	2308      	movs	r3, #8
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4848      	ldr	r0, [pc, #288]	; (8000b58 <MX_GPIO_Init+0x220>)
 8000a38:	f001 f81e 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4842      	ldr	r0, [pc, #264]	; (8000b5c <MX_GPIO_Init+0x224>)
 8000a54:	f001 f810 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a68:	2305      	movs	r3, #5
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	483a      	ldr	r0, [pc, #232]	; (8000b5c <MX_GPIO_Init+0x224>)
 8000a74:	f001 f800 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <MX_GPIO_Init+0x230>)
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4838      	ldr	r0, [pc, #224]	; (8000b6c <MX_GPIO_Init+0x234>)
 8000a8c:	f000 fff4 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4832      	ldr	r0, [pc, #200]	; (8000b6c <MX_GPIO_Init+0x234>)
 8000aa4:	f000 ffe8 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB4 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_4;
 8000aa8:	2314      	movs	r3, #20
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	482a      	ldr	r0, [pc, #168]	; (8000b64 <MX_GPIO_Init+0x22c>)
 8000abc:	f000 ffdc 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4821      	ldr	r0, [pc, #132]	; (8000b64 <MX_GPIO_Init+0x22c>)
 8000ade:	f000 ffcb 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ae2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ae6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4819      	ldr	r0, [pc, #100]	; (8000b60 <MX_GPIO_Init+0x228>)
 8000afc:	f000 ffbc 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b00:	2320      	movs	r3, #32
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_GPIO_Init+0x228>)
 8000b14:	f000 ffb0 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_GPIO_Init+0x22c>)
 8000b30:	f000 ffa2 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_GPIO_Init+0x230>)
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_GPIO_Init+0x220>)
 8000b48:	f000 ff96 	bl	8001a78 <HAL_GPIO_Init>

}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40020400 	.word	0x40020400
 8000b68:	10120000 	.word	0x10120000
 8000b6c:	40020000 	.word	0x40020000

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bba:	2007      	movs	r0, #7
 8000bbc:	f000 ff1a 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_ADC_MspInit+0x7c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d127      	bne.n	8000c3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_ADC_MspInit+0x80>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <HAL_ADC_MspInit+0x80>)
 8000bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_ADC_MspInit+0x80>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_ADC_MspInit+0x80>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_ADC_MspInit+0x80>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_ADC_MspInit+0x80>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_ADC_MspInit+0x84>)
 8000c3a:	f000 ff1d 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40012000 	.word	0x40012000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_I2C_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12c      	bne.n	8000cd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_I2C_MspInit+0x8c>)
 8000cb0:	f000 fee2 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <HAL_I2S_MspInit+0xc0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d14a      	bne.n	8000d9c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_I2S_MspInit+0xc4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <HAL_I2S_MspInit+0xc8>)
 8000d76:	f000 fe7f 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d7a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <HAL_I2S_MspInit+0xcc>)
 8000d98:	f000 fe6e 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40003c00 	.word	0x40003c00
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800

08000db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_SPI_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12b      	bne.n	8000e2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e0e:	23e0      	movs	r3, #224	; 0xe0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_SPI_MspInit+0x8c>)
 8000e2a:	f000 fe25 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40013000 	.word	0x40013000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f8d0 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <OTG_FS_IRQHandler+0x10>)
 8000e9e:	f001 ff07 	bl	8002cb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20001924 	.word	0x20001924

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f007 fa46 	bl	800836c <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20020000 	.word	0x20020000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	20000448 	.word	0x20000448
 8000f14:	20001f60 	.word	0x20001f60

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f007 fa05 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fb09 	bl	8000584 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000f80:	08008db8 	.word	0x08008db8
  ldr r2, =_sbss
 8000f84:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000f88:	20001f5c 	.word	0x20001f5c

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fd1b 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fdda 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fd33 	bl	8001a5e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 fcfb 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	2000044c 	.word	0x2000044c

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000044c 	.word	0x2000044c

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e033      	b.n	800113a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fd76 	bl	8000bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d118      	bne.n	800112c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001102:	f023 0302 	bic.w	r3, r3, #2
 8001106:	f043 0202 	orr.w	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 faa4 	bl	800165c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
 800112a:	e001      	b.n	8001130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001156:	2b01      	cmp	r3, #1
 8001158:	d101      	bne.n	800115e <HAL_ADC_Start+0x1a>
 800115a:	2302      	movs	r3, #2
 800115c:	e0b2      	b.n	80012c4 <HAL_ADC_Start+0x180>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b01      	cmp	r3, #1
 8001172:	d018      	beq.n	80011a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <HAL_ADC_Start+0x18c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_ADC_Start+0x190>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9a      	lsrs	r2, r3, #18
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001198:	e002      	b.n	80011a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3b01      	subs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f9      	bne.n	800119a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d17a      	bne.n	80012aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f2:	d106      	bne.n	8001202 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f023 0206 	bic.w	r2, r3, #6
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001200:	e002      	b.n	8001208 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <HAL_ADC_Start+0x194>)
 8001212:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800121c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2b00      	cmp	r3, #0
 8001228:	d12a      	bne.n	8001280 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <HAL_ADC_Start+0x198>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d015      	beq.n	8001260 <HAL_ADC_Start+0x11c>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <HAL_ADC_Start+0x19c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d105      	bne.n	800124a <HAL_ADC_Start+0x106>
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_ADC_Start+0x194>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <HAL_ADC_Start+0x1a0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d136      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_ADC_Start+0x194>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	d130      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d129      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	e020      	b.n	80012c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_ADC_Start+0x198>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d11b      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d114      	bne.n	80012c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	e00b      	b.n	80012c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f043 0210 	orr.w	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	40012300 	.word	0x40012300
 80012dc:	40012000 	.word	0x40012000
 80012e0:	40012100 	.word	0x40012100
 80012e4:	40012200 	.word	0x40012200

080012e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001304:	d113      	bne.n	800132e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001314:	d10b      	bne.n	800132e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0220 	orr.w	r2, r3, #32
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e063      	b.n	80013f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800132e:	f7ff fe95 	bl	800105c <HAL_GetTick>
 8001332:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001334:	e021      	b.n	800137a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d01d      	beq.n	800137a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_ADC_PollForConversion+0x6c>
 8001344:	f7ff fe8a 	bl	800105c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d212      	bcs.n	800137a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b02      	cmp	r3, #2
 8001360:	d00b      	beq.n	800137a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f043 0204 	orr.w	r2, r3, #4
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e03d      	b.n	80013f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d1d6      	bne.n	8001336 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0212 	mvn.w	r2, #18
 8001390:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d123      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d11f      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d111      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1c>
 8001430:	2302      	movs	r3, #2
 8001432:	e105      	b.n	8001640 <HAL_ADC_ConfigChannel+0x228>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b09      	cmp	r3, #9
 8001442:	d925      	bls.n	8001490 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68d9      	ldr	r1, [r3, #12]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	3b1e      	subs	r3, #30
 800145a:	2207      	movs	r2, #7
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43da      	mvns	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	400a      	ands	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68d9      	ldr	r1, [r3, #12]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b29b      	uxth	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	4603      	mov	r3, r0
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4403      	add	r3, r0
 8001482:	3b1e      	subs	r3, #30
 8001484:	409a      	lsls	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	e022      	b.n	80014d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	2207      	movs	r2, #7
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	400a      	ands	r2, r1
 80014b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6919      	ldr	r1, [r3, #16]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4403      	add	r3, r0
 80014cc:	409a      	lsls	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d824      	bhi.n	8001528 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	3b05      	subs	r3, #5
 80014f0:	221f      	movs	r2, #31
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	400a      	ands	r2, r1
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3b05      	subs	r3, #5
 800151a:	fa00 f203 	lsl.w	r2, r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
 8001526:	e04c      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d824      	bhi.n	800157a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3b23      	subs	r3, #35	; 0x23
 8001542:	221f      	movs	r2, #31
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43da      	mvns	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	400a      	ands	r2, r1
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b23      	subs	r3, #35	; 0x23
 800156c:	fa00 f203 	lsl.w	r2, r0, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
 8001578:	e023      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	3b41      	subs	r3, #65	; 0x41
 800158c:	221f      	movs	r2, #31
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	400a      	ands	r2, r1
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3b41      	subs	r3, #65	; 0x41
 80015b6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_ADC_ConfigChannel+0x234>)
 80015c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_ADC_ConfigChannel+0x238>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d109      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1cc>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b12      	cmp	r3, #18
 80015d6:	d105      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_ADC_ConfigChannel+0x238>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d123      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x21e>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d003      	beq.n	80015fe <HAL_ADC_ConfigChannel+0x1e6>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b11      	cmp	r3, #17
 80015fc:	d11b      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b10      	cmp	r3, #16
 8001610:	d111      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_ADC_ConfigChannel+0x23c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_ADC_ConfigChannel+0x240>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0c9a      	lsrs	r2, r3, #18
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001628:	e002      	b.n	8001630 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3b01      	subs	r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f9      	bne.n	800162a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40012300 	.word	0x40012300
 8001650:	40012000 	.word	0x40012000
 8001654:	20000000 	.word	0x20000000
 8001658:	431bde83 	.word	0x431bde83

0800165c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001664:	4b79      	ldr	r3, [pc, #484]	; (800184c <ADC_Init+0x1f0>)
 8001666:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	431a      	orrs	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	021a      	lsls	r2, r3, #8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6899      	ldr	r1, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	4a58      	ldr	r2, [pc, #352]	; (8001850 <ADC_Init+0x1f4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d022      	beq.n	800173a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	e00f      	b.n	800175a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001758:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0202 	bic.w	r2, r2, #2
 8001768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7e1b      	ldrb	r3, [r3, #24]
 8001774:	005a      	lsls	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01b      	beq.n	80017c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001796:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6859      	ldr	r1, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	3b01      	subs	r3, #1
 80017b4:	035a      	lsls	r2, r3, #13
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e007      	b.n	80017d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	051a      	lsls	r2, r3, #20
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6899      	ldr	r1, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001812:	025a      	lsls	r2, r3, #9
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6899      	ldr	r1, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	029a      	lsls	r2, r3, #10
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	609a      	str	r2, [r3, #8]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40012300 	.word	0x40012300
 8001850:	0f000001 	.word	0x0f000001

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e16b      	b.n	8001d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 815a 	bne.w	8001d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80b4 	beq.w	8001d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a5f      	ldr	r2, [pc, #380]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a5b      	ldr	r2, [pc, #364]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_GPIO_Init+0x314>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a51      	ldr	r2, [pc, #324]	; (8001d90 <HAL_GPIO_Init+0x318>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d025      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a50      	ldr	r2, [pc, #320]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <HAL_GPIO_Init+0x320>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4e      	ldr	r2, [pc, #312]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x212>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_GPIO_Init+0x330>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x20a>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00e      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00c      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e00a      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce2:	4a32      	ldr	r2, [pc, #200]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d60:	4a12      	ldr	r2, [pc, #72]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f ae90 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40021c00 	.word	0x40021c00
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dfc:	e003      	b.n	8001e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	400b      	ands	r3, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e12b      	b.n	80020b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fef0 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	; 0x24
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eac:	f002 fba4 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 8001eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a81      	ldr	r2, [pc, #516]	; (80020bc <HAL_I2C_Init+0x274>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d807      	bhi.n	8001ecc <HAL_I2C_Init+0x84>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a80      	ldr	r2, [pc, #512]	; (80020c0 <HAL_I2C_Init+0x278>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf94      	ite	ls
 8001ec4:	2301      	movls	r3, #1
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e006      	b.n	8001eda <HAL_I2C_Init+0x92>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a7d      	ldr	r2, [pc, #500]	; (80020c4 <HAL_I2C_Init+0x27c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bf94      	ite	ls
 8001ed4:	2301      	movls	r3, #1
 8001ed6:	2300      	movhi	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0e7      	b.n	80020b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a78      	ldr	r2, [pc, #480]	; (80020c8 <HAL_I2C_Init+0x280>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0c9b      	lsrs	r3, r3, #18
 8001eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_I2C_Init+0x274>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d802      	bhi.n	8001f1c <HAL_I2C_Init+0xd4>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	e009      	b.n	8001f30 <HAL_I2C_Init+0xe8>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a69      	ldr	r2, [pc, #420]	; (80020cc <HAL_I2C_Init+0x284>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	099b      	lsrs	r3, r3, #6
 8001f2e:	3301      	adds	r3, #1
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	495c      	ldr	r1, [pc, #368]	; (80020bc <HAL_I2C_Init+0x274>)
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d819      	bhi.n	8001f84 <HAL_I2C_Init+0x13c>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e59      	subs	r1, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f64:	400b      	ands	r3, r1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_I2C_Init+0x138>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1e59      	subs	r1, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7e:	e051      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e04f      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d111      	bne.n	8001fb0 <HAL_I2C_Init+0x168>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	440b      	add	r3, r1
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	e012      	b.n	8001fd6 <HAL_I2C_Init+0x18e>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e58      	subs	r0, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	0099      	lsls	r1, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Init+0x196>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e022      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10e      	bne.n	8002004 <HAL_I2C_Init+0x1bc>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e58      	subs	r0, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002002:	e00f      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	0099      	lsls	r1, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	6809      	ldr	r1, [r1, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6911      	ldr	r1, [r2, #16]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68d2      	ldr	r2, [r2, #12]
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	430b      	orrs	r3, r1
 8002066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	000186a0 	.word	0x000186a0
 80020c0:	001e847f 	.word	0x001e847f
 80020c4:	003d08ff 	.word	0x003d08ff
 80020c8:	431bde83 	.word	0x431bde83
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e128      	b.n	8002334 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a90      	ldr	r2, [pc, #576]	; (800233c <HAL_I2S_Init+0x26c>)
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe fdf1 	bl	8000ce4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002118:	f023 030f 	bic.w	r3, r3, #15
 800211c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2202      	movs	r2, #2
 8002124:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d060      	beq.n	80021f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002136:	2310      	movs	r3, #16
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e001      	b.n	8002140 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b20      	cmp	r3, #32
 8002146:	d802      	bhi.n	800214e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800214e:	2001      	movs	r0, #1
 8002150:	f002 fb48 	bl	80047e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002154:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215e:	d125      	bne.n	80021ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	3305      	adds	r3, #5
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	e01f      	b.n	80021ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	fbb2 f2f3 	udiv	r2, r2, r3
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	3305      	adds	r3, #5
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e00e      	b.n	80021ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	3305      	adds	r3, #5
 80021c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4a5c      	ldr	r2, [pc, #368]	; (8002340 <HAL_I2S_Init+0x270>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	e003      	b.n	80021f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d902      	bls.n	8002204 <HAL_I2S_Init+0x134>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2bff      	cmp	r3, #255	; 0xff
 8002202:	d907      	bls.n	8002214 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	f043 0210 	orr.w	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e08f      	b.n	8002334 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	ea42 0103 	orr.w	r1, r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	430a      	orrs	r2, r1
 8002226:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002232:	f023 030f 	bic.w	r3, r3, #15
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6851      	ldr	r1, [r2, #4]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68d2      	ldr	r2, [r2, #12]
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6992      	ldr	r2, [r2, #24]
 800224a:	430a      	orrs	r2, r1
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002256:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d161      	bne.n	8002324 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a38      	ldr	r2, [pc, #224]	; (8002344 <HAL_I2S_Init+0x274>)
 8002264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a37      	ldr	r2, [pc, #220]	; (8002348 <HAL_I2S_Init+0x278>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_I2S_Init+0x1a4>
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_I2S_Init+0x27c>)
 8002272:	e001      	b.n	8002278 <HAL_I2S_Init+0x1a8>
 8002274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	4932      	ldr	r1, [pc, #200]	; (8002348 <HAL_I2S_Init+0x278>)
 8002280:	428a      	cmp	r2, r1
 8002282:	d101      	bne.n	8002288 <HAL_I2S_Init+0x1b8>
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <HAL_I2S_Init+0x27c>)
 8002286:	e001      	b.n	800228c <HAL_I2S_Init+0x1bc>
 8002288:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800228c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002290:	f023 030f 	bic.w	r3, r3, #15
 8002294:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <HAL_I2S_Init+0x278>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d101      	bne.n	80022a4 <HAL_I2S_Init+0x1d4>
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_I2S_Init+0x27c>)
 80022a2:	e001      	b.n	80022a8 <HAL_I2S_Init+0x1d8>
 80022a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a8:	2202      	movs	r2, #2
 80022aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_I2S_Init+0x278>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_I2S_Init+0x1ea>
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_I2S_Init+0x27c>)
 80022b8:	e001      	b.n	80022be <HAL_I2S_Init+0x1ee>
 80022ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ca:	d003      	beq.n	80022d4 <HAL_I2S_Init+0x204>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d103      	bne.n	80022dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e001      	b.n	80022e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022fe:	4313      	orrs	r3, r2
 8002300:	b29a      	uxth	r2, r3
 8002302:	897b      	ldrh	r3, [r7, #10]
 8002304:	4313      	orrs	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800230c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_I2S_Init+0x278>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_I2S_Init+0x24c>
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_I2S_Init+0x27c>)
 800231a:	e001      	b.n	8002320 <HAL_I2S_Init+0x250>
 800231c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002320:	897a      	ldrh	r2, [r7, #10]
 8002322:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	08002447 	.word	0x08002447
 8002340:	cccccccd 	.word	0xcccccccd
 8002344:	0800255d 	.word	0x0800255d
 8002348:	40003800 	.word	0x40003800
 800234c:	40003400 	.word	0x40003400

08002350 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c9a      	adds	r2, r3, #2
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10e      	bne.n	80023e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffb8 	bl	8002350 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	b292      	uxth	r2, r2
 80023fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10e      	bne.n	800243e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800242e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff93 	bl	8002364 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b04      	cmp	r3, #4
 8002460:	d13a      	bne.n	80024d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d109      	bne.n	8002480 <I2S_IRQHandler+0x3a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d102      	bne.n	8002480 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffb4 	bl	80023e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d126      	bne.n	80024d8 <I2S_IRQHandler+0x92>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b20      	cmp	r3, #32
 8002496:	d11f      	bne.n	80024d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ff50 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d136      	bne.n	8002552 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d109      	bne.n	8002502 <I2S_IRQHandler+0xbc>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d102      	bne.n	8002502 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff45 	bl	800238c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d122      	bne.n	8002552 <I2S_IRQHandler+0x10c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b20      	cmp	r3, #32
 8002518:	d11b      	bne.n	8002552 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002528:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff13 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a92      	ldr	r2, [pc, #584]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002576:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002578:	e001      	b.n	800257e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800257a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a8b      	ldr	r2, [pc, #556]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002594:	4b8a      	ldr	r3, [pc, #552]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002596:	e001      	b.n	800259c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a8:	d004      	beq.n	80025b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 8099 	bne.w	80026e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d107      	bne.n	80025ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f925 	bl	8002818 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f9c8 	bl	8002978 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d13a      	bne.n	8002668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d035      	beq.n	8002668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a6e      	ldr	r2, [pc, #440]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002606:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002608:	e001      	b.n	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800260a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4969      	ldr	r1, [pc, #420]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002616:	428b      	cmp	r3, r1
 8002618:	d101      	bne.n	800261e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800261a:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800261c:	e001      	b.n	8002622 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800261e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002626:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002636:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0202 	orr.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fe88 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b08      	cmp	r3, #8
 8002670:	f040 80c3 	bne.w	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80bd 	beq.w	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800268e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a49      	ldr	r2, [pc, #292]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800269c:	e001      	b.n	80026a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800269e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4944      	ldr	r1, [pc, #272]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026aa:	428b      	cmp	r3, r1
 80026ac:	d101      	bne.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80026ae:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026b0:	e001      	b.n	80026b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80026b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f043 0204 	orr.w	r2, r3, #4
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fe4a 	bl	8002378 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026e4:	e089      	b.n	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d107      	bne.n	8002700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8be 	bl	800287c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f8fd 	bl	8002914 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d12f      	bne.n	8002784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02a      	beq.n	8002784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800273c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800274a:	e001      	b.n	8002750 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800274c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4919      	ldr	r1, [pc, #100]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002758:	428b      	cmp	r3, r1
 800275a:	d101      	bne.n	8002760 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800275e:	e001      	b.n	8002764 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002768:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fdfa 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d136      	bne.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d031      	beq.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027a4:	e001      	b.n	80027aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80027a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4902      	ldr	r1, [pc, #8]	; (80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027b2:	428b      	cmp	r3, r1
 80027b4:	d106      	bne.n	80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80027b6:	4b02      	ldr	r3, [pc, #8]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027b8:	e006      	b.n	80027c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80027ba:	bf00      	nop
 80027bc:	40003800 	.word	0x40003800
 80027c0:	40003400 	.word	0x40003400
 80027c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f043 0204 	orr.w	r2, r3, #4
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff fdc0 	bl	8002378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027f8:	e000      	b.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027fa:	bf00      	nop
}
 80027fc:	bf00      	nop
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	1c99      	adds	r1, r3, #2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6251      	str	r1, [r2, #36]	; 0x24
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d113      	bne.n	8002872 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002858:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ffc9 	bl	8002804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c99      	adds	r1, r3, #2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6251      	str	r1, [r2, #36]	; 0x24
 800288e:	8819      	ldrh	r1, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1d      	ldr	r2, [pc, #116]	; (800290c <I2SEx_TxISR_I2SExt+0x90>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <I2SEx_TxISR_I2SExt+0x22>
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <I2SEx_TxISR_I2SExt+0x94>)
 800289c:	e001      	b.n	80028a2 <I2SEx_TxISR_I2SExt+0x26>
 800289e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a2:	460a      	mov	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d121      	bne.n	8002902 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <I2SEx_TxISR_I2SExt+0x90>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <I2SEx_TxISR_I2SExt+0x50>
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <I2SEx_TxISR_I2SExt+0x94>)
 80028ca:	e001      	b.n	80028d0 <I2SEx_TxISR_I2SExt+0x54>
 80028cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	490d      	ldr	r1, [pc, #52]	; (800290c <I2SEx_TxISR_I2SExt+0x90>)
 80028d8:	428b      	cmp	r3, r1
 80028da:	d101      	bne.n	80028e0 <I2SEx_TxISR_I2SExt+0x64>
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <I2SEx_TxISR_I2SExt+0x94>)
 80028de:	e001      	b.n	80028e4 <I2SEx_TxISR_I2SExt+0x68>
 80028e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff81 	bl	8002804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40003800 	.word	0x40003800
 8002910:	40003400 	.word	0x40003400

08002914 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68d8      	ldr	r0, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	1c99      	adds	r1, r3, #2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800292c:	b282      	uxth	r2, r0
 800292e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d113      	bne.n	8002970 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002956:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ff4a 	bl	8002804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a20      	ldr	r2, [pc, #128]	; (8002a08 <I2SEx_RxISR_I2SExt+0x90>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <I2SEx_RxISR_I2SExt+0x16>
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <I2SEx_RxISR_I2SExt+0x94>)
 800298c:	e001      	b.n	8002992 <I2SEx_RxISR_I2SExt+0x1a>
 800298e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002992:	68d8      	ldr	r0, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	1c99      	adds	r1, r3, #2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800299e:	b282      	uxth	r2, r0
 80029a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d121      	bne.n	80029fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <I2SEx_RxISR_I2SExt+0x90>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <I2SEx_RxISR_I2SExt+0x50>
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <I2SEx_RxISR_I2SExt+0x94>)
 80029c6:	e001      	b.n	80029cc <I2SEx_RxISR_I2SExt+0x54>
 80029c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	490d      	ldr	r1, [pc, #52]	; (8002a08 <I2SEx_RxISR_I2SExt+0x90>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d101      	bne.n	80029dc <I2SEx_RxISR_I2SExt+0x64>
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <I2SEx_RxISR_I2SExt+0x94>)
 80029da:	e001      	b.n	80029e0 <I2SEx_RxISR_I2SExt+0x68>
 80029dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff03 	bl	8002804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40003800 	.word	0x40003800
 8002a0c:	40003400 	.word	0x40003400

08002a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	b08f      	sub	sp, #60	; 0x3c
 8002a14:	af0a      	add	r7, sp, #40	; 0x28
 8002a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e10f      	b.n	8002c42 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f005 f973 	bl	8007d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2203      	movs	r2, #3
 8002a46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 f8ba 	bl	8004bda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	687e      	ldr	r6, [r7, #4]
 8002a6e:	466d      	mov	r5, sp
 8002a70:	f106 0410 	add.w	r4, r6, #16
 8002a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a84:	1d33      	adds	r3, r6, #4
 8002a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a88:	6838      	ldr	r0, [r7, #0]
 8002a8a:	f001 ff92 	bl	80049b2 <USB_CoreInit>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0d0      	b.n	8002c42 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 f8a8 	bl	8004bfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e04a      	b.n	8002b48 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	333d      	adds	r3, #61	; 0x3d
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	333c      	adds	r3, #60	; 0x3c
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	b298      	uxth	r0, r3
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3342      	adds	r3, #66	; 0x42
 8002aee:	4602      	mov	r2, r0
 8002af0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	333f      	adds	r3, #63	; 0x3f
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3344      	adds	r3, #68	; 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3348      	adds	r3, #72	; 0x48
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3350      	adds	r3, #80	; 0x50
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	3301      	adds	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d3af      	bcc.n	8002ab2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e044      	b.n	8002be2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	3301      	adds	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3b5      	bcc.n	8002b58 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	687e      	ldr	r6, [r7, #4]
 8002bf4:	466d      	mov	r5, sp
 8002bf6:	f106 0410 	add.w	r4, r6, #16
 8002bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c06:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c0a:	1d33      	adds	r3, r6, #4
 8002c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	f002 f81e 	bl	8004c50 <USB_DevInit>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00d      	b.n	8002c42 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 f866 	bl	8005d0c <USB_DevDisconnect>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_PCD_Start+0x1c>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e020      	b.n	8002ca8 <HAL_PCD_Start+0x5e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d109      	bne.n	8002c8a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d005      	beq.n	8002c8a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 ff92 	bl	8004bb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 f816 	bl	8005cca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b08d      	sub	sp, #52	; 0x34
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 f8d4 	bl	8005e74 <USB_GetMode>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 839d 	bne.w	800340e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 f838 	bl	8005d4e <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8393 	beq.w	800340c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 f82f 	bl	8005d4e <USB_ReadInterrupts>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d107      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f002 0202 	and.w	r2, r2, #2
 8002d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 f81d 	bl	8005d4e <USB_ReadInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d161      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0210 	bic.w	r2, r2, #16
 8002d2c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	0c5b      	lsrs	r3, r3, #17
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d124      	bne.n	8002da4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d035      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6a38      	ldr	r0, [r7, #32]
 8002d7a:	f002 fe83 	bl	8005a84 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8a:	441a      	add	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d9c:	441a      	add	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	619a      	str	r2, [r3, #24]
 8002da2:	e016      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	0c5b      	lsrs	r3, r3, #17
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d110      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002db6:	2208      	movs	r2, #8
 8002db8:	4619      	mov	r1, r3
 8002dba:	6a38      	ldr	r0, [r7, #32]
 8002dbc:	f002 fe62 	bl	8005a84 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dcc:	441a      	add	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0210 	orr.w	r2, r2, #16
 8002de0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 ffb1 	bl	8005d4e <USB_ReadInterrupts>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002df6:	d16e      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 ffb7 	bl	8005d74 <USB_ReadDevAllOutEpInterrupt>
 8002e06:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e08:	e062      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d057      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 ffdc 	bl	8005ddc <USB_ReadDevOutEPInterrupt>
 8002e24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2301      	movs	r3, #1
 8002e40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fdb1 	bl	80039ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00c      	beq.n	8002e6e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	2308      	movs	r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 feab 	bl	8003bc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e84:	461a      	mov	r2, r3
 8002e86:	2310      	movs	r3, #16
 8002e88:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d199      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 ff37 	bl	8005d4e <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eea:	f040 80c0 	bne.w	800306e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 ff58 	bl	8005da8 <USB_ReadDevAllInEpInterrupt>
 8002ef8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002efe:	e0b2      	b.n	8003066 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80a7 	beq.w	800305a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 ff7e 	bl	8005e18 <USB_ReadDevInEPInterrupt>
 8002f1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d057      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	2201      	movs	r2, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69f9      	ldr	r1, [r7, #28]
 8002f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f48:	4013      	ands	r3, r2
 8002f4a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d132      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3348      	adds	r3, #72	; 0x48
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4403      	add	r3, r0
 8002f86:	3344      	adds	r3, #68	; 0x44
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4419      	add	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4403      	add	r3, r0
 8002f9a:	3348      	adds	r3, #72	; 0x48
 8002f9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d113      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x31c>
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3350      	adds	r3, #80	; 0x50
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d108      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	f002 ff86 	bl	8005ed8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 ff37 	bl	8007e46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	2310      	movs	r3, #16
 800300e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003042:	461a      	mov	r2, r3
 8003044:	2302      	movs	r3, #2
 8003046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fc1b 	bl	8003890 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	3301      	adds	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	f47f af49 	bne.w	8002f00 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fe6b 	bl	8005d4e <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800307e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003082:	d122      	bne.n	80030ca <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d108      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030aa:	2100      	movs	r1, #0
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fe27 	bl	8003d00 <HAL_PCDEx_LPM_Callback>
 80030b2:	e002      	b.n	80030ba <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f004 ff3d 	bl	8007f34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 fe3d 	bl	8005d4e <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	d112      	bne.n	8003106 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d102      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f004 fef9 	bl	8007ee8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003104:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f002 fe1f 	bl	8005d4e <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	f040 80c7 	bne.w	80032ac <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2110      	movs	r1, #16
 8003138:	4618      	mov	r0, r3
 800313a:	f001 feed 	bl	8004f18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003142:	e056      	b.n	80031f2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003150:	461a      	mov	r2, r3
 8003152:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003156:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003168:	0151      	lsls	r1, r2, #5
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	440a      	add	r2, r1
 800316e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003176:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003188:	0151      	lsls	r1, r2, #5
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	440a      	add	r2, r1
 800318e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003196:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	461a      	mov	r2, r3
 80031a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031bc:	0151      	lsls	r1, r2, #5
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	440a      	add	r2, r1
 80031c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031dc:	0151      	lsls	r1, r2, #5
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	440a      	add	r2, r1
 80031e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	3301      	adds	r3, #1
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d3a3      	bcc.n	8003144 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800320a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800320e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003228:	f043 030b 	orr.w	r3, r3, #11
 800322c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323e:	f043 030b 	orr.w	r3, r3, #11
 8003242:	6453      	str	r3, [r2, #68]	; 0x44
 8003244:	e015      	b.n	8003272 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003258:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800325c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326c:	f043 030b 	orr.w	r3, r3, #11
 8003270:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003280:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003284:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003296:	461a      	mov	r2, r3
 8003298:	f002 fe1e 	bl	8005ed8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f002 fd4c 	bl	8005d4e <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c0:	d124      	bne.n	800330c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fde2 	bl	8005e90 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 fe82 	bl	8004fda <USB_GetDevSpeed>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681c      	ldr	r4, [r3, #0]
 80032e2:	f001 f97d 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 80032e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	4620      	mov	r0, r4
 80032f2:	f001 fbbf 	bl	8004a74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f004 fdcd 	bl	8007e96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800330a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f002 fd1c 	bl	8005d4e <USB_ReadInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d10a      	bne.n	8003336 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f004 fdaa 	bl	8007e7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f002 0208 	and.w	r2, r2, #8
 8003334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f002 fd07 	bl	8005d4e <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334a:	d10f      	bne.n	800336c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f004 fe0c 	bl	8007f74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800336a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f002 fcec 	bl	8005d4e <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003380:	d10f      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f004 fddf 	bl	8007f50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fcd1 	bl	8005d4e <USB_ReadInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b6:	d10a      	bne.n	80033ce <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f004 fded 	bl	8007f98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 fcbb 	bl	8005d4e <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d115      	bne.n	800340e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f004 fddd 	bl	8007fb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	e000      	b.n	800340e <HAL_PCD_IRQHandler+0x75e>
      return;
 800340c:	bf00      	nop
    }
  }
}
 800340e:	3734      	adds	r7, #52	; 0x34
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}

08003414 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_PCD_SetAddress+0x1a>
 800342a:	2302      	movs	r3, #2
 800342c:	e013      	b.n	8003456 <HAL_PCD_SetAddress+0x42>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f002 fc19 	bl	8005c7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	4608      	mov	r0, r1
 8003468:	4611      	mov	r1, r2
 800346a:	461a      	mov	r2, r3
 800346c:	4603      	mov	r3, r0
 800346e:	70fb      	strb	r3, [r7, #3]
 8003470:	460b      	mov	r3, r1
 8003472:	803b      	strh	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800347c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	da0f      	bge.n	80034a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	3338      	adds	r3, #56	; 0x38
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	3304      	adds	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	705a      	strb	r2, [r3, #1]
 80034a2:	e00f      	b.n	80034c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	3304      	adds	r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034d0:	883a      	ldrh	r2, [r7, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	78ba      	ldrb	r2, [r7, #2]
 80034da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034ee:	78bb      	ldrb	r3, [r7, #2]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d102      	bne.n	80034fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_PCD_EP_Open+0xaa>
 8003504:	2302      	movs	r3, #2
 8003506:	e00e      	b.n	8003526 <HAL_PCD_EP_Open+0xc8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	f001 fd84 	bl	8005024 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003524:	7afb      	ldrb	r3, [r7, #11]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800353a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353e:	2b00      	cmp	r3, #0
 8003540:	da0f      	bge.n	8003562 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	3338      	adds	r3, #56	; 0x38
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	705a      	strb	r2, [r3, #1]
 8003560:	e00f      	b.n	8003582 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_PCD_EP_Close+0x6e>
 8003598:	2302      	movs	r3, #2
 800359a:	e00e      	b.n	80035ba <HAL_PCD_EP_Close+0x8c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 fdc2 	bl	8005134 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b086      	sub	sp, #24
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	460b      	mov	r3, r1
 80035d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	7afb      	ldrb	r3, [r7, #11]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	3304      	adds	r3, #4
 80035ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	b2da      	uxtb	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361e:	7afb      	ldrb	r3, [r7, #11]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	f002 f89d 	bl	8005774 <USB_EP0StartXfer>
 800363a:	e008      	b.n	800364e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	f001 fe4f 	bl	80052ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	460b      	mov	r3, r1
 8003696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	3338      	adds	r3, #56	; 0x38
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2201      	movs	r2, #1
 80036c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c8:	7afb      	ldrb	r3, [r7, #11]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d102      	bne.n	80036e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036e2:	7afb      	ldrb	r3, [r7, #11]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	6979      	ldr	r1, [r7, #20]
 80036fa:	f002 f83b 	bl	8005774 <USB_EP0StartXfer>
 80036fe:	e008      	b.n	8003712 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	f001 fded 	bl	80052ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d901      	bls.n	800373a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e050      	b.n	80037dc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800373a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800373e:	2b00      	cmp	r3, #0
 8003740:	da0f      	bge.n	8003762 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	3338      	adds	r3, #56	; 0x38
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	3304      	adds	r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	705a      	strb	r2, [r3, #1]
 8003760:	e00d      	b.n	800377e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_PCD_EP_SetStall+0x82>
 800379a:	2302      	movs	r3, #2
 800379c:	e01e      	b.n	80037dc <HAL_PCD_EP_SetStall+0xc0>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f002 f992 	bl	8005ad6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	b2d9      	uxtb	r1, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037cc:	461a      	mov	r2, r3
 80037ce:	f002 fb83 	bl	8005ed8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d901      	bls.n	8003802 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e042      	b.n	8003888 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da0f      	bge.n	800382a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	705a      	strb	r2, [r3, #1]
 8003828:	e00f      	b.n	800384a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_PCD_EP_ClrStall+0x86>
 8003866:	2302      	movs	r3, #2
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_ClrStall+0xa4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	4618      	mov	r0, r3
 800387a:	f002 f99a 	bl	8005bb2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3338      	adds	r3, #56	; 0x38
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	3304      	adds	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d901      	bls.n	80038c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e06c      	b.n	80039a2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d902      	bls.n	80038e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3303      	adds	r3, #3
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ec:	e02b      	b.n	8003946 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	429a      	cmp	r2, r3
 8003902:	d902      	bls.n	800390a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3303      	adds	r3, #3
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68d9      	ldr	r1, [r3, #12]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003922:	b2db      	uxtb	r3, r3
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4603      	mov	r3, r0
 8003928:	6978      	ldr	r0, [r7, #20]
 800392a:	f002 f876 	bl	8005a1a <USB_WritePacket>

    ep->xfer_buff  += len;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	441a      	add	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	b29b      	uxth	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	429a      	cmp	r2, r3
 800395a:	d809      	bhi.n	8003970 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003964:	429a      	cmp	r2, r3
 8003966:	d203      	bcs.n	8003970 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1be      	bne.n	80038ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	d811      	bhi.n	80039a0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2201      	movs	r2, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	43db      	mvns	r3, r3
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800399c:	4013      	ands	r3, r2
 800399e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	333c      	adds	r3, #60	; 0x3c
 80039c4:	3304      	adds	r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f040 80a0 	bne.w	8003b24 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d015      	beq.n	8003a1a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a72      	ldr	r2, [pc, #456]	; (8003bbc <PCD_EP_OutXfrComplete_int+0x210>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f240 80dd 	bls.w	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80d7 	beq.w	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	6093      	str	r3, [r2, #8]
 8003a18:	e0cb      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	2320      	movs	r3, #32
 8003a34:	6093      	str	r3, [r2, #8]
 8003a36:	e0bc      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 80b7 	bne.w	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a5d      	ldr	r2, [pc, #372]	; (8003bbc <PCD_EP_OutXfrComplete_int+0x210>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d90f      	bls.n	8003a6c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a62:	461a      	mov	r2, r3
 8003a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a68:	6093      	str	r3, [r2, #8]
 8003a6a:	e0a2      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a7e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	0159      	lsls	r1, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a92:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4403      	add	r3, r0
 8003aa2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003aa6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4403      	add	r3, r0
 8003aca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4419      	add	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4403      	add	r3, r0
 8003ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ae4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d114      	bne.n	8003b16 <PCD_EP_OutXfrComplete_int+0x16a>
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2101      	movs	r1, #1
 8003b12:	f002 f9e1 	bl	8005ed8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f004 f977 	bl	8007e10 <HAL_PCD_DataOutStageCallback>
 8003b22:	e046      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d124      	bne.n	8003b76 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	461a      	mov	r2, r3
 8003b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b48:	6093      	str	r3, [r2, #8]
 8003b4a:	e032      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b62:	461a      	mov	r2, r3
 8003b64:	2320      	movs	r3, #32
 8003b66:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f004 f94e 	bl	8007e10 <HAL_PCD_DataOutStageCallback>
 8003b74:	e01d      	b.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d114      	bne.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d108      	bne.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f002 f999 	bl	8005ed8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f004 f92f 	bl	8007e10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	4f54300a 	.word	0x4f54300a
 8003bc0:	4f54310a 	.word	0x4f54310a

08003bc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	333c      	adds	r3, #60	; 0x3c
 8003bdc:	3304      	adds	r3, #4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d90e      	bls.n	8003c18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	461a      	mov	r2, r3
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f004 f8e7 	bl	8007dec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d90c      	bls.n	8003c40 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d108      	bne.n	8003c40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	f002 f94c 	bl	8005ed8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	4f54300a 	.word	0x4f54300a

08003c50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c6e:	883b      	ldrh	r3, [r7, #0]
 8003c70:	0419      	lsls	r1, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c7c:	e028      	b.n	8003cd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4413      	add	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e00d      	b.n	8003cae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	3340      	adds	r3, #64	; 0x40
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	3301      	adds	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3ec      	bcc.n	8003c92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cb8:	883b      	ldrh	r3, [r7, #0]
 8003cba:	0418      	lsls	r0, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	4302      	orrs	r2, r0
 8003cc8:	3340      	adds	r3, #64	; 0x40
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e267      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d075      	beq.n	8003e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d36:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b85      	ldr	r3, [pc, #532]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d112      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b82      	ldr	r3, [pc, #520]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b7e      	ldr	r3, [pc, #504]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x108>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d157      	bne.n	8003e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e242      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x74>
 8003d7e:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a75      	ldr	r2, [pc, #468]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x98>
 8003d96:	4b70      	ldr	r3, [pc, #448]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6f      	ldr	r2, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b6d      	ldr	r3, [pc, #436]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6c      	ldr	r2, [pc, #432]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003db0:	4b69      	ldr	r3, [pc, #420]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a68      	ldr	r2, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b66      	ldr	r3, [pc, #408]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a65      	ldr	r2, [pc, #404]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd f944 	bl	800105c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd f940 	bl	800105c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e207      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xc0>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd f930 	bl	800105c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd f92c 	bl	800105c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1f3      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b51      	ldr	r3, [pc, #324]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0xe8>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d063      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e46:	4b44      	ldr	r3, [pc, #272]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1c7      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4937      	ldr	r1, [pc, #220]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e03a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b34      	ldr	r3, [pc, #208]	; (8003f5c <HAL_RCC_OscConfig+0x244>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd f8e5 	bl	800105c <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd f8e1 	bl	800105c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1a8      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4925      	ldr	r1, [pc, #148]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x244>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f8c4 	bl	800105c <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd f8c0 	bl	800105c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e187      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d036      	beq.n	8003f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_RCC_OscConfig+0x248>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd f8a4 	bl	800105c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fd f8a0 	bl	800105c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e167      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x200>
 8003f36:	e01b      	b.n	8003f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_RCC_OscConfig+0x248>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd f88d 	bl	800105c <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	e00e      	b.n	8003f64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fd f889 	bl	800105c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d907      	bls.n	8003f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e150      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	42470000 	.word	0x42470000
 8003f60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	4b88      	ldr	r3, [pc, #544]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ea      	bne.n	8003f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8097 	beq.w	80040ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f82:	4b81      	ldr	r3, [pc, #516]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	4b7d      	ldr	r3, [pc, #500]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a7c      	ldr	r2, [pc, #496]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9e:	4b7a      	ldr	r3, [pc, #488]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	4b77      	ldr	r3, [pc, #476]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d118      	bne.n	8003fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fba:	4b74      	ldr	r3, [pc, #464]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a73      	ldr	r2, [pc, #460]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd f849 	bl	800105c <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fce:	f7fd f845 	bl	800105c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e10c      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x2ea>
 8003ff4:	4b64      	ldr	r3, [pc, #400]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a63      	ldr	r2, [pc, #396]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8004000:	e01c      	b.n	800403c <HAL_RCC_OscConfig+0x324>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b05      	cmp	r3, #5
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x30c>
 800400a:	4b5f      	ldr	r3, [pc, #380]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a5e      	ldr	r2, [pc, #376]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004010:	f043 0304 	orr.w	r3, r3, #4
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	4b5c      	ldr	r3, [pc, #368]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	4a5b      	ldr	r2, [pc, #364]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6713      	str	r3, [r2, #112]	; 0x70
 8004022:	e00b      	b.n	800403c <HAL_RCC_OscConfig+0x324>
 8004024:	4b58      	ldr	r3, [pc, #352]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a57      	ldr	r2, [pc, #348]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	4b55      	ldr	r3, [pc, #340]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a54      	ldr	r2, [pc, #336]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004036:	f023 0304 	bic.w	r3, r3, #4
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fd f80a 	bl	800105c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fd f806 	bl	800105c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0cb      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	4b49      	ldr	r3, [pc, #292]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0ee      	beq.n	800404c <HAL_RCC_OscConfig+0x334>
 800406e:	e014      	b.n	800409a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004070:	f7fc fff4 	bl	800105c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fc fff0 	bl	800105c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0b5      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408e:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ee      	bne.n	8004078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800409a:	7dfb      	ldrb	r3, [r7, #23]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	4a38      	ldr	r2, [pc, #224]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a1 	beq.w	80041f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040b6:	4b34      	ldr	r3, [pc, #208]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d05c      	beq.n	800417c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d141      	bne.n	800414e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b31      	ldr	r3, [pc, #196]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fc ffc4 	bl	800105c <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fc ffc0 	bl	800105c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e087      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b27      	ldr	r3, [pc, #156]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	491b      	ldr	r1, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fc ff99 	bl	800105c <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412e:	f7fc ff95 	bl	800105c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e05c      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x416>
 800414c:	e054      	b.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fc ff82 	bl	800105c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fc ff7e 	bl	800105c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e045      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x444>
 800417a:	e03d      	b.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e038      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000
 8004190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_RCC_OscConfig+0x4ec>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d028      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d121      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d11a      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d111      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0cc      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b68      	ldr	r3, [pc, #416]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d90c      	bls.n	8004244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0b8      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a58      	ldr	r2, [pc, #352]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800427e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	494d      	ldr	r1, [pc, #308]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d044      	beq.n	8004328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d119      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e067      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4934      	ldr	r1, [pc, #208]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fc feb0 	bl	800105c <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fc feac 	bl	800105c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e04f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d20c      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e032      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4916      	ldr	r1, [pc, #88]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800438e:	f000 f821 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004392:	4602      	mov	r2, r0
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	490a      	ldr	r1, [pc, #40]	; (80043c8 <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	5ccb      	ldrb	r3, [r1, r3]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc fe10 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023c00 	.word	0x40023c00
 80043c4:	40023800 	.word	0x40023800
 80043c8:	08008d5c 	.word	0x08008d5c
 80043cc:	20000000 	.word	0x20000000
 80043d0:	20000004 	.word	0x20000004

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b094      	sub	sp, #80	; 0x50
 80043da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	647b      	str	r3, [r7, #68]	; 0x44
 80043e0:	2300      	movs	r3, #0
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	2300      	movs	r3, #0
 80043e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ec:	4b79      	ldr	r3, [pc, #484]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d00d      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x40>
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	f200 80e1 	bhi.w	80045c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x34>
 8004402:	2b04      	cmp	r3, #4
 8004404:	d003      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x3a>
 8004406:	e0db      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800440c:	e0db      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800440e:	4b73      	ldr	r3, [pc, #460]	; (80045dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004412:	e0d8      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004414:	4b6f      	ldr	r3, [pc, #444]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441e:	4b6d      	ldr	r3, [pc, #436]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	2200      	movs	r2, #0
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
 8004434:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443c:	633b      	str	r3, [r7, #48]	; 0x30
 800443e:	2300      	movs	r3, #0
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
 8004442:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004446:	4622      	mov	r2, r4
 8004448:	462b      	mov	r3, r5
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	0159      	lsls	r1, r3, #5
 8004454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004458:	0150      	lsls	r0, r2, #5
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4621      	mov	r1, r4
 8004460:	1a51      	subs	r1, r2, r1
 8004462:	6139      	str	r1, [r7, #16]
 8004464:	4629      	mov	r1, r5
 8004466:	eb63 0301 	sbc.w	r3, r3, r1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004478:	4659      	mov	r1, fp
 800447a:	018b      	lsls	r3, r1, #6
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004482:	4651      	mov	r1, sl
 8004484:	018a      	lsls	r2, r1, #6
 8004486:	4651      	mov	r1, sl
 8004488:	ebb2 0801 	subs.w	r8, r2, r1
 800448c:	4659      	mov	r1, fp
 800448e:	eb63 0901 	sbc.w	r9, r3, r1
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a6:	4690      	mov	r8, r2
 80044a8:	4699      	mov	r9, r3
 80044aa:	4623      	mov	r3, r4
 80044ac:	eb18 0303 	adds.w	r3, r8, r3
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	462b      	mov	r3, r5
 80044b4:	eb49 0303 	adc.w	r3, r9, r3
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044c6:	4629      	mov	r1, r5
 80044c8:	024b      	lsls	r3, r1, #9
 80044ca:	4621      	mov	r1, r4
 80044cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044d0:	4621      	mov	r1, r4
 80044d2:	024a      	lsls	r2, r1, #9
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044da:	2200      	movs	r2, #0
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044e4:	f7fb fecc 	bl	8000280 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4613      	mov	r3, r2
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f0:	e058      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	2200      	movs	r2, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	4611      	mov	r1, r2
 80044fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004502:	623b      	str	r3, [r7, #32]
 8004504:	2300      	movs	r3, #0
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	f04f 0000 	mov.w	r0, #0
 8004514:	f04f 0100 	mov.w	r1, #0
 8004518:	0159      	lsls	r1, r3, #5
 800451a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451e:	0150      	lsls	r0, r2, #5
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4641      	mov	r1, r8
 8004526:	ebb2 0a01 	subs.w	sl, r2, r1
 800452a:	4649      	mov	r1, r9
 800452c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800453c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004544:	ebb2 040a 	subs.w	r4, r2, sl
 8004548:	eb63 050b 	sbc.w	r5, r3, fp
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	00eb      	lsls	r3, r5, #3
 8004556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800455a:	00e2      	lsls	r2, r4, #3
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
 8004560:	4643      	mov	r3, r8
 8004562:	18e3      	adds	r3, r4, r3
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	464b      	mov	r3, r9
 8004568:	eb45 0303 	adc.w	r3, r5, r3
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800457a:	4629      	mov	r1, r5
 800457c:	028b      	lsls	r3, r1, #10
 800457e:	4621      	mov	r1, r4
 8004580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004584:	4621      	mov	r1, r4
 8004586:	028a      	lsls	r2, r1, #10
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458e:	2200      	movs	r2, #0
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	61fa      	str	r2, [r7, #28]
 8004594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004598:	f7fb fe72 	bl	8000280 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4613      	mov	r3, r2
 80045a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	3301      	adds	r3, #1
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045be:	e002      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3750      	adds	r7, #80	; 0x50
 80045cc:	46bd      	mov	sp, r7
 80045ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	00f42400 	.word	0x00f42400
 80045dc:	007a1200 	.word	0x007a1200

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000000 	.word	0x20000000

080045f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045fc:	f7ff fff0 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0a9b      	lsrs	r3, r3, #10
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4903      	ldr	r1, [pc, #12]	; (800461c <HAL_RCC_GetPCLK1Freq+0x24>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	08008d6c 	.word	0x08008d6c

08004620 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004644:	2b00      	cmp	r3, #0
 8004646:	d035      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004648:	4b62      	ldr	r3, [pc, #392]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800464e:	f7fc fd05 	bl	800105c <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004656:	f7fc fd01 	bl	800105c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e0b0      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004668:	4b5b      	ldr	r3, [pc, #364]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	019a      	lsls	r2, r3, #6
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	071b      	lsls	r3, r3, #28
 8004680:	4955      	ldr	r1, [pc, #340]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004688:	4b52      	ldr	r3, [pc, #328]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800468e:	f7fc fce5 	bl	800105c <HAL_GetTick>
 8004692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004696:	f7fc fce1 	bl	800105c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e090      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a8:	4b4b      	ldr	r3, [pc, #300]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8083 	beq.w	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	4b44      	ldr	r3, [pc, #272]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	4a43      	ldr	r2, [pc, #268]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d0:	6413      	str	r3, [r2, #64]	; 0x40
 80046d2:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046de:	4b3f      	ldr	r3, [pc, #252]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3e      	ldr	r2, [pc, #248]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046ea:	f7fc fcb7 	bl	800105c <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fc fcb3 	bl	800105c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e062      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004718:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02f      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d028      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800472e:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004736:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800473e:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004744:	4a24      	ldr	r2, [pc, #144]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d114      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004756:	f7fc fc81 	bl	800105c <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fc fc7d 	bl	800105c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e02a      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ee      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800478c:	d10d      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800479e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a2:	490d      	ldr	r1, [pc, #52]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]
 80047a8:	e005      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047b4:	6093      	str	r3, [r2, #8]
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c2:	4905      	ldr	r1, [pc, #20]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	42470068 	.word	0x42470068
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
 80047e0:	42470e40 	.word	0x42470e40

080047e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d13e      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d12f      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800481a:	617b      	str	r3, [r7, #20]
          break;
 800481c:	e02f      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800482a:	d108      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800482c:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e007      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800483e:	4b14      	ldr	r3, [pc, #80]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004868:	0f1b      	lsrs	r3, r3, #28
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]
          break;
 8004876:	e002      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
          break;
 800487c:	bf00      	nop
        }
      }
      break;
 800487e:	bf00      	nop
    }
  }
  return frequency;
 8004880:	697b      	ldr	r3, [r7, #20]
}
 8004882:	4618      	mov	r0, r3
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	00bb8000 	.word	0x00bb8000
 8004898:	007a1200 	.word	0x007a1200
 800489c:	00f42400 	.word	0x00f42400

080048a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07b      	b.n	80049aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d108      	bne.n	80048cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c2:	d009      	beq.n	80048d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	61da      	str	r2, [r3, #28]
 80048ca:	e005      	b.n	80048d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fa5e 	bl	8000db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	ea42 0103 	orr.w	r1, r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0104 	and.w	r1, r3, #4
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f003 0210 	and.w	r2, r3, #16
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049b2:	b084      	sub	sp, #16
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	f107 001c 	add.w	r0, r7, #28
 80049c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d122      	bne.n	8004a10 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f001 fac5 	bl	8005f94 <USB_CoreReset>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e01a      	b.n	8004a46 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f001 fab9 	bl	8005f94 <USB_CoreReset>
 8004a22:	4603      	mov	r3, r0
 8004a24:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
 8004a38:	e005      	b.n	8004a46 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d10b      	bne.n	8004a64 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f043 0206 	orr.w	r2, r3, #6
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a70:	b004      	add	sp, #16
 8004a72:	4770      	bx	lr

08004a74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d165      	bne.n	8004b54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a41      	ldr	r2, [pc, #260]	; (8004b90 <USB_SetTurnaroundTime+0x11c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d906      	bls.n	8004a9e <USB_SetTurnaroundTime+0x2a>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4a40      	ldr	r2, [pc, #256]	; (8004b94 <USB_SetTurnaroundTime+0x120>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d202      	bcs.n	8004a9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a98:	230f      	movs	r3, #15
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e062      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <USB_SetTurnaroundTime+0x120>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d306      	bcc.n	8004ab4 <USB_SetTurnaroundTime+0x40>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4a3b      	ldr	r2, [pc, #236]	; (8004b98 <USB_SetTurnaroundTime+0x124>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d202      	bcs.n	8004ab4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aae:	230e      	movs	r3, #14
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e057      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <USB_SetTurnaroundTime+0x124>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d306      	bcc.n	8004aca <USB_SetTurnaroundTime+0x56>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a37      	ldr	r2, [pc, #220]	; (8004b9c <USB_SetTurnaroundTime+0x128>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d202      	bcs.n	8004aca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ac4:	230d      	movs	r3, #13
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	e04c      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4a33      	ldr	r2, [pc, #204]	; (8004b9c <USB_SetTurnaroundTime+0x128>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d306      	bcc.n	8004ae0 <USB_SetTurnaroundTime+0x6c>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a32      	ldr	r2, [pc, #200]	; (8004ba0 <USB_SetTurnaroundTime+0x12c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d802      	bhi.n	8004ae0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ada:	230c      	movs	r3, #12
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	e041      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <USB_SetTurnaroundTime+0x12c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d906      	bls.n	8004af6 <USB_SetTurnaroundTime+0x82>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4a2e      	ldr	r2, [pc, #184]	; (8004ba4 <USB_SetTurnaroundTime+0x130>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d802      	bhi.n	8004af6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004af0:	230b      	movs	r3, #11
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e036      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <USB_SetTurnaroundTime+0x130>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d906      	bls.n	8004b0c <USB_SetTurnaroundTime+0x98>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <USB_SetTurnaroundTime+0x134>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d802      	bhi.n	8004b0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b06:	230a      	movs	r3, #10
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	e02b      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <USB_SetTurnaroundTime+0x134>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d906      	bls.n	8004b22 <USB_SetTurnaroundTime+0xae>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a25      	ldr	r2, [pc, #148]	; (8004bac <USB_SetTurnaroundTime+0x138>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d202      	bcs.n	8004b22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b1c:	2309      	movs	r3, #9
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e020      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <USB_SetTurnaroundTime+0x138>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d306      	bcc.n	8004b38 <USB_SetTurnaroundTime+0xc4>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <USB_SetTurnaroundTime+0x13c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d802      	bhi.n	8004b38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b32:	2308      	movs	r3, #8
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e015      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <USB_SetTurnaroundTime+0x13c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d906      	bls.n	8004b4e <USB_SetTurnaroundTime+0xda>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <USB_SetTurnaroundTime+0x140>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d202      	bcs.n	8004b4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b48:	2307      	movs	r3, #7
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e00a      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b4e:	2306      	movs	r3, #6
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e007      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b5a:	2309      	movs	r3, #9
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e001      	b.n	8004b64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b60:	2309      	movs	r3, #9
 8004b62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	029b      	lsls	r3, r3, #10
 8004b78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	00d8acbf 	.word	0x00d8acbf
 8004b94:	00e4e1c0 	.word	0x00e4e1c0
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	01067380 	.word	0x01067380
 8004ba0:	011a499f 	.word	0x011a499f
 8004ba4:	01312cff 	.word	0x01312cff
 8004ba8:	014ca43f 	.word	0x014ca43f
 8004bac:	016e3600 	.word	0x016e3600
 8004bb0:	01a6ab1f 	.word	0x01a6ab1f
 8004bb4:	01e84800 	.word	0x01e84800

08004bb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 0201 	bic.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d106      	bne.n	8004c28 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	e00b      	b.n	8004c40 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	e001      	b.n	8004c40 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e003      	b.n	8004c48 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c40:	2032      	movs	r0, #50	; 0x32
 8004c42:	f7fc fa17 	bl	8001074 <HAL_Delay>

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c50:	b084      	sub	sp, #16
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e009      	b.n	8004c84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	3340      	adds	r3, #64	; 0x40
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3301      	adds	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b0e      	cmp	r3, #14
 8004c88:	d9f2      	bls.n	8004c70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d11c      	bne.n	8004cca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c9e:	f043 0302 	orr.w	r3, r3, #2
 8004ca2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc8:	e00b      	b.n	8004ce2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2300      	movs	r3, #0
 8004cec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	680b      	ldr	r3, [r1, #0]
 8004d00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10c      	bne.n	8004d22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f949 	bl	8004fa8 <USB_SetDevSpeed>
 8004d16:	e008      	b.n	8004d2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d18:	2101      	movs	r1, #1
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f944 	bl	8004fa8 <USB_SetDevSpeed>
 8004d20:	e003      	b.n	8004d2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d22:	2103      	movs	r1, #3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f93f 	bl	8004fa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f8f3 	bl	8004f18 <USB_FlushTxFifo>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f911 	bl	8004f64 <USB_FlushRxFifo>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	461a      	mov	r2, r3
 8004d54:	2300      	movs	r3, #0
 8004d56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2300      	movs	r3, #0
 8004d62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	e043      	b.n	8004dfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d8c:	d118      	bne.n	8004dc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	461a      	mov	r2, r3
 8004da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e013      	b.n	8004dd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	461a      	mov	r2, r3
 8004db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e008      	b.n	8004dd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	461a      	mov	r2, r3
 8004dce:	2300      	movs	r3, #0
 8004dd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	461a      	mov	r2, r3
 8004df2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004df6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d3b7      	bcc.n	8004d76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e043      	b.n	8004e94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e22:	d118      	bne.n	8004e56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e36:	461a      	mov	r2, r3
 8004e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e013      	b.n	8004e68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	e008      	b.n	8004e68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	461a      	mov	r2, r3
 8004e64:	2300      	movs	r3, #0
 8004e66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	461a      	mov	r2, r3
 8004e76:	2300      	movs	r3, #0
 8004e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	461a      	mov	r2, r3
 8004e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3301      	adds	r3, #1
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d3b7      	bcc.n	8004e0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ebc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f043 0210 	orr.w	r2, r3, #16
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <USB_DevInit+0x2c4>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f043 0208 	orr.w	r2, r3, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d107      	bne.n	8004f04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f10:	b004      	add	sp, #16
 8004f12:	4770      	bx	lr
 8004f14:	803c3800 	.word	0x803c3800

08004f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	019b      	lsls	r3, r3, #6
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <USB_FlushTxFifo+0x48>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d901      	bls.n	8004f44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e006      	b.n	8004f52 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d0f0      	beq.n	8004f32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	00030d40 	.word	0x00030d40

08004f64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2210      	movs	r2, #16
 8004f74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <USB_FlushRxFifo+0x40>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e006      	b.n	8004f96 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d0f0      	beq.n	8004f76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	00030d40 	.word	0x00030d40

08004fa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b087      	sub	sp, #28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 0306 	and.w	r3, r3, #6
 8004ff2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	75fb      	strb	r3, [r7, #23]
 8004ffe:	e00a      	b.n	8005016 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d002      	beq.n	800500c <USB_GetDevSpeed+0x32>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b06      	cmp	r3, #6
 800500a:	d102      	bne.n	8005012 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800500c:	2302      	movs	r3, #2
 800500e:	75fb      	strb	r3, [r7, #23]
 8005010:	e001      	b.n	8005016 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005012:	230f      	movs	r3, #15
 8005014:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d13a      	bne.n	80050b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	2101      	movs	r1, #1
 8005052:	fa01 f303 	lsl.w	r3, r1, r3
 8005056:	b29b      	uxth	r3, r3
 8005058:	68f9      	ldr	r1, [r7, #12]
 800505a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800505e:	4313      	orrs	r3, r2
 8005060:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d155      	bne.n	8005124 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	78db      	ldrb	r3, [r3, #3]
 8005092:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005094:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	059b      	lsls	r3, r3, #22
 800509a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800509c:	4313      	orrs	r3, r2
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e036      	b.n	8005124 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	69da      	ldr	r2, [r3, #28]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	2101      	movs	r1, #1
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d11a      	bne.n	8005124 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	78db      	ldrb	r3, [r3, #3]
 8005108:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800510a:	430b      	orrs	r3, r1
 800510c:	4313      	orrs	r3, r2
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005122:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d161      	bne.n	8005214 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005166:	d11f      	bne.n	80051a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005186:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	2101      	movs	r1, #1
 80051ba:	fa01 f303 	lsl.w	r3, r1, r3
 80051be:	b29b      	uxth	r3, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c8:	4013      	ands	r3, r2
 80051ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	2101      	movs	r1, #1
 80051de:	fa01 f303 	lsl.w	r3, r1, r3
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ec:	4013      	ands	r3, r2
 80051ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	0159      	lsls	r1, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	440b      	add	r3, r1
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	4619      	mov	r1, r3
 800520c:	4b35      	ldr	r3, [pc, #212]	; (80052e4 <USB_DeactivateEndpoint+0x1b0>)
 800520e:	4013      	ands	r3, r2
 8005210:	600b      	str	r3, [r1, #0]
 8005212:	e060      	b.n	80052d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800522a:	d11f      	bne.n	800526c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005246:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800524a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800526a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	2101      	movs	r1, #1
 800527e:	fa01 f303 	lsl.w	r3, r1, r3
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	43db      	mvns	r3, r3
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800528c:	4013      	ands	r3, r2
 800528e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	2101      	movs	r1, #1
 80052a2:	fa01 f303 	lsl.w	r3, r1, r3
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	43db      	mvns	r3, r3
 80052aa:	68f9      	ldr	r1, [r7, #12]
 80052ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b0:	4013      	ands	r3, r2
 80052b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	0159      	lsls	r1, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	440b      	add	r3, r1
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	4619      	mov	r1, r3
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <USB_DeactivateEndpoint+0x1b4>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	ec337800 	.word	0xec337800
 80052e8:	eff37800 	.word	0xeff37800

080052ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	; 0x28
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4613      	mov	r3, r2
 80052f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b01      	cmp	r3, #1
 800530a:	f040 815c 	bne.w	80055c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d132      	bne.n	800537c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005334:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005358:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	440a      	add	r2, r1
 8005370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005374:	0cdb      	lsrs	r3, r3, #19
 8005376:	04db      	lsls	r3, r3, #19
 8005378:	6113      	str	r3, [r2, #16]
 800537a:	e074      	b.n	8005466 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005396:	0cdb      	lsrs	r3, r3, #19
 8005398:	04db      	lsls	r3, r3, #19
 800539a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6959      	ldr	r1, [r3, #20]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	440b      	add	r3, r1
 80053d8:	1e59      	subs	r1, r3, #1
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	fbb1 f3f3 	udiv	r3, r1, r3
 80053e2:	04d9      	lsls	r1, r3, #19
 80053e4:	4b9d      	ldr	r3, [pc, #628]	; (800565c <USB_EPStartXfer+0x370>)
 80053e6:	400b      	ands	r3, r1
 80053e8:	69b9      	ldr	r1, [r7, #24]
 80053ea:	0148      	lsls	r0, r1, #5
 80053ec:	69f9      	ldr	r1, [r7, #28]
 80053ee:	4401      	add	r1, r0
 80053f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053f4:	4313      	orrs	r3, r2
 80053f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540e:	69b9      	ldr	r1, [r7, #24]
 8005410:	0148      	lsls	r0, r1, #5
 8005412:	69f9      	ldr	r1, [r7, #28]
 8005414:	4401      	add	r1, r0
 8005416:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800541a:	4313      	orrs	r3, r2
 800541c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d11f      	bne.n	8005466 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005440:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005444:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005464:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d14b      	bne.n	8005504 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	461a      	mov	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	78db      	ldrb	r3, [r3, #3]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d128      	bne.n	80054e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d110      	bne.n	80054c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e00f      	b.n	80054e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e12f      	b.n	8005764 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005522:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	78db      	ldrb	r3, [r3, #3]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d015      	beq.n	8005558 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 8117 	beq.w	8005764 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	2101      	movs	r1, #1
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	69f9      	ldr	r1, [r7, #28]
 800554e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005552:	4313      	orrs	r3, r2
 8005554:	634b      	str	r3, [r1, #52]	; 0x34
 8005556:	e105      	b.n	8005764 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005564:	2b00      	cmp	r3, #0
 8005566:	d110      	bne.n	800558a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005582:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e00f      	b.n	80055aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	68d9      	ldr	r1, [r3, #12]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	b298      	uxth	r0, r3
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	4603      	mov	r3, r0
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa2b 	bl	8005a1a <USB_WritePacket>
 80055c4:	e0ce      	b.n	8005764 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e0:	0cdb      	lsrs	r3, r3, #19
 80055e2:	04db      	lsls	r3, r3, #19
 80055e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005600:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005604:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005608:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d126      	bne.n	8005660 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005628:	69b9      	ldr	r1, [r7, #24]
 800562a:	0148      	lsls	r0, r1, #5
 800562c:	69f9      	ldr	r1, [r7, #28]
 800562e:	4401      	add	r1, r0
 8005630:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005634:	4313      	orrs	r3, r2
 8005636:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005656:	6113      	str	r3, [r2, #16]
 8005658:	e036      	b.n	80056c8 <USB_EPStartXfer+0x3dc>
 800565a:	bf00      	nop
 800565c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	4413      	add	r3, r2
 800566a:	1e5a      	subs	r2, r3, #1
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	8afb      	ldrh	r3, [r7, #22]
 8005686:	04d9      	lsls	r1, r3, #19
 8005688:	4b39      	ldr	r3, [pc, #228]	; (8005770 <USB_EPStartXfer+0x484>)
 800568a:	400b      	ands	r3, r1
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	0148      	lsls	r0, r1, #5
 8005690:	69f9      	ldr	r1, [r7, #28]
 8005692:	4401      	add	r1, r0
 8005694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005698:	4313      	orrs	r3, r2
 800569a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	8af9      	ldrh	r1, [r7, #22]
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b8:	69b9      	ldr	r1, [r7, #24]
 80056ba:	0148      	lsls	r0, r1, #5
 80056bc:	69f9      	ldr	r1, [r7, #28]
 80056be:	4401      	add	r1, r0
 80056c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056c4:	4313      	orrs	r3, r2
 80056c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10d      	bne.n	80056ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68d9      	ldr	r1, [r3, #12]
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e6:	460a      	mov	r2, r1
 80056e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	78db      	ldrb	r3, [r3, #3]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d128      	bne.n	8005744 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d110      	bne.n	8005724 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e00f      	b.n	8005744 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	1ff80000 	.word	0x1ff80000

08005774 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b01      	cmp	r3, #1
 8005792:	f040 80cd 	bne.w	8005930 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d132      	bne.n	8005804 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fc:	0cdb      	lsrs	r3, r3, #19
 80057fe:	04db      	lsls	r3, r3, #19
 8005800:	6113      	str	r3, [r2, #16]
 8005802:	e04e      	b.n	80058a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581e:	0cdb      	lsrs	r3, r3, #19
 8005820:	04db      	lsls	r3, r3, #19
 8005822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005842:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005846:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800587a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005892:	6939      	ldr	r1, [r7, #16]
 8005894:	0148      	lsls	r0, r1, #5
 8005896:	6979      	ldr	r1, [r7, #20]
 8005898:	4401      	add	r1, r0
 800589a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800589e:	4313      	orrs	r3, r2
 80058a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d11e      	bne.n	80058e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d009      	beq.n	80058c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	461a      	mov	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e092      	b.n	8005a0c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005904:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d07e      	beq.n	8005a0c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	2101      	movs	r1, #1
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	6979      	ldr	r1, [r7, #20]
 8005926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800592a:	4313      	orrs	r3, r2
 800592c:	634b      	str	r3, [r1, #52]	; 0x34
 800592e:	e06d      	b.n	8005a0c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594a:	0cdb      	lsrs	r3, r3, #19
 800594c:	04db      	lsls	r3, r3, #19
 800594e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800596e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005972:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ba:	6939      	ldr	r1, [r7, #16]
 80059bc:	0148      	lsls	r0, r1, #5
 80059be:	6979      	ldr	r1, [r7, #20]
 80059c0:	4401      	add	r1, r0
 80059c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059c6:	4313      	orrs	r3, r2
 80059c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10d      	bne.n	80059ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68d9      	ldr	r1, [r3, #12]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	460a      	mov	r2, r1
 80059ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b089      	sub	sp, #36	; 0x24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	4611      	mov	r1, r2
 8005a26:	461a      	mov	r2, r3
 8005a28:	460b      	mov	r3, r1
 8005a2a:	71fb      	strb	r3, [r7, #7]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005a38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11a      	bne.n	8005a76 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a40:	88bb      	ldrh	r3, [r7, #4]
 8005a42:	3303      	adds	r3, #3
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	e00f      	b.n	8005a6e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	031a      	lsls	r2, r3, #12
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3304      	adds	r3, #4
 8005a66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d3eb      	bcc.n	8005a4e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3724      	adds	r7, #36	; 0x24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	3303      	adds	r3, #3
 8005a9e:	089b      	lsrs	r3, r3, #2
 8005aa0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e00b      	b.n	8005ac0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d3ef      	bcc.n	8005aa8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3724      	adds	r7, #36	; 0x24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d12c      	bne.n	8005b4c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	db12      	blt.n	8005b2a <USB_EPSetStall+0x54>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00f      	beq.n	8005b2a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b28:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e02b      	b.n	8005ba4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	db12      	blt.n	8005b84 <USB_EPSetStall+0xae>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00f      	beq.n	8005b84 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b82:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ba2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d128      	bne.n	8005c20 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	78db      	ldrb	r3, [r3, #3]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d003      	beq.n	8005bfe <USB_EPClearStall+0x4c>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	78db      	ldrb	r3, [r3, #3]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d138      	bne.n	8005c70 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e027      	b.n	8005c70 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	78db      	ldrb	r3, [r3, #3]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d003      	beq.n	8005c50 <USB_EPClearStall+0x9e>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	78db      	ldrb	r3, [r3, #3]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d10f      	bne.n	8005c70 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ca0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ce4:	f023 0303 	bic.w	r3, r3, #3
 8005ce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf8:	f023 0302 	bic.w	r3, r3, #2
 8005cfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d3a:	f043 0302 	orr.w	r3, r3, #2
 8005d3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4013      	ands	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d66:	68fb      	ldr	r3, [r7, #12]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	0c1b      	lsrs	r3, r3, #16
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	b29b      	uxth	r3, r3
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	4013      	ands	r3, r2
 8005e08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
 8005e48:	01db      	lsls	r3, r3, #7
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4013      	ands	r3, r2
 8005e64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e66:	68bb      	ldr	r3, [r7, #8]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f003 0301 	and.w	r3, r3, #1
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005eae:	f023 0307 	bic.w	r3, r3, #7
 8005eb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	333c      	adds	r3, #60	; 0x3c
 8005eee:	3304      	adds	r3, #4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4a26      	ldr	r2, [pc, #152]	; (8005f90 <USB_EP0_OutStart+0xb8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d90a      	bls.n	8005f12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f0c:	d101      	bne.n	8005f12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e037      	b.n	8005f82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f40:	f043 0318 	orr.w	r3, r3, #24
 8005f44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f54:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d10f      	bne.n	8005f80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	4f54300a 	.word	0x4f54300a

08005f94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <USB_CoreReset+0x64>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e01b      	b.n	8005fea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	daf2      	bge.n	8005fa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f043 0201 	orr.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a09      	ldr	r2, [pc, #36]	; (8005ff8 <USB_CoreReset+0x64>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e006      	b.n	8005fea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d0f0      	beq.n	8005fca <USB_CoreReset+0x36>

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	00030d40 	.word	0x00030d40

08005ffc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006008:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800600c:	f002 f96a 	bl	80082e4 <USBD_static_malloc>
 8006010:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006020:	2302      	movs	r3, #2
 8006022:	e066      	b.n	80060f2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	7c1b      	ldrb	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d119      	bne.n	8006068 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006038:	2202      	movs	r2, #2
 800603a:	2181      	movs	r1, #129	; 0x81
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f002 f82e 	bl	800809e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800604c:	2202      	movs	r2, #2
 800604e:	2101      	movs	r1, #1
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f002 f824 	bl	800809e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2210      	movs	r2, #16
 8006062:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006066:	e016      	b.n	8006096 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006068:	2340      	movs	r3, #64	; 0x40
 800606a:	2202      	movs	r2, #2
 800606c:	2181      	movs	r1, #129	; 0x81
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f002 f815 	bl	800809e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	2202      	movs	r2, #2
 800607e:	2101      	movs	r1, #1
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f002 f80c 	bl	800809e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2210      	movs	r2, #16
 8006092:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006096:	2308      	movs	r3, #8
 8006098:	2203      	movs	r2, #3
 800609a:	2182      	movs	r1, #130	; 0x82
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fffe 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	7c1b      	ldrb	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d109      	bne.n	80060e0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d6:	2101      	movs	r1, #1
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f002 f8cf 	bl	800827c <USBD_LL_PrepareReceive>
 80060de:	e007      	b.n	80060f0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060e6:	2340      	movs	r3, #64	; 0x40
 80060e8:	2101      	movs	r1, #1
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f002 f8c6 	bl	800827c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006106:	2181      	movs	r1, #129	; 0x81
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 ffee 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006114:	2101      	movs	r1, #1
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 ffe7 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006124:	2182      	movs	r1, #130	; 0x82
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 ffdf 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00e      	beq.n	8006164 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006156:	4618      	mov	r0, r3
 8006158:	f002 f8d2 	bl	8008300 <USBD_static_free>
    pdev->pClassData = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006180:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006194:	2303      	movs	r3, #3
 8006196:	e0af      	b.n	80062f8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d03f      	beq.n	8006224 <USBD_CDC_Setup+0xb4>
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	f040 809f 	bne.w	80062e8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	88db      	ldrh	r3, [r3, #6]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d02e      	beq.n	8006210 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	b25b      	sxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	da16      	bge.n	80061ea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80061c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	88d2      	ldrh	r2, [r2, #6]
 80061ce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	88db      	ldrh	r3, [r3, #6]
 80061d4:	2b07      	cmp	r3, #7
 80061d6:	bf28      	it	cs
 80061d8:	2307      	movcs	r3, #7
 80061da:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	89fa      	ldrh	r2, [r7, #14]
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fb19 	bl	800781a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80061e8:	e085      	b.n	80062f6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	785a      	ldrb	r2, [r3, #1]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	88db      	ldrh	r3, [r3, #6]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006200:	6939      	ldr	r1, [r7, #16]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	461a      	mov	r2, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 fb32 	bl	8007872 <USBD_CtlPrepareRx>
      break;
 800620e:	e072      	b.n	80062f6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	7850      	ldrb	r0, [r2, #1]
 800621c:	2200      	movs	r2, #0
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	4798      	blx	r3
      break;
 8006222:	e068      	b.n	80062f6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	2b0b      	cmp	r3, #11
 800622a:	d852      	bhi.n	80062d2 <USBD_CDC_Setup+0x162>
 800622c:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <USBD_CDC_Setup+0xc4>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006265 	.word	0x08006265
 8006238:	080062e1 	.word	0x080062e1
 800623c:	080062d3 	.word	0x080062d3
 8006240:	080062d3 	.word	0x080062d3
 8006244:	080062d3 	.word	0x080062d3
 8006248:	080062d3 	.word	0x080062d3
 800624c:	080062d3 	.word	0x080062d3
 8006250:	080062d3 	.word	0x080062d3
 8006254:	080062d3 	.word	0x080062d3
 8006258:	080062d3 	.word	0x080062d3
 800625c:	0800628f 	.word	0x0800628f
 8006260:	080062b9 	.word	0x080062b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b03      	cmp	r3, #3
 800626e:	d107      	bne.n	8006280 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006270:	f107 030a 	add.w	r3, r7, #10
 8006274:	2202      	movs	r2, #2
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 face 	bl	800781a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800627e:	e032      	b.n	80062e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 fa58 	bl	8007738 <USBD_CtlError>
            ret = USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	75fb      	strb	r3, [r7, #23]
          break;
 800628c:	e02b      	b.n	80062e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b03      	cmp	r3, #3
 8006298:	d107      	bne.n	80062aa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800629a:	f107 030d 	add.w	r3, r7, #13
 800629e:	2201      	movs	r2, #1
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 fab9 	bl	800781a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062a8:	e01d      	b.n	80062e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 fa43 	bl	8007738 <USBD_CtlError>
            ret = USBD_FAIL;
 80062b2:	2303      	movs	r3, #3
 80062b4:	75fb      	strb	r3, [r7, #23]
          break;
 80062b6:	e016      	b.n	80062e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d00f      	beq.n	80062e4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fa36 	bl	8007738 <USBD_CtlError>
            ret = USBD_FAIL;
 80062cc:	2303      	movs	r3, #3
 80062ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062d0:	e008      	b.n	80062e4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fa2f 	bl	8007738 <USBD_CtlError>
          ret = USBD_FAIL;
 80062da:	2303      	movs	r3, #3
 80062dc:	75fb      	strb	r3, [r7, #23]
          break;
 80062de:	e002      	b.n	80062e6 <USBD_CDC_Setup+0x176>
          break;
 80062e0:	bf00      	nop
 80062e2:	e008      	b.n	80062f6 <USBD_CDC_Setup+0x186>
          break;
 80062e4:	bf00      	nop
      }
      break;
 80062e6:	e006      	b.n	80062f6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fa24 	bl	8007738 <USBD_CtlError>
      ret = USBD_FAIL;
 80062f0:	2303      	movs	r3, #3
 80062f2:	75fb      	strb	r3, [r7, #23]
      break;
 80062f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800631e:	2303      	movs	r3, #3
 8006320:	e04f      	b.n	80063c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006328:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800632a:	78fa      	ldrb	r2, [r7, #3]
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3318      	adds	r3, #24
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d029      	beq.n	8006394 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	3318      	adds	r3, #24
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	78f9      	ldrb	r1, [r7, #3]
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	460b      	mov	r3, r1
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	1a5b      	subs	r3, r3, r1
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4403      	add	r3, r0
 8006360:	3344      	adds	r3, #68	; 0x44
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	fbb2 f1f3 	udiv	r1, r2, r3
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800636e:	2b00      	cmp	r3, #0
 8006370:	d110      	bne.n	8006394 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	3318      	adds	r3, #24
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006386:	78f9      	ldrb	r1, [r7, #3]
 8006388:	2300      	movs	r3, #0
 800638a:	2200      	movs	r2, #0
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 ff54 	bl	800823a <USBD_LL_Transmit>
 8006392:	e015      	b.n	80063c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80063bc:	78fa      	ldrb	r2, [r7, #3]
 80063be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e015      	b.n	8006418 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 ff64 	bl	80082be <USBD_LL_GetRxDataSize>
 80063f6:	4602      	mov	r2, r0
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006412:	4611      	mov	r1, r2
 8006414:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800642e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006436:	2303      	movs	r3, #3
 8006438:	e01b      	b.n	8006472 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d015      	beq.n	8006470 <USBD_CDC_EP0_RxReady+0x50>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800644a:	2bff      	cmp	r3, #255	; 0xff
 800644c:	d010      	beq.n	8006470 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800645c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006464:	b292      	uxth	r2, r2
 8006466:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	22ff      	movs	r2, #255	; 0xff
 800646c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2243      	movs	r2, #67	; 0x43
 8006488:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800648a:	4b03      	ldr	r3, [pc, #12]	; (8006498 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	20000094 	.word	0x20000094

0800649c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2243      	movs	r2, #67	; 0x43
 80064a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80064aa:	4b03      	ldr	r3, [pc, #12]	; (80064b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	20000050 	.word	0x20000050

080064bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2243      	movs	r2, #67	; 0x43
 80064c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80064ca:	4b03      	ldr	r3, [pc, #12]	; (80064d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	200000d8 	.word	0x200000d8

080064dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	220a      	movs	r2, #10
 80064e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80064ea:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	2000000c 	.word	0x2000000c

080064fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e004      	b.n	800651a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006526:	b480      	push	{r7}
 8006528:	b087      	sub	sp, #28
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006538:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	e008      	b.n	8006556 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006572:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800657a:	2303      	movs	r3, #3
 800657c:	e004      	b.n	8006588 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80065a4:	2301      	movs	r3, #1
 80065a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e01a      	b.n	80065ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d114      	bne.n	80065ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065de:	2181      	movs	r1, #129	; 0x81
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 fe2a 	bl	800823a <USBD_LL_Transmit>

    ret = USBD_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006602:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800660e:	2303      	movs	r3, #3
 8006610:	e016      	b.n	8006640 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	7c1b      	ldrb	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006624:	2101      	movs	r1, #1
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 fe28 	bl	800827c <USBD_LL_PrepareReceive>
 800662c:	e007      	b.n	800663e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006634:	2340      	movs	r3, #64	; 0x40
 8006636:	2101      	movs	r1, #1
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fe1f 	bl	800827c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	e01f      	b.n	80066a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	79fa      	ldrb	r2, [r7, #7]
 8006692:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f001 fc9b 	bl	8007fd0 <USBD_LL_Init>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80066bc:	2303      	movs	r3, #3
 80066be:	e016      	b.n	80066ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	f107 020e 	add.w	r2, r7, #14
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	4602      	mov	r2, r0
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fcb2 	bl	8008068 <USBD_LL_Start>
 8006704:	4603      	mov	r3, r0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	4611      	mov	r1, r2
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
 800674e:	4603      	mov	r3, r0
 8006750:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	4611      	mov	r1, r2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
  }

  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 ff90 	bl	80076c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d01a      	beq.n	80067fe <USBD_LL_SetupStage+0x72>
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d822      	bhi.n	8006812 <USBD_LL_SetupStage+0x86>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <USBD_LL_SetupStage+0x4a>
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d00a      	beq.n	80067ea <USBD_LL_SetupStage+0x5e>
 80067d4:	e01d      	b.n	8006812 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa62 	bl	8006ca8 <USBD_StdDevReq>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
      break;
 80067e8:	e020      	b.n	800682c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fac6 	bl	8006d84 <USBD_StdItfReq>
 80067f8:	4603      	mov	r3, r0
 80067fa:	73fb      	strb	r3, [r7, #15]
      break;
 80067fc:	e016      	b.n	800682c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fb05 	bl	8006e16 <USBD_StdEPReq>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]
      break;
 8006810:	e00c      	b.n	800682c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006818:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800681c:	b2db      	uxtb	r3, r3
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fc81 	bl	8008128 <USBD_LL_StallEP>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]
      break;
 800682a:	bf00      	nop
  }

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b086      	sub	sp, #24
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	460b      	mov	r3, r1
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d138      	bne.n	80068bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006850:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006858:	2b03      	cmp	r3, #3
 800685a:	d14a      	bne.n	80068f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d913      	bls.n	8006890 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	4293      	cmp	r3, r2
 8006880:	bf28      	it	cs
 8006882:	4613      	movcs	r3, r2
 8006884:	461a      	mov	r2, r3
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f001 f80f 	bl	80078ac <USBD_CtlContinueRx>
 800688e:	e030      	b.n	80068f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b03      	cmp	r3, #3
 800689a:	d10b      	bne.n	80068b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f001 f80a 	bl	80078ce <USBD_CtlSendStatus>
 80068ba:	e01a      	b.n	80068f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d114      	bne.n	80068f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00e      	beq.n	80068f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	7afa      	ldrb	r2, [r7, #11]
 80068de:	4611      	mov	r1, r2
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	4798      	blx	r3
 80068e4:	4603      	mov	r3, r0
 80068e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	e000      	b.n	80068f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	460b      	mov	r3, r1
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d16b      	bne.n	80069e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3314      	adds	r3, #20
 8006914:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800691c:	2b02      	cmp	r3, #2
 800691e:	d156      	bne.n	80069ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	429a      	cmp	r2, r3
 800692a:	d914      	bls.n	8006956 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	1ad2      	subs	r2, r2, r3
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	461a      	mov	r2, r3
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 ff84 	bl	8007850 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006948:	2300      	movs	r3, #0
 800694a:	2200      	movs	r2, #0
 800694c:	2100      	movs	r1, #0
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f001 fc94 	bl	800827c <USBD_LL_PrepareReceive>
 8006954:	e03b      	b.n	80069ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	d11c      	bne.n	800699c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800696a:	429a      	cmp	r2, r3
 800696c:	d316      	bcc.n	800699c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006978:	429a      	cmp	r2, r3
 800697a:	d20f      	bcs.n	800699c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800697c:	2200      	movs	r2, #0
 800697e:	2100      	movs	r1, #0
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 ff65 	bl	8007850 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800698e:	2300      	movs	r3, #0
 8006990:	2200      	movs	r2, #0
 8006992:	2100      	movs	r1, #0
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f001 fc71 	bl	800827c <USBD_LL_PrepareReceive>
 800699a:	e018      	b.n	80069ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d10b      	bne.n	80069c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069c0:	2180      	movs	r1, #128	; 0x80
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f001 fbb0 	bl	8008128 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 ff93 	bl	80078f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d122      	bne.n	8006a1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7ff fe98 	bl	800670e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069e6:	e01a      	b.n	8006a1e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d114      	bne.n	8006a1e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00e      	beq.n	8006a1e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	7afa      	ldrb	r2, [r7, #11]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	4798      	blx	r3
 8006a10:	4603      	mov	r3, r0
 8006a12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	e000      	b.n	8006a20 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e02f      	b.n	8006abc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d009      	beq.n	8006a86 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6852      	ldr	r2, [r2, #4]
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	4611      	mov	r1, r2
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a86:	2340      	movs	r3, #64	; 0x40
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 fb06 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2240      	movs	r2, #64	; 0x40
 8006a9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aa2:	2340      	movs	r3, #64	; 0x40
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2180      	movs	r1, #128	; 0x80
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 faf8 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2240      	movs	r2, #64	; 0x40
 8006ab8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2204      	movs	r2, #4
 8006afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d106      	bne.n	8006b32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e012      	b.n	8006b7c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d10b      	bne.n	8006b7a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e014      	b.n	8006bc8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d10d      	bne.n	8006bc6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	78fa      	ldrb	r2, [r7, #3]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e014      	b.n	8006c14 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d10d      	bne.n	8006c12 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6852      	ldr	r2, [r2, #4]
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
  }

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b087      	sub	sp, #28
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c88:	8a3b      	ldrh	r3, [r7, #16]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	b21a      	sxth	r2, r3
 8006c8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c98:	89fb      	ldrh	r3, [r7, #14]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d005      	beq.n	8006cce <USBD_StdDevReq+0x26>
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d853      	bhi.n	8006d6e <USBD_StdDevReq+0xc6>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <USBD_StdDevReq+0x3a>
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d14f      	bne.n	8006d6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce0:	e04a      	b.n	8006d78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b09      	cmp	r3, #9
 8006ce8:	d83b      	bhi.n	8006d62 <USBD_StdDevReq+0xba>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <USBD_StdDevReq+0x48>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d45 	.word	0x08006d45
 8006cf4:	08006d59 	.word	0x08006d59
 8006cf8:	08006d63 	.word	0x08006d63
 8006cfc:	08006d4f 	.word	0x08006d4f
 8006d00:	08006d63 	.word	0x08006d63
 8006d04:	08006d23 	.word	0x08006d23
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d63 	.word	0x08006d63
 8006d10:	08006d3b 	.word	0x08006d3b
 8006d14:	08006d2d 	.word	0x08006d2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9de 	bl	80070dc <USBD_GetDescriptor>
          break;
 8006d20:	e024      	b.n	8006d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fb43 	bl	80073b0 <USBD_SetAddress>
          break;
 8006d2a:	e01f      	b.n	8006d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fb82 	bl	8007438 <USBD_SetConfig>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
          break;
 8006d38:	e018      	b.n	8006d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc21 	bl	8007584 <USBD_GetConfig>
          break;
 8006d42:	e013      	b.n	8006d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fc52 	bl	80075f0 <USBD_GetStatus>
          break;
 8006d4c:	e00e      	b.n	8006d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fc81 	bl	8007658 <USBD_SetFeature>
          break;
 8006d56:	e009      	b.n	8006d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fc90 	bl	8007680 <USBD_ClrFeature>
          break;
 8006d60:	e004      	b.n	8006d6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fce7 	bl	8007738 <USBD_CtlError>
          break;
 8006d6a:	bf00      	nop
      }
      break;
 8006d6c:	e004      	b.n	8006d78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fce1 	bl	8007738 <USBD_CtlError>
      break;
 8006d76:	bf00      	nop
  }

  return ret;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop

08006d84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d005      	beq.n	8006daa <USBD_StdItfReq+0x26>
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d82f      	bhi.n	8006e02 <USBD_StdItfReq+0x7e>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <USBD_StdItfReq+0x26>
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d12b      	bne.n	8006e02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d81d      	bhi.n	8006df4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	889b      	ldrh	r3, [r3, #4]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d813      	bhi.n	8006dea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	88db      	ldrh	r3, [r3, #6]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d110      	bne.n	8006dfe <USBD_StdItfReq+0x7a>
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10d      	bne.n	8006dfe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fd73 	bl	80078ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006de8:	e009      	b.n	8006dfe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fca3 	bl	8007738 <USBD_CtlError>
          break;
 8006df2:	e004      	b.n	8006dfe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fc9e 	bl	8007738 <USBD_CtlError>
          break;
 8006dfc:	e000      	b.n	8006e00 <USBD_StdItfReq+0x7c>
          break;
 8006dfe:	bf00      	nop
      }
      break;
 8006e00:	e004      	b.n	8006e0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fc97 	bl	8007738 <USBD_CtlError>
      break;
 8006e0a:	bf00      	nop
  }

  return ret;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	889b      	ldrh	r3, [r3, #4]
 8006e28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d007      	beq.n	8006e46 <USBD_StdEPReq+0x30>
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	f200 8145 	bhi.w	80070c6 <USBD_StdEPReq+0x2b0>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00c      	beq.n	8006e5a <USBD_StdEPReq+0x44>
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	f040 8140 	bne.w	80070c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	e13a      	b.n	80070d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d007      	beq.n	8006e72 <USBD_StdEPReq+0x5c>
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	f300 8129 	bgt.w	80070ba <USBD_StdEPReq+0x2a4>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d07f      	beq.n	8006f6c <USBD_StdEPReq+0x156>
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d03c      	beq.n	8006eea <USBD_StdEPReq+0xd4>
 8006e70:	e123      	b.n	80070ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d002      	beq.n	8006e84 <USBD_StdEPReq+0x6e>
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d016      	beq.n	8006eb0 <USBD_StdEPReq+0x9a>
 8006e82:	e02c      	b.n	8006ede <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00d      	beq.n	8006ea6 <USBD_StdEPReq+0x90>
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	2b80      	cmp	r3, #128	; 0x80
 8006e8e:	d00a      	beq.n	8006ea6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f947 	bl	8008128 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e9a:	2180      	movs	r1, #128	; 0x80
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f943 	bl	8008128 <USBD_LL_StallEP>
 8006ea2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ea4:	e020      	b.n	8006ee8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc45 	bl	8007738 <USBD_CtlError>
              break;
 8006eae:	e01b      	b.n	8006ee8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	885b      	ldrh	r3, [r3, #2]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10e      	bne.n	8006ed6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <USBD_StdEPReq+0xc0>
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b80      	cmp	r3, #128	; 0x80
 8006ec2:	d008      	beq.n	8006ed6 <USBD_StdEPReq+0xc0>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	88db      	ldrh	r3, [r3, #6]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f929 	bl	8008128 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fcf9 	bl	80078ce <USBD_CtlSendStatus>

              break;
 8006edc:	e004      	b.n	8006ee8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fc29 	bl	8007738 <USBD_CtlError>
              break;
 8006ee6:	bf00      	nop
          }
          break;
 8006ee8:	e0ec      	b.n	80070c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d002      	beq.n	8006efc <USBD_StdEPReq+0xe6>
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d016      	beq.n	8006f28 <USBD_StdEPReq+0x112>
 8006efa:	e030      	b.n	8006f5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <USBD_StdEPReq+0x108>
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b80      	cmp	r3, #128	; 0x80
 8006f06:	d00a      	beq.n	8006f1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 f90b 	bl	8008128 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 f907 	bl	8008128 <USBD_LL_StallEP>
 8006f1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f1c:	e025      	b.n	8006f6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fc09 	bl	8007738 <USBD_CtlError>
              break;
 8006f26:	e020      	b.n	8006f6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	885b      	ldrh	r3, [r3, #2]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11b      	bne.n	8006f68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 f911 	bl	8008166 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fcc2 	bl	80078ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006f5c:	e004      	b.n	8006f68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fbe9 	bl	8007738 <USBD_CtlError>
              break;
 8006f66:	e000      	b.n	8006f6a <USBD_StdEPReq+0x154>
              break;
 8006f68:	bf00      	nop
          }
          break;
 8006f6a:	e0ab      	b.n	80070c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d002      	beq.n	8006f7e <USBD_StdEPReq+0x168>
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d032      	beq.n	8006fe2 <USBD_StdEPReq+0x1cc>
 8006f7c:	e097      	b.n	80070ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <USBD_StdEPReq+0x17e>
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	2b80      	cmp	r3, #128	; 0x80
 8006f88:	d004      	beq.n	8006f94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fbd3 	bl	8007738 <USBD_CtlError>
                break;
 8006f92:	e091      	b.n	80070b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	da0b      	bge.n	8006fb4 <USBD_StdEPReq+0x19e>
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	3310      	adds	r3, #16
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4413      	add	r3, r2
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	e00b      	b.n	8006fcc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	4413      	add	r3, r2
 8006fca:	3304      	adds	r3, #4
 8006fcc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fc1d 	bl	800781a <USBD_CtlSendData>
              break;
 8006fe0:	e06a      	b.n	80070b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	da11      	bge.n	800700e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	f003 020f 	and.w	r2, r3, #15
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	3324      	adds	r3, #36	; 0x24
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d117      	bne.n	8007034 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fb96 	bl	8007738 <USBD_CtlError>
                  break;
 800700c:	e054      	b.n	80070b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	f003 020f 	and.w	r2, r3, #15
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb83 	bl	8007738 <USBD_CtlError>
                  break;
 8007032:	e041      	b.n	80070b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	da0b      	bge.n	8007054 <USBD_StdEPReq+0x23e>
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	3310      	adds	r3, #16
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4413      	add	r3, r2
 8007050:	3304      	adds	r3, #4
 8007052:	e00b      	b.n	800706c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4413      	add	r3, r2
 800706a:	3304      	adds	r3, #4
 800706c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <USBD_StdEPReq+0x264>
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b80      	cmp	r3, #128	; 0x80
 8007078:	d103      	bne.n	8007082 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	e00e      	b.n	80070a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 f88c 	bl	80081a4 <USBD_LL_IsStallEP>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2201      	movs	r2, #1
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	e002      	b.n	80070a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2202      	movs	r2, #2
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fbb7 	bl	800781a <USBD_CtlSendData>
              break;
 80070ac:	e004      	b.n	80070b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fb41 	bl	8007738 <USBD_CtlError>
              break;
 80070b6:	bf00      	nop
          }
          break;
 80070b8:	e004      	b.n	80070c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fb3b 	bl	8007738 <USBD_CtlError>
          break;
 80070c2:	bf00      	nop
      }
      break;
 80070c4:	e004      	b.n	80070d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fb35 	bl	8007738 <USBD_CtlError>
      break;
 80070ce:	bf00      	nop
  }

  return ret;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	885b      	ldrh	r3, [r3, #2]
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	2b06      	cmp	r3, #6
 80070fe:	f200 8128 	bhi.w	8007352 <USBD_GetDescriptor+0x276>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <USBD_GetDescriptor+0x2c>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	08007125 	.word	0x08007125
 800710c:	0800713d 	.word	0x0800713d
 8007110:	0800717d 	.word	0x0800717d
 8007114:	08007353 	.word	0x08007353
 8007118:	08007353 	.word	0x08007353
 800711c:	080072f3 	.word	0x080072f3
 8007120:	0800731f 	.word	0x0800731f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7c12      	ldrb	r2, [r2, #16]
 8007130:	f107 0108 	add.w	r1, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
      break;
 800713a:	e112      	b.n	8007362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	7c1b      	ldrb	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10d      	bne.n	8007160 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f107 0208 	add.w	r2, r7, #8
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
 8007154:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3301      	adds	r3, #1
 800715a:	2202      	movs	r2, #2
 800715c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800715e:	e100      	b.n	8007362 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	f107 0208 	add.w	r2, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3301      	adds	r3, #1
 8007176:	2202      	movs	r2, #2
 8007178:	701a      	strb	r2, [r3, #0]
      break;
 800717a:	e0f2      	b.n	8007362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	885b      	ldrh	r3, [r3, #2]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b05      	cmp	r3, #5
 8007184:	f200 80ac 	bhi.w	80072e0 <USBD_GetDescriptor+0x204>
 8007188:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <USBD_GetDescriptor+0xb4>)
 800718a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718e:	bf00      	nop
 8007190:	080071a9 	.word	0x080071a9
 8007194:	080071dd 	.word	0x080071dd
 8007198:	08007211 	.word	0x08007211
 800719c:	08007245 	.word	0x08007245
 80071a0:	08007279 	.word	0x08007279
 80071a4:	080072ad 	.word	0x080072ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7c12      	ldrb	r2, [r2, #16]
 80071c0:	f107 0108 	add.w	r1, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ca:	e091      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fab2 	bl	8007738 <USBD_CtlError>
            err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
          break;
 80071da:	e089      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	7c12      	ldrb	r2, [r2, #16]
 80071f4:	f107 0108 	add.w	r1, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fe:	e077      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa98 	bl	8007738 <USBD_CtlError>
            err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
          break;
 800720e:	e06f      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7c12      	ldrb	r2, [r2, #16]
 8007228:	f107 0108 	add.w	r1, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007232:	e05d      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa7e 	bl	8007738 <USBD_CtlError>
            err++;
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	3301      	adds	r3, #1
 8007240:	72fb      	strb	r3, [r7, #11]
          break;
 8007242:	e055      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7c12      	ldrb	r2, [r2, #16]
 800725c:	f107 0108 	add.w	r1, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007266:	e043      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa64 	bl	8007738 <USBD_CtlError>
            err++;
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	3301      	adds	r3, #1
 8007274:	72fb      	strb	r3, [r7, #11]
          break;
 8007276:	e03b      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7c12      	ldrb	r2, [r2, #16]
 8007290:	f107 0108 	add.w	r1, r7, #8
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
 8007298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800729a:	e029      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fa4a 	bl	8007738 <USBD_CtlError>
            err++;
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	3301      	adds	r3, #1
 80072a8:	72fb      	strb	r3, [r7, #11]
          break;
 80072aa:	e021      	b.n	80072f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	7c12      	ldrb	r2, [r2, #16]
 80072c4:	f107 0108 	add.w	r1, r7, #8
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
 80072cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ce:	e00f      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa30 	bl	8007738 <USBD_CtlError>
            err++;
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	3301      	adds	r3, #1
 80072dc:	72fb      	strb	r3, [r7, #11]
          break;
 80072de:	e007      	b.n	80072f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa28 	bl	8007738 <USBD_CtlError>
          err++;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
 80072ea:	3301      	adds	r3, #1
 80072ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80072ee:	bf00      	nop
      }
      break;
 80072f0:	e037      	b.n	8007362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	7c1b      	ldrb	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	f107 0208 	add.w	r2, r7, #8
 8007306:	4610      	mov	r0, r2
 8007308:	4798      	blx	r3
 800730a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800730c:	e029      	b.n	8007362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fa11 	bl	8007738 <USBD_CtlError>
        err++;
 8007316:	7afb      	ldrb	r3, [r7, #11]
 8007318:	3301      	adds	r3, #1
 800731a:	72fb      	strb	r3, [r7, #11]
      break;
 800731c:	e021      	b.n	8007362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	7c1b      	ldrb	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	f107 0208 	add.w	r2, r7, #8
 8007332:	4610      	mov	r0, r2
 8007334:	4798      	blx	r3
 8007336:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	2207      	movs	r2, #7
 800733e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007340:	e00f      	b.n	8007362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f9f7 	bl	8007738 <USBD_CtlError>
        err++;
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	3301      	adds	r3, #1
 800734e:	72fb      	strb	r3, [r7, #11]
      break;
 8007350:	e007      	b.n	8007362 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f9ef 	bl	8007738 <USBD_CtlError>
      err++;
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	3301      	adds	r3, #1
 800735e:	72fb      	strb	r3, [r7, #11]
      break;
 8007360:	bf00      	nop
  }

  if (err != 0U)
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11e      	bne.n	80073a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	88db      	ldrh	r3, [r3, #6]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d016      	beq.n	800739e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007370:	893b      	ldrh	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00e      	beq.n	8007394 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	88da      	ldrh	r2, [r3, #6]
 800737a:	893b      	ldrh	r3, [r7, #8]
 800737c:	4293      	cmp	r3, r2
 800737e:	bf28      	it	cs
 8007380:	4613      	movcs	r3, r2
 8007382:	b29b      	uxth	r3, r3
 8007384:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007386:	893b      	ldrh	r3, [r7, #8]
 8007388:	461a      	mov	r2, r3
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa44 	bl	800781a <USBD_CtlSendData>
 8007392:	e009      	b.n	80073a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9ce 	bl	8007738 <USBD_CtlError>
 800739c:	e004      	b.n	80073a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa95 	bl	80078ce <USBD_CtlSendStatus>
 80073a4:	e000      	b.n	80073a8 <USBD_GetDescriptor+0x2cc>
    return;
 80073a6:	bf00      	nop
  }
}
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop

080073b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	889b      	ldrh	r3, [r3, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d131      	bne.n	8007426 <USBD_SetAddress+0x76>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	88db      	ldrh	r3, [r3, #6]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d12d      	bne.n	8007426 <USBD_SetAddress+0x76>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	885b      	ldrh	r3, [r3, #2]
 80073ce:	2b7f      	cmp	r3, #127	; 0x7f
 80073d0:	d829      	bhi.n	8007426 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	885b      	ldrh	r3, [r3, #2]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d104      	bne.n	80073f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9a3 	bl	8007738 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f2:	e01d      	b.n	8007430 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7bfa      	ldrb	r2, [r7, #15]
 80073f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fefb 	bl	80081fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa61 	bl	80078ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741a:	e009      	b.n	8007430 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007424:	e004      	b.n	8007430 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f985 	bl	8007738 <USBD_CtlError>
  }
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	b2da      	uxtb	r2, r3
 800744c:	4b4c      	ldr	r3, [pc, #304]	; (8007580 <USBD_SetConfig+0x148>)
 800744e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007450:	4b4b      	ldr	r3, [pc, #300]	; (8007580 <USBD_SetConfig+0x148>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d905      	bls.n	8007464 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f96c 	bl	8007738 <USBD_CtlError>
    return USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	e088      	b.n	8007576 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d002      	beq.n	8007476 <USBD_SetConfig+0x3e>
 8007470:	2b03      	cmp	r3, #3
 8007472:	d025      	beq.n	80074c0 <USBD_SetConfig+0x88>
 8007474:	e071      	b.n	800755a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007476:	4b42      	ldr	r3, [pc, #264]	; (8007580 <USBD_SetConfig+0x148>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d01c      	beq.n	80074b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800747e:	4b40      	ldr	r3, [pc, #256]	; (8007580 <USBD_SetConfig+0x148>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007488:	4b3d      	ldr	r3, [pc, #244]	; (8007580 <USBD_SetConfig+0x148>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff f948 	bl	8006724 <USBD_SetClassConfig>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f949 	bl	8007738 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074a6:	e065      	b.n	8007574 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fa10 	bl	80078ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2203      	movs	r2, #3
 80074b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074b6:	e05d      	b.n	8007574 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fa08 	bl	80078ce <USBD_CtlSendStatus>
      break;
 80074be:	e059      	b.n	8007574 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074c0:	4b2f      	ldr	r3, [pc, #188]	; (8007580 <USBD_SetConfig+0x148>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d112      	bne.n	80074ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074d0:	4b2b      	ldr	r3, [pc, #172]	; (8007580 <USBD_SetConfig+0x148>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074da:	4b29      	ldr	r3, [pc, #164]	; (8007580 <USBD_SetConfig+0x148>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff f93b 	bl	800675c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9f1 	bl	80078ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074ec:	e042      	b.n	8007574 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80074ee:	4b24      	ldr	r3, [pc, #144]	; (8007580 <USBD_SetConfig+0x148>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d02a      	beq.n	8007552 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff f929 	bl	800675c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800750a:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <USBD_SetConfig+0x148>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007514:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <USBD_SetConfig+0x148>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff f902 	bl	8006724 <USBD_SetClassConfig>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00f      	beq.n	800754a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f903 	bl	8007738 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff f90e 	bl	800675c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007548:	e014      	b.n	8007574 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9bf 	bl	80078ce <USBD_CtlSendStatus>
      break;
 8007550:	e010      	b.n	8007574 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9bb 	bl	80078ce <USBD_CtlSendStatus>
      break;
 8007558:	e00c      	b.n	8007574 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f8eb 	bl	8007738 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <USBD_SetConfig+0x148>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff f8f7 	bl	800675c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800756e:	2303      	movs	r3, #3
 8007570:	73fb      	strb	r3, [r7, #15]
      break;
 8007572:	bf00      	nop
  }

  return ret;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000450 	.word	0x20000450

08007584 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	88db      	ldrh	r3, [r3, #6]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d004      	beq.n	80075a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f8cd 	bl	8007738 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800759e:	e023      	b.n	80075e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	dc02      	bgt.n	80075b2 <USBD_GetConfig+0x2e>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dc03      	bgt.n	80075b8 <USBD_GetConfig+0x34>
 80075b0:	e015      	b.n	80075de <USBD_GetConfig+0x5a>
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d00b      	beq.n	80075ce <USBD_GetConfig+0x4a>
 80075b6:	e012      	b.n	80075de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3308      	adds	r3, #8
 80075c2:	2201      	movs	r2, #1
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f927 	bl	800781a <USBD_CtlSendData>
        break;
 80075cc:	e00c      	b.n	80075e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3304      	adds	r3, #4
 80075d2:	2201      	movs	r2, #1
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f91f 	bl	800781a <USBD_CtlSendData>
        break;
 80075dc:	e004      	b.n	80075e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8a9 	bl	8007738 <USBD_CtlError>
        break;
 80075e6:	bf00      	nop
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007600:	b2db      	uxtb	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	2b02      	cmp	r3, #2
 8007606:	d81e      	bhi.n	8007646 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	88db      	ldrh	r3, [r3, #6]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d004      	beq.n	800761a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f890 	bl	8007738 <USBD_CtlError>
        break;
 8007618:	e01a      	b.n	8007650 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007626:	2b00      	cmp	r3, #0
 8007628:	d005      	beq.n	8007636 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f043 0202 	orr.w	r2, r3, #2
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	330c      	adds	r3, #12
 800763a:	2202      	movs	r2, #2
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f8eb 	bl	800781a <USBD_CtlSendData>
      break;
 8007644:	e004      	b.n	8007650 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f875 	bl	8007738 <USBD_CtlError>
      break;
 800764e:	bf00      	nop
  }
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	885b      	ldrh	r3, [r3, #2]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d106      	bne.n	8007678 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f92b 	bl	80078ce <USBD_CtlSendStatus>
  }
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007690:	b2db      	uxtb	r3, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	2b02      	cmp	r3, #2
 8007696:	d80b      	bhi.n	80076b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	885b      	ldrh	r3, [r3, #2]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10c      	bne.n	80076ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f910 	bl	80078ce <USBD_CtlSendStatus>
      }
      break;
 80076ae:	e004      	b.n	80076ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f840 	bl	8007738 <USBD_CtlError>
      break;
 80076b8:	e000      	b.n	80076bc <USBD_ClrFeature+0x3c>
      break;
 80076ba:	bf00      	nop
  }
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	781a      	ldrb	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3301      	adds	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	781a      	ldrb	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff fabb 	bl	8006c6a <SWAPBYTE>
 80076f4:	4603      	mov	r3, r0
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f7ff faae 	bl	8006c6a <SWAPBYTE>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff faa1 	bl	8006c6a <SWAPBYTE>
 8007728:	4603      	mov	r3, r0
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	80da      	strh	r2, [r3, #6]
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007742:	2180      	movs	r1, #128	; 0x80
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fcef 	bl	8008128 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800774a:	2100      	movs	r1, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fceb 	bl	8008128 <USBD_LL_StallEP>
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d036      	beq.n	80077de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007774:	6938      	ldr	r0, [r7, #16]
 8007776:	f000 f836 	bl	80077e6 <USBD_GetLen>
 800777a:	4603      	mov	r3, r0
 800777c:	3301      	adds	r3, #1
 800777e:	b29b      	uxth	r3, r3
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	4413      	add	r3, r2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	701a      	strb	r2, [r3, #0]
  idx++;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	3301      	adds	r3, #1
 8007798:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	4413      	add	r3, r2
 80077a0:	2203      	movs	r2, #3
 80077a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	3301      	adds	r3, #1
 80077a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077aa:	e013      	b.n	80077d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	7812      	ldrb	r2, [r2, #0]
 80077b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	3301      	adds	r3, #1
 80077bc:	613b      	str	r3, [r7, #16]
    idx++;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	3301      	adds	r3, #1
 80077c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	4413      	add	r3, r2
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	3301      	adds	r3, #1
 80077d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e7      	bne.n	80077ac <USBD_GetString+0x52>
 80077dc:	e000      	b.n	80077e0 <USBD_GetString+0x86>
    return;
 80077de:	bf00      	nop
  }
}
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077f6:	e005      	b.n	8007804 <USBD_GetLen+0x1e>
  {
    len++;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	3301      	adds	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3301      	adds	r3, #1
 8007802:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f5      	bne.n	80077f8 <USBD_GetLen+0x12>
  }

  return len;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2202      	movs	r2, #2
 800782a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	2100      	movs	r1, #0
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fcfa 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	2100      	movs	r1, #0
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fce9 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2203      	movs	r2, #3
 8007882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	2100      	movs	r1, #0
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fced 	bl	800827c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	2100      	movs	r1, #0
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fcdc 	bl	800827c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2204      	movs	r2, #4
 80078da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078de:	2300      	movs	r3, #0
 80078e0:	2200      	movs	r2, #0
 80078e2:	2100      	movs	r1, #0
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fca8 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2205      	movs	r2, #5
 8007900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007904:	2300      	movs	r3, #0
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fcb6 	bl	800827c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007920:	2200      	movs	r2, #0
 8007922:	4912      	ldr	r1, [pc, #72]	; (800796c <MX_USB_DEVICE_Init+0x50>)
 8007924:	4812      	ldr	r0, [pc, #72]	; (8007970 <MX_USB_DEVICE_Init+0x54>)
 8007926:	f7fe fe8f 	bl	8006648 <USBD_Init>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007930:	f7f9 f91e 	bl	8000b70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007934:	490f      	ldr	r1, [pc, #60]	; (8007974 <MX_USB_DEVICE_Init+0x58>)
 8007936:	480e      	ldr	r0, [pc, #56]	; (8007970 <MX_USB_DEVICE_Init+0x54>)
 8007938:	f7fe feb6 	bl	80066a8 <USBD_RegisterClass>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007942:	f7f9 f915 	bl	8000b70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007946:	490c      	ldr	r1, [pc, #48]	; (8007978 <MX_USB_DEVICE_Init+0x5c>)
 8007948:	4809      	ldr	r0, [pc, #36]	; (8007970 <MX_USB_DEVICE_Init+0x54>)
 800794a:	f7fe fdd7 	bl	80064fc <USBD_CDC_RegisterInterface>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007954:	f7f9 f90c 	bl	8000b70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007958:	4805      	ldr	r0, [pc, #20]	; (8007970 <MX_USB_DEVICE_Init+0x54>)
 800795a:	f7fe fecc 	bl	80066f6 <USBD_Start>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007964:	f7f9 f904 	bl	8000b70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007968:	bf00      	nop
 800796a:	bd80      	pop	{r7, pc}
 800796c:	20000130 	.word	0x20000130
 8007970:	20000454 	.word	0x20000454
 8007974:	20000018 	.word	0x20000018
 8007978:	2000011c 	.word	0x2000011c

0800797c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007980:	2200      	movs	r2, #0
 8007982:	4905      	ldr	r1, [pc, #20]	; (8007998 <CDC_Init_FS+0x1c>)
 8007984:	4805      	ldr	r0, [pc, #20]	; (800799c <CDC_Init_FS+0x20>)
 8007986:	f7fe fdce 	bl	8006526 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800798a:	4905      	ldr	r1, [pc, #20]	; (80079a0 <CDC_Init_FS+0x24>)
 800798c:	4803      	ldr	r0, [pc, #12]	; (800799c <CDC_Init_FS+0x20>)
 800798e:	f7fe fde8 	bl	8006562 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007992:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007994:	4618      	mov	r0, r3
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20000f24 	.word	0x20000f24
 800799c:	20000454 	.word	0x20000454
 80079a0:	20000724 	.word	0x20000724

080079a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	71fb      	strb	r3, [r7, #7]
 80079c0:	4613      	mov	r3, r2
 80079c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b23      	cmp	r3, #35	; 0x23
 80079c8:	d84a      	bhi.n	8007a60 <CDC_Control_FS+0xac>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <CDC_Control_FS+0x1c>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a61 	.word	0x08007a61
 80079d4:	08007a61 	.word	0x08007a61
 80079d8:	08007a61 	.word	0x08007a61
 80079dc:	08007a61 	.word	0x08007a61
 80079e0:	08007a61 	.word	0x08007a61
 80079e4:	08007a61 	.word	0x08007a61
 80079e8:	08007a61 	.word	0x08007a61
 80079ec:	08007a61 	.word	0x08007a61
 80079f0:	08007a61 	.word	0x08007a61
 80079f4:	08007a61 	.word	0x08007a61
 80079f8:	08007a61 	.word	0x08007a61
 80079fc:	08007a61 	.word	0x08007a61
 8007a00:	08007a61 	.word	0x08007a61
 8007a04:	08007a61 	.word	0x08007a61
 8007a08:	08007a61 	.word	0x08007a61
 8007a0c:	08007a61 	.word	0x08007a61
 8007a10:	08007a61 	.word	0x08007a61
 8007a14:	08007a61 	.word	0x08007a61
 8007a18:	08007a61 	.word	0x08007a61
 8007a1c:	08007a61 	.word	0x08007a61
 8007a20:	08007a61 	.word	0x08007a61
 8007a24:	08007a61 	.word	0x08007a61
 8007a28:	08007a61 	.word	0x08007a61
 8007a2c:	08007a61 	.word	0x08007a61
 8007a30:	08007a61 	.word	0x08007a61
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a61 	.word	0x08007a61
 8007a44:	08007a61 	.word	0x08007a61
 8007a48:	08007a61 	.word	0x08007a61
 8007a4c:	08007a61 	.word	0x08007a61
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a61 	.word	0x08007a61
 8007a58:	08007a61 	.word	0x08007a61
 8007a5c:	08007a61 	.word	0x08007a61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a60:	bf00      	nop
  }

  return (USBD_OK);
 8007a62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	4805      	ldr	r0, [pc, #20]	; (8007a94 <CDC_Receive_FS+0x24>)
 8007a7e:	f7fe fd70 	bl	8006562 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a82:	4804      	ldr	r0, [pc, #16]	; (8007a94 <CDC_Receive_FS+0x24>)
 8007a84:	f7fe fdb6 	bl	80065f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000454 	.word	0x20000454

08007a98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <CDC_Transmit_FS+0x48>)
 8007aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e00b      	b.n	8007ad6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007abe:	887b      	ldrh	r3, [r7, #2]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4806      	ldr	r0, [pc, #24]	; (8007ae0 <CDC_Transmit_FS+0x48>)
 8007ac6:	f7fe fd2e 	bl	8006526 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007aca:	4805      	ldr	r0, [pc, #20]	; (8007ae0 <CDC_Transmit_FS+0x48>)
 8007acc:	f7fe fd62 	bl	8006594 <USBD_CDC_TransmitPacket>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000454 	.word	0x20000454

08007ae4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
	...

08007b08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2212      	movs	r2, #18
 8007b18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b1a:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	2000014c 	.word	0x2000014c

08007b2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2204      	movs	r2, #4
 8007b3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b3e:	4b03      	ldr	r3, [pc, #12]	; (8007b4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	20000160 	.word	0x20000160

08007b50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d105      	bne.n	8007b6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	4907      	ldr	r1, [pc, #28]	; (8007b84 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b66:	4808      	ldr	r0, [pc, #32]	; (8007b88 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b68:	f7ff fdf7 	bl	800775a <USBD_GetString>
 8007b6c:	e004      	b.n	8007b78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	4904      	ldr	r1, [pc, #16]	; (8007b84 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b72:	4805      	ldr	r0, [pc, #20]	; (8007b88 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b74:	f7ff fdf1 	bl	800775a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b78:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20001724 	.word	0x20001724
 8007b88:	08008d14 	.word	0x08008d14

08007b8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	4904      	ldr	r1, [pc, #16]	; (8007bac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b9c:	4804      	ldr	r0, [pc, #16]	; (8007bb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b9e:	f7ff fddc 	bl	800775a <USBD_GetString>
  return USBD_StrDesc;
 8007ba2:	4b02      	ldr	r3, [pc, #8]	; (8007bac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20001724 	.word	0x20001724
 8007bb0:	08008d2c 	.word	0x08008d2c

08007bb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	6039      	str	r1, [r7, #0]
 8007bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	221a      	movs	r2, #26
 8007bc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007bc6:	f000 f843 	bl	8007c50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007bca:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20000164 	.word	0x20000164

08007bd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	6039      	str	r1, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4907      	ldr	r1, [pc, #28]	; (8007c0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bee:	4808      	ldr	r0, [pc, #32]	; (8007c10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bf0:	f7ff fdb3 	bl	800775a <USBD_GetString>
 8007bf4:	e004      	b.n	8007c00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	4904      	ldr	r1, [pc, #16]	; (8007c0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bfa:	4805      	ldr	r0, [pc, #20]	; (8007c10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bfc:	f7ff fdad 	bl	800775a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c00:	4b02      	ldr	r3, [pc, #8]	; (8007c0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20001724 	.word	0x20001724
 8007c10:	08008d40 	.word	0x08008d40

08007c14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6039      	str	r1, [r7, #0]
 8007c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4907      	ldr	r1, [pc, #28]	; (8007c48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c2a:	4808      	ldr	r0, [pc, #32]	; (8007c4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c2c:	f7ff fd95 	bl	800775a <USBD_GetString>
 8007c30:	e004      	b.n	8007c3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	4904      	ldr	r1, [pc, #16]	; (8007c48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c36:	4805      	ldr	r0, [pc, #20]	; (8007c4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c38:	f7ff fd8f 	bl	800775a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c3c:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20001724 	.word	0x20001724
 8007c4c:	08008d4c 	.word	0x08008d4c

08007c50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <Get_SerialNum+0x44>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c5c:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <Get_SerialNum+0x48>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c62:	4b0e      	ldr	r3, [pc, #56]	; (8007c9c <Get_SerialNum+0x4c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d009      	beq.n	8007c8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c76:	2208      	movs	r2, #8
 8007c78:	4909      	ldr	r1, [pc, #36]	; (8007ca0 <Get_SerialNum+0x50>)
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f814 	bl	8007ca8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c80:	2204      	movs	r2, #4
 8007c82:	4908      	ldr	r1, [pc, #32]	; (8007ca4 <Get_SerialNum+0x54>)
 8007c84:	68b8      	ldr	r0, [r7, #8]
 8007c86:	f000 f80f 	bl	8007ca8 <IntToUnicode>
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	1fff7a10 	.word	0x1fff7a10
 8007c98:	1fff7a14 	.word	0x1fff7a14
 8007c9c:	1fff7a18 	.word	0x1fff7a18
 8007ca0:	20000166 	.word	0x20000166
 8007ca4:	20000176 	.word	0x20000176

08007ca8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cba:	2300      	movs	r3, #0
 8007cbc:	75fb      	strb	r3, [r7, #23]
 8007cbe:	e027      	b.n	8007d10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	0f1b      	lsrs	r3, r3, #28
 8007cc4:	2b09      	cmp	r3, #9
 8007cc6:	d80b      	bhi.n	8007ce0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	0f1b      	lsrs	r3, r3, #28
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	440b      	add	r3, r1
 8007cd8:	3230      	adds	r2, #48	; 0x30
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]
 8007cde:	e00a      	b.n	8007cf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	0f1b      	lsrs	r3, r3, #28
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	4619      	mov	r1, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	440b      	add	r3, r1
 8007cf0:	3237      	adds	r2, #55	; 0x37
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	3301      	adds	r3, #1
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	4413      	add	r3, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
 8007d10:	7dfa      	ldrb	r2, [r7, #23]
 8007d12:	79fb      	ldrb	r3, [r7, #7]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d3d3      	bcc.n	8007cc0 <IntToUnicode+0x18>
  }
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08a      	sub	sp, #40	; 0x28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d30:	f107 0314 	add.w	r3, r7, #20
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	60da      	str	r2, [r3, #12]
 8007d3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d48:	d147      	bne.n	8007dda <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	4b25      	ldr	r3, [pc, #148]	; (8007de4 <HAL_PCD_MspInit+0xbc>)
 8007d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d52:	4a24      	ldr	r2, [pc, #144]	; (8007de4 <HAL_PCD_MspInit+0xbc>)
 8007d54:	f043 0301 	orr.w	r3, r3, #1
 8007d58:	6313      	str	r3, [r2, #48]	; 0x30
 8007d5a:	4b22      	ldr	r3, [pc, #136]	; (8007de4 <HAL_PCD_MspInit+0xbc>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d74:	f107 0314 	add.w	r3, r7, #20
 8007d78:	4619      	mov	r1, r3
 8007d7a:	481b      	ldr	r0, [pc, #108]	; (8007de8 <HAL_PCD_MspInit+0xc0>)
 8007d7c:	f7f9 fe7c 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d86:	2302      	movs	r3, #2
 8007d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d92:	230a      	movs	r3, #10
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d96:	f107 0314 	add.w	r3, r7, #20
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4812      	ldr	r0, [pc, #72]	; (8007de8 <HAL_PCD_MspInit+0xc0>)
 8007d9e:	f7f9 fe6b 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007da2:	4b10      	ldr	r3, [pc, #64]	; (8007de4 <HAL_PCD_MspInit+0xbc>)
 8007da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da6:	4a0f      	ldr	r2, [pc, #60]	; (8007de4 <HAL_PCD_MspInit+0xbc>)
 8007da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dac:	6353      	str	r3, [r2, #52]	; 0x34
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <HAL_PCD_MspInit+0xbc>)
 8007db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db6:	4a0b      	ldr	r2, [pc, #44]	; (8007de4 <HAL_PCD_MspInit+0xbc>)
 8007db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8007dbe:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <HAL_PCD_MspInit+0xbc>)
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2100      	movs	r1, #0
 8007dce:	2043      	movs	r0, #67	; 0x43
 8007dd0:	f7f9 fe1b 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007dd4:	2043      	movs	r0, #67	; 0x43
 8007dd6:	f7f9 fe34 	bl	8001a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dda:	bf00      	nop
 8007ddc:	3728      	adds	r7, #40	; 0x28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	40023800 	.word	0x40023800
 8007de8:	40020000 	.word	0x40020000

08007dec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f7fe fcc2 	bl	800678c <USBD_LL_SetupStage>
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	6879      	ldr	r1, [r7, #4]
 8007e26:	4613      	mov	r3, r2
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	1a9b      	subs	r3, r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	440b      	add	r3, r1
 8007e30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f7fe fcfc 	bl	8006836 <USBD_LL_DataOutStage>
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e58:	78fa      	ldrb	r2, [r7, #3]
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	1a9b      	subs	r3, r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	3348      	adds	r3, #72	; 0x48
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	f7fe fd45 	bl	80068fc <USBD_LL_DataInStage>
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe fe59 	bl	8006b40 <USBD_LL_SOF>
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d102      	bne.n	8007eb0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]
 8007eae:	e008      	b.n	8007ec2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d102      	bne.n	8007ebe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]
 8007ebc:	e001      	b.n	8007ec2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007ebe:	f7f8 fe57 	bl	8000b70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ec8:	7bfa      	ldrb	r2, [r7, #15]
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe fdf9 	bl	8006ac4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fda5 	bl	8006a28 <USBD_LL_Reset>
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fdf4 	bl	8006ae4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f1c:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <HAL_PCD_SuspendCallback+0x48>)
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	4a03      	ldr	r2, [pc, #12]	; (8007f30 <HAL_PCD_SuspendCallback+0x48>)
 8007f22:	f043 0306 	orr.w	r3, r3, #6
 8007f26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	e000ed00 	.word	0xe000ed00

08007f34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fde4 	bl	8006b10 <USBD_LL_Resume>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe fe32 	bl	8006bd0 <USBD_LL_IsoOUTIncomplete>
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fdfa 	bl	8006b84 <USBD_LL_IsoINIncomplete>
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fe38 	bl	8006c1c <USBD_LL_DevConnected>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fe35 	bl	8006c32 <USBD_LL_DevDisconnected>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d13c      	bne.n	800805a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007fe0:	4a20      	ldr	r2, [pc, #128]	; (8008064 <USBD_LL_Init+0x94>)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a1e      	ldr	r2, [pc, #120]	; (8008064 <USBD_LL_Init+0x94>)
 8007fec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ff0:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <USBD_LL_Init+0x94>)
 8007ff2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ff6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ff8:	4b1a      	ldr	r3, [pc, #104]	; (8008064 <USBD_LL_Init+0x94>)
 8007ffa:	2204      	movs	r2, #4
 8007ffc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ffe:	4b19      	ldr	r3, [pc, #100]	; (8008064 <USBD_LL_Init+0x94>)
 8008000:	2202      	movs	r2, #2
 8008002:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008004:	4b17      	ldr	r3, [pc, #92]	; (8008064 <USBD_LL_Init+0x94>)
 8008006:	2200      	movs	r2, #0
 8008008:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800800a:	4b16      	ldr	r3, [pc, #88]	; (8008064 <USBD_LL_Init+0x94>)
 800800c:	2202      	movs	r2, #2
 800800e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008010:	4b14      	ldr	r3, [pc, #80]	; (8008064 <USBD_LL_Init+0x94>)
 8008012:	2200      	movs	r2, #0
 8008014:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008016:	4b13      	ldr	r3, [pc, #76]	; (8008064 <USBD_LL_Init+0x94>)
 8008018:	2200      	movs	r2, #0
 800801a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800801c:	4b11      	ldr	r3, [pc, #68]	; (8008064 <USBD_LL_Init+0x94>)
 800801e:	2200      	movs	r2, #0
 8008020:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008022:	4b10      	ldr	r3, [pc, #64]	; (8008064 <USBD_LL_Init+0x94>)
 8008024:	2201      	movs	r2, #1
 8008026:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008028:	4b0e      	ldr	r3, [pc, #56]	; (8008064 <USBD_LL_Init+0x94>)
 800802a:	2200      	movs	r2, #0
 800802c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800802e:	480d      	ldr	r0, [pc, #52]	; (8008064 <USBD_LL_Init+0x94>)
 8008030:	f7fa fcee 	bl	8002a10 <HAL_PCD_Init>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800803a:	f7f8 fd99 	bl	8000b70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	4808      	ldr	r0, [pc, #32]	; (8008064 <USBD_LL_Init+0x94>)
 8008042:	f7fb fe4c 	bl	8003cde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008046:	2240      	movs	r2, #64	; 0x40
 8008048:	2100      	movs	r1, #0
 800804a:	4806      	ldr	r0, [pc, #24]	; (8008064 <USBD_LL_Init+0x94>)
 800804c:	f7fb fe00 	bl	8003c50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008050:	2280      	movs	r2, #128	; 0x80
 8008052:	2101      	movs	r1, #1
 8008054:	4803      	ldr	r0, [pc, #12]	; (8008064 <USBD_LL_Init+0x94>)
 8008056:	f7fb fdfb 	bl	8003c50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20001924 	.word	0x20001924

08008068 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800807e:	4618      	mov	r0, r3
 8008080:	f7fa fde3 	bl	8002c4a <HAL_PCD_Start>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f942 	bl	8008314 <USBD_Get_USB_Status>
 8008090:	4603      	mov	r3, r0
 8008092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008094:	7bbb      	ldrb	r3, [r7, #14]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	461a      	mov	r2, r3
 80080ac:	4603      	mov	r3, r0
 80080ae:	70fb      	strb	r3, [r7, #3]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70bb      	strb	r3, [r7, #2]
 80080b4:	4613      	mov	r3, r2
 80080b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080c6:	78bb      	ldrb	r3, [r7, #2]
 80080c8:	883a      	ldrh	r2, [r7, #0]
 80080ca:	78f9      	ldrb	r1, [r7, #3]
 80080cc:	f7fb f9c7 	bl	800345e <HAL_PCD_EP_Open>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f91c 	bl	8008314 <USBD_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f7fb fa10 	bl	800352e <HAL_PCD_EP_Close>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f8fd 	bl	8008314 <USBD_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7fb fae8 	bl	800371c <HAL_PCD_EP_SetStall>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f8de 	bl	8008314 <USBD_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7fb fb2d 	bl	80037e4 <HAL_PCD_EP_ClrStall>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f8bf 	bl	8008314 <USBD_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819a:	7bbb      	ldrb	r3, [r7, #14]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	da0b      	bge.n	80081d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	4613      	mov	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	333e      	adds	r3, #62	; 0x3e
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	e00b      	b.n	80081f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	4613      	mov	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80081ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7fb f8fa 	bl	8003414 <HAL_PCD_SetAddress>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f874 	bl	8008314 <USBD_Get_USB_Status>
 800822c:	4603      	mov	r3, r0
 800822e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008230:	7bbb      	ldrb	r3, [r7, #14]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
 8008246:	460b      	mov	r3, r1
 8008248:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008258:	7af9      	ldrb	r1, [r7, #11]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	f7fb fa13 	bl	8003688 <HAL_PCD_EP_Transmit>
 8008262:	4603      	mov	r3, r0
 8008264:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 f853 	bl	8008314 <USBD_Get_USB_Status>
 800826e:	4603      	mov	r3, r0
 8008270:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008272:	7dbb      	ldrb	r3, [r7, #22]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	460b      	mov	r3, r1
 800828a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800829a:	7af9      	ldrb	r1, [r7, #11]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	f7fb f98f 	bl	80035c2 <HAL_PCD_EP_Receive>
 80082a4:	4603      	mov	r3, r0
 80082a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 f832 	bl	8008314 <USBD_Get_USB_Status>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	4611      	mov	r1, r2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fb f9bf 	bl	8003658 <HAL_PCD_EP_GetRxCount>
 80082da:	4603      	mov	r3, r0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082ec:	4b03      	ldr	r3, [pc, #12]	; (80082fc <USBD_static_malloc+0x18>)
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	20001d2c 	.word	0x20001d2c

08008300 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]

}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	2b03      	cmp	r3, #3
 8008326:	d817      	bhi.n	8008358 <USBD_Get_USB_Status+0x44>
 8008328:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <USBD_Get_USB_Status+0x1c>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008341 	.word	0x08008341
 8008334:	08008347 	.word	0x08008347
 8008338:	0800834d 	.word	0x0800834d
 800833c:	08008353 	.word	0x08008353
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e00b      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008346:	2303      	movs	r3, #3
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	e008      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	e005      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008352:	2303      	movs	r3, #3
 8008354:	73fb      	strb	r3, [r7, #15]
    break;
 8008356:	e002      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008358:	2303      	movs	r3, #3
 800835a:	73fb      	strb	r3, [r7, #15]
    break;
 800835c:	bf00      	nop
  }
  return usb_status;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000180 	.word	0x20000180

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f000 fca2 	bl	8008cd4 <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	08008db0 	.word	0x08008db0
 80083b4:	08008db0 	.word	0x08008db0
 80083b8:	08008db0 	.word	0x08008db0
 80083bc:	08008db4 	.word	0x08008db4

080083c0 <memset>:
 80083c0:	4402      	add	r2, r0
 80083c2:	4603      	mov	r3, r0
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d100      	bne.n	80083ca <memset+0xa>
 80083c8:	4770      	bx	lr
 80083ca:	f803 1b01 	strb.w	r1, [r3], #1
 80083ce:	e7f9      	b.n	80083c4 <memset+0x4>

080083d0 <sniprintf>:
 80083d0:	b40c      	push	{r2, r3}
 80083d2:	b530      	push	{r4, r5, lr}
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <sniprintf+0x64>)
 80083d6:	1e0c      	subs	r4, r1, #0
 80083d8:	681d      	ldr	r5, [r3, #0]
 80083da:	b09d      	sub	sp, #116	; 0x74
 80083dc:	da08      	bge.n	80083f0 <sniprintf+0x20>
 80083de:	238b      	movs	r3, #139	; 0x8b
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295
 80083e6:	b01d      	add	sp, #116	; 0x74
 80083e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ec:	b002      	add	sp, #8
 80083ee:	4770      	bx	lr
 80083f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80083f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083f8:	bf14      	ite	ne
 80083fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083fe:	4623      	moveq	r3, r4
 8008400:	9304      	str	r3, [sp, #16]
 8008402:	9307      	str	r3, [sp, #28]
 8008404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008408:	9002      	str	r0, [sp, #8]
 800840a:	9006      	str	r0, [sp, #24]
 800840c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008410:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008412:	ab21      	add	r3, sp, #132	; 0x84
 8008414:	a902      	add	r1, sp, #8
 8008416:	4628      	mov	r0, r5
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	f000 f869 	bl	80084f0 <_svfiprintf_r>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	bfbc      	itt	lt
 8008422:	238b      	movlt	r3, #139	; 0x8b
 8008424:	602b      	strlt	r3, [r5, #0]
 8008426:	2c00      	cmp	r4, #0
 8008428:	d0dd      	beq.n	80083e6 <sniprintf+0x16>
 800842a:	9b02      	ldr	r3, [sp, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e7d9      	b.n	80083e6 <sniprintf+0x16>
 8008432:	bf00      	nop
 8008434:	20000180 	.word	0x20000180

08008438 <__ssputs_r>:
 8008438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	688e      	ldr	r6, [r1, #8]
 800843e:	429e      	cmp	r6, r3
 8008440:	4682      	mov	sl, r0
 8008442:	460c      	mov	r4, r1
 8008444:	4690      	mov	r8, r2
 8008446:	461f      	mov	r7, r3
 8008448:	d838      	bhi.n	80084bc <__ssputs_r+0x84>
 800844a:	898a      	ldrh	r2, [r1, #12]
 800844c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008450:	d032      	beq.n	80084b8 <__ssputs_r+0x80>
 8008452:	6825      	ldr	r5, [r4, #0]
 8008454:	6909      	ldr	r1, [r1, #16]
 8008456:	eba5 0901 	sub.w	r9, r5, r1
 800845a:	6965      	ldr	r5, [r4, #20]
 800845c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008464:	3301      	adds	r3, #1
 8008466:	444b      	add	r3, r9
 8008468:	106d      	asrs	r5, r5, #1
 800846a:	429d      	cmp	r5, r3
 800846c:	bf38      	it	cc
 800846e:	461d      	movcc	r5, r3
 8008470:	0553      	lsls	r3, r2, #21
 8008472:	d531      	bpl.n	80084d8 <__ssputs_r+0xa0>
 8008474:	4629      	mov	r1, r5
 8008476:	f000 fb63 	bl	8008b40 <_malloc_r>
 800847a:	4606      	mov	r6, r0
 800847c:	b950      	cbnz	r0, 8008494 <__ssputs_r+0x5c>
 800847e:	230c      	movs	r3, #12
 8008480:	f8ca 3000 	str.w	r3, [sl]
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008494:	6921      	ldr	r1, [r4, #16]
 8008496:	464a      	mov	r2, r9
 8008498:	f000 fabe 	bl	8008a18 <memcpy>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	6126      	str	r6, [r4, #16]
 80084aa:	6165      	str	r5, [r4, #20]
 80084ac:	444e      	add	r6, r9
 80084ae:	eba5 0509 	sub.w	r5, r5, r9
 80084b2:	6026      	str	r6, [r4, #0]
 80084b4:	60a5      	str	r5, [r4, #8]
 80084b6:	463e      	mov	r6, r7
 80084b8:	42be      	cmp	r6, r7
 80084ba:	d900      	bls.n	80084be <__ssputs_r+0x86>
 80084bc:	463e      	mov	r6, r7
 80084be:	6820      	ldr	r0, [r4, #0]
 80084c0:	4632      	mov	r2, r6
 80084c2:	4641      	mov	r1, r8
 80084c4:	f000 fab6 	bl	8008a34 <memmove>
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	1b9b      	subs	r3, r3, r6
 80084cc:	60a3      	str	r3, [r4, #8]
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	4433      	add	r3, r6
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	2000      	movs	r0, #0
 80084d6:	e7db      	b.n	8008490 <__ssputs_r+0x58>
 80084d8:	462a      	mov	r2, r5
 80084da:	f000 fba5 	bl	8008c28 <_realloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d1e1      	bne.n	80084a8 <__ssputs_r+0x70>
 80084e4:	6921      	ldr	r1, [r4, #16]
 80084e6:	4650      	mov	r0, sl
 80084e8:	f000 fabe 	bl	8008a68 <_free_r>
 80084ec:	e7c7      	b.n	800847e <__ssputs_r+0x46>
	...

080084f0 <_svfiprintf_r>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	4698      	mov	r8, r3
 80084f6:	898b      	ldrh	r3, [r1, #12]
 80084f8:	061b      	lsls	r3, r3, #24
 80084fa:	b09d      	sub	sp, #116	; 0x74
 80084fc:	4607      	mov	r7, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	4614      	mov	r4, r2
 8008502:	d50e      	bpl.n	8008522 <_svfiprintf_r+0x32>
 8008504:	690b      	ldr	r3, [r1, #16]
 8008506:	b963      	cbnz	r3, 8008522 <_svfiprintf_r+0x32>
 8008508:	2140      	movs	r1, #64	; 0x40
 800850a:	f000 fb19 	bl	8008b40 <_malloc_r>
 800850e:	6028      	str	r0, [r5, #0]
 8008510:	6128      	str	r0, [r5, #16]
 8008512:	b920      	cbnz	r0, 800851e <_svfiprintf_r+0x2e>
 8008514:	230c      	movs	r3, #12
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	e0d1      	b.n	80086c2 <_svfiprintf_r+0x1d2>
 800851e:	2340      	movs	r3, #64	; 0x40
 8008520:	616b      	str	r3, [r5, #20]
 8008522:	2300      	movs	r3, #0
 8008524:	9309      	str	r3, [sp, #36]	; 0x24
 8008526:	2320      	movs	r3, #32
 8008528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800852c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008530:	2330      	movs	r3, #48	; 0x30
 8008532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086dc <_svfiprintf_r+0x1ec>
 8008536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800853a:	f04f 0901 	mov.w	r9, #1
 800853e:	4623      	mov	r3, r4
 8008540:	469a      	mov	sl, r3
 8008542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008546:	b10a      	cbz	r2, 800854c <_svfiprintf_r+0x5c>
 8008548:	2a25      	cmp	r2, #37	; 0x25
 800854a:	d1f9      	bne.n	8008540 <_svfiprintf_r+0x50>
 800854c:	ebba 0b04 	subs.w	fp, sl, r4
 8008550:	d00b      	beq.n	800856a <_svfiprintf_r+0x7a>
 8008552:	465b      	mov	r3, fp
 8008554:	4622      	mov	r2, r4
 8008556:	4629      	mov	r1, r5
 8008558:	4638      	mov	r0, r7
 800855a:	f7ff ff6d 	bl	8008438 <__ssputs_r>
 800855e:	3001      	adds	r0, #1
 8008560:	f000 80aa 	beq.w	80086b8 <_svfiprintf_r+0x1c8>
 8008564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008566:	445a      	add	r2, fp
 8008568:	9209      	str	r2, [sp, #36]	; 0x24
 800856a:	f89a 3000 	ldrb.w	r3, [sl]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 80a2 	beq.w	80086b8 <_svfiprintf_r+0x1c8>
 8008574:	2300      	movs	r3, #0
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
 800857a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800857e:	f10a 0a01 	add.w	sl, sl, #1
 8008582:	9304      	str	r3, [sp, #16]
 8008584:	9307      	str	r3, [sp, #28]
 8008586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800858a:	931a      	str	r3, [sp, #104]	; 0x68
 800858c:	4654      	mov	r4, sl
 800858e:	2205      	movs	r2, #5
 8008590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008594:	4851      	ldr	r0, [pc, #324]	; (80086dc <_svfiprintf_r+0x1ec>)
 8008596:	f7f7 fe23 	bl	80001e0 <memchr>
 800859a:	9a04      	ldr	r2, [sp, #16]
 800859c:	b9d8      	cbnz	r0, 80085d6 <_svfiprintf_r+0xe6>
 800859e:	06d0      	lsls	r0, r2, #27
 80085a0:	bf44      	itt	mi
 80085a2:	2320      	movmi	r3, #32
 80085a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a8:	0711      	lsls	r1, r2, #28
 80085aa:	bf44      	itt	mi
 80085ac:	232b      	movmi	r3, #43	; 0x2b
 80085ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b2:	f89a 3000 	ldrb.w	r3, [sl]
 80085b6:	2b2a      	cmp	r3, #42	; 0x2a
 80085b8:	d015      	beq.n	80085e6 <_svfiprintf_r+0xf6>
 80085ba:	9a07      	ldr	r2, [sp, #28]
 80085bc:	4654      	mov	r4, sl
 80085be:	2000      	movs	r0, #0
 80085c0:	f04f 0c0a 	mov.w	ip, #10
 80085c4:	4621      	mov	r1, r4
 80085c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ca:	3b30      	subs	r3, #48	; 0x30
 80085cc:	2b09      	cmp	r3, #9
 80085ce:	d94e      	bls.n	800866e <_svfiprintf_r+0x17e>
 80085d0:	b1b0      	cbz	r0, 8008600 <_svfiprintf_r+0x110>
 80085d2:	9207      	str	r2, [sp, #28]
 80085d4:	e014      	b.n	8008600 <_svfiprintf_r+0x110>
 80085d6:	eba0 0308 	sub.w	r3, r0, r8
 80085da:	fa09 f303 	lsl.w	r3, r9, r3
 80085de:	4313      	orrs	r3, r2
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	46a2      	mov	sl, r4
 80085e4:	e7d2      	b.n	800858c <_svfiprintf_r+0x9c>
 80085e6:	9b03      	ldr	r3, [sp, #12]
 80085e8:	1d19      	adds	r1, r3, #4
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	9103      	str	r1, [sp, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bfbb      	ittet	lt
 80085f2:	425b      	neglt	r3, r3
 80085f4:	f042 0202 	orrlt.w	r2, r2, #2
 80085f8:	9307      	strge	r3, [sp, #28]
 80085fa:	9307      	strlt	r3, [sp, #28]
 80085fc:	bfb8      	it	lt
 80085fe:	9204      	strlt	r2, [sp, #16]
 8008600:	7823      	ldrb	r3, [r4, #0]
 8008602:	2b2e      	cmp	r3, #46	; 0x2e
 8008604:	d10c      	bne.n	8008620 <_svfiprintf_r+0x130>
 8008606:	7863      	ldrb	r3, [r4, #1]
 8008608:	2b2a      	cmp	r3, #42	; 0x2a
 800860a:	d135      	bne.n	8008678 <_svfiprintf_r+0x188>
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	1d1a      	adds	r2, r3, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	9203      	str	r2, [sp, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	bfb8      	it	lt
 8008618:	f04f 33ff 	movlt.w	r3, #4294967295
 800861c:	3402      	adds	r4, #2
 800861e:	9305      	str	r3, [sp, #20]
 8008620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086ec <_svfiprintf_r+0x1fc>
 8008624:	7821      	ldrb	r1, [r4, #0]
 8008626:	2203      	movs	r2, #3
 8008628:	4650      	mov	r0, sl
 800862a:	f7f7 fdd9 	bl	80001e0 <memchr>
 800862e:	b140      	cbz	r0, 8008642 <_svfiprintf_r+0x152>
 8008630:	2340      	movs	r3, #64	; 0x40
 8008632:	eba0 000a 	sub.w	r0, r0, sl
 8008636:	fa03 f000 	lsl.w	r0, r3, r0
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	4303      	orrs	r3, r0
 800863e:	3401      	adds	r4, #1
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008646:	4826      	ldr	r0, [pc, #152]	; (80086e0 <_svfiprintf_r+0x1f0>)
 8008648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800864c:	2206      	movs	r2, #6
 800864e:	f7f7 fdc7 	bl	80001e0 <memchr>
 8008652:	2800      	cmp	r0, #0
 8008654:	d038      	beq.n	80086c8 <_svfiprintf_r+0x1d8>
 8008656:	4b23      	ldr	r3, [pc, #140]	; (80086e4 <_svfiprintf_r+0x1f4>)
 8008658:	bb1b      	cbnz	r3, 80086a2 <_svfiprintf_r+0x1b2>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	3307      	adds	r3, #7
 800865e:	f023 0307 	bic.w	r3, r3, #7
 8008662:	3308      	adds	r3, #8
 8008664:	9303      	str	r3, [sp, #12]
 8008666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008668:	4433      	add	r3, r6
 800866a:	9309      	str	r3, [sp, #36]	; 0x24
 800866c:	e767      	b.n	800853e <_svfiprintf_r+0x4e>
 800866e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008672:	460c      	mov	r4, r1
 8008674:	2001      	movs	r0, #1
 8008676:	e7a5      	b.n	80085c4 <_svfiprintf_r+0xd4>
 8008678:	2300      	movs	r3, #0
 800867a:	3401      	adds	r4, #1
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	4619      	mov	r1, r3
 8008680:	f04f 0c0a 	mov.w	ip, #10
 8008684:	4620      	mov	r0, r4
 8008686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800868a:	3a30      	subs	r2, #48	; 0x30
 800868c:	2a09      	cmp	r2, #9
 800868e:	d903      	bls.n	8008698 <_svfiprintf_r+0x1a8>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0c5      	beq.n	8008620 <_svfiprintf_r+0x130>
 8008694:	9105      	str	r1, [sp, #20]
 8008696:	e7c3      	b.n	8008620 <_svfiprintf_r+0x130>
 8008698:	fb0c 2101 	mla	r1, ip, r1, r2
 800869c:	4604      	mov	r4, r0
 800869e:	2301      	movs	r3, #1
 80086a0:	e7f0      	b.n	8008684 <_svfiprintf_r+0x194>
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	462a      	mov	r2, r5
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <_svfiprintf_r+0x1f8>)
 80086aa:	a904      	add	r1, sp, #16
 80086ac:	4638      	mov	r0, r7
 80086ae:	f3af 8000 	nop.w
 80086b2:	1c42      	adds	r2, r0, #1
 80086b4:	4606      	mov	r6, r0
 80086b6:	d1d6      	bne.n	8008666 <_svfiprintf_r+0x176>
 80086b8:	89ab      	ldrh	r3, [r5, #12]
 80086ba:	065b      	lsls	r3, r3, #25
 80086bc:	f53f af2c 	bmi.w	8008518 <_svfiprintf_r+0x28>
 80086c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c2:	b01d      	add	sp, #116	; 0x74
 80086c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c8:	ab03      	add	r3, sp, #12
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	462a      	mov	r2, r5
 80086ce:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <_svfiprintf_r+0x1f8>)
 80086d0:	a904      	add	r1, sp, #16
 80086d2:	4638      	mov	r0, r7
 80086d4:	f000 f87a 	bl	80087cc <_printf_i>
 80086d8:	e7eb      	b.n	80086b2 <_svfiprintf_r+0x1c2>
 80086da:	bf00      	nop
 80086dc:	08008d74 	.word	0x08008d74
 80086e0:	08008d7e 	.word	0x08008d7e
 80086e4:	00000000 	.word	0x00000000
 80086e8:	08008439 	.word	0x08008439
 80086ec:	08008d7a 	.word	0x08008d7a

080086f0 <_printf_common>:
 80086f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	4616      	mov	r6, r2
 80086f6:	4699      	mov	r9, r3
 80086f8:	688a      	ldr	r2, [r1, #8]
 80086fa:	690b      	ldr	r3, [r1, #16]
 80086fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008700:	4293      	cmp	r3, r2
 8008702:	bfb8      	it	lt
 8008704:	4613      	movlt	r3, r2
 8008706:	6033      	str	r3, [r6, #0]
 8008708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800870c:	4607      	mov	r7, r0
 800870e:	460c      	mov	r4, r1
 8008710:	b10a      	cbz	r2, 8008716 <_printf_common+0x26>
 8008712:	3301      	adds	r3, #1
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	0699      	lsls	r1, r3, #26
 800871a:	bf42      	ittt	mi
 800871c:	6833      	ldrmi	r3, [r6, #0]
 800871e:	3302      	addmi	r3, #2
 8008720:	6033      	strmi	r3, [r6, #0]
 8008722:	6825      	ldr	r5, [r4, #0]
 8008724:	f015 0506 	ands.w	r5, r5, #6
 8008728:	d106      	bne.n	8008738 <_printf_common+0x48>
 800872a:	f104 0a19 	add.w	sl, r4, #25
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	6832      	ldr	r2, [r6, #0]
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	42ab      	cmp	r3, r5
 8008736:	dc26      	bgt.n	8008786 <_printf_common+0x96>
 8008738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800873c:	1e13      	subs	r3, r2, #0
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	bf18      	it	ne
 8008742:	2301      	movne	r3, #1
 8008744:	0692      	lsls	r2, r2, #26
 8008746:	d42b      	bmi.n	80087a0 <_printf_common+0xb0>
 8008748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800874c:	4649      	mov	r1, r9
 800874e:	4638      	mov	r0, r7
 8008750:	47c0      	blx	r8
 8008752:	3001      	adds	r0, #1
 8008754:	d01e      	beq.n	8008794 <_printf_common+0xa4>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	68e5      	ldr	r5, [r4, #12]
 800875a:	6832      	ldr	r2, [r6, #0]
 800875c:	f003 0306 	and.w	r3, r3, #6
 8008760:	2b04      	cmp	r3, #4
 8008762:	bf08      	it	eq
 8008764:	1aad      	subeq	r5, r5, r2
 8008766:	68a3      	ldr	r3, [r4, #8]
 8008768:	6922      	ldr	r2, [r4, #16]
 800876a:	bf0c      	ite	eq
 800876c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008770:	2500      	movne	r5, #0
 8008772:	4293      	cmp	r3, r2
 8008774:	bfc4      	itt	gt
 8008776:	1a9b      	subgt	r3, r3, r2
 8008778:	18ed      	addgt	r5, r5, r3
 800877a:	2600      	movs	r6, #0
 800877c:	341a      	adds	r4, #26
 800877e:	42b5      	cmp	r5, r6
 8008780:	d11a      	bne.n	80087b8 <_printf_common+0xc8>
 8008782:	2000      	movs	r0, #0
 8008784:	e008      	b.n	8008798 <_printf_common+0xa8>
 8008786:	2301      	movs	r3, #1
 8008788:	4652      	mov	r2, sl
 800878a:	4649      	mov	r1, r9
 800878c:	4638      	mov	r0, r7
 800878e:	47c0      	blx	r8
 8008790:	3001      	adds	r0, #1
 8008792:	d103      	bne.n	800879c <_printf_common+0xac>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879c:	3501      	adds	r5, #1
 800879e:	e7c6      	b.n	800872e <_printf_common+0x3e>
 80087a0:	18e1      	adds	r1, r4, r3
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	2030      	movs	r0, #48	; 0x30
 80087a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087aa:	4422      	add	r2, r4
 80087ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087b4:	3302      	adds	r3, #2
 80087b6:	e7c7      	b.n	8008748 <_printf_common+0x58>
 80087b8:	2301      	movs	r3, #1
 80087ba:	4622      	mov	r2, r4
 80087bc:	4649      	mov	r1, r9
 80087be:	4638      	mov	r0, r7
 80087c0:	47c0      	blx	r8
 80087c2:	3001      	adds	r0, #1
 80087c4:	d0e6      	beq.n	8008794 <_printf_common+0xa4>
 80087c6:	3601      	adds	r6, #1
 80087c8:	e7d9      	b.n	800877e <_printf_common+0x8e>
	...

080087cc <_printf_i>:
 80087cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	7e0f      	ldrb	r7, [r1, #24]
 80087d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087d4:	2f78      	cmp	r7, #120	; 0x78
 80087d6:	4691      	mov	r9, r2
 80087d8:	4680      	mov	r8, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	469a      	mov	sl, r3
 80087de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087e2:	d807      	bhi.n	80087f4 <_printf_i+0x28>
 80087e4:	2f62      	cmp	r7, #98	; 0x62
 80087e6:	d80a      	bhi.n	80087fe <_printf_i+0x32>
 80087e8:	2f00      	cmp	r7, #0
 80087ea:	f000 80d8 	beq.w	800899e <_printf_i+0x1d2>
 80087ee:	2f58      	cmp	r7, #88	; 0x58
 80087f0:	f000 80a3 	beq.w	800893a <_printf_i+0x16e>
 80087f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087fc:	e03a      	b.n	8008874 <_printf_i+0xa8>
 80087fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008802:	2b15      	cmp	r3, #21
 8008804:	d8f6      	bhi.n	80087f4 <_printf_i+0x28>
 8008806:	a101      	add	r1, pc, #4	; (adr r1, 800880c <_printf_i+0x40>)
 8008808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800880c:	08008865 	.word	0x08008865
 8008810:	08008879 	.word	0x08008879
 8008814:	080087f5 	.word	0x080087f5
 8008818:	080087f5 	.word	0x080087f5
 800881c:	080087f5 	.word	0x080087f5
 8008820:	080087f5 	.word	0x080087f5
 8008824:	08008879 	.word	0x08008879
 8008828:	080087f5 	.word	0x080087f5
 800882c:	080087f5 	.word	0x080087f5
 8008830:	080087f5 	.word	0x080087f5
 8008834:	080087f5 	.word	0x080087f5
 8008838:	08008985 	.word	0x08008985
 800883c:	080088a9 	.word	0x080088a9
 8008840:	08008967 	.word	0x08008967
 8008844:	080087f5 	.word	0x080087f5
 8008848:	080087f5 	.word	0x080087f5
 800884c:	080089a7 	.word	0x080089a7
 8008850:	080087f5 	.word	0x080087f5
 8008854:	080088a9 	.word	0x080088a9
 8008858:	080087f5 	.word	0x080087f5
 800885c:	080087f5 	.word	0x080087f5
 8008860:	0800896f 	.word	0x0800896f
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	1d1a      	adds	r2, r3, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	602a      	str	r2, [r5, #0]
 800886c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008874:	2301      	movs	r3, #1
 8008876:	e0a3      	b.n	80089c0 <_printf_i+0x1f4>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	6829      	ldr	r1, [r5, #0]
 800887c:	0606      	lsls	r6, r0, #24
 800887e:	f101 0304 	add.w	r3, r1, #4
 8008882:	d50a      	bpl.n	800889a <_printf_i+0xce>
 8008884:	680e      	ldr	r6, [r1, #0]
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	2e00      	cmp	r6, #0
 800888a:	da03      	bge.n	8008894 <_printf_i+0xc8>
 800888c:	232d      	movs	r3, #45	; 0x2d
 800888e:	4276      	negs	r6, r6
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008894:	485e      	ldr	r0, [pc, #376]	; (8008a10 <_printf_i+0x244>)
 8008896:	230a      	movs	r3, #10
 8008898:	e019      	b.n	80088ce <_printf_i+0x102>
 800889a:	680e      	ldr	r6, [r1, #0]
 800889c:	602b      	str	r3, [r5, #0]
 800889e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088a2:	bf18      	it	ne
 80088a4:	b236      	sxthne	r6, r6
 80088a6:	e7ef      	b.n	8008888 <_printf_i+0xbc>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	6820      	ldr	r0, [r4, #0]
 80088ac:	1d19      	adds	r1, r3, #4
 80088ae:	6029      	str	r1, [r5, #0]
 80088b0:	0601      	lsls	r1, r0, #24
 80088b2:	d501      	bpl.n	80088b8 <_printf_i+0xec>
 80088b4:	681e      	ldr	r6, [r3, #0]
 80088b6:	e002      	b.n	80088be <_printf_i+0xf2>
 80088b8:	0646      	lsls	r6, r0, #25
 80088ba:	d5fb      	bpl.n	80088b4 <_printf_i+0xe8>
 80088bc:	881e      	ldrh	r6, [r3, #0]
 80088be:	4854      	ldr	r0, [pc, #336]	; (8008a10 <_printf_i+0x244>)
 80088c0:	2f6f      	cmp	r7, #111	; 0x6f
 80088c2:	bf0c      	ite	eq
 80088c4:	2308      	moveq	r3, #8
 80088c6:	230a      	movne	r3, #10
 80088c8:	2100      	movs	r1, #0
 80088ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ce:	6865      	ldr	r5, [r4, #4]
 80088d0:	60a5      	str	r5, [r4, #8]
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	bfa2      	ittt	ge
 80088d6:	6821      	ldrge	r1, [r4, #0]
 80088d8:	f021 0104 	bicge.w	r1, r1, #4
 80088dc:	6021      	strge	r1, [r4, #0]
 80088de:	b90e      	cbnz	r6, 80088e4 <_printf_i+0x118>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d04d      	beq.n	8008980 <_printf_i+0x1b4>
 80088e4:	4615      	mov	r5, r2
 80088e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80088ea:	fb03 6711 	mls	r7, r3, r1, r6
 80088ee:	5dc7      	ldrb	r7, [r0, r7]
 80088f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088f4:	4637      	mov	r7, r6
 80088f6:	42bb      	cmp	r3, r7
 80088f8:	460e      	mov	r6, r1
 80088fa:	d9f4      	bls.n	80088e6 <_printf_i+0x11a>
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d10b      	bne.n	8008918 <_printf_i+0x14c>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	07de      	lsls	r6, r3, #31
 8008904:	d508      	bpl.n	8008918 <_printf_i+0x14c>
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	6861      	ldr	r1, [r4, #4]
 800890a:	4299      	cmp	r1, r3
 800890c:	bfde      	ittt	le
 800890e:	2330      	movle	r3, #48	; 0x30
 8008910:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008914:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008918:	1b52      	subs	r2, r2, r5
 800891a:	6122      	str	r2, [r4, #16]
 800891c:	f8cd a000 	str.w	sl, [sp]
 8008920:	464b      	mov	r3, r9
 8008922:	aa03      	add	r2, sp, #12
 8008924:	4621      	mov	r1, r4
 8008926:	4640      	mov	r0, r8
 8008928:	f7ff fee2 	bl	80086f0 <_printf_common>
 800892c:	3001      	adds	r0, #1
 800892e:	d14c      	bne.n	80089ca <_printf_i+0x1fe>
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	b004      	add	sp, #16
 8008936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893a:	4835      	ldr	r0, [pc, #212]	; (8008a10 <_printf_i+0x244>)
 800893c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008940:	6829      	ldr	r1, [r5, #0]
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	f851 6b04 	ldr.w	r6, [r1], #4
 8008948:	6029      	str	r1, [r5, #0]
 800894a:	061d      	lsls	r5, r3, #24
 800894c:	d514      	bpl.n	8008978 <_printf_i+0x1ac>
 800894e:	07df      	lsls	r7, r3, #31
 8008950:	bf44      	itt	mi
 8008952:	f043 0320 	orrmi.w	r3, r3, #32
 8008956:	6023      	strmi	r3, [r4, #0]
 8008958:	b91e      	cbnz	r6, 8008962 <_printf_i+0x196>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	f023 0320 	bic.w	r3, r3, #32
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	2310      	movs	r3, #16
 8008964:	e7b0      	b.n	80088c8 <_printf_i+0xfc>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	f043 0320 	orr.w	r3, r3, #32
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2378      	movs	r3, #120	; 0x78
 8008970:	4828      	ldr	r0, [pc, #160]	; (8008a14 <_printf_i+0x248>)
 8008972:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008976:	e7e3      	b.n	8008940 <_printf_i+0x174>
 8008978:	0659      	lsls	r1, r3, #25
 800897a:	bf48      	it	mi
 800897c:	b2b6      	uxthmi	r6, r6
 800897e:	e7e6      	b.n	800894e <_printf_i+0x182>
 8008980:	4615      	mov	r5, r2
 8008982:	e7bb      	b.n	80088fc <_printf_i+0x130>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	6826      	ldr	r6, [r4, #0]
 8008988:	6961      	ldr	r1, [r4, #20]
 800898a:	1d18      	adds	r0, r3, #4
 800898c:	6028      	str	r0, [r5, #0]
 800898e:	0635      	lsls	r5, r6, #24
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	d501      	bpl.n	8008998 <_printf_i+0x1cc>
 8008994:	6019      	str	r1, [r3, #0]
 8008996:	e002      	b.n	800899e <_printf_i+0x1d2>
 8008998:	0670      	lsls	r0, r6, #25
 800899a:	d5fb      	bpl.n	8008994 <_printf_i+0x1c8>
 800899c:	8019      	strh	r1, [r3, #0]
 800899e:	2300      	movs	r3, #0
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	4615      	mov	r5, r2
 80089a4:	e7ba      	b.n	800891c <_printf_i+0x150>
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	1d1a      	adds	r2, r3, #4
 80089aa:	602a      	str	r2, [r5, #0]
 80089ac:	681d      	ldr	r5, [r3, #0]
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	2100      	movs	r1, #0
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7f7 fc14 	bl	80001e0 <memchr>
 80089b8:	b108      	cbz	r0, 80089be <_printf_i+0x1f2>
 80089ba:	1b40      	subs	r0, r0, r5
 80089bc:	6060      	str	r0, [r4, #4]
 80089be:	6863      	ldr	r3, [r4, #4]
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	2300      	movs	r3, #0
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c8:	e7a8      	b.n	800891c <_printf_i+0x150>
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	462a      	mov	r2, r5
 80089ce:	4649      	mov	r1, r9
 80089d0:	4640      	mov	r0, r8
 80089d2:	47d0      	blx	sl
 80089d4:	3001      	adds	r0, #1
 80089d6:	d0ab      	beq.n	8008930 <_printf_i+0x164>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	079b      	lsls	r3, r3, #30
 80089dc:	d413      	bmi.n	8008a06 <_printf_i+0x23a>
 80089de:	68e0      	ldr	r0, [r4, #12]
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	4298      	cmp	r0, r3
 80089e4:	bfb8      	it	lt
 80089e6:	4618      	movlt	r0, r3
 80089e8:	e7a4      	b.n	8008934 <_printf_i+0x168>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4632      	mov	r2, r6
 80089ee:	4649      	mov	r1, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	47d0      	blx	sl
 80089f4:	3001      	adds	r0, #1
 80089f6:	d09b      	beq.n	8008930 <_printf_i+0x164>
 80089f8:	3501      	adds	r5, #1
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	9903      	ldr	r1, [sp, #12]
 80089fe:	1a5b      	subs	r3, r3, r1
 8008a00:	42ab      	cmp	r3, r5
 8008a02:	dcf2      	bgt.n	80089ea <_printf_i+0x21e>
 8008a04:	e7eb      	b.n	80089de <_printf_i+0x212>
 8008a06:	2500      	movs	r5, #0
 8008a08:	f104 0619 	add.w	r6, r4, #25
 8008a0c:	e7f5      	b.n	80089fa <_printf_i+0x22e>
 8008a0e:	bf00      	nop
 8008a10:	08008d85 	.word	0x08008d85
 8008a14:	08008d96 	.word	0x08008d96

08008a18 <memcpy>:
 8008a18:	440a      	add	r2, r1
 8008a1a:	4291      	cmp	r1, r2
 8008a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a20:	d100      	bne.n	8008a24 <memcpy+0xc>
 8008a22:	4770      	bx	lr
 8008a24:	b510      	push	{r4, lr}
 8008a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a2e:	4291      	cmp	r1, r2
 8008a30:	d1f9      	bne.n	8008a26 <memcpy+0xe>
 8008a32:	bd10      	pop	{r4, pc}

08008a34 <memmove>:
 8008a34:	4288      	cmp	r0, r1
 8008a36:	b510      	push	{r4, lr}
 8008a38:	eb01 0402 	add.w	r4, r1, r2
 8008a3c:	d902      	bls.n	8008a44 <memmove+0x10>
 8008a3e:	4284      	cmp	r4, r0
 8008a40:	4623      	mov	r3, r4
 8008a42:	d807      	bhi.n	8008a54 <memmove+0x20>
 8008a44:	1e43      	subs	r3, r0, #1
 8008a46:	42a1      	cmp	r1, r4
 8008a48:	d008      	beq.n	8008a5c <memmove+0x28>
 8008a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a52:	e7f8      	b.n	8008a46 <memmove+0x12>
 8008a54:	4402      	add	r2, r0
 8008a56:	4601      	mov	r1, r0
 8008a58:	428a      	cmp	r2, r1
 8008a5a:	d100      	bne.n	8008a5e <memmove+0x2a>
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a66:	e7f7      	b.n	8008a58 <memmove+0x24>

08008a68 <_free_r>:
 8008a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	d044      	beq.n	8008af8 <_free_r+0x90>
 8008a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a72:	9001      	str	r0, [sp, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f1a1 0404 	sub.w	r4, r1, #4
 8008a7a:	bfb8      	it	lt
 8008a7c:	18e4      	addlt	r4, r4, r3
 8008a7e:	f000 f913 	bl	8008ca8 <__malloc_lock>
 8008a82:	4a1e      	ldr	r2, [pc, #120]	; (8008afc <_free_r+0x94>)
 8008a84:	9801      	ldr	r0, [sp, #4]
 8008a86:	6813      	ldr	r3, [r2, #0]
 8008a88:	b933      	cbnz	r3, 8008a98 <_free_r+0x30>
 8008a8a:	6063      	str	r3, [r4, #4]
 8008a8c:	6014      	str	r4, [r2, #0]
 8008a8e:	b003      	add	sp, #12
 8008a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a94:	f000 b90e 	b.w	8008cb4 <__malloc_unlock>
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d908      	bls.n	8008aae <_free_r+0x46>
 8008a9c:	6825      	ldr	r5, [r4, #0]
 8008a9e:	1961      	adds	r1, r4, r5
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf01      	itttt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	1949      	addeq	r1, r1, r5
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	e7ed      	b.n	8008a8a <_free_r+0x22>
 8008aae:	461a      	mov	r2, r3
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	b10b      	cbz	r3, 8008ab8 <_free_r+0x50>
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	d9fa      	bls.n	8008aae <_free_r+0x46>
 8008ab8:	6811      	ldr	r1, [r2, #0]
 8008aba:	1855      	adds	r5, r2, r1
 8008abc:	42a5      	cmp	r5, r4
 8008abe:	d10b      	bne.n	8008ad8 <_free_r+0x70>
 8008ac0:	6824      	ldr	r4, [r4, #0]
 8008ac2:	4421      	add	r1, r4
 8008ac4:	1854      	adds	r4, r2, r1
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	6011      	str	r1, [r2, #0]
 8008aca:	d1e0      	bne.n	8008a8e <_free_r+0x26>
 8008acc:	681c      	ldr	r4, [r3, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	6053      	str	r3, [r2, #4]
 8008ad2:	4421      	add	r1, r4
 8008ad4:	6011      	str	r1, [r2, #0]
 8008ad6:	e7da      	b.n	8008a8e <_free_r+0x26>
 8008ad8:	d902      	bls.n	8008ae0 <_free_r+0x78>
 8008ada:	230c      	movs	r3, #12
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	e7d6      	b.n	8008a8e <_free_r+0x26>
 8008ae0:	6825      	ldr	r5, [r4, #0]
 8008ae2:	1961      	adds	r1, r4, r5
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	bf04      	itt	eq
 8008ae8:	6819      	ldreq	r1, [r3, #0]
 8008aea:	685b      	ldreq	r3, [r3, #4]
 8008aec:	6063      	str	r3, [r4, #4]
 8008aee:	bf04      	itt	eq
 8008af0:	1949      	addeq	r1, r1, r5
 8008af2:	6021      	streq	r1, [r4, #0]
 8008af4:	6054      	str	r4, [r2, #4]
 8008af6:	e7ca      	b.n	8008a8e <_free_r+0x26>
 8008af8:	b003      	add	sp, #12
 8008afa:	bd30      	pop	{r4, r5, pc}
 8008afc:	20001f4c 	.word	0x20001f4c

08008b00 <sbrk_aligned>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	4e0e      	ldr	r6, [pc, #56]	; (8008b3c <sbrk_aligned+0x3c>)
 8008b04:	460c      	mov	r4, r1
 8008b06:	6831      	ldr	r1, [r6, #0]
 8008b08:	4605      	mov	r5, r0
 8008b0a:	b911      	cbnz	r1, 8008b12 <sbrk_aligned+0x12>
 8008b0c:	f000 f8bc 	bl	8008c88 <_sbrk_r>
 8008b10:	6030      	str	r0, [r6, #0]
 8008b12:	4621      	mov	r1, r4
 8008b14:	4628      	mov	r0, r5
 8008b16:	f000 f8b7 	bl	8008c88 <_sbrk_r>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	d00a      	beq.n	8008b34 <sbrk_aligned+0x34>
 8008b1e:	1cc4      	adds	r4, r0, #3
 8008b20:	f024 0403 	bic.w	r4, r4, #3
 8008b24:	42a0      	cmp	r0, r4
 8008b26:	d007      	beq.n	8008b38 <sbrk_aligned+0x38>
 8008b28:	1a21      	subs	r1, r4, r0
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f8ac 	bl	8008c88 <_sbrk_r>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d101      	bne.n	8008b38 <sbrk_aligned+0x38>
 8008b34:	f04f 34ff 	mov.w	r4, #4294967295
 8008b38:	4620      	mov	r0, r4
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	20001f50 	.word	0x20001f50

08008b40 <_malloc_r>:
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	1ccd      	adds	r5, r1, #3
 8008b46:	f025 0503 	bic.w	r5, r5, #3
 8008b4a:	3508      	adds	r5, #8
 8008b4c:	2d0c      	cmp	r5, #12
 8008b4e:	bf38      	it	cc
 8008b50:	250c      	movcc	r5, #12
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	4607      	mov	r7, r0
 8008b56:	db01      	blt.n	8008b5c <_malloc_r+0x1c>
 8008b58:	42a9      	cmp	r1, r5
 8008b5a:	d905      	bls.n	8008b68 <_malloc_r+0x28>
 8008b5c:	230c      	movs	r3, #12
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	2600      	movs	r6, #0
 8008b62:	4630      	mov	r0, r6
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	4e2e      	ldr	r6, [pc, #184]	; (8008c24 <_malloc_r+0xe4>)
 8008b6a:	f000 f89d 	bl	8008ca8 <__malloc_lock>
 8008b6e:	6833      	ldr	r3, [r6, #0]
 8008b70:	461c      	mov	r4, r3
 8008b72:	bb34      	cbnz	r4, 8008bc2 <_malloc_r+0x82>
 8008b74:	4629      	mov	r1, r5
 8008b76:	4638      	mov	r0, r7
 8008b78:	f7ff ffc2 	bl	8008b00 <sbrk_aligned>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	4604      	mov	r4, r0
 8008b80:	d14d      	bne.n	8008c1e <_malloc_r+0xde>
 8008b82:	6834      	ldr	r4, [r6, #0]
 8008b84:	4626      	mov	r6, r4
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d140      	bne.n	8008c0c <_malloc_r+0xcc>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4638      	mov	r0, r7
 8008b90:	eb04 0803 	add.w	r8, r4, r3
 8008b94:	f000 f878 	bl	8008c88 <_sbrk_r>
 8008b98:	4580      	cmp	r8, r0
 8008b9a:	d13a      	bne.n	8008c12 <_malloc_r+0xd2>
 8008b9c:	6821      	ldr	r1, [r4, #0]
 8008b9e:	3503      	adds	r5, #3
 8008ba0:	1a6d      	subs	r5, r5, r1
 8008ba2:	f025 0503 	bic.w	r5, r5, #3
 8008ba6:	3508      	adds	r5, #8
 8008ba8:	2d0c      	cmp	r5, #12
 8008baa:	bf38      	it	cc
 8008bac:	250c      	movcc	r5, #12
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ffa5 	bl	8008b00 <sbrk_aligned>
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d02b      	beq.n	8008c12 <_malloc_r+0xd2>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	442b      	add	r3, r5
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	e00e      	b.n	8008be0 <_malloc_r+0xa0>
 8008bc2:	6822      	ldr	r2, [r4, #0]
 8008bc4:	1b52      	subs	r2, r2, r5
 8008bc6:	d41e      	bmi.n	8008c06 <_malloc_r+0xc6>
 8008bc8:	2a0b      	cmp	r2, #11
 8008bca:	d916      	bls.n	8008bfa <_malloc_r+0xba>
 8008bcc:	1961      	adds	r1, r4, r5
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	6025      	str	r5, [r4, #0]
 8008bd2:	bf18      	it	ne
 8008bd4:	6059      	strne	r1, [r3, #4]
 8008bd6:	6863      	ldr	r3, [r4, #4]
 8008bd8:	bf08      	it	eq
 8008bda:	6031      	streq	r1, [r6, #0]
 8008bdc:	5162      	str	r2, [r4, r5]
 8008bde:	604b      	str	r3, [r1, #4]
 8008be0:	4638      	mov	r0, r7
 8008be2:	f104 060b 	add.w	r6, r4, #11
 8008be6:	f000 f865 	bl	8008cb4 <__malloc_unlock>
 8008bea:	f026 0607 	bic.w	r6, r6, #7
 8008bee:	1d23      	adds	r3, r4, #4
 8008bf0:	1af2      	subs	r2, r6, r3
 8008bf2:	d0b6      	beq.n	8008b62 <_malloc_r+0x22>
 8008bf4:	1b9b      	subs	r3, r3, r6
 8008bf6:	50a3      	str	r3, [r4, r2]
 8008bf8:	e7b3      	b.n	8008b62 <_malloc_r+0x22>
 8008bfa:	6862      	ldr	r2, [r4, #4]
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	bf0c      	ite	eq
 8008c00:	6032      	streq	r2, [r6, #0]
 8008c02:	605a      	strne	r2, [r3, #4]
 8008c04:	e7ec      	b.n	8008be0 <_malloc_r+0xa0>
 8008c06:	4623      	mov	r3, r4
 8008c08:	6864      	ldr	r4, [r4, #4]
 8008c0a:	e7b2      	b.n	8008b72 <_malloc_r+0x32>
 8008c0c:	4634      	mov	r4, r6
 8008c0e:	6876      	ldr	r6, [r6, #4]
 8008c10:	e7b9      	b.n	8008b86 <_malloc_r+0x46>
 8008c12:	230c      	movs	r3, #12
 8008c14:	603b      	str	r3, [r7, #0]
 8008c16:	4638      	mov	r0, r7
 8008c18:	f000 f84c 	bl	8008cb4 <__malloc_unlock>
 8008c1c:	e7a1      	b.n	8008b62 <_malloc_r+0x22>
 8008c1e:	6025      	str	r5, [r4, #0]
 8008c20:	e7de      	b.n	8008be0 <_malloc_r+0xa0>
 8008c22:	bf00      	nop
 8008c24:	20001f4c 	.word	0x20001f4c

08008c28 <_realloc_r>:
 8008c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	4680      	mov	r8, r0
 8008c2e:	4614      	mov	r4, r2
 8008c30:	460e      	mov	r6, r1
 8008c32:	b921      	cbnz	r1, 8008c3e <_realloc_r+0x16>
 8008c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c38:	4611      	mov	r1, r2
 8008c3a:	f7ff bf81 	b.w	8008b40 <_malloc_r>
 8008c3e:	b92a      	cbnz	r2, 8008c4c <_realloc_r+0x24>
 8008c40:	f7ff ff12 	bl	8008a68 <_free_r>
 8008c44:	4625      	mov	r5, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c4c:	f000 f838 	bl	8008cc0 <_malloc_usable_size_r>
 8008c50:	4284      	cmp	r4, r0
 8008c52:	4607      	mov	r7, r0
 8008c54:	d802      	bhi.n	8008c5c <_realloc_r+0x34>
 8008c56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c5a:	d812      	bhi.n	8008c82 <_realloc_r+0x5a>
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	4640      	mov	r0, r8
 8008c60:	f7ff ff6e 	bl	8008b40 <_malloc_r>
 8008c64:	4605      	mov	r5, r0
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d0ed      	beq.n	8008c46 <_realloc_r+0x1e>
 8008c6a:	42bc      	cmp	r4, r7
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	4631      	mov	r1, r6
 8008c70:	bf28      	it	cs
 8008c72:	463a      	movcs	r2, r7
 8008c74:	f7ff fed0 	bl	8008a18 <memcpy>
 8008c78:	4631      	mov	r1, r6
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	f7ff fef4 	bl	8008a68 <_free_r>
 8008c80:	e7e1      	b.n	8008c46 <_realloc_r+0x1e>
 8008c82:	4635      	mov	r5, r6
 8008c84:	e7df      	b.n	8008c46 <_realloc_r+0x1e>
	...

08008c88 <_sbrk_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d06      	ldr	r5, [pc, #24]	; (8008ca4 <_sbrk_r+0x1c>)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4604      	mov	r4, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	f7f8 f90a 	bl	8000eac <_sbrk>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_sbrk_r+0x1a>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_sbrk_r+0x1a>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	20001f54 	.word	0x20001f54

08008ca8 <__malloc_lock>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__malloc_lock+0x8>)
 8008caa:	f000 b811 	b.w	8008cd0 <__retarget_lock_acquire_recursive>
 8008cae:	bf00      	nop
 8008cb0:	20001f58 	.word	0x20001f58

08008cb4 <__malloc_unlock>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__malloc_unlock+0x8>)
 8008cb6:	f000 b80c 	b.w	8008cd2 <__retarget_lock_release_recursive>
 8008cba:	bf00      	nop
 8008cbc:	20001f58 	.word	0x20001f58

08008cc0 <_malloc_usable_size_r>:
 8008cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cc4:	1f18      	subs	r0, r3, #4
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	bfbc      	itt	lt
 8008cca:	580b      	ldrlt	r3, [r1, r0]
 8008ccc:	18c0      	addlt	r0, r0, r3
 8008cce:	4770      	bx	lr

08008cd0 <__retarget_lock_acquire_recursive>:
 8008cd0:	4770      	bx	lr

08008cd2 <__retarget_lock_release_recursive>:
 8008cd2:	4770      	bx	lr

08008cd4 <_init>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr

08008ce0 <_fini>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	bf00      	nop
 8008ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce6:	bc08      	pop	{r3}
 8008ce8:	469e      	mov	lr, r3
 8008cea:	4770      	bx	lr
