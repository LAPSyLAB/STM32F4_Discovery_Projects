
Buzzer_PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a014  0800a014  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a014  0800a014  0001a014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a01c  0800a01c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a01c  0800a01c  0001a01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  2000020c  0800a230  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f80  0800a230  00021f80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef82  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004076  00000000  00000000  0003f1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00043238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  00044948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002594a  00000000  00000000  00045ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d678  00000000  00000000  0006b812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3074  00000000  00000000  00088e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015befe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006598  00000000  00000000  0015bf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009330 	.word	0x08009330

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08009330 	.word	0x08009330

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8000578:	b084      	sub	sp, #16
 800057a:	b580      	push	{r7, lr}
 800057c:	b088      	sub	sp, #32
 800057e:	af00      	add	r7, sp, #0
 8000580:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000584:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8000588:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800058a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800058e:	f003 ffff 	bl	8004590 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 8000592:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8000598:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800059c:	f003 fed6 	bl	800434c <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005a0:	2360      	movs	r3, #96	; 0x60
 80005a2:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80005a4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80005a8:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80005b6:	4619      	mov	r1, r3
 80005b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005bc:	f004 f858 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80005c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005c6:	f003 ff1b 	bl	8004400 <HAL_TIM_PWM_Start>
}
 80005ca:	bf00      	nop
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d4:	b004      	add	sp, #16
 80005d6:	4770      	bx	lr

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	b099      	sub	sp, #100	; 0x64
 80005dc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fd77 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f8c9 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa51 	bl	8000a8c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ea:	f000 f947 	bl	800087c <MX_I2C1_Init>
  MX_I2S3_Init();
 80005ee:	f000 f973 	bl	80008d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005f2:	f000 f9a1 	bl	8000938 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005f6:	f000 f9d5 	bl	80009a4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80005fa:	f007 fcfd 	bl	8007ff8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005fe:	2100      	movs	r1, #0
 8000600:	4853      	ldr	r0, [pc, #332]	; (8000750 <main+0x178>)
 8000602:	f003 fefd 	bl	8004400 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  melodyCount = sizeof(melodySizes)/ sizeof(uint32_t);
 8000606:	2305      	movs	r3, #5
 8000608:	60bb      	str	r3, [r7, #8]

	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	e085      	b.n	800071c <main+0x144>
	  {
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	e069      	b.n	80006ea <main+0x112>
	  	  {
//		  	  buzzerSetNewFrequency(melody[melodyIndex][noteIndex]);
			  NoteFreq = melody[melodyIndex][noteIndex];
 8000616:	4a4f      	ldr	r2, [pc, #316]	; (8000754 <main+0x17c>)
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	60fb      	str	r3, [r7, #12]
			  if (NoteFreq == 0) NoteFreq = 1;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d101      	bne.n	8000632 <main+0x5a>
 800062e:	2301      	movs	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]

			  ARR_period = (int)(1000000/NoteFreq);
 8000632:	4a49      	ldr	r2, [pc, #292]	; (8000758 <main+0x180>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	fb92 f3f3 	sdiv	r3, r2, r3
 800063a:	607b      	str	r3, [r7, #4]
//			  htim2.Instance->ARR = ARR_period;
//			  htim2.Instance->CCR1 = ARR_period/2;
			  setPWM(htim2, TIM_CHANNEL_1, ARR_period, ARR_period/2);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	b29a      	uxth	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0fd9      	lsrs	r1, r3, #31
 8000644:	440b      	add	r3, r1
 8000646:	105b      	asrs	r3, r3, #1
 8000648:	b29b      	uxth	r3, r3
 800064a:	4e41      	ldr	r6, [pc, #260]	; (8000750 <main+0x178>)
 800064c:	9310      	str	r3, [sp, #64]	; 0x40
 800064e:	920f      	str	r2, [sp, #60]	; 0x3c
 8000650:	2300      	movs	r3, #0
 8000652:	930e      	str	r3, [sp, #56]	; 0x38
 8000654:	466d      	mov	r5, sp
 8000656:	f106 0410 	add.w	r4, r6, #16
 800065a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800065c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800065e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800066a:	e885 0003 	stmia.w	r5, {r0, r1}
 800066e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000672:	f7ff ff81 	bl	8000578 <setPWM>

			  Delaymsecs = noteDurations[melodyIndex][noteIndex] * melodySlowfactor[melodyIndex];
 8000676:	4a39      	ldr	r2, [pc, #228]	; (800075c <main+0x184>)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4936      	ldr	r1, [pc, #216]	; (8000760 <main+0x188>)
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	603b      	str	r3, [r7, #0]
			  snprintf (SendBuffer,BUFSIZE,"Melody[%d],Note #%d F=%d Hz Duration:%d ms| ARR=%d CCR1=%d\r\n",melodyIndex,noteIndex,melody[melodyIndex][noteIndex],Delaymsecs,htim2.Instance->ARR,htim2.Instance->CCR1);
 8000694:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <main+0x17c>)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <main+0x178>)
 80006a6:	6812      	ldr	r2, [r2, #0]
 80006a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80006aa:	4929      	ldr	r1, [pc, #164]	; (8000750 <main+0x178>)
 80006ac:	6809      	ldr	r1, [r1, #0]
 80006ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80006b0:	9104      	str	r1, [sp, #16]
 80006b2:	9203      	str	r2, [sp, #12]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	9202      	str	r2, [sp, #8]
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	4a28      	ldr	r2, [pc, #160]	; (8000764 <main+0x18c>)
 80006c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c6:	4828      	ldr	r0, [pc, #160]	; (8000768 <main+0x190>)
 80006c8:	f008 f9f0 	bl	8008aac <sniprintf>
	          CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80006cc:	4826      	ldr	r0, [pc, #152]	; (8000768 <main+0x190>)
 80006ce:	f7ff fd7f 	bl	80001d0 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4619      	mov	r1, r3
 80006d6:	4824      	ldr	r0, [pc, #144]	; (8000768 <main+0x190>)
 80006d8:	f007 fd4c 	bl	8008174 <CDC_Transmit_FS>

		  	  HAL_Delay(Delaymsecs);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fd68 	bl	80011b4 <HAL_Delay>
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	3301      	adds	r3, #1
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4a20      	ldr	r2, [pc, #128]	; (800076c <main+0x194>)
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d88e      	bhi.n	8000616 <main+0x3e>
	  	  }
		  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of Melody[%d]\r\n\r\n",melodyIndex);
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <main+0x198>)
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <main+0x190>)
 8000702:	f008 f9d3 	bl	8008aac <sniprintf>
	      CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000706:	4818      	ldr	r0, [pc, #96]	; (8000768 <main+0x190>)
 8000708:	f7ff fd62 	bl	80001d0 <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	4619      	mov	r1, r3
 8000710:	4815      	ldr	r0, [pc, #84]	; (8000768 <main+0x190>)
 8000712:	f007 fd2f 	bl	8008174 <CDC_Transmit_FS>
	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	429a      	cmp	r2, r3
 8000722:	f6ff af75 	blt.w	8000610 <main+0x38>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of All Melodies[%d]\r\n\r\n",melodyIndex);
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <main+0x19c>)
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <main+0x190>)
 8000730:	f008 f9bc 	bl	8008aac <sniprintf>
      CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x190>)
 8000736:	f7ff fd4b 	bl	80001d0 <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	4619      	mov	r1, r3
 800073e:	480a      	ldr	r0, [pc, #40]	; (8000768 <main+0x190>)
 8000740:	f007 fd18 	bl	8008174 <CDC_Transmit_FS>

      HAL_Delay(2000);
 8000744:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000748:	f000 fd34 	bl	80011b4 <HAL_Delay>
  {
 800074c:	e75b      	b.n	8000606 <main+0x2e>
 800074e:	bf00      	nop
 8000750:	20000604 	.word	0x20000604
 8000754:	20000000 	.word	0x20000000
 8000758:	000f4240 	.word	0x000f4240
 800075c:	20000014 	.word	0x20000014
 8000760:	08009fa8 	.word	0x08009fa8
 8000764:	08009348 	.word	0x08009348
 8000768:	200004ac 	.word	0x200004ac
 800076c:	08009fb4 	.word	0x08009fb4
 8000770:	08009388 	.word	0x08009388
 8000774:	080093a4 	.word	0x080093a4

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b098      	sub	sp, #96	; 0x60
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 f988 	bl	8008a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <SystemClock_Config+0xfc>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <SystemClock_Config+0xfc>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <SystemClock_Config+0xfc>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <SystemClock_Config+0x100>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <SystemClock_Config+0x100>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <SystemClock_Config+0x100>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e2:	2301      	movs	r3, #1
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f6:	2308      	movs	r3, #8
 80007f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007fa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000804:	2307      	movs	r3, #7
 8000806:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800080c:	4618      	mov	r0, r3
 800080e:	f002 ff25 	bl	800365c <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000818:	f000 fa36 	bl	8000c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000828:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800082e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	2105      	movs	r1, #5
 800083a:	4618      	mov	r0, r3
 800083c:	f003 f986 	bl	8003b4c <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000846:	f000 fa1f 	bl	8000c88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800084a:	2301      	movs	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800084e:	23c0      	movs	r3, #192	; 0xc0
 8000850:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fb5e 	bl	8003f1c <HAL_RCCEx_PeriphCLKConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000866:	f000 fa0f 	bl	8000c88 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3760      	adds	r7, #96	; 0x60
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2C1_Init+0x50>)
 8000882:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <MX_I2C1_Init+0x54>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2C1_Init+0x50>)
 8000888:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x58>)
 800088a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_I2C1_Init+0x50>)
 800089a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800089e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_I2C1_Init+0x50>)
 80008ba:	f000 ff67 	bl	800178c <HAL_I2C_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c4:	f000 f9e0 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000458 	.word	0x20000458
 80008d0:	40005400 	.word	0x40005400
 80008d4:	000186a0 	.word	0x000186a0

080008d8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_I2S3_Init+0x54>)
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <MX_I2S3_Init+0x58>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2S3_Init+0x54>)
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_I2S3_Init+0x54>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_I2S3_Init+0x54>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_I2S3_Init+0x54>)
 80008f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_I2S3_Init+0x54>)
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <MX_I2S3_Init+0x5c>)
 8000902:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_I2S3_Init+0x54>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_I2S3_Init+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_I2S3_Init+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_I2S3_Init+0x54>)
 8000918:	f001 f87c 	bl	8001a14 <HAL_I2S_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000922:	f000 f9b1 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000064c 	.word	0x2000064c
 8000930:	40003c00 	.word	0x40003c00
 8000934:	00017700 	.word	0x00017700

08000938 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_SPI1_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI1_Init+0x64>)
 8000944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI1_Init+0x64>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x64>)
 8000984:	220a      	movs	r2, #10
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI1_Init+0x64>)
 800098a:	f003 fc07 	bl	800419c <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 f978 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200005ac 	.word	0x200005ac
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	; 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d4:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009de:	2253      	movs	r2, #83	; 0x53
 80009e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fa:	4823      	ldr	r0, [pc, #140]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009fc:	f003 fc57 	bl	80042ae <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a06:	f000 f93f 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a14:	4619      	mov	r1, r3
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a18:	f003 fee8 	bl	80047ec <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a22:	f000 f931 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a28:	f003 fc90 	bl	800434c <HAL_TIM_PWM_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a32:	f000 f929 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	4619      	mov	r1, r3
 8000a44:	4810      	ldr	r0, [pc, #64]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a46:	f004 faa5 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a50:	f000 f91a 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a54:	2360      	movs	r3, #96	; 0x60
 8000a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a6c:	f003 fe00 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a76:	f000 f907 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a7c:	f000 fa4a 	bl	8000f14 <HAL_TIM_MspPostInit>

}
 8000a80:	bf00      	nop
 8000a82:	3738      	adds	r7, #56	; 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000604 	.word	0x20000604

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	4b71      	ldr	r3, [pc, #452]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a70      	ldr	r2, [pc, #448]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000aac:	f043 0310 	orr.w	r3, r3, #16
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b6e      	ldr	r3, [pc, #440]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	4b6a      	ldr	r3, [pc, #424]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a69      	ldr	r2, [pc, #420]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b67      	ldr	r3, [pc, #412]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b63      	ldr	r3, [pc, #396]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a62      	ldr	r2, [pc, #392]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b60      	ldr	r3, [pc, #384]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b5c      	ldr	r3, [pc, #368]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a5b      	ldr	r2, [pc, #364]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b59      	ldr	r3, [pc, #356]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b55      	ldr	r3, [pc, #340]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a54      	ldr	r2, [pc, #336]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b52      	ldr	r3, [pc, #328]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b4e      	ldr	r3, [pc, #312]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a4d      	ldr	r2, [pc, #308]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b4b      	ldr	r3, [pc, #300]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	4848      	ldr	r0, [pc, #288]	; (8000c70 <MX_GPIO_Init+0x1e4>)
 8000b50:	f000 fe02 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2101      	movs	r1, #1
 8000b58:	4846      	ldr	r0, [pc, #280]	; (8000c74 <MX_GPIO_Init+0x1e8>)
 8000b5a:	f000 fdfd 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b64:	4844      	ldr	r0, [pc, #272]	; (8000c78 <MX_GPIO_Init+0x1ec>)
 8000b66:	f000 fdf7 	bl	8001758 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	483b      	ldr	r0, [pc, #236]	; (8000c70 <MX_GPIO_Init+0x1e4>)
 8000b82:	f000 fc4d 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4835      	ldr	r0, [pc, #212]	; (8000c74 <MX_GPIO_Init+0x1e8>)
 8000b9e:	f000 fc3f 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	482d      	ldr	r0, [pc, #180]	; (8000c74 <MX_GPIO_Init+0x1e8>)
 8000bbe:	f000 fc2f 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	482a      	ldr	r0, [pc, #168]	; (8000c80 <MX_GPIO_Init+0x1f4>)
 8000bd6:	f000 fc23 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4825      	ldr	r0, [pc, #148]	; (8000c84 <MX_GPIO_Init+0x1f8>)
 8000bee:	f000 fc17 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c04:	2305      	movs	r3, #5
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481d      	ldr	r0, [pc, #116]	; (8000c84 <MX_GPIO_Init+0x1f8>)
 8000c10:	f000 fc06 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c14:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c18:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4812      	ldr	r0, [pc, #72]	; (8000c78 <MX_GPIO_Init+0x1ec>)
 8000c2e:	f000 fbf7 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c32:	2320      	movs	r3, #32
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_GPIO_Init+0x1ec>)
 8000c46:	f000 fbeb 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_GPIO_Init+0x1e4>)
 8000c5e:	f000 fbdf 	bl	8001420 <HAL_GPIO_Init>

}
 8000c62:	bf00      	nop
 8000c64:	3730      	adds	r7, #48	; 0x30
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020c00 	.word	0x40020c00
 8000c7c:	10120000 	.word	0x10120000
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f000 fb62 	bl	800139c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_I2C_MspInit+0x84>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12c      	bne.n	8000d60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d28:	2312      	movs	r3, #18
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d34:	2304      	movs	r3, #4
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d40:	f000 fb6e 	bl	8001420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <HAL_I2S_MspInit+0xc0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d14a      	bne.n	8000e2c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dea:	2310      	movs	r3, #16
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <HAL_I2S_MspInit+0xc8>)
 8000e06:	f000 fb0b 	bl	8001420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e0a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <HAL_I2S_MspInit+0xcc>)
 8000e28:	f000 fafa 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020800 	.word	0x40020800

08000e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_SPI_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e9e:	23e0      	movs	r3, #224	; 0xe0
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_SPI_MspInit+0x8c>)
 8000eba:	f000 fab1 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee4:	d10d      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_TIM_Base_MspInit+0x3c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_TIM_Base_MspInit+0x3c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_TIM_Base_MspInit+0x3c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f34:	d11e      	bne.n	8000f74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_TIM_MspPostInit+0x68>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_TIM_MspPostInit+0x68>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_MspPostInit+0x68>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4804      	ldr	r0, [pc, #16]	; (8000f80 <HAL_TIM_MspPostInit+0x6c>)
 8000f70:	f000 fa56 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f8d0 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <OTG_FS_IRQHandler+0x10>)
 8000fde:	f001 fb09 	bl	80025f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20001b68 	.word	0x20001b68

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f007 fd14 	bl	8008a48 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20020000 	.word	0x20020000
 800104c:	00000400 	.word	0x00000400
 8001050:	20000228 	.word	0x20000228
 8001054:	20001f80 	.word	0x20001f80

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffd7 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f007 fcd3 	bl	8008a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa93 	bl	80005d8 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80010c0:	0800a024 	.word	0x0800a024
  ldr r2, =_sbss
 80010c4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80010c8:	20001f80 	.word	0x20001f80

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f94f 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fdc6 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f967 	bl	8001406 <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f92f 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000028 	.word	0x20000028
 800116c:	20000030 	.word	0x20000030
 8001170:	2000002c 	.word	0x2000002c

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000030 	.word	0x20000030
 8001198:	20000694 	.word	0x20000694

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000694 	.word	0x20000694

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000030 	.word	0x20000030

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e16b      	b.n	8001714 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 815a 	bne.w	800170e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d005      	beq.n	8001472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	2b02      	cmp	r3, #2
 8001470:	d130      	bne.n	80014d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 0201 	and.w	r2, r3, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d017      	beq.n	8001510 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d123      	bne.n	8001564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	08da      	lsrs	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3208      	adds	r2, #8
 800155e:	69b9      	ldr	r1, [r7, #24]
 8001560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0203 	and.w	r2, r3, #3
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80b4 	beq.w	800170e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b60      	ldr	r3, [pc, #384]	; (800172c <HAL_GPIO_Init+0x30c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a5f      	ldr	r2, [pc, #380]	; (800172c <HAL_GPIO_Init+0x30c>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b5d      	ldr	r3, [pc, #372]	; (800172c <HAL_GPIO_Init+0x30c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c2:	4a5b      	ldr	r2, [pc, #364]	; (8001730 <HAL_GPIO_Init+0x310>)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_GPIO_Init+0x314>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d02b      	beq.n	8001646 <HAL_GPIO_Init+0x226>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a51      	ldr	r2, [pc, #324]	; (8001738 <HAL_GPIO_Init+0x318>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d025      	beq.n	8001642 <HAL_GPIO_Init+0x222>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a50      	ldr	r2, [pc, #320]	; (800173c <HAL_GPIO_Init+0x31c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01f      	beq.n	800163e <HAL_GPIO_Init+0x21e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4f      	ldr	r2, [pc, #316]	; (8001740 <HAL_GPIO_Init+0x320>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d019      	beq.n	800163a <HAL_GPIO_Init+0x21a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4e      	ldr	r2, [pc, #312]	; (8001744 <HAL_GPIO_Init+0x324>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0x216>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <HAL_GPIO_Init+0x328>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00d      	beq.n	8001632 <HAL_GPIO_Init+0x212>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4c      	ldr	r2, [pc, #304]	; (800174c <HAL_GPIO_Init+0x32c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x20e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4b      	ldr	r2, [pc, #300]	; (8001750 <HAL_GPIO_Init+0x330>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_GPIO_Init+0x20a>
 8001626:	2307      	movs	r3, #7
 8001628:	e00e      	b.n	8001648 <HAL_GPIO_Init+0x228>
 800162a:	2308      	movs	r3, #8
 800162c:	e00c      	b.n	8001648 <HAL_GPIO_Init+0x228>
 800162e:	2306      	movs	r3, #6
 8001630:	e00a      	b.n	8001648 <HAL_GPIO_Init+0x228>
 8001632:	2305      	movs	r3, #5
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x228>
 8001636:	2304      	movs	r3, #4
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x228>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x228>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x228>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x228>
 8001646:	2300      	movs	r3, #0
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001658:	4935      	ldr	r1, [pc, #212]	; (8001730 <HAL_GPIO_Init+0x310>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_GPIO_Init+0x334>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168a:	4a32      	ldr	r2, [pc, #200]	; (8001754 <HAL_GPIO_Init+0x334>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_GPIO_Init+0x334>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <HAL_GPIO_Init+0x334>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_GPIO_Init+0x334>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_GPIO_Init+0x334>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_GPIO_Init+0x334>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_GPIO_Init+0x334>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f67f ae90 	bls.w	800143c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40013800 	.word	0x40013800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40021400 	.word	0x40021400
 800174c:	40021800 	.word	0x40021800
 8001750:	40021c00 	.word	0x40021c00
 8001754:	40013c00 	.word	0x40013c00

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e12b      	b.n	80019f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fa96 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2224      	movs	r2, #36	; 0x24
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017f0:	f002 fb80 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80017f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a81      	ldr	r2, [pc, #516]	; (8001a00 <HAL_I2C_Init+0x274>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d807      	bhi.n	8001810 <HAL_I2C_Init+0x84>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <HAL_I2C_Init+0x278>)
 8001804:	4293      	cmp	r3, r2
 8001806:	bf94      	ite	ls
 8001808:	2301      	movls	r3, #1
 800180a:	2300      	movhi	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	e006      	b.n	800181e <HAL_I2C_Init+0x92>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4a7d      	ldr	r2, [pc, #500]	; (8001a08 <HAL_I2C_Init+0x27c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	bf94      	ite	ls
 8001818:	2301      	movls	r3, #1
 800181a:	2300      	movhi	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0e7      	b.n	80019f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4a78      	ldr	r2, [pc, #480]	; (8001a0c <HAL_I2C_Init+0x280>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a6a      	ldr	r2, [pc, #424]	; (8001a00 <HAL_I2C_Init+0x274>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d802      	bhi.n	8001860 <HAL_I2C_Init+0xd4>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3301      	adds	r3, #1
 800185e:	e009      	b.n	8001874 <HAL_I2C_Init+0xe8>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	4a69      	ldr	r2, [pc, #420]	; (8001a10 <HAL_I2C_Init+0x284>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	3301      	adds	r3, #1
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	430b      	orrs	r3, r1
 800187a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	495c      	ldr	r1, [pc, #368]	; (8001a00 <HAL_I2C_Init+0x274>)
 8001890:	428b      	cmp	r3, r1
 8001892:	d819      	bhi.n	80018c8 <HAL_I2C_Init+0x13c>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1e59      	subs	r1, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a2:	1c59      	adds	r1, r3, #1
 80018a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018a8:	400b      	ands	r3, r1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <HAL_I2C_Init+0x138>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1e59      	subs	r1, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c2:	e051      	b.n	8001968 <HAL_I2C_Init+0x1dc>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e04f      	b.n	8001968 <HAL_I2C_Init+0x1dc>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d111      	bne.n	80018f4 <HAL_I2C_Init+0x168>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e58      	subs	r0, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	440b      	add	r3, r1
 80018de:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	e012      	b.n	800191a <HAL_I2C_Init+0x18e>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	0099      	lsls	r1, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	3301      	adds	r3, #1
 800190c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Init+0x196>
 800191e:	2301      	movs	r3, #1
 8001920:	e022      	b.n	8001968 <HAL_I2C_Init+0x1dc>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10e      	bne.n	8001948 <HAL_I2C_Init+0x1bc>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1e58      	subs	r0, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6859      	ldr	r1, [r3, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	440b      	add	r3, r1
 8001938:	fbb0 f3f3 	udiv	r3, r0, r3
 800193c:	3301      	adds	r3, #1
 800193e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001946:	e00f      	b.n	8001968 <HAL_I2C_Init+0x1dc>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	0099      	lsls	r1, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	6809      	ldr	r1, [r1, #0]
 800196c:	4313      	orrs	r3, r2
 800196e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6911      	ldr	r1, [r2, #16]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68d2      	ldr	r2, [r2, #12]
 80019a2:	4311      	orrs	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2220      	movs	r2, #32
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	000186a0 	.word	0x000186a0
 8001a04:	001e847f 	.word	0x001e847f
 8001a08:	003d08ff 	.word	0x003d08ff
 8001a0c:	431bde83 	.word	0x431bde83
 8001a10:	10624dd3 	.word	0x10624dd3

08001a14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e128      	b.n	8001c78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a90      	ldr	r2, [pc, #576]	; (8001c80 <HAL_I2S_Init+0x26c>)
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff f997 	bl	8000d74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a5c:	f023 030f 	bic.w	r3, r3, #15
 8001a60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d060      	beq.n	8001b34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e001      	b.n	8001a84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a80:	2320      	movs	r3, #32
 8001a82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d802      	bhi.n	8001a92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f002 fb24 	bl	80040e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a98:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa2:	d125      	bne.n	8001af0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d010      	beq.n	8001ace <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	461a      	mov	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	3305      	adds	r3, #5
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	e01f      	b.n	8001b0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	3305      	adds	r3, #5
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e00e      	b.n	8001b0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	3305      	adds	r3, #5
 8001b0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4a5c      	ldr	r2, [pc, #368]	; (8001c84 <HAL_I2S_Init+0x270>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	08db      	lsrs	r3, r3, #3
 8001b18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	e003      	b.n	8001b3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d902      	bls.n	8001b48 <HAL_I2S_Init+0x134>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	2bff      	cmp	r3, #255	; 0xff
 8001b46:	d907      	bls.n	8001b58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	f043 0210 	orr.w	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e08f      	b.n	8001c78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	ea42 0103 	orr.w	r1, r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b76:	f023 030f 	bic.w	r3, r3, #15
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6851      	ldr	r1, [r2, #4]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6892      	ldr	r2, [r2, #8]
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68d2      	ldr	r2, [r2, #12]
 8001b88:	4311      	orrs	r1, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6992      	ldr	r2, [r2, #24]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d161      	bne.n	8001c68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a38      	ldr	r2, [pc, #224]	; (8001c88 <HAL_I2S_Init+0x274>)
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a37      	ldr	r2, [pc, #220]	; (8001c8c <HAL_I2S_Init+0x278>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2S_Init+0x1a4>
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_I2S_Init+0x27c>)
 8001bb6:	e001      	b.n	8001bbc <HAL_I2S_Init+0x1a8>
 8001bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4932      	ldr	r1, [pc, #200]	; (8001c8c <HAL_I2S_Init+0x278>)
 8001bc4:	428a      	cmp	r2, r1
 8001bc6:	d101      	bne.n	8001bcc <HAL_I2S_Init+0x1b8>
 8001bc8:	4a31      	ldr	r2, [pc, #196]	; (8001c90 <HAL_I2S_Init+0x27c>)
 8001bca:	e001      	b.n	8001bd0 <HAL_I2S_Init+0x1bc>
 8001bcc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bd4:	f023 030f 	bic.w	r3, r3, #15
 8001bd8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_I2S_Init+0x278>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_I2S_Init+0x1d4>
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_I2S_Init+0x27c>)
 8001be6:	e001      	b.n	8001bec <HAL_I2S_Init+0x1d8>
 8001be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bec:	2202      	movs	r2, #2
 8001bee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HAL_I2S_Init+0x278>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_I2S_Init+0x1ea>
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <HAL_I2S_Init+0x27c>)
 8001bfc:	e001      	b.n	8001c02 <HAL_I2S_Init+0x1ee>
 8001bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0e:	d003      	beq.n	8001c18 <HAL_I2S_Init+0x204>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d103      	bne.n	8001c20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e001      	b.n	8001c24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	897b      	ldrh	r3, [r7, #10]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_I2S_Init+0x278>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2S_Init+0x24c>
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_I2S_Init+0x27c>)
 8001c5e:	e001      	b.n	8001c64 <HAL_I2S_Init+0x250>
 8001c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c64:	897a      	ldrh	r2, [r7, #10]
 8001c66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	08001d8b 	.word	0x08001d8b
 8001c84:	cccccccd 	.word	0xcccccccd
 8001c88:	08001ea1 	.word	0x08001ea1
 8001c8c:	40003800 	.word	0x40003800
 8001c90:	40003400 	.word	0x40003400

08001c94 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	1c9a      	adds	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10e      	bne.n	8001d24 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffb8 	bl	8001c94 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	1c9a      	adds	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10e      	bne.n	8001d82 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d72:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff93 	bl	8001ca8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d13a      	bne.n	8001e1c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d109      	bne.n	8001dc4 <I2S_IRQHandler+0x3a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	d102      	bne.n	8001dc4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffb4 	bl	8001d2c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b40      	cmp	r3, #64	; 0x40
 8001dcc:	d126      	bne.n	8001e1c <I2S_IRQHandler+0x92>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d11f      	bne.n	8001e1c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f043 0202 	orr.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ff50 	bl	8001cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d136      	bne.n	8001e96 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d109      	bne.n	8001e46 <I2S_IRQHandler+0xbc>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d102      	bne.n	8001e46 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff45 	bl	8001cd0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d122      	bne.n	8001e96 <I2S_IRQHandler+0x10c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d11b      	bne.n	8001e96 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e6c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	f043 0204 	orr.w	r2, r3, #4
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff13 	bl	8001cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4aa2      	ldr	r2, [pc, #648]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001eba:	4ba2      	ldr	r3, [pc, #648]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ebc:	e001      	b.n	8001ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a9b      	ldr	r2, [pc, #620]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ed8:	4b9a      	ldr	r3, [pc, #616]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001eda:	e001      	b.n	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eec:	d004      	beq.n	8001ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 8099 	bne.w	800202a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f925 	bl	800215c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d107      	bne.n	8001f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f9c8 	bl	80022bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d13a      	bne.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d035      	beq.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a7e      	ldr	r2, [pc, #504]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f4a:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f4c:	e001      	b.n	8001f52 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4979      	ldr	r1, [pc, #484]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f5a:	428b      	cmp	r3, r1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f5e:	4b79      	ldr	r3, [pc, #484]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f60:	e001      	b.n	8001f66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f6a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f043 0202 	orr.w	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe88 	bl	8001cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	f040 80be 	bne.w	8002134 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80b8 	beq.w	8002134 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a59      	ldr	r2, [pc, #356]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001fde:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fe0:	e001      	b.n	8001fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4954      	ldr	r1, [pc, #336]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fee:	428b      	cmp	r3, r1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ff2:	4b54      	ldr	r3, [pc, #336]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ff4:	e001      	b.n	8001ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ffe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0204 	orr.w	r2, r3, #4
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fe4a 	bl	8001cbc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002028:	e084      	b.n	8002134 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8be 	bl	80021c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f8fd 	bl	8002258 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d12f      	bne.n	80020c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d02a      	beq.n	80020c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002080:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800208e:	e001      	b.n	8002094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002090:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4929      	ldr	r1, [pc, #164]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800209c:	428b      	cmp	r3, r1
 800209e:	d101      	bne.n	80020a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80020a0:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80020a2:	e001      	b.n	80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80020a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fdfa 	bl	8001cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d131      	bne.n	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d02c      	beq.n	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a17      	ldr	r2, [pc, #92]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80020e8:	e001      	b.n	80020ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80020ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4912      	ldr	r1, [pc, #72]	; (8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80020f6:	428b      	cmp	r3, r1
 80020f8:	d101      	bne.n	80020fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80020fc:	e001      	b.n	8002102 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80020fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002102:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002106:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002116:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fdc5 	bl	8001cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002132:	e000      	b.n	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002134:	bf00      	nop
}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40003800 	.word	0x40003800
 8002144:	40003400 	.word	0x40003400

08002148 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	1c99      	adds	r1, r3, #2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6251      	str	r1, [r2, #36]	; 0x24
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d113      	bne.n	80021b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800219c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffc9 	bl	8002148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	1c99      	adds	r1, r3, #2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6251      	str	r1, [r2, #36]	; 0x24
 80021d2:	8819      	ldrh	r1, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <I2SEx_TxISR_I2SExt+0x90>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <I2SEx_TxISR_I2SExt+0x22>
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <I2SEx_TxISR_I2SExt+0x94>)
 80021e0:	e001      	b.n	80021e6 <I2SEx_TxISR_I2SExt+0x26>
 80021e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e6:	460a      	mov	r2, r1
 80021e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d121      	bne.n	8002246 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <I2SEx_TxISR_I2SExt+0x90>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <I2SEx_TxISR_I2SExt+0x50>
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <I2SEx_TxISR_I2SExt+0x94>)
 800220e:	e001      	b.n	8002214 <I2SEx_TxISR_I2SExt+0x54>
 8002210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	490d      	ldr	r1, [pc, #52]	; (8002250 <I2SEx_TxISR_I2SExt+0x90>)
 800221c:	428b      	cmp	r3, r1
 800221e:	d101      	bne.n	8002224 <I2SEx_TxISR_I2SExt+0x64>
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <I2SEx_TxISR_I2SExt+0x94>)
 8002222:	e001      	b.n	8002228 <I2SEx_TxISR_I2SExt+0x68>
 8002224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002228:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800222c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff81 	bl	8002148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40003800 	.word	0x40003800
 8002254:	40003400 	.word	0x40003400

08002258 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68d8      	ldr	r0, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	1c99      	adds	r1, r3, #2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002270:	b282      	uxth	r2, r0
 8002272:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d113      	bne.n	80022b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800229a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff4a 	bl	8002148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a20      	ldr	r2, [pc, #128]	; (800234c <I2SEx_RxISR_I2SExt+0x90>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <I2SEx_RxISR_I2SExt+0x16>
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <I2SEx_RxISR_I2SExt+0x94>)
 80022d0:	e001      	b.n	80022d6 <I2SEx_RxISR_I2SExt+0x1a>
 80022d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022d6:	68d8      	ldr	r0, [r3, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	1c99      	adds	r1, r3, #2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022e2:	b282      	uxth	r2, r0
 80022e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d121      	bne.n	8002342 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <I2SEx_RxISR_I2SExt+0x90>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <I2SEx_RxISR_I2SExt+0x50>
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <I2SEx_RxISR_I2SExt+0x94>)
 800230a:	e001      	b.n	8002310 <I2SEx_RxISR_I2SExt+0x54>
 800230c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	490d      	ldr	r1, [pc, #52]	; (800234c <I2SEx_RxISR_I2SExt+0x90>)
 8002318:	428b      	cmp	r3, r1
 800231a:	d101      	bne.n	8002320 <I2SEx_RxISR_I2SExt+0x64>
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <I2SEx_RxISR_I2SExt+0x94>)
 800231e:	e001      	b.n	8002324 <I2SEx_RxISR_I2SExt+0x68>
 8002320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002324:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002328:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff03 	bl	8002148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40003800 	.word	0x40003800
 8002350:	40003400 	.word	0x40003400

08002354 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	b08f      	sub	sp, #60	; 0x3c
 8002358:	af0a      	add	r7, sp, #40	; 0x28
 800235a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e10f      	b.n	8002586 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f006 f83f 	bl	8008404 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 ff86 	bl	80052b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	687e      	ldr	r6, [r7, #4]
 80023b2:	466d      	mov	r5, sp
 80023b4:	f106 0410 	add.w	r4, r6, #16
 80023b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c8:	1d33      	adds	r3, r6, #4
 80023ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	f002 fe5d 	bl	800508c <USB_CoreInit>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d0      	b.n	8002586 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 ff74 	bl	80052d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e04a      	b.n	800248c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	333d      	adds	r3, #61	; 0x3d
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	333c      	adds	r3, #60	; 0x3c
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	b298      	uxth	r0, r3
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3342      	adds	r3, #66	; 0x42
 8002432:	4602      	mov	r2, r0
 8002434:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	333f      	adds	r3, #63	; 0x3f
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3344      	adds	r3, #68	; 0x44
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	3348      	adds	r3, #72	; 0x48
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3350      	adds	r3, #80	; 0x50
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3af      	bcc.n	80023f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e044      	b.n	8002526 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3301      	adds	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3b5      	bcc.n	800249c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	687e      	ldr	r6, [r7, #4]
 8002538:	466d      	mov	r5, sp
 800253a:	f106 0410 	add.w	r4, r6, #16
 800253e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254a:	e885 0003 	stmia.w	r5, {r0, r1}
 800254e:	1d33      	adds	r3, r6, #4
 8002550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	f002 feea 	bl	800532c <USB_DevInit>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00d      	b.n	8002586 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 ff32 	bl	80063e8 <USB_DevDisconnect>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800258e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_PCD_Start+0x1c>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e020      	b.n	80025ec <HAL_PCD_Start+0x5e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d109      	bne.n	80025ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d005      	beq.n	80025ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f002 fe5e 	bl	8005294 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fee2 	bl	80063a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b08d      	sub	sp, #52	; 0x34
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 ffa0 	bl	8006550 <USB_GetMode>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 839d 	bne.w	8002d52 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f003 ff04 	bl	800642a <USB_ReadInterrupts>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8393 	beq.w	8002d50 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fefb 	bl	800642a <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d107      	bne.n	800264e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 0202 	and.w	r2, r2, #2
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fee9 	bl	800642a <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b10      	cmp	r3, #16
 8002660:	d161      	bne.n	8002726 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0210 	bic.w	r2, r2, #16
 8002670:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 020f 	and.w	r2, r3, #15
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	0c5b      	lsrs	r3, r3, #17
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	2b02      	cmp	r3, #2
 800269c:	d124      	bne.n	80026e8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d035      	beq.n	8002716 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	6a38      	ldr	r0, [r7, #32]
 80026be:	f003 fd4f 	bl	8006160 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ce:	441a      	add	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e0:	441a      	add	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	619a      	str	r2, [r3, #24]
 80026e6:	e016      	b.n	8002716 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	0c5b      	lsrs	r3, r3, #17
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d110      	bne.n	8002716 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026fa:	2208      	movs	r2, #8
 80026fc:	4619      	mov	r1, r3
 80026fe:	6a38      	ldr	r0, [r7, #32]
 8002700:	f003 fd2e 	bl	8006160 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002710:	441a      	add	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0210 	orr.w	r2, r2, #16
 8002724:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f003 fe7d 	bl	800642a <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002736:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800273a:	d16e      	bne.n	800281a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fe83 	bl	8006450 <USB_ReadDevAllOutEpInterrupt>
 800274a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800274c:	e062      	b.n	8002814 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d057      	beq.n	8002808 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fea8 	bl	80064b8 <USB_ReadDevOutEPInterrupt>
 8002768:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002780:	461a      	mov	r2, r3
 8002782:	2301      	movs	r3, #1
 8002784:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fdb1 	bl	80032f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	2308      	movs	r3, #8
 80027a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 feab 	bl	8003508 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c8:	461a      	mov	r2, r3
 80027ca:	2310      	movs	r3, #16
 80027cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e4:	461a      	mov	r2, r3
 80027e6:	2320      	movs	r3, #32
 80027e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d009      	beq.n	8002808 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002800:	461a      	mov	r2, r3
 8002802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002806:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	3301      	adds	r3, #1
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d199      	bne.n	800274e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f003 fe03 	bl	800642a <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800282e:	f040 80c0 	bne.w	80029b2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fe24 	bl	8006484 <USB_ReadDevAllInEpInterrupt>
 800283c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002842:	e0b2      	b.n	80029aa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a7 	beq.w	800299e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fe4a 	bl	80064f4 <USB_ReadDevInEPInterrupt>
 8002860:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d057      	beq.n	800291c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	2201      	movs	r2, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	69f9      	ldr	r1, [r7, #28]
 8002888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800288c:	4013      	ands	r3, r2
 800288e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289c:	461a      	mov	r2, r3
 800289e:	2301      	movs	r3, #1
 80028a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d132      	bne.n	8002910 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3348      	adds	r3, #72	; 0x48
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4403      	add	r3, r0
 80028ca:	3344      	adds	r3, #68	; 0x44
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4419      	add	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4403      	add	r3, r0
 80028de:	3348      	adds	r3, #72	; 0x48
 80028e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d113      	bne.n	8002910 <HAL_PCD_IRQHandler+0x31c>
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	3350      	adds	r3, #80	; 0x50
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002908:	461a      	mov	r2, r3
 800290a:	2101      	movs	r1, #1
 800290c:	f003 fe52 	bl	80065b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f005 fe03 	bl	8008522 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002932:	461a      	mov	r2, r3
 8002934:	2308      	movs	r3, #8
 8002936:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800294e:	461a      	mov	r2, r3
 8002950:	2310      	movs	r3, #16
 8002952:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296a:	461a      	mov	r2, r3
 800296c:	2340      	movs	r3, #64	; 0x40
 800296e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002986:	461a      	mov	r2, r3
 8002988:	2302      	movs	r3, #2
 800298a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fc1b 	bl	80031d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	3301      	adds	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f af49 	bne.w	8002844 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fd37 	bl	800642a <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029c6:	d122      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d108      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029ee:	2100      	movs	r1, #0
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fe27 	bl	8003644 <HAL_PCDEx_LPM_Callback>
 80029f6:	e002      	b.n	80029fe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f005 fe09 	bl	8008610 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fd09 	bl	800642a <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a22:	d112      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f005 fdc5 	bl	80085c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a48:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fceb 	bl	800642a <USB_ReadInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5e:	f040 80c7 	bne.w	8002bf0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2110      	movs	r1, #16
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 fdb9 	bl	80055f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a86:	e056      	b.n	8002b36 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a94:	461a      	mov	r2, r3
 8002a96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aba:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	0151      	lsls	r1, r2, #5
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ada:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b00:	0151      	lsls	r1, r2, #5
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	440a      	add	r2, r1
 8002b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	3301      	adds	r3, #1
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d3a3      	bcc.n	8002a88 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d016      	beq.n	8002b8a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b6c:	f043 030b 	orr.w	r3, r3, #11
 8002b70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b82:	f043 030b 	orr.w	r3, r3, #11
 8002b86:	6453      	str	r3, [r2, #68]	; 0x44
 8002b88:	e015      	b.n	8002bb6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b9c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ba0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb0:	f043 030b 	orr.w	r3, r3, #11
 8002bb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bc8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f003 fcea 	bl	80065b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fc18 	bl	800642a <USB_ReadInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c04:	d124      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 fcae 	bl	800656c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fd4e 	bl	80056b6 <USB_GetDevSpeed>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681c      	ldr	r4, [r3, #0]
 8002c26:	f001 f959 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8002c2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	4620      	mov	r0, r4
 8002c36:	f002 fa8b 	bl	8005150 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f005 fc99 	bl	8008572 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fbe8 	bl	800642a <USB_ReadInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d10a      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f005 fc76 	bl	8008556 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f002 0208 	and.w	r2, r2, #8
 8002c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fbd3 	bl	800642a <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f005 fcd8 	bl	8008650 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 fbb8 	bl	800642a <USB_ReadInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f005 fcab 	bl	800862c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fb9d 	bl	800642a <USB_ReadInterrupts>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfa:	d10a      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f005 fcb9 	bl	8008674 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fb87 	bl	800642a <USB_ReadInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d115      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f005 fca9 	bl	8008690 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	e000      	b.n	8002d52 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002d50:	bf00      	nop
    }
  }
}
 8002d52:	3734      	adds	r7, #52	; 0x34
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd90      	pop	{r4, r7, pc}

08002d58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_PCD_SetAddress+0x1a>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e013      	b.n	8002d9a <HAL_PCD_SetAddress+0x42>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fae5 	bl	800635a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	4608      	mov	r0, r1
 8002dac:	4611      	mov	r1, r2
 8002dae:	461a      	mov	r2, r3
 8002db0:	4603      	mov	r3, r0
 8002db2:	70fb      	strb	r3, [r7, #3]
 8002db4:	460b      	mov	r3, r1
 8002db6:	803b      	strh	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da0f      	bge.n	8002de8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3338      	adds	r3, #56	; 0x38
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
 8002de6:	e00f      	b.n	8002e08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e14:	883a      	ldrh	r2, [r7, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	78ba      	ldrb	r2, [r7, #2]
 8002e1e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	785b      	ldrb	r3, [r3, #1]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e32:	78bb      	ldrb	r3, [r7, #2]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d102      	bne.n	8002e3e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_PCD_EP_Open+0xaa>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e00e      	b.n	8002e6a <HAL_PCD_EP_Open+0xc8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 fc50 	bl	8005700 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e68:	7afb      	ldrb	r3, [r7, #11]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	da0f      	bge.n	8002ea6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	3338      	adds	r3, #56	; 0x38
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	705a      	strb	r2, [r3, #1]
 8002ea4:	e00f      	b.n	8002ec6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_PCD_EP_Close+0x6e>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e00e      	b.n	8002efe <HAL_PCD_EP_Close+0x8c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fc8e 	bl	8005810 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	460b      	mov	r3, r1
 8002f14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	7afb      	ldrb	r3, [r7, #11]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2200      	movs	r2, #0
 8002f46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d102      	bne.n	8002f62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	6979      	ldr	r1, [r7, #20]
 8002f7a:	f002 ff69 	bl	8005e50 <USB_EP0StartXfer>
 8002f7e:	e008      	b.n	8002f92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6979      	ldr	r1, [r7, #20]
 8002f8e:	f002 fd1b 	bl	80059c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 020f 	and.w	r2, r3, #15
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fdc:	7afb      	ldrb	r3, [r7, #11]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	3338      	adds	r3, #56	; 0x38
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2201      	movs	r2, #1
 800300a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	b2da      	uxtb	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d102      	bne.n	8003026 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003026:	7afb      	ldrb	r3, [r7, #11]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	6979      	ldr	r1, [r7, #20]
 800303e:	f002 ff07 	bl	8005e50 <USB_EP0StartXfer>
 8003042:	e008      	b.n	8003056 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	6979      	ldr	r1, [r7, #20]
 8003052:	f002 fcb9 	bl	80059c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d901      	bls.n	800307e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e050      	b.n	8003120 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800307e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da0f      	bge.n	80030a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3338      	adds	r3, #56	; 0x38
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	705a      	strb	r2, [r3, #1]
 80030a4:	e00d      	b.n	80030c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	3304      	adds	r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_PCD_EP_SetStall+0x82>
 80030de:	2302      	movs	r3, #2
 80030e0:	e01e      	b.n	8003120 <HAL_PCD_EP_SetStall+0xc0>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 f85e 	bl	80061b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	b2d9      	uxtb	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003110:	461a      	mov	r2, r3
 8003112:	f003 fa4f 	bl	80065b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 020f 	and.w	r2, r3, #15
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d901      	bls.n	8003146 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e042      	b.n	80031cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800314a:	2b00      	cmp	r3, #0
 800314c:	da0f      	bge.n	800316e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 020f 	and.w	r2, r3, #15
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	3338      	adds	r3, #56	; 0x38
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	705a      	strb	r2, [r3, #1]
 800316c:	e00f      	b.n	800318e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	3304      	adds	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_PCD_EP_ClrStall+0x86>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e00e      	b.n	80031cc <HAL_PCD_EP_ClrStall+0xa4>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 f866 	bl	800628e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af02      	add	r7, sp, #8
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3338      	adds	r3, #56	; 0x38
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	429a      	cmp	r2, r3
 8003206:	d901      	bls.n	800320c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e06c      	b.n	80032e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	429a      	cmp	r2, r3
 8003220:	d902      	bls.n	8003228 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	3303      	adds	r3, #3
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003230:	e02b      	b.n	800328a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	429a      	cmp	r2, r3
 8003246:	d902      	bls.n	800324e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3303      	adds	r3, #3
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	68d9      	ldr	r1, [r3, #12]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003266:	b2db      	uxtb	r3, r3
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	4603      	mov	r3, r0
 800326c:	6978      	ldr	r0, [r7, #20]
 800326e:	f002 ff42 	bl	80060f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	441a      	add	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	441a      	add	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	b29b      	uxth	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	429a      	cmp	r2, r3
 800329e:	d809      	bhi.n	80032b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d203      	bcs.n	80032b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1be      	bne.n	8003232 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d811      	bhi.n	80032e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	2201      	movs	r2, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	43db      	mvns	r3, r3
 80032da:	6939      	ldr	r1, [r7, #16]
 80032dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e0:	4013      	ands	r3, r2
 80032e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	333c      	adds	r3, #60	; 0x3c
 8003308:	3304      	adds	r3, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b01      	cmp	r3, #1
 8003324:	f040 80a0 	bne.w	8003468 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a72      	ldr	r2, [pc, #456]	; (8003500 <PCD_EP_OutXfrComplete_int+0x210>)
 8003336:	4293      	cmp	r3, r2
 8003338:	f240 80dd 	bls.w	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80d7 	beq.w	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335a:	6093      	str	r3, [r2, #8]
 800335c:	e0cb      	b.n	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003374:	461a      	mov	r2, r3
 8003376:	2320      	movs	r3, #32
 8003378:	6093      	str	r3, [r2, #8]
 800337a:	e0bc      	b.n	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 80b7 	bne.w	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <PCD_EP_OutXfrComplete_int+0x210>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d90f      	bls.n	80033b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a6:	461a      	mov	r2, r3
 80033a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ac:	6093      	str	r3, [r2, #8]
 80033ae:	e0a2      	b.n	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	440b      	add	r3, r1
 80033cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4403      	add	r3, r0
 80033e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4403      	add	r3, r0
 800340e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4419      	add	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4403      	add	r3, r0
 8003424:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003428:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d114      	bne.n	800345a <PCD_EP_OutXfrComplete_int+0x16a>
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d108      	bne.n	800345a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003452:	461a      	mov	r2, r3
 8003454:	2101      	movs	r1, #1
 8003456:	f003 f8ad 	bl	80065b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f005 f843 	bl	80084ec <HAL_PCD_DataOutStageCallback>
 8003466:	e046      	b.n	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a26      	ldr	r2, [pc, #152]	; (8003504 <PCD_EP_OutXfrComplete_int+0x214>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d124      	bne.n	80034ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003486:	461a      	mov	r2, r3
 8003488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348c:	6093      	str	r3, [r2, #8]
 800348e:	e032      	b.n	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	461a      	mov	r2, r3
 80034a8:	2320      	movs	r3, #32
 80034aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f005 f81a 	bl	80084ec <HAL_PCD_DataOutStageCallback>
 80034b8:	e01d      	b.n	80034f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d114      	bne.n	80034ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034e2:	461a      	mov	r2, r3
 80034e4:	2100      	movs	r1, #0
 80034e6:	f003 f865 	bl	80065b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f004 fffb 	bl	80084ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	4f54300a 	.word	0x4f54300a
 8003504:	4f54310a 	.word	0x4f54310a

08003508 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	333c      	adds	r3, #60	; 0x3c
 8003520:	3304      	adds	r3, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4a15      	ldr	r2, [pc, #84]	; (8003590 <PCD_EP_OutSetupPacket_int+0x88>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d90e      	bls.n	800355c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f004 ffb3 	bl	80084c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <PCD_EP_OutSetupPacket_int+0x88>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d90c      	bls.n	8003584 <PCD_EP_OutSetupPacket_int+0x7c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d108      	bne.n	8003584 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800357c:	461a      	mov	r2, r3
 800357e:	2101      	movs	r1, #1
 8003580:	f003 f818 	bl	80065b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	4f54300a 	.word	0x4f54300a

08003594 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
 80035a0:	4613      	mov	r3, r2
 80035a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035b2:	883b      	ldrh	r3, [r7, #0]
 80035b4:	0419      	lsls	r1, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	430a      	orrs	r2, r1
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
 80035c0:	e028      	b.n	8003614 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4413      	add	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e00d      	b.n	80035f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	3340      	adds	r3, #64	; 0x40
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4413      	add	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	3301      	adds	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3ec      	bcc.n	80035d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035fc:	883b      	ldrh	r3, [r7, #0]
 80035fe:	0418      	lsls	r0, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	3b01      	subs	r3, #1
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	4302      	orrs	r2, r0
 800360c:	3340      	adds	r3, #64	; 0x40
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e264      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d075      	beq.n	8003766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367a:	4ba3      	ldr	r3, [pc, #652]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b04      	cmp	r3, #4
 8003684:	d00c      	beq.n	80036a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003686:	4ba0      	ldr	r3, [pc, #640]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800368e:	2b08      	cmp	r3, #8
 8003690:	d112      	bne.n	80036b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003692:	4b9d      	ldr	r3, [pc, #628]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369e:	d10b      	bne.n	80036b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a0:	4b99      	ldr	r3, [pc, #612]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d05b      	beq.n	8003764 <HAL_RCC_OscConfig+0x108>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d157      	bne.n	8003764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e23f      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d106      	bne.n	80036d0 <HAL_RCC_OscConfig+0x74>
 80036c2:	4b91      	ldr	r3, [pc, #580]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a90      	ldr	r2, [pc, #576]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e01d      	b.n	800370c <HAL_RCC_OscConfig+0xb0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x98>
 80036da:	4b8b      	ldr	r3, [pc, #556]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a8a      	ldr	r2, [pc, #552]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b88      	ldr	r3, [pc, #544]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a87      	ldr	r2, [pc, #540]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0xb0>
 80036f4:	4b84      	ldr	r3, [pc, #528]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a83      	ldr	r2, [pc, #524]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b81      	ldr	r3, [pc, #516]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a80      	ldr	r2, [pc, #512]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fd fd42 	bl	800119c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800371c:	f7fd fd3e 	bl	800119c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e204      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b76      	ldr	r3, [pc, #472]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0xc0>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fd fd2e 	bl	800119c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003744:	f7fd fd2a 	bl	800119c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e1f0      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	4b6c      	ldr	r3, [pc, #432]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0xe8>
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d063      	beq.n	800383a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003772:	4b65      	ldr	r3, [pc, #404]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377e:	4b62      	ldr	r3, [pc, #392]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003786:	2b08      	cmp	r3, #8
 8003788:	d11c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378a:	4b5f      	ldr	r3, [pc, #380]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d116      	bne.n	80037c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	4b5c      	ldr	r3, [pc, #368]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_RCC_OscConfig+0x152>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e1c4      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ae:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4952      	ldr	r1, [pc, #328]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	e03a      	b.n	800383a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037cc:	4b4f      	ldr	r3, [pc, #316]	; (800390c <HAL_RCC_OscConfig+0x2b0>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fd fce3 	bl	800119c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037da:	f7fd fcdf 	bl	800119c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e1a5      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ec:	4b46      	ldr	r3, [pc, #280]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4b43      	ldr	r3, [pc, #268]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4940      	ldr	r1, [pc, #256]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
 800380c:	e015      	b.n	800383a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380e:	4b3f      	ldr	r3, [pc, #252]	; (800390c <HAL_RCC_OscConfig+0x2b0>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fcc2 	bl	800119c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800381c:	f7fd fcbe 	bl	800119c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e184      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	4b36      	ldr	r3, [pc, #216]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d030      	beq.n	80038a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384e:	4b30      	ldr	r3, [pc, #192]	; (8003910 <HAL_RCC_OscConfig+0x2b4>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd fca2 	bl	800119c <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385c:	f7fd fc9e 	bl	800119c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e164      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x200>
 800387a:	e015      	b.n	80038a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_OscConfig+0x2b4>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003882:	f7fd fc8b 	bl	800119c <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388a:	f7fd fc87 	bl	800119c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e14d      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 800389e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80a0 	beq.w	80039f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	; 0x40
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_OscConfig+0x2b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d121      	bne.n	8003936 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <HAL_RCC_OscConfig+0x2b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <HAL_RCC_OscConfig+0x2b8>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fe:	f7fd fc4d 	bl	800119c <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	e011      	b.n	800392a <HAL_RCC_OscConfig+0x2ce>
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	42470000 	.word	0x42470000
 8003910:	42470e80 	.word	0x42470e80
 8003914:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fd fc40 	bl	800119c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e106      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCC_OscConfig+0x4e4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d106      	bne.n	800394c <HAL_RCC_OscConfig+0x2f0>
 800393e:	4b81      	ldr	r3, [pc, #516]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a80      	ldr	r2, [pc, #512]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	e01c      	b.n	8003986 <HAL_RCC_OscConfig+0x32a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b05      	cmp	r3, #5
 8003952:	d10c      	bne.n	800396e <HAL_RCC_OscConfig+0x312>
 8003954:	4b7b      	ldr	r3, [pc, #492]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	4a7a      	ldr	r2, [pc, #488]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	6713      	str	r3, [r2, #112]	; 0x70
 8003960:	4b78      	ldr	r3, [pc, #480]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	e00b      	b.n	8003986 <HAL_RCC_OscConfig+0x32a>
 800396e:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	4a74      	ldr	r2, [pc, #464]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	6713      	str	r3, [r2, #112]	; 0x70
 800397a:	4b72      	ldr	r3, [pc, #456]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4a71      	ldr	r2, [pc, #452]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d015      	beq.n	80039ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fd fc05 	bl	800119c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fd fc01 	bl	800119c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0c5      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ee      	beq.n	8003996 <HAL_RCC_OscConfig+0x33a>
 80039b8:	e014      	b.n	80039e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7fd fbef 	bl	800119c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fd fbeb 	bl	800119c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0af      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	4b5a      	ldr	r3, [pc, #360]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ee      	bne.n	80039c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ea:	4b56      	ldr	r3, [pc, #344]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a55      	ldr	r2, [pc, #340]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 809b 	beq.w	8003b36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d05c      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d141      	bne.n	8003a98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a14:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <HAL_RCC_OscConfig+0x4ec>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fbbf 	bl	800119c <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fd fbbb 	bl	800119c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e081      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	019b      	lsls	r3, r3, #6
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	061b      	lsls	r3, r3, #24
 8003a64:	4937      	ldr	r1, [pc, #220]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <HAL_RCC_OscConfig+0x4ec>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fd fb94 	bl	800119c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fd fb90 	bl	800119c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e056      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b2e      	ldr	r3, [pc, #184]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x41c>
 8003a96:	e04e      	b.n	8003b36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_OscConfig+0x4ec>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fd fb7d 	bl	800119c <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fd fb79 	bl	800119c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e03f      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab8:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x44a>
 8003ac4:	e037      	b.n	8003b36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e032      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d028      	beq.n	8003b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d121      	bne.n	8003b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d11a      	bne.n	8003b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b02:	4013      	ands	r3, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d111      	bne.n	8003b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40007000 	.word	0x40007000
 8003b44:	40023800 	.word	0x40023800
 8003b48:	42470060 	.word	0x42470060

08003b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0cc      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b68      	ldr	r3, [pc, #416]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d90c      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b65      	ldr	r3, [pc, #404]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0b8      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a58      	ldr	r2, [pc, #352]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb8:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4a52      	ldr	r2, [pc, #328]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc4:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	494d      	ldr	r1, [pc, #308]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d044      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d119      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0a:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e067      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2a:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4934      	ldr	r1, [pc, #208]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c3c:	f7fd faae 	bl	800119c <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fd faaa 	bl	800119c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e04f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 020c 	and.w	r2, r3, #12
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1eb      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d20c      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e032      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4916      	ldr	r1, [pc, #88]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	490e      	ldr	r1, [pc, #56]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cd2:	f000 f821 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	490a      	ldr	r1, [pc, #40]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	5ccb      	ldrb	r3, [r1, r3]
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fa0e 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023c00 	.word	0x40023c00
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	08009fc8 	.word	0x08009fc8
 8003d10:	20000028 	.word	0x20000028
 8003d14:	2000002c 	.word	0x2000002c

08003d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d30:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d00d      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x40>
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	f200 80bd 	bhi.w	8003ebc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x34>
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d4a:	e0b7      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b61      	ldr	r3, [pc, #388]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d4e:	60bb      	str	r3, [r7, #8]
       break;
 8003d50:	e0b7      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d52:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d54:	60bb      	str	r3, [r7, #8]
      break;
 8003d56:	e0b4      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d58:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d62:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d04d      	beq.n	8003e0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6e:	4b58      	ldr	r3, [pc, #352]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	099b      	lsrs	r3, r3, #6
 8003d74:	461a      	mov	r2, r3
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	ea02 0800 	and.w	r8, r2, r0
 8003d86:	ea03 0901 	and.w	r9, r3, r1
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	014b      	lsls	r3, r1, #5
 8003d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d9c:	0142      	lsls	r2, r0, #5
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	ebb0 0008 	subs.w	r0, r0, r8
 8003da6:	eb61 0109 	sbc.w	r1, r1, r9
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	018b      	lsls	r3, r1, #6
 8003db4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003db8:	0182      	lsls	r2, r0, #6
 8003dba:	1a12      	subs	r2, r2, r0
 8003dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc0:	f04f 0000 	mov.w	r0, #0
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	00d9      	lsls	r1, r3, #3
 8003dca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dce:	00d0      	lsls	r0, r2, #3
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	eb12 0208 	adds.w	r2, r2, r8
 8003dd8:	eb43 0309 	adc.w	r3, r3, r9
 8003ddc:	f04f 0000 	mov.w	r0, #0
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	0259      	lsls	r1, r3, #9
 8003de6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003dea:	0250      	lsls	r0, r2, #9
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	f7fc fa40 	bl	8000280 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e04a      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0a:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	461a      	mov	r2, r3
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	ea02 0400 	and.w	r4, r2, r0
 8003e22:	ea03 0501 	and.w	r5, r3, r1
 8003e26:	4620      	mov	r0, r4
 8003e28:	4629      	mov	r1, r5
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	014b      	lsls	r3, r1, #5
 8003e34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e38:	0142      	lsls	r2, r0, #5
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	1b00      	subs	r0, r0, r4
 8003e40:	eb61 0105 	sbc.w	r1, r1, r5
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	018b      	lsls	r3, r1, #6
 8003e4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e52:	0182      	lsls	r2, r0, #6
 8003e54:	1a12      	subs	r2, r2, r0
 8003e56:	eb63 0301 	sbc.w	r3, r3, r1
 8003e5a:	f04f 0000 	mov.w	r0, #0
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	00d9      	lsls	r1, r3, #3
 8003e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e68:	00d0      	lsls	r0, r2, #3
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	1912      	adds	r2, r2, r4
 8003e70:	eb45 0303 	adc.w	r3, r5, r3
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	0299      	lsls	r1, r3, #10
 8003e7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e82:	0290      	lsls	r0, r2, #10
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	f7fc f9f4 	bl	8000280 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	60bb      	str	r3, [r7, #8]
      break;
 8003eba:	e002      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ebe:	60bb      	str	r3, [r7, #8]
      break;
 8003ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	00f42400 	.word	0x00f42400
 8003ed8:	007a1200 	.word	0x007a1200

08003edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000028 	.word	0x20000028

08003ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ef8:	f7ff fff0 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	0a9b      	lsrs	r3, r3, #10
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4903      	ldr	r1, [pc, #12]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08009fd8 	.word	0x08009fd8

08003f1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d035      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f44:	4b62      	ldr	r3, [pc, #392]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f4a:	f7fd f927 	bl	800119c <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f52:	f7fd f923 	bl	800119c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0b0      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f64:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	019a      	lsls	r2, r3, #6
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	071b      	lsls	r3, r3, #28
 8003f7c:	4955      	ldr	r1, [pc, #340]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f84:	4b52      	ldr	r3, [pc, #328]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f8a:	f7fd f907 	bl	800119c <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f92:	f7fd f903 	bl	800119c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e090      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fa4:	4b4b      	ldr	r3, [pc, #300]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8083 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	4a43      	ldr	r2, [pc, #268]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fce:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a3e      	ldr	r2, [pc, #248]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fe6:	f7fd f8d9 	bl	800119c <HAL_GetTick>
 8003fea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fd f8d5 	bl	800119c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e062      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004000:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800400c:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	429a      	cmp	r2, r3
 8004028:	d028      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800403a:	4b28      	ldr	r3, [pc, #160]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004040:	4a24      	ldr	r2, [pc, #144]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d114      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004052:	f7fd f8a3 	bl	800119c <HAL_GetTick>
 8004056:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	e00a      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fd f89f 	bl	800119c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f241 3288 	movw	r2, #5000	; 0x1388
 8004068:	4293      	cmp	r3, r2
 800406a:	d901      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e02a      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ee      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004088:	d10d      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409e:	490d      	ldr	r1, [pc, #52]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]
 80040a4:	e005      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040b0:	6093      	str	r3, [r2, #8]
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040be:	4905      	ldr	r1, [pc, #20]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	42470068 	.word	0x42470068
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40007000 	.word	0x40007000
 80040dc:	42470e40 	.word	0x42470e40

080040e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d13e      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80040fe:	4b23      	ldr	r3, [pc, #140]	; (800418c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d12f      	bne.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004116:	617b      	str	r3, [r7, #20]
          break;
 8004118:	e02f      	b.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800411a:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004126:	d108      	bne.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	e007      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800414a:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800414c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004150:	099b      	lsrs	r3, r3, #6
 8004152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004164:	0f1b      	lsrs	r3, r3, #28
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]
          break;
 8004172:	e002      	b.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
          break;
 8004178:	bf00      	nop
        }
      }
      break;
 800417a:	bf00      	nop
    }
  }
  return frequency;
 800417c:	697b      	ldr	r3, [r7, #20]
}
 800417e:	4618      	mov	r0, r3
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	00bb8000 	.word	0x00bb8000
 8004194:	007a1200 	.word	0x007a1200
 8004198:	00f42400 	.word	0x00f42400

0800419c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07b      	b.n	80042a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d108      	bne.n	80041c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041be:	d009      	beq.n	80041d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	61da      	str	r2, [r3, #28]
 80041c6:	e005      	b.n	80041d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fe28 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	ea42 0103 	orr.w	r1, r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	f003 0104 	and.w	r1, r3, #4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f003 0210 	and.w	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e041      	b.n	8004344 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7fc fdfd 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 fb41 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e041      	b.n	80043e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f839 	bl	80043ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f000 faf2 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d109      	bne.n	8004424 <HAL_TIM_PWM_Start+0x24>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e022      	b.n	800446a <HAL_TIM_PWM_Start+0x6a>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b04      	cmp	r3, #4
 8004428:	d109      	bne.n	800443e <HAL_TIM_PWM_Start+0x3e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	e015      	b.n	800446a <HAL_TIM_PWM_Start+0x6a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d109      	bne.n	8004458 <HAL_TIM_PWM_Start+0x58>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	bf14      	ite	ne
 8004450:	2301      	movne	r3, #1
 8004452:	2300      	moveq	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	e008      	b.n	800446a <HAL_TIM_PWM_Start+0x6a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e07c      	b.n	800456c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Start+0x82>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004480:	e013      	b.n	80044aa <HAL_TIM_PWM_Start+0xaa>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d104      	bne.n	8004492 <HAL_TIM_PWM_Start+0x92>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004490:	e00b      	b.n	80044aa <HAL_TIM_PWM_Start+0xaa>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d104      	bne.n	80044a2 <HAL_TIM_PWM_Start+0xa2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a0:	e003      	b.n	80044aa <HAL_TIM_PWM_Start+0xaa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fd48 	bl	8004f48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2d      	ldr	r2, [pc, #180]	; (8004574 <HAL_TIM_PWM_Start+0x174>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_TIM_PWM_Start+0xcc>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <HAL_TIM_PWM_Start+0x178>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d101      	bne.n	80044d0 <HAL_TIM_PWM_Start+0xd0>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_TIM_PWM_Start+0xd2>
 80044d0:	2300      	movs	r3, #0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a22      	ldr	r2, [pc, #136]	; (8004574 <HAL_TIM_PWM_Start+0x174>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d022      	beq.n	8004536 <HAL_TIM_PWM_Start+0x136>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d01d      	beq.n	8004536 <HAL_TIM_PWM_Start+0x136>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1f      	ldr	r2, [pc, #124]	; (800457c <HAL_TIM_PWM_Start+0x17c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_TIM_PWM_Start+0x136>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <HAL_TIM_PWM_Start+0x180>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_TIM_PWM_Start+0x136>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <HAL_TIM_PWM_Start+0x184>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_TIM_PWM_Start+0x136>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_TIM_PWM_Start+0x178>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_TIM_PWM_Start+0x136>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_TIM_PWM_Start+0x188>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIM_PWM_Start+0x136>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a16      	ldr	r2, [pc, #88]	; (800458c <HAL_TIM_PWM_Start+0x18c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d111      	bne.n	800455a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b06      	cmp	r3, #6
 8004546:	d010      	beq.n	800456a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	e007      	b.n	800456a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40010000 	.word	0x40010000
 8004578:	40010400 	.word	0x40010400
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000
 800458c:	40001800 	.word	0x40001800

08004590 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fcd0 	bl	8004f48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a2e      	ldr	r2, [pc, #184]	; (8004668 <HAL_TIM_PWM_Stop+0xd8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_TIM_PWM_Stop+0x2c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2d      	ldr	r2, [pc, #180]	; (800466c <HAL_TIM_PWM_Stop+0xdc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_TIM_PWM_Stop+0x30>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_TIM_PWM_Stop+0x32>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d017      	beq.n	80045f6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_TIM_PWM_Stop+0x66>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	f240 4344 	movw	r3, #1092	; 0x444
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <HAL_TIM_PWM_Stop+0x66>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_TIM_PWM_Stop+0x96>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	f240 4344 	movw	r3, #1092	; 0x444
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d107      	bne.n	8004626 <HAL_TIM_PWM_Stop+0x96>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <HAL_TIM_PWM_Stop+0xa6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004634:	e013      	b.n	800465e <HAL_TIM_PWM_Stop+0xce>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d104      	bne.n	8004646 <HAL_TIM_PWM_Stop+0xb6>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004644:	e00b      	b.n	800465e <HAL_TIM_PWM_Stop+0xce>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d104      	bne.n	8004656 <HAL_TIM_PWM_Stop+0xc6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004654:	e003      	b.n	800465e <HAL_TIM_PWM_Stop+0xce>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40010000 	.word	0x40010000
 800466c:	40010400 	.word	0x40010400

08004670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004686:	2302      	movs	r3, #2
 8004688:	e0ac      	b.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	f200 809f 	bhi.w	80047d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046d5 	.word	0x080046d5
 80046a4:	080047d9 	.word	0x080047d9
 80046a8:	080047d9 	.word	0x080047d9
 80046ac:	080047d9 	.word	0x080047d9
 80046b0:	08004715 	.word	0x08004715
 80046b4:	080047d9 	.word	0x080047d9
 80046b8:	080047d9 	.word	0x080047d9
 80046bc:	080047d9 	.word	0x080047d9
 80046c0:	08004757 	.word	0x08004757
 80046c4:	080047d9 	.word	0x080047d9
 80046c8:	080047d9 	.word	0x080047d9
 80046cc:	080047d9 	.word	0x080047d9
 80046d0:	08004797 	.word	0x08004797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f9ea 	bl	8004ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0208 	orr.w	r2, r2, #8
 80046ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0204 	bic.w	r2, r2, #4
 80046fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6999      	ldr	r1, [r3, #24]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	619a      	str	r2, [r3, #24]
      break;
 8004712:	e062      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fa3a 	bl	8004b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800472e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6999      	ldr	r1, [r3, #24]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	021a      	lsls	r2, r3, #8
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	619a      	str	r2, [r3, #24]
      break;
 8004754:	e041      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fa8f 	bl	8004c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0208 	orr.w	r2, r2, #8
 8004770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0204 	bic.w	r2, r2, #4
 8004780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69d9      	ldr	r1, [r3, #28]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	61da      	str	r2, [r3, #28]
      break;
 8004794:	e021      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fae3 	bl	8004d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69d9      	ldr	r1, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	021a      	lsls	r2, r3, #8
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	61da      	str	r2, [r3, #28]
      break;
 80047d6:	e000      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80047d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_TIM_ConfigClockSource+0x18>
 8004800:	2302      	movs	r3, #2
 8004802:	e0b3      	b.n	800496c <HAL_TIM_ConfigClockSource+0x180>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004822:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800482a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483c:	d03e      	beq.n	80048bc <HAL_TIM_ConfigClockSource+0xd0>
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004842:	f200 8087 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x168>
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	f000 8085 	beq.w	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	d87f      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x168>
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d01a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0xa2>
 8004858:	2b70      	cmp	r3, #112	; 0x70
 800485a:	d87b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x168>
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d050      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x116>
 8004860:	2b60      	cmp	r3, #96	; 0x60
 8004862:	d877      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x168>
 8004864:	2b50      	cmp	r3, #80	; 0x50
 8004866:	d03c      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xf6>
 8004868:	2b50      	cmp	r3, #80	; 0x50
 800486a:	d873      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x168>
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d058      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x136>
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d86f      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x168>
 8004874:	2b30      	cmp	r3, #48	; 0x30
 8004876:	d064      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x156>
 8004878:	2b30      	cmp	r3, #48	; 0x30
 800487a:	d86b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x168>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d060      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x156>
 8004880:	2b20      	cmp	r3, #32
 8004882:	d867      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x168>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d05c      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x156>
 8004888:	2b10      	cmp	r3, #16
 800488a:	d05a      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800488c:	e062      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f000 fb33 	bl	8004f08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	609a      	str	r2, [r3, #8]
      break;
 80048ba:	e04e      	b.n	800495a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f000 fb1c 	bl	8004f08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048de:	609a      	str	r2, [r3, #8]
      break;
 80048e0:	e03b      	b.n	800495a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 fa90 	bl	8004e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2150      	movs	r1, #80	; 0x50
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fae9 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004900:	e02b      	b.n	800495a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	461a      	mov	r2, r3
 8004910:	f000 faaf 	bl	8004e72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2160      	movs	r1, #96	; 0x60
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fad9 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004920:	e01b      	b.n	800495a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	461a      	mov	r2, r3
 8004930:	f000 fa70 	bl	8004e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2140      	movs	r1, #64	; 0x40
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fac9 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004940:	e00b      	b.n	800495a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 fac0 	bl	8004ed2 <TIM_ITRx_SetConfig>
        break;
 8004952:	e002      	b.n	800495a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004958:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a40      	ldr	r2, [pc, #256]	; (8004a88 <TIM_Base_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004992:	d00f      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3d      	ldr	r2, [pc, #244]	; (8004a8c <TIM_Base_SetConfig+0x118>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a3c      	ldr	r2, [pc, #240]	; (8004a90 <TIM_Base_SetConfig+0x11c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <TIM_Base_SetConfig+0x120>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a3a      	ldr	r2, [pc, #232]	; (8004a98 <TIM_Base_SetConfig+0x124>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d108      	bne.n	80049c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2f      	ldr	r2, [pc, #188]	; (8004a88 <TIM_Base_SetConfig+0x114>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d02b      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d4:	d027      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a2c      	ldr	r2, [pc, #176]	; (8004a8c <TIM_Base_SetConfig+0x118>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d023      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2b      	ldr	r2, [pc, #172]	; (8004a90 <TIM_Base_SetConfig+0x11c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2a      	ldr	r2, [pc, #168]	; (8004a94 <TIM_Base_SetConfig+0x120>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d01b      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <TIM_Base_SetConfig+0x124>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d017      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <TIM_Base_SetConfig+0x128>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <TIM_Base_SetConfig+0x12c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00f      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <TIM_Base_SetConfig+0x130>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00b      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <TIM_Base_SetConfig+0x134>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a24      	ldr	r2, [pc, #144]	; (8004aac <TIM_Base_SetConfig+0x138>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a23      	ldr	r2, [pc, #140]	; (8004ab0 <TIM_Base_SetConfig+0x13c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d108      	bne.n	8004a38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <TIM_Base_SetConfig+0x114>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0xf8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a0c      	ldr	r2, [pc, #48]	; (8004a98 <TIM_Base_SetConfig+0x124>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d103      	bne.n	8004a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	615a      	str	r2, [r3, #20]
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40000c00 	.word	0x40000c00
 8004a98:	40010400 	.word	0x40010400
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800
 8004aa8:	40001800 	.word	0x40001800
 8004aac:	40001c00 	.word	0x40001c00
 8004ab0:	40002000 	.word	0x40002000

08004ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0201 	bic.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 0302 	bic.w	r3, r3, #2
 8004afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <TIM_OC1_SetConfig+0xd8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_OC1_SetConfig+0x64>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <TIM_OC1_SetConfig+0xdc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10c      	bne.n	8004b32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0308 	bic.w	r3, r3, #8
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <TIM_OC1_SetConfig+0xd8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC1_SetConfig+0x8e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <TIM_OC1_SetConfig+0xdc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d111      	bne.n	8004b66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	621a      	str	r2, [r3, #32]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40010400 	.word	0x40010400

08004b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0210 	bic.w	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0320 	bic.w	r3, r3, #32
 8004bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <TIM_OC2_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_OC2_SetConfig+0x68>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a21      	ldr	r2, [pc, #132]	; (8004c7c <TIM_OC2_SetConfig+0xe8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10d      	bne.n	8004c18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <TIM_OC2_SetConfig+0xe4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_OC2_SetConfig+0x94>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <TIM_OC2_SetConfig+0xe8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d113      	bne.n	8004c50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40010400 	.word	0x40010400

08004c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a21      	ldr	r2, [pc, #132]	; (8004d60 <TIM_OC3_SetConfig+0xe0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_OC3_SetConfig+0x66>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <TIM_OC3_SetConfig+0xe4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10d      	bne.n	8004d02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <TIM_OC3_SetConfig+0xe0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_OC3_SetConfig+0x92>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <TIM_OC3_SetConfig+0xe4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d113      	bne.n	8004d3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40010400 	.word	0x40010400

08004d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	031b      	lsls	r3, r3, #12
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <TIM_OC4_SetConfig+0xa4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC4_SetConfig+0x68>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <TIM_OC4_SetConfig+0xa8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d109      	bne.n	8004de4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	019b      	lsls	r3, r3, #6
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	40010400 	.word	0x40010400

08004e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 030a 	bic.w	r3, r3, #10
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b087      	sub	sp, #28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0210 	bic.w	r2, r3, #16
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	031b      	lsls	r3, r3, #12
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f043 0307 	orr.w	r3, r3, #7
 8004ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	021a      	lsls	r2, r3, #8
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1a      	ldr	r2, [r3, #32]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1a      	ldr	r2, [r3, #32]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f80:	431a      	orrs	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e05a      	b.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a21      	ldr	r2, [pc, #132]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d022      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff8:	d01d      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d018      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1b      	ldr	r2, [pc, #108]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d013      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1a      	ldr	r2, [pc, #104]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00e      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d009      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a17      	ldr	r2, [pc, #92]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d004      	beq.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a15      	ldr	r2, [pc, #84]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10c      	bne.n	8005050 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	4313      	orrs	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010000 	.word	0x40010000
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40010400 	.word	0x40010400
 8005084:	40014000 	.word	0x40014000
 8005088:	40001800 	.word	0x40001800

0800508c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800508c:	b084      	sub	sp, #16
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	f107 001c 	add.w	r0, r7, #28
 800509a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d122      	bne.n	80050ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d105      	bne.n	80050de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f001 fac6 	bl	8006670 <USB_CoreReset>
 80050e4:	4603      	mov	r3, r0
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e01a      	b.n	8005120 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f001 faba 	bl	8006670 <USB_CoreReset>
 80050fc:	4603      	mov	r3, r0
 80050fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
 8005112:	e005      	b.n	8005120 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	2b01      	cmp	r3, #1
 8005124:	d10b      	bne.n	800513e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f043 0206 	orr.w	r2, r3, #6
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800514a:	b004      	add	sp, #16
 800514c:	4770      	bx	lr
	...

08005150 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d165      	bne.n	8005230 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4a41      	ldr	r2, [pc, #260]	; (800526c <USB_SetTurnaroundTime+0x11c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d906      	bls.n	800517a <USB_SetTurnaroundTime+0x2a>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4a40      	ldr	r2, [pc, #256]	; (8005270 <USB_SetTurnaroundTime+0x120>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d202      	bcs.n	800517a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005174:	230f      	movs	r3, #15
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	e062      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a3c      	ldr	r2, [pc, #240]	; (8005270 <USB_SetTurnaroundTime+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d306      	bcc.n	8005190 <USB_SetTurnaroundTime+0x40>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a3b      	ldr	r2, [pc, #236]	; (8005274 <USB_SetTurnaroundTime+0x124>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d202      	bcs.n	8005190 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800518a:	230e      	movs	r3, #14
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e057      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a38      	ldr	r2, [pc, #224]	; (8005274 <USB_SetTurnaroundTime+0x124>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d306      	bcc.n	80051a6 <USB_SetTurnaroundTime+0x56>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a37      	ldr	r2, [pc, #220]	; (8005278 <USB_SetTurnaroundTime+0x128>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d202      	bcs.n	80051a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051a0:	230d      	movs	r3, #13
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e04c      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4a33      	ldr	r2, [pc, #204]	; (8005278 <USB_SetTurnaroundTime+0x128>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d306      	bcc.n	80051bc <USB_SetTurnaroundTime+0x6c>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a32      	ldr	r2, [pc, #200]	; (800527c <USB_SetTurnaroundTime+0x12c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d802      	bhi.n	80051bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051b6:	230c      	movs	r3, #12
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e041      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a2f      	ldr	r2, [pc, #188]	; (800527c <USB_SetTurnaroundTime+0x12c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d906      	bls.n	80051d2 <USB_SetTurnaroundTime+0x82>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a2e      	ldr	r2, [pc, #184]	; (8005280 <USB_SetTurnaroundTime+0x130>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d802      	bhi.n	80051d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051cc:	230b      	movs	r3, #11
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e036      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a2a      	ldr	r2, [pc, #168]	; (8005280 <USB_SetTurnaroundTime+0x130>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d906      	bls.n	80051e8 <USB_SetTurnaroundTime+0x98>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a29      	ldr	r2, [pc, #164]	; (8005284 <USB_SetTurnaroundTime+0x134>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d802      	bhi.n	80051e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051e2:	230a      	movs	r3, #10
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e02b      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4a26      	ldr	r2, [pc, #152]	; (8005284 <USB_SetTurnaroundTime+0x134>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d906      	bls.n	80051fe <USB_SetTurnaroundTime+0xae>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a25      	ldr	r2, [pc, #148]	; (8005288 <USB_SetTurnaroundTime+0x138>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d202      	bcs.n	80051fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80051f8:	2309      	movs	r3, #9
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e020      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <USB_SetTurnaroundTime+0x138>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d306      	bcc.n	8005214 <USB_SetTurnaroundTime+0xc4>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a20      	ldr	r2, [pc, #128]	; (800528c <USB_SetTurnaroundTime+0x13c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d802      	bhi.n	8005214 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800520e:	2308      	movs	r3, #8
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e015      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a1d      	ldr	r2, [pc, #116]	; (800528c <USB_SetTurnaroundTime+0x13c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d906      	bls.n	800522a <USB_SetTurnaroundTime+0xda>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <USB_SetTurnaroundTime+0x140>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d202      	bcs.n	800522a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005224:	2307      	movs	r3, #7
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e00a      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800522a:	2306      	movs	r3, #6
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e007      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005236:	2309      	movs	r3, #9
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e001      	b.n	8005240 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800523c:	2309      	movs	r3, #9
 800523e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	029b      	lsls	r3, r3, #10
 8005254:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005258:	431a      	orrs	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	00d8acbf 	.word	0x00d8acbf
 8005270:	00e4e1c0 	.word	0x00e4e1c0
 8005274:	00f42400 	.word	0x00f42400
 8005278:	01067380 	.word	0x01067380
 800527c:	011a499f 	.word	0x011a499f
 8005280:	01312cff 	.word	0x01312cff
 8005284:	014ca43f 	.word	0x014ca43f
 8005288:	016e3600 	.word	0x016e3600
 800528c:	01a6ab1f 	.word	0x01a6ab1f
 8005290:	01e84800 	.word	0x01e84800

08005294 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f043 0201 	orr.w	r2, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d106      	bne.n	8005304 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	e00b      	b.n	800531c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	e001      	b.n	800531c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e003      	b.n	8005324 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800531c:	2032      	movs	r0, #50	; 0x32
 800531e:	f7fb ff49 	bl	80011b4 <HAL_Delay>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800532c:	b084      	sub	sp, #16
 800532e:	b580      	push	{r7, lr}
 8005330:	b086      	sub	sp, #24
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800533a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e009      	b.n	8005360 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3340      	adds	r3, #64	; 0x40
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	2200      	movs	r2, #0
 8005358:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3301      	adds	r3, #1
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b0e      	cmp	r3, #14
 8005364:	d9f2      	bls.n	800534c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d11c      	bne.n	80053a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537a:	f043 0302 	orr.w	r3, r3, #2
 800537e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
 80053a4:	e00b      	b.n	80053be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053c4:	461a      	mov	r2, r3
 80053c6:	2300      	movs	r3, #0
 80053c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d0:	4619      	mov	r1, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	461a      	mov	r2, r3
 80053da:	680b      	ldr	r3, [r1, #0]
 80053dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10c      	bne.n	80053fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053ea:	2100      	movs	r1, #0
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f949 	bl	8005684 <USB_SetDevSpeed>
 80053f2:	e008      	b.n	8005406 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053f4:	2101      	movs	r1, #1
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f944 	bl	8005684 <USB_SetDevSpeed>
 80053fc:	e003      	b.n	8005406 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053fe:	2103      	movs	r1, #3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f93f 	bl	8005684 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005406:	2110      	movs	r1, #16
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f8f3 	bl	80055f4 <USB_FlushTxFifo>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f911 	bl	8005640 <USB_FlushRxFifo>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542e:	461a      	mov	r2, r3
 8005430:	2300      	movs	r3, #0
 8005432:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	461a      	mov	r2, r3
 800543c:	2300      	movs	r3, #0
 800543e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005446:	461a      	mov	r2, r3
 8005448:	2300      	movs	r3, #0
 800544a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	e043      	b.n	80054da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005468:	d118      	bne.n	800549c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	461a      	mov	r2, r3
 800547e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e013      	b.n	80054ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	461a      	mov	r2, r3
 8005494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	e008      	b.n	80054ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	461a      	mov	r2, r3
 80054aa:	2300      	movs	r3, #0
 80054ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	461a      	mov	r2, r3
 80054bc:	2300      	movs	r3, #0
 80054be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	461a      	mov	r2, r3
 80054ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	3301      	adds	r3, #1
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d3b7      	bcc.n	8005452 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	e043      	b.n	8005570 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fe:	d118      	bne.n	8005532 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	461a      	mov	r2, r3
 8005514:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e013      	b.n	8005544 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	461a      	mov	r2, r3
 800552a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e008      	b.n	8005544 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	461a      	mov	r2, r3
 8005540:	2300      	movs	r3, #0
 8005542:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005550:	461a      	mov	r2, r3
 8005552:	2300      	movs	r3, #0
 8005554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	461a      	mov	r2, r3
 8005564:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005568:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	3301      	adds	r3, #1
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	429a      	cmp	r2, r3
 8005576:	d3b7      	bcc.n	80054e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800558a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005598:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f043 0210 	orr.w	r2, r3, #16
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <USB_DevInit+0x2c4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f043 0208 	orr.w	r2, r3, #8
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d107      	bne.n	80055e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d8:	f043 0304 	orr.w	r3, r3, #4
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ec:	b004      	add	sp, #16
 80055ee:	4770      	bx	lr
 80055f0:	803c3800 	.word	0x803c3800

080055f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <USB_FlushTxFifo+0x48>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e006      	b.n	800562e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b20      	cmp	r3, #32
 800562a:	d0f0      	beq.n	800560e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	00030d40 	.word	0x00030d40

08005640 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2210      	movs	r2, #16
 8005650:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3301      	adds	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a09      	ldr	r2, [pc, #36]	; (8005680 <USB_FlushRxFifo+0x40>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d901      	bls.n	8005664 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e006      	b.n	8005672 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b10      	cmp	r3, #16
 800566e:	d0f0      	beq.n	8005652 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	00030d40 	.word	0x00030d40

08005684 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0306 	and.w	r3, r3, #6
 80056ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]
 80056da:	e00a      	b.n	80056f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d002      	beq.n	80056e8 <USB_GetDevSpeed+0x32>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d102      	bne.n	80056ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056e8:	2302      	movs	r3, #2
 80056ea:	75fb      	strb	r3, [r7, #23]
 80056ec:	e001      	b.n	80056f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056ee:	230f      	movs	r3, #15
 80056f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d13a      	bne.n	8005792 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	b29b      	uxth	r3, r3
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800573a:	4313      	orrs	r3, r2
 800573c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d155      	bne.n	8005800 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	78db      	ldrb	r3, [r3, #3]
 800576e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005770:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	059b      	lsls	r3, r3, #22
 8005776:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005778:	4313      	orrs	r3, r2
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e036      	b.n	8005800 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	2101      	movs	r1, #1
 80057a4:	fa01 f303 	lsl.w	r3, r1, r3
 80057a8:	041b      	lsls	r3, r3, #16
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11a      	bne.n	8005800 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	78db      	ldrb	r3, [r3, #3]
 80057e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057e6:	430b      	orrs	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d161      	bne.n	80058f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005842:	d11f      	bne.n	8005884 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005862:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2101      	movs	r1, #1
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	b29b      	uxth	r3, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a4:	4013      	ands	r3, r2
 80058a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c8:	4013      	ands	r3, r2
 80058ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	0159      	lsls	r1, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	440b      	add	r3, r1
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	4619      	mov	r1, r3
 80058e8:	4b35      	ldr	r3, [pc, #212]	; (80059c0 <USB_DeactivateEndpoint+0x1b0>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
 80058ee:	e060      	b.n	80059b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005906:	d11f      	bne.n	8005948 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005926:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005946:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	43db      	mvns	r3, r3
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800598c:	4013      	ands	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	0159      	lsls	r1, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	440b      	add	r3, r1
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	4619      	mov	r1, r3
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <USB_DeactivateEndpoint+0x1b4>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	ec337800 	.word	0xec337800
 80059c4:	eff37800 	.word	0xeff37800

080059c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	f040 815c 	bne.w	8005ca2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d132      	bne.n	8005a58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a50:	0cdb      	lsrs	r3, r3, #19
 8005a52:	04db      	lsls	r3, r3, #19
 8005a54:	6113      	str	r3, [r2, #16]
 8005a56:	e074      	b.n	8005b42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	0151      	lsls	r1, r2, #5
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a72:	0cdb      	lsrs	r3, r3, #19
 8005a74:	04db      	lsls	r3, r3, #19
 8005a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6959      	ldr	r1, [r3, #20]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	440b      	add	r3, r1
 8005ab4:	1e59      	subs	r1, r3, #1
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005abe:	04d9      	lsls	r1, r3, #19
 8005ac0:	4b9d      	ldr	r3, [pc, #628]	; (8005d38 <USB_EPStartXfer+0x370>)
 8005ac2:	400b      	ands	r3, r1
 8005ac4:	69b9      	ldr	r1, [r7, #24]
 8005ac6:	0148      	lsls	r0, r1, #5
 8005ac8:	69f9      	ldr	r1, [r7, #28]
 8005aca:	4401      	add	r1, r0
 8005acc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aea:	69b9      	ldr	r1, [r7, #24]
 8005aec:	0148      	lsls	r0, r1, #5
 8005aee:	69f9      	ldr	r1, [r7, #28]
 8005af0:	4401      	add	r1, r0
 8005af2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005af6:	4313      	orrs	r3, r2
 8005af8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	78db      	ldrb	r3, [r3, #3]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d11f      	bne.n	8005b42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d14b      	bne.n	8005be0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	78db      	ldrb	r3, [r3, #3]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d128      	bne.n	8005bbe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d110      	bne.n	8005b9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	e00f      	b.n	8005bbe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e12f      	b.n	8005e40 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bfe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	78db      	ldrb	r3, [r3, #3]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d015      	beq.n	8005c34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8117 	beq.w	8005e40 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	69f9      	ldr	r1, [r7, #28]
 8005c2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	634b      	str	r3, [r1, #52]	; 0x34
 8005c32:	e105      	b.n	8005e40 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d110      	bne.n	8005c66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e00f      	b.n	8005c86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68d9      	ldr	r1, [r3, #12]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	b298      	uxth	r0, r3
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4603      	mov	r3, r0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fa2b 	bl	80060f6 <USB_WritePacket>
 8005ca0:	e0ce      	b.n	8005e40 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbc:	0cdb      	lsrs	r3, r3, #19
 8005cbe:	04db      	lsls	r3, r3, #19
 8005cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d126      	bne.n	8005d3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	0148      	lsls	r0, r1, #5
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d10:	4313      	orrs	r3, r2
 8005d12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d32:	6113      	str	r3, [r2, #16]
 8005d34:	e036      	b.n	8005da4 <USB_EPStartXfer+0x3dc>
 8005d36:	bf00      	nop
 8005d38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	1e5a      	subs	r2, r3, #1
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d50:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	8afb      	ldrh	r3, [r7, #22]
 8005d62:	04d9      	lsls	r1, r3, #19
 8005d64:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <USB_EPStartXfer+0x484>)
 8005d66:	400b      	ands	r3, r1
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	0148      	lsls	r0, r1, #5
 8005d6c:	69f9      	ldr	r1, [r7, #28]
 8005d6e:	4401      	add	r1, r0
 8005d70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d74:	4313      	orrs	r3, r2
 8005d76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	8af9      	ldrh	r1, [r7, #22]
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d94:	69b9      	ldr	r1, [r7, #24]
 8005d96:	0148      	lsls	r0, r1, #5
 8005d98:	69f9      	ldr	r1, [r7, #28]
 8005d9a:	4401      	add	r1, r0
 8005d9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005da0:	4313      	orrs	r3, r2
 8005da2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10d      	bne.n	8005dc6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	68d9      	ldr	r1, [r3, #12]
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	460a      	mov	r2, r1
 8005dc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	78db      	ldrb	r3, [r3, #3]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d128      	bne.n	8005e20 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d110      	bne.n	8005e00 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e00f      	b.n	8005e20 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	1ff80000 	.word	0x1ff80000

08005e50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	f040 80cd 	bne.w	800600c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d132      	bne.n	8005ee0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ebc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	0cdb      	lsrs	r3, r3, #19
 8005eda:	04db      	lsls	r3, r3, #19
 8005edc:	6113      	str	r3, [r2, #16]
 8005ede:	e04e      	b.n	8005f7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	0cdb      	lsrs	r3, r3, #19
 8005efc:	04db      	lsls	r3, r3, #19
 8005efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d903      	bls.n	8005f38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f6e:	6939      	ldr	r1, [r7, #16]
 8005f70:	0148      	lsls	r0, r1, #5
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	4401      	add	r1, r0
 8005f76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d11e      	bne.n	8005fc2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e092      	b.n	80060e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fe0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d07e      	beq.n	80060e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	6979      	ldr	r1, [r7, #20]
 8006002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006006:	4313      	orrs	r3, r2
 8006008:	634b      	str	r3, [r1, #52]	; 0x34
 800600a:	e06d      	b.n	80060e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006026:	0cdb      	lsrs	r3, r3, #19
 8006028:	04db      	lsls	r3, r3, #19
 800602a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006046:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800604a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800604e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800607e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006096:	6939      	ldr	r1, [r7, #16]
 8006098:	0148      	lsls	r0, r1, #5
 800609a:	6979      	ldr	r1, [r7, #20]
 800609c:	4401      	add	r1, r0
 800609e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a2:	4313      	orrs	r3, r2
 80060a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d10d      	bne.n	80060c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	68d9      	ldr	r1, [r3, #12]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	460a      	mov	r2, r1
 80060c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b089      	sub	sp, #36	; 0x24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	4611      	mov	r1, r2
 8006102:	461a      	mov	r2, r3
 8006104:	460b      	mov	r3, r1
 8006106:	71fb      	strb	r3, [r7, #7]
 8006108:	4613      	mov	r3, r2
 800610a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006114:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	d11a      	bne.n	8006152 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800611c:	88bb      	ldrh	r3, [r7, #4]
 800611e:	3303      	adds	r3, #3
 8006120:	089b      	lsrs	r3, r3, #2
 8006122:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	e00f      	b.n	800614a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	031a      	lsls	r2, r3, #12
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4413      	add	r3, r2
 8006132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006136:	461a      	mov	r2, r3
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3304      	adds	r3, #4
 8006142:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	3301      	adds	r3, #1
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	429a      	cmp	r2, r3
 8006150:	d3eb      	bcc.n	800612a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3724      	adds	r7, #36	; 0x24
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	; 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	3303      	adds	r3, #3
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800617e:	2300      	movs	r3, #0
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	e00b      	b.n	800619c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3304      	adds	r3, #4
 8006194:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	3301      	adds	r3, #1
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d3ef      	bcc.n	8006184 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80061a4:	69fb      	ldr	r3, [r7, #28]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3724      	adds	r7, #36	; 0x24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	785b      	ldrb	r3, [r3, #1]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d12c      	bne.n	8006228 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	db12      	blt.n	8006206 <USB_EPSetStall+0x54>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00f      	beq.n	8006206 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006204:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e02b      	b.n	8006280 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	db12      	blt.n	8006260 <USB_EPSetStall+0xae>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00f      	beq.n	8006260 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800625e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800627e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d128      	bne.n	80062fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	78db      	ldrb	r3, [r3, #3]
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d003      	beq.n	80062da <USB_EPClearStall+0x4c>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	78db      	ldrb	r3, [r3, #3]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d138      	bne.n	800634c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e027      	b.n	800634c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800631a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	78db      	ldrb	r3, [r3, #3]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d003      	beq.n	800632c <USB_EPClearStall+0x9e>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	78db      	ldrb	r3, [r3, #3]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d10f      	bne.n	800634c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006378:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800637c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	78fb      	ldrb	r3, [r7, #3]
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006394:	4313      	orrs	r3, r2
 8006396:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063c0:	f023 0303 	bic.w	r3, r3, #3
 80063c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d4:	f023 0302 	bic.w	r3, r3, #2
 80063d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006416:	f043 0302 	orr.w	r3, r3, #2
 800641a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4013      	ands	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006442:	68fb      	ldr	r3, [r7, #12]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4013      	ands	r3, r2
 8006472:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	0c1b      	lsrs	r3, r3, #16
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	4013      	ands	r3, r2
 80064a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	b29b      	uxth	r3, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	4013      	ands	r3, r2
 80064e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064e6:	68bb      	ldr	r3, [r7, #8]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
 8006524:	01db      	lsls	r3, r3, #7
 8006526:	b2db      	uxtb	r3, r3
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4013      	ands	r3, r2
 8006540:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006542:	68bb      	ldr	r3, [r7, #8]
}
 8006544:	4618      	mov	r0, r3
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f003 0301 	and.w	r3, r3, #1
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006586:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800659e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	460b      	mov	r3, r1
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	333c      	adds	r3, #60	; 0x3c
 80065ca:	3304      	adds	r3, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4a26      	ldr	r2, [pc, #152]	; (800666c <USB_EP0_OutStart+0xb8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d90a      	bls.n	80065ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e8:	d101      	bne.n	80065ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e037      	b.n	800665e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	461a      	mov	r2, r3
 80065f6:	2300      	movs	r3, #0
 80065f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800660c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661c:	f043 0318 	orr.w	r3, r3, #24
 8006620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006630:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006634:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d10f      	bne.n	800665c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	461a      	mov	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006656:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800665a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	4f54300a 	.word	0x4f54300a

08006670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <USB_CoreReset+0x64>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e01b      	b.n	80066c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	daf2      	bge.n	800667c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f043 0201 	orr.w	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <USB_CoreReset+0x64>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d901      	bls.n	80066b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e006      	b.n	80066c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d0f0      	beq.n	80066a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	00030d40 	.word	0x00030d40

080066d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066e8:	f002 f96a 	bl	80089c0 <USBD_static_malloc>
 80066ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80066fc:	2302      	movs	r3, #2
 80066fe:	e066      	b.n	80067ce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d119      	bne.n	8006744 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006714:	2202      	movs	r2, #2
 8006716:	2181      	movs	r1, #129	; 0x81
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f002 f82e 	bl	800877a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006728:	2202      	movs	r2, #2
 800672a:	2101      	movs	r1, #1
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f002 f824 	bl	800877a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2210      	movs	r2, #16
 800673e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006742:	e016      	b.n	8006772 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006744:	2340      	movs	r3, #64	; 0x40
 8006746:	2202      	movs	r2, #2
 8006748:	2181      	movs	r1, #129	; 0x81
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f002 f815 	bl	800877a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006756:	2340      	movs	r3, #64	; 0x40
 8006758:	2202      	movs	r2, #2
 800675a:	2101      	movs	r1, #1
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f002 f80c 	bl	800877a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2210      	movs	r2, #16
 800676e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006772:	2308      	movs	r3, #8
 8006774:	2203      	movs	r2, #3
 8006776:	2182      	movs	r1, #130	; 0x82
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fffe 	bl	800877a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7c1b      	ldrb	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b2:	2101      	movs	r1, #1
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f002 f8cf 	bl	8008958 <USBD_LL_PrepareReceive>
 80067ba:	e007      	b.n	80067cc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067c2:	2340      	movs	r3, #64	; 0x40
 80067c4:	2101      	movs	r1, #1
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f002 f8c6 	bl	8008958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067e2:	2181      	movs	r1, #129	; 0x81
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 ffee 	bl	80087c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067f0:	2101      	movs	r1, #1
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 ffe7 	bl	80087c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006800:	2182      	movs	r1, #130	; 0x82
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 ffdf 	bl	80087c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00e      	beq.n	8006840 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006832:	4618      	mov	r0, r3
 8006834:	f002 f8d2 	bl	80089dc <USBD_static_free>
    pdev->pClassData = NULL;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	e0af      	b.n	80069d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800687c:	2b00      	cmp	r3, #0
 800687e:	d03f      	beq.n	8006900 <USBD_CDC_Setup+0xb4>
 8006880:	2b20      	cmp	r3, #32
 8006882:	f040 809f 	bne.w	80069c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	88db      	ldrh	r3, [r3, #6]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d02e      	beq.n	80068ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b25b      	sxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	da16      	bge.n	80068c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80068a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	88d2      	ldrh	r2, [r2, #6]
 80068aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	88db      	ldrh	r3, [r3, #6]
 80068b0:	2b07      	cmp	r3, #7
 80068b2:	bf28      	it	cs
 80068b4:	2307      	movcs	r3, #7
 80068b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	89fa      	ldrh	r2, [r7, #14]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fb19 	bl	8007ef6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80068c4:	e085      	b.n	80069d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	785a      	ldrb	r2, [r3, #1]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	88db      	ldrh	r3, [r3, #6]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80068dc:	6939      	ldr	r1, [r7, #16]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	88db      	ldrh	r3, [r3, #6]
 80068e2:	461a      	mov	r2, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fb32 	bl	8007f4e <USBD_CtlPrepareRx>
      break;
 80068ea:	e072      	b.n	80069d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	7850      	ldrb	r0, [r2, #1]
 80068f8:	2200      	movs	r2, #0
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	4798      	blx	r3
      break;
 80068fe:	e068      	b.n	80069d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b0b      	cmp	r3, #11
 8006906:	d852      	bhi.n	80069ae <USBD_CDC_Setup+0x162>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <USBD_CDC_Setup+0xc4>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006941 	.word	0x08006941
 8006914:	080069bd 	.word	0x080069bd
 8006918:	080069af 	.word	0x080069af
 800691c:	080069af 	.word	0x080069af
 8006920:	080069af 	.word	0x080069af
 8006924:	080069af 	.word	0x080069af
 8006928:	080069af 	.word	0x080069af
 800692c:	080069af 	.word	0x080069af
 8006930:	080069af 	.word	0x080069af
 8006934:	080069af 	.word	0x080069af
 8006938:	0800696b 	.word	0x0800696b
 800693c:	08006995 	.word	0x08006995
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b03      	cmp	r3, #3
 800694a:	d107      	bne.n	800695c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800694c:	f107 030a 	add.w	r3, r7, #10
 8006950:	2202      	movs	r2, #2
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 face 	bl	8007ef6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800695a:	e032      	b.n	80069c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fa58 	bl	8007e14 <USBD_CtlError>
            ret = USBD_FAIL;
 8006964:	2303      	movs	r3, #3
 8006966:	75fb      	strb	r3, [r7, #23]
          break;
 8006968:	e02b      	b.n	80069c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d107      	bne.n	8006986 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006976:	f107 030d 	add.w	r3, r7, #13
 800697a:	2201      	movs	r2, #1
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fab9 	bl	8007ef6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006984:	e01d      	b.n	80069c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fa43 	bl	8007e14 <USBD_CtlError>
            ret = USBD_FAIL;
 800698e:	2303      	movs	r3, #3
 8006990:	75fb      	strb	r3, [r7, #23]
          break;
 8006992:	e016      	b.n	80069c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b03      	cmp	r3, #3
 800699e:	d00f      	beq.n	80069c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f001 fa36 	bl	8007e14 <USBD_CtlError>
            ret = USBD_FAIL;
 80069a8:	2303      	movs	r3, #3
 80069aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069ac:	e008      	b.n	80069c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fa2f 	bl	8007e14 <USBD_CtlError>
          ret = USBD_FAIL;
 80069b6:	2303      	movs	r3, #3
 80069b8:	75fb      	strb	r3, [r7, #23]
          break;
 80069ba:	e002      	b.n	80069c2 <USBD_CDC_Setup+0x176>
          break;
 80069bc:	bf00      	nop
 80069be:	e008      	b.n	80069d2 <USBD_CDC_Setup+0x186>
          break;
 80069c0:	bf00      	nop
      }
      break;
 80069c2:	e006      	b.n	80069d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fa24 	bl	8007e14 <USBD_CtlError>
      ret = USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e04f      	b.n	8006a9e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a06:	78fa      	ldrb	r2, [r7, #3]
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	3318      	adds	r3, #24
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d029      	beq.n	8006a70 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	3318      	adds	r3, #24
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	78f9      	ldrb	r1, [r7, #3]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	460b      	mov	r3, r1
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	1a5b      	subs	r3, r3, r1
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4403      	add	r3, r0
 8006a3c:	3344      	adds	r3, #68	; 0x44
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a44:	fb03 f301 	mul.w	r3, r3, r1
 8006a48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d110      	bne.n	8006a70 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	3318      	adds	r3, #24
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a62:	78f9      	ldrb	r1, [r7, #3]
 8006a64:	2300      	movs	r3, #0
 8006a66:	2200      	movs	r2, #0
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 ff54 	bl	8008916 <USBD_LL_Transmit>
 8006a6e:	e015      	b.n	8006a9c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a98:	78fa      	ldrb	r2, [r7, #3]
 8006a9a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ab8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e015      	b.n	8006af4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 ff64 	bl	800899a <USBD_LL_GetRxDataSize>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006aee:	4611      	mov	r1, r2
 8006af0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e01b      	b.n	8006b4e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d015      	beq.n	8006b4c <USBD_CDC_EP0_RxReady+0x50>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b26:	2bff      	cmp	r3, #255	; 0xff
 8006b28:	d010      	beq.n	8006b4c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006b38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b40:	b292      	uxth	r2, r2
 8006b42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	22ff      	movs	r2, #255	; 0xff
 8006b48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2243      	movs	r2, #67	; 0x43
 8006b64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006b66:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	200000bc 	.word	0x200000bc

08006b78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2243      	movs	r2, #67	; 0x43
 8006b84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006b86:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20000078 	.word	0x20000078

08006b98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2243      	movs	r2, #67	; 0x43
 8006ba4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006ba6:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000100 	.word	0x20000100

08006bb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bc6:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	20000034 	.word	0x20000034

08006bd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e004      	b.n	8006bf6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b087      	sub	sp, #28
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c14:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e008      	b.n	8006c32 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e004      	b.n	8006c64 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c80:	2301      	movs	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e01a      	b.n	8006cc8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d114      	bne.n	8006cc6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006cba:	2181      	movs	r1, #129	; 0x81
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 fe2a 	bl	8008916 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e016      	b.n	8006d1c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7c1b      	ldrb	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fe28 	bl	8008958 <USBD_LL_PrepareReceive>
 8006d08:	e007      	b.n	8006d1a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	2101      	movs	r1, #1
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fe1f 	bl	8008958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e01f      	b.n	8006d7c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	79fa      	ldrb	r2, [r7, #7]
 8006d6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f001 fc9b 	bl	80086ac <USBD_LL_Init>
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e016      	b.n	8006dca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f107 020e 	add.w	r2, r7, #14
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fcb2 	bl	8008744 <USBD_LL_Start>
 8006de0:	4603      	mov	r3, r0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d009      	beq.n	8006e2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	78fa      	ldrb	r2, [r7, #3]
 8006e24:	4611      	mov	r1, r2
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	78fa      	ldrb	r2, [r7, #3]
 8006e58:	4611      	mov	r1, r2
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
  }

  return USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 ff90 	bl	8007da0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d01a      	beq.n	8006eda <USBD_LL_SetupStage+0x72>
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d822      	bhi.n	8006eee <USBD_LL_SetupStage+0x86>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <USBD_LL_SetupStage+0x4a>
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d00a      	beq.n	8006ec6 <USBD_LL_SetupStage+0x5e>
 8006eb0:	e01d      	b.n	8006eee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa62 	bl	8007384 <USBD_StdDevReq>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec4:	e020      	b.n	8006f08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fac6 	bl	8007460 <USBD_StdItfReq>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed8:	e016      	b.n	8006f08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb05 	bl	80074f2 <USBD_StdEPReq>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e00c      	b.n	8006f08 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ef4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fc81 	bl	8008804 <USBD_LL_StallEP>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
      break;
 8006f06:	bf00      	nop
  }

  return ret;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f20:	7afb      	ldrb	r3, [r7, #11]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d138      	bne.n	8006f98 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d14a      	bne.n	8006fce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d913      	bls.n	8006f6c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	bf28      	it	cs
 8006f5e:	4613      	movcs	r3, r2
 8006f60:	461a      	mov	r2, r3
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f001 f80f 	bl	8007f88 <USBD_CtlContinueRx>
 8006f6a:	e030      	b.n	8006fce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d10b      	bne.n	8006f90 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f001 f80a 	bl	8007faa <USBD_CtlSendStatus>
 8006f96:	e01a      	b.n	8006fce <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d114      	bne.n	8006fce <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00e      	beq.n	8006fce <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	7afa      	ldrb	r2, [r7, #11]
 8006fba:	4611      	mov	r1, r2
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	4798      	blx	r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	e000      	b.n	8006fd0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d16b      	bne.n	80070c4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3314      	adds	r3, #20
 8006ff0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d156      	bne.n	80070aa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	429a      	cmp	r2, r3
 8007006:	d914      	bls.n	8007032 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	461a      	mov	r2, r3
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 ff84 	bl	8007f2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007024:	2300      	movs	r3, #0
 8007026:	2200      	movs	r2, #0
 8007028:	2100      	movs	r1, #0
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f001 fc94 	bl	8008958 <USBD_LL_PrepareReceive>
 8007030:	e03b      	b.n	80070aa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	d11c      	bne.n	8007078 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007046:	429a      	cmp	r2, r3
 8007048:	d316      	bcc.n	8007078 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007054:	429a      	cmp	r2, r3
 8007056:	d20f      	bcs.n	8007078 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 ff65 	bl	8007f2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800706a:	2300      	movs	r3, #0
 800706c:	2200      	movs	r2, #0
 800706e:	2100      	movs	r1, #0
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f001 fc71 	bl	8008958 <USBD_LL_PrepareReceive>
 8007076:	e018      	b.n	80070aa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b03      	cmp	r3, #3
 8007082:	d10b      	bne.n	800709c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 fbb0 	bl	8008804 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 ff93 	bl	8007fd0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d122      	bne.n	80070fa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff fe98 	bl	8006dea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070c2:	e01a      	b.n	80070fa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d114      	bne.n	80070fa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00e      	beq.n	80070fa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	7afa      	ldrb	r2, [r7, #11]
 80070e6:	4611      	mov	r1, r2
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	4798      	blx	r3
 80070ec:	4603      	mov	r3, r0
 80070ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	e000      	b.n	80070fc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	e02f      	b.n	8007198 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00f      	beq.n	8007162 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6852      	ldr	r2, [r2, #4]
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	4611      	mov	r1, r2
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007162:	2340      	movs	r3, #64	; 0x40
 8007164:	2200      	movs	r2, #0
 8007166:	2100      	movs	r1, #0
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 fb06 	bl	800877a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2240      	movs	r2, #64	; 0x40
 800717a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	2200      	movs	r2, #0
 8007182:	2180      	movs	r1, #128	; 0x80
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 faf8 	bl	800877a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2240      	movs	r2, #64	; 0x40
 8007194:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2204      	movs	r2, #4
 80071da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d106      	bne.n	800720e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007206:	b2da      	uxtb	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	e012      	b.n	8007258 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b03      	cmp	r3, #3
 800723c:	d10b      	bne.n	8007256 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007276:	2303      	movs	r3, #3
 8007278:	e014      	b.n	80072a4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b03      	cmp	r3, #3
 8007284:	d10d      	bne.n	80072a2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	78fa      	ldrb	r2, [r7, #3]
 800729c:	4611      	mov	r1, r2
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e014      	b.n	80072f0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d10d      	bne.n	80072ee <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	4611      	mov	r1, r2
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6852      	ldr	r2, [r2, #4]
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	4611      	mov	r1, r2
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
  }

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	3301      	adds	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007364:	8a3b      	ldrh	r3, [r7, #16]
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	b21a      	sxth	r2, r3
 800736a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800736e:	4313      	orrs	r3, r2
 8007370:	b21b      	sxth	r3, r3
 8007372:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007374:	89fb      	ldrh	r3, [r7, #14]
}
 8007376:	4618      	mov	r0, r3
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d005      	beq.n	80073aa <USBD_StdDevReq+0x26>
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d853      	bhi.n	800744a <USBD_StdDevReq+0xc6>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <USBD_StdDevReq+0x3a>
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	d14f      	bne.n	800744a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
      break;
 80073bc:	e04a      	b.n	8007454 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	2b09      	cmp	r3, #9
 80073c4:	d83b      	bhi.n	800743e <USBD_StdDevReq+0xba>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <USBD_StdDevReq+0x48>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	08007421 	.word	0x08007421
 80073d0:	08007435 	.word	0x08007435
 80073d4:	0800743f 	.word	0x0800743f
 80073d8:	0800742b 	.word	0x0800742b
 80073dc:	0800743f 	.word	0x0800743f
 80073e0:	080073ff 	.word	0x080073ff
 80073e4:	080073f5 	.word	0x080073f5
 80073e8:	0800743f 	.word	0x0800743f
 80073ec:	08007417 	.word	0x08007417
 80073f0:	08007409 	.word	0x08007409
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f9de 	bl	80077b8 <USBD_GetDescriptor>
          break;
 80073fc:	e024      	b.n	8007448 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fb43 	bl	8007a8c <USBD_SetAddress>
          break;
 8007406:	e01f      	b.n	8007448 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fb82 	bl	8007b14 <USBD_SetConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
          break;
 8007414:	e018      	b.n	8007448 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fc21 	bl	8007c60 <USBD_GetConfig>
          break;
 800741e:	e013      	b.n	8007448 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fc52 	bl	8007ccc <USBD_GetStatus>
          break;
 8007428:	e00e      	b.n	8007448 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc81 	bl	8007d34 <USBD_SetFeature>
          break;
 8007432:	e009      	b.n	8007448 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fc90 	bl	8007d5c <USBD_ClrFeature>
          break;
 800743c:	e004      	b.n	8007448 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fce7 	bl	8007e14 <USBD_CtlError>
          break;
 8007446:	bf00      	nop
      }
      break;
 8007448:	e004      	b.n	8007454 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fce1 	bl	8007e14 <USBD_CtlError>
      break;
 8007452:	bf00      	nop
  }

  return ret;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop

08007460 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d005      	beq.n	8007486 <USBD_StdItfReq+0x26>
 800747a:	2b40      	cmp	r3, #64	; 0x40
 800747c:	d82f      	bhi.n	80074de <USBD_StdItfReq+0x7e>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <USBD_StdItfReq+0x26>
 8007482:	2b20      	cmp	r3, #32
 8007484:	d12b      	bne.n	80074de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748c:	b2db      	uxtb	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	2b02      	cmp	r3, #2
 8007492:	d81d      	bhi.n	80074d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	889b      	ldrh	r3, [r3, #4]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b01      	cmp	r3, #1
 800749c:	d813      	bhi.n	80074c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	88db      	ldrh	r3, [r3, #6]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d110      	bne.n	80074da <USBD_StdItfReq+0x7a>
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10d      	bne.n	80074da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fd73 	bl	8007faa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074c4:	e009      	b.n	80074da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fca3 	bl	8007e14 <USBD_CtlError>
          break;
 80074ce:	e004      	b.n	80074da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fc9e 	bl	8007e14 <USBD_CtlError>
          break;
 80074d8:	e000      	b.n	80074dc <USBD_StdItfReq+0x7c>
          break;
 80074da:	bf00      	nop
      }
      break;
 80074dc:	e004      	b.n	80074e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fc97 	bl	8007e14 <USBD_CtlError>
      break;
 80074e6:	bf00      	nop
  }

  return ret;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	889b      	ldrh	r3, [r3, #4]
 8007504:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d007      	beq.n	8007522 <USBD_StdEPReq+0x30>
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	f200 8145 	bhi.w	80077a2 <USBD_StdEPReq+0x2b0>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00c      	beq.n	8007536 <USBD_StdEPReq+0x44>
 800751c:	2b20      	cmp	r3, #32
 800751e:	f040 8140 	bne.w	80077a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
      break;
 8007534:	e13a      	b.n	80077ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b03      	cmp	r3, #3
 800753c:	d007      	beq.n	800754e <USBD_StdEPReq+0x5c>
 800753e:	2b03      	cmp	r3, #3
 8007540:	f300 8129 	bgt.w	8007796 <USBD_StdEPReq+0x2a4>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d07f      	beq.n	8007648 <USBD_StdEPReq+0x156>
 8007548:	2b01      	cmp	r3, #1
 800754a:	d03c      	beq.n	80075c6 <USBD_StdEPReq+0xd4>
 800754c:	e123      	b.n	8007796 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d002      	beq.n	8007560 <USBD_StdEPReq+0x6e>
 800755a:	2b03      	cmp	r3, #3
 800755c:	d016      	beq.n	800758c <USBD_StdEPReq+0x9a>
 800755e:	e02c      	b.n	80075ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00d      	beq.n	8007582 <USBD_StdEPReq+0x90>
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b80      	cmp	r3, #128	; 0x80
 800756a:	d00a      	beq.n	8007582 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 f947 	bl	8008804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007576:	2180      	movs	r1, #128	; 0x80
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 f943 	bl	8008804 <USBD_LL_StallEP>
 800757e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007580:	e020      	b.n	80075c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fc45 	bl	8007e14 <USBD_CtlError>
              break;
 800758a:	e01b      	b.n	80075c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	885b      	ldrh	r3, [r3, #2]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10e      	bne.n	80075b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <USBD_StdEPReq+0xc0>
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d008      	beq.n	80075b2 <USBD_StdEPReq+0xc0>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	88db      	ldrh	r3, [r3, #6]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f929 	bl	8008804 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fcf9 	bl	8007faa <USBD_CtlSendStatus>

              break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fc29 	bl	8007e14 <USBD_CtlError>
              break;
 80075c2:	bf00      	nop
          }
          break;
 80075c4:	e0ec      	b.n	80077a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d002      	beq.n	80075d8 <USBD_StdEPReq+0xe6>
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d016      	beq.n	8007604 <USBD_StdEPReq+0x112>
 80075d6:	e030      	b.n	800763a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <USBD_StdEPReq+0x108>
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b80      	cmp	r3, #128	; 0x80
 80075e2:	d00a      	beq.n	80075fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 f90b 	bl	8008804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075ee:	2180      	movs	r1, #128	; 0x80
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 f907 	bl	8008804 <USBD_LL_StallEP>
 80075f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075f8:	e025      	b.n	8007646 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fc09 	bl	8007e14 <USBD_CtlError>
              break;
 8007602:	e020      	b.n	8007646 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	885b      	ldrh	r3, [r3, #2]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d11b      	bne.n	8007644 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f911 	bl	8008842 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fcc2 	bl	8007faa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007638:	e004      	b.n	8007644 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fbe9 	bl	8007e14 <USBD_CtlError>
              break;
 8007642:	e000      	b.n	8007646 <USBD_StdEPReq+0x154>
              break;
 8007644:	bf00      	nop
          }
          break;
 8007646:	e0ab      	b.n	80077a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d002      	beq.n	800765a <USBD_StdEPReq+0x168>
 8007654:	2b03      	cmp	r3, #3
 8007656:	d032      	beq.n	80076be <USBD_StdEPReq+0x1cc>
 8007658:	e097      	b.n	800778a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <USBD_StdEPReq+0x17e>
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	2b80      	cmp	r3, #128	; 0x80
 8007664:	d004      	beq.n	8007670 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fbd3 	bl	8007e14 <USBD_CtlError>
                break;
 800766e:	e091      	b.n	8007794 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007674:	2b00      	cmp	r3, #0
 8007676:	da0b      	bge.n	8007690 <USBD_StdEPReq+0x19e>
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	3310      	adds	r3, #16
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4413      	add	r3, r2
 800768c:	3304      	adds	r3, #4
 800768e:	e00b      	b.n	80076a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	4413      	add	r3, r2
 80076a6:	3304      	adds	r3, #4
 80076a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2202      	movs	r2, #2
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fc1d 	bl	8007ef6 <USBD_CtlSendData>
              break;
 80076bc:	e06a      	b.n	8007794 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	da11      	bge.n	80076ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	f003 020f 	and.w	r2, r3, #15
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	3324      	adds	r3, #36	; 0x24
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d117      	bne.n	8007710 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fb96 	bl	8007e14 <USBD_CtlError>
                  break;
 80076e8:	e054      	b.n	8007794 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	f003 020f 	and.w	r2, r3, #15
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d104      	bne.n	8007710 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fb83 	bl	8007e14 <USBD_CtlError>
                  break;
 800770e:	e041      	b.n	8007794 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007714:	2b00      	cmp	r3, #0
 8007716:	da0b      	bge.n	8007730 <USBD_StdEPReq+0x23e>
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	3310      	adds	r3, #16
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	4413      	add	r3, r2
 800772c:	3304      	adds	r3, #4
 800772e:	e00b      	b.n	8007748 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	4413      	add	r3, r2
 8007746:	3304      	adds	r3, #4
 8007748:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <USBD_StdEPReq+0x264>
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b80      	cmp	r3, #128	; 0x80
 8007754:	d103      	bne.n	800775e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	e00e      	b.n	800777c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 f88c 	bl	8008880 <USBD_LL_IsStallEP>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2201      	movs	r2, #1
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e002      	b.n	800777c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2202      	movs	r2, #2
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fbb7 	bl	8007ef6 <USBD_CtlSendData>
              break;
 8007788:	e004      	b.n	8007794 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fb41 	bl	8007e14 <USBD_CtlError>
              break;
 8007792:	bf00      	nop
          }
          break;
 8007794:	e004      	b.n	80077a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fb3b 	bl	8007e14 <USBD_CtlError>
          break;
 800779e:	bf00      	nop
      }
      break;
 80077a0:	e004      	b.n	80077ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fb35 	bl	8007e14 <USBD_CtlError>
      break;
 80077aa:	bf00      	nop
  }

  return ret;
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	885b      	ldrh	r3, [r3, #2]
 80077d2:	0a1b      	lsrs	r3, r3, #8
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	2b06      	cmp	r3, #6
 80077da:	f200 8128 	bhi.w	8007a2e <USBD_GetDescriptor+0x276>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <USBD_GetDescriptor+0x2c>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007801 	.word	0x08007801
 80077e8:	08007819 	.word	0x08007819
 80077ec:	08007859 	.word	0x08007859
 80077f0:	08007a2f 	.word	0x08007a2f
 80077f4:	08007a2f 	.word	0x08007a2f
 80077f8:	080079cf 	.word	0x080079cf
 80077fc:	080079fb 	.word	0x080079fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
      break;
 8007816:	e112      	b.n	8007a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	7c1b      	ldrb	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10d      	bne.n	800783c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007828:	f107 0208 	add.w	r2, r7, #8
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3301      	adds	r3, #1
 8007836:	2202      	movs	r2, #2
 8007838:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800783a:	e100      	b.n	8007a3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	f107 0208 	add.w	r2, r7, #8
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3301      	adds	r3, #1
 8007852:	2202      	movs	r2, #2
 8007854:	701a      	strb	r2, [r3, #0]
      break;
 8007856:	e0f2      	b.n	8007a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	885b      	ldrh	r3, [r3, #2]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b05      	cmp	r3, #5
 8007860:	f200 80ac 	bhi.w	80079bc <USBD_GetDescriptor+0x204>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <USBD_GetDescriptor+0xb4>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	08007885 	.word	0x08007885
 8007870:	080078b9 	.word	0x080078b9
 8007874:	080078ed 	.word	0x080078ed
 8007878:	08007921 	.word	0x08007921
 800787c:	08007955 	.word	0x08007955
 8007880:	08007989 	.word	0x08007989
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	7c12      	ldrb	r2, [r2, #16]
 800789c:	f107 0108 	add.w	r1, r7, #8
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
 80078a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078a6:	e091      	b.n	80079cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fab2 	bl	8007e14 <USBD_CtlError>
            err++;
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	3301      	adds	r3, #1
 80078b4:	72fb      	strb	r3, [r7, #11]
          break;
 80078b6:	e089      	b.n	80079cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00b      	beq.n	80078dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	7c12      	ldrb	r2, [r2, #16]
 80078d0:	f107 0108 	add.w	r1, r7, #8
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
 80078d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078da:	e077      	b.n	80079cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa98 	bl	8007e14 <USBD_CtlError>
            err++;
 80078e4:	7afb      	ldrb	r3, [r7, #11]
 80078e6:	3301      	adds	r3, #1
 80078e8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ea:	e06f      	b.n	80079cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	7c12      	ldrb	r2, [r2, #16]
 8007904:	f107 0108 	add.w	r1, r7, #8
 8007908:	4610      	mov	r0, r2
 800790a:	4798      	blx	r3
 800790c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800790e:	e05d      	b.n	80079cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa7e 	bl	8007e14 <USBD_CtlError>
            err++;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	3301      	adds	r3, #1
 800791c:	72fb      	strb	r3, [r7, #11]
          break;
 800791e:	e055      	b.n	80079cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7c12      	ldrb	r2, [r2, #16]
 8007938:	f107 0108 	add.w	r1, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007942:	e043      	b.n	80079cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fa64 	bl	8007e14 <USBD_CtlError>
            err++;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	3301      	adds	r3, #1
 8007950:	72fb      	strb	r3, [r7, #11]
          break;
 8007952:	e03b      	b.n	80079cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	7c12      	ldrb	r2, [r2, #16]
 800796c:	f107 0108 	add.w	r1, r7, #8
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
 8007974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007976:	e029      	b.n	80079cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa4a 	bl	8007e14 <USBD_CtlError>
            err++;
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	3301      	adds	r3, #1
 8007984:	72fb      	strb	r3, [r7, #11]
          break;
 8007986:	e021      	b.n	80079cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7c12      	ldrb	r2, [r2, #16]
 80079a0:	f107 0108 	add.w	r1, r7, #8
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079aa:	e00f      	b.n	80079cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa30 	bl	8007e14 <USBD_CtlError>
            err++;
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	3301      	adds	r3, #1
 80079b8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ba:	e007      	b.n	80079cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fa28 	bl	8007e14 <USBD_CtlError>
          err++;
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	3301      	adds	r3, #1
 80079c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80079ca:	bf00      	nop
      }
      break;
 80079cc:	e037      	b.n	8007a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7c1b      	ldrb	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	f107 0208 	add.w	r2, r7, #8
 80079e2:	4610      	mov	r0, r2
 80079e4:	4798      	blx	r3
 80079e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079e8:	e029      	b.n	8007a3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa11 	bl	8007e14 <USBD_CtlError>
        err++;
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	3301      	adds	r3, #1
 80079f6:	72fb      	strb	r3, [r7, #11]
      break;
 80079f8:	e021      	b.n	8007a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7c1b      	ldrb	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10d      	bne.n	8007a1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	f107 0208 	add.w	r2, r7, #8
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4798      	blx	r3
 8007a12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3301      	adds	r3, #1
 8007a18:	2207      	movs	r2, #7
 8007a1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a1c:	e00f      	b.n	8007a3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9f7 	bl	8007e14 <USBD_CtlError>
        err++;
 8007a26:	7afb      	ldrb	r3, [r7, #11]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a2c:	e007      	b.n	8007a3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f9ef 	bl	8007e14 <USBD_CtlError>
      err++;
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a3c:	bf00      	nop
  }

  if (err != 0U)
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11e      	bne.n	8007a82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	88db      	ldrh	r3, [r3, #6]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d016      	beq.n	8007a7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a4c:	893b      	ldrh	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	88da      	ldrh	r2, [r3, #6]
 8007a56:	893b      	ldrh	r3, [r7, #8]
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	bf28      	it	cs
 8007a5c:	4613      	movcs	r3, r2
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a62:	893b      	ldrh	r3, [r7, #8]
 8007a64:	461a      	mov	r2, r3
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fa44 	bl	8007ef6 <USBD_CtlSendData>
 8007a6e:	e009      	b.n	8007a84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9ce 	bl	8007e14 <USBD_CtlError>
 8007a78:	e004      	b.n	8007a84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa95 	bl	8007faa <USBD_CtlSendStatus>
 8007a80:	e000      	b.n	8007a84 <USBD_GetDescriptor+0x2cc>
    return;
 8007a82:	bf00      	nop
  }
}
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop

08007a8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	889b      	ldrh	r3, [r3, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d131      	bne.n	8007b02 <USBD_SetAddress+0x76>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	88db      	ldrh	r3, [r3, #6]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d12d      	bne.n	8007b02 <USBD_SetAddress+0x76>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	885b      	ldrh	r3, [r3, #2]
 8007aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8007aac:	d829      	bhi.n	8007b02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d104      	bne.n	8007ad0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f9a3 	bl	8007e14 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ace:	e01d      	b.n	8007b0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7bfa      	ldrb	r2, [r7, #15]
 8007ad4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fefb 	bl	80088d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa61 	bl	8007faa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af6:	e009      	b.n	8007b0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b00:	e004      	b.n	8007b0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f985 	bl	8007e14 <USBD_CtlError>
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	4b4c      	ldr	r3, [pc, #304]	; (8007c5c <USBD_SetConfig+0x148>)
 8007b2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b2c:	4b4b      	ldr	r3, [pc, #300]	; (8007c5c <USBD_SetConfig+0x148>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d905      	bls.n	8007b40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f96c 	bl	8007e14 <USBD_CtlError>
    return USBD_FAIL;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e088      	b.n	8007c52 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d002      	beq.n	8007b52 <USBD_SetConfig+0x3e>
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d025      	beq.n	8007b9c <USBD_SetConfig+0x88>
 8007b50:	e071      	b.n	8007c36 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b52:	4b42      	ldr	r3, [pc, #264]	; (8007c5c <USBD_SetConfig+0x148>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01c      	beq.n	8007b94 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007b5a:	4b40      	ldr	r3, [pc, #256]	; (8007c5c <USBD_SetConfig+0x148>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b64:	4b3d      	ldr	r3, [pc, #244]	; (8007c5c <USBD_SetConfig+0x148>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f948 	bl	8006e00 <USBD_SetClassConfig>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f949 	bl	8007e14 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b82:	e065      	b.n	8007c50 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fa10 	bl	8007faa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b92:	e05d      	b.n	8007c50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fa08 	bl	8007faa <USBD_CtlSendStatus>
      break;
 8007b9a:	e059      	b.n	8007c50 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b9c:	4b2f      	ldr	r3, [pc, #188]	; (8007c5c <USBD_SetConfig+0x148>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d112      	bne.n	8007bca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bac:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <USBD_SetConfig+0x148>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bb6:	4b29      	ldr	r3, [pc, #164]	; (8007c5c <USBD_SetConfig+0x148>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff f93b 	bl	8006e38 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f9f1 	bl	8007faa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bc8:	e042      	b.n	8007c50 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007bca:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <USBD_SetConfig+0x148>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d02a      	beq.n	8007c2e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff f929 	bl	8006e38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007be6:	4b1d      	ldr	r3, [pc, #116]	; (8007c5c <USBD_SetConfig+0x148>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bf0:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <USBD_SetConfig+0x148>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7ff f902 	bl	8006e00 <USBD_SetClassConfig>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00f      	beq.n	8007c26 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f903 	bl	8007e14 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff f90e 	bl	8006e38 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c24:	e014      	b.n	8007c50 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f9bf 	bl	8007faa <USBD_CtlSendStatus>
      break;
 8007c2c:	e010      	b.n	8007c50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f9bb 	bl	8007faa <USBD_CtlSendStatus>
      break;
 8007c34:	e00c      	b.n	8007c50 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f8eb 	bl	8007e14 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <USBD_SetConfig+0x148>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff f8f7 	bl	8006e38 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4e:	bf00      	nop
  }

  return ret;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	2000022c 	.word	0x2000022c

08007c60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	88db      	ldrh	r3, [r3, #6]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d004      	beq.n	8007c7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f8cd 	bl	8007e14 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c7a:	e023      	b.n	8007cc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	dc02      	bgt.n	8007c8e <USBD_GetConfig+0x2e>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	dc03      	bgt.n	8007c94 <USBD_GetConfig+0x34>
 8007c8c:	e015      	b.n	8007cba <USBD_GetConfig+0x5a>
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d00b      	beq.n	8007caa <USBD_GetConfig+0x4a>
 8007c92:	e012      	b.n	8007cba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f927 	bl	8007ef6 <USBD_CtlSendData>
        break;
 8007ca8:	e00c      	b.n	8007cc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3304      	adds	r3, #4
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f91f 	bl	8007ef6 <USBD_CtlSendData>
        break;
 8007cb8:	e004      	b.n	8007cc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f8a9 	bl	8007e14 <USBD_CtlError>
        break;
 8007cc2:	bf00      	nop
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d81e      	bhi.n	8007d22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	88db      	ldrh	r3, [r3, #6]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d004      	beq.n	8007cf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f890 	bl	8007e14 <USBD_CtlError>
        break;
 8007cf4:	e01a      	b.n	8007d2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d005      	beq.n	8007d12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f043 0202 	orr.w	r2, r3, #2
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	330c      	adds	r3, #12
 8007d16:	2202      	movs	r2, #2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8eb 	bl	8007ef6 <USBD_CtlSendData>
      break;
 8007d20:	e004      	b.n	8007d2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f875 	bl	8007e14 <USBD_CtlError>
      break;
 8007d2a:	bf00      	nop
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	885b      	ldrh	r3, [r3, #2]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d106      	bne.n	8007d54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f92b 	bl	8007faa <USBD_CtlSendStatus>
  }
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d80b      	bhi.n	8007d8c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	885b      	ldrh	r3, [r3, #2]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d10c      	bne.n	8007d96 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f910 	bl	8007faa <USBD_CtlSendStatus>
      }
      break;
 8007d8a:	e004      	b.n	8007d96 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f840 	bl	8007e14 <USBD_CtlError>
      break;
 8007d94:	e000      	b.n	8007d98 <USBD_ClrFeature+0x3c>
      break;
 8007d96:	bf00      	nop
  }
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	781a      	ldrb	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3301      	adds	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	781a      	ldrb	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7ff fabb 	bl	8007346 <SWAPBYTE>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff faae 	bl	8007346 <SWAPBYTE>
 8007dea:	4603      	mov	r3, r0
 8007dec:	461a      	mov	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7ff faa1 	bl	8007346 <SWAPBYTE>
 8007e04:	4603      	mov	r3, r0
 8007e06:	461a      	mov	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	80da      	strh	r2, [r3, #6]
}
 8007e0c:	bf00      	nop
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e1e:	2180      	movs	r1, #128	; 0x80
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fcef 	bl	8008804 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fceb 	bl	8008804 <USBD_LL_StallEP>
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b086      	sub	sp, #24
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d036      	beq.n	8007eba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e50:	6938      	ldr	r0, [r7, #16]
 8007e52:	f000 f836 	bl	8007ec2 <USBD_GetLen>
 8007e56:	4603      	mov	r3, r0
 8007e58:	3301      	adds	r3, #1
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	4413      	add	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	7812      	ldrb	r2, [r2, #0]
 8007e6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	3301      	adds	r3, #1
 8007e74:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	2203      	movs	r2, #3
 8007e7e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	3301      	adds	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e86:	e013      	b.n	8007eb0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	7812      	ldrb	r2, [r2, #0]
 8007e92:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	3301      	adds	r3, #1
 8007e98:	613b      	str	r3, [r7, #16]
    idx++;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	3301      	adds	r3, #1
 8007eae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e7      	bne.n	8007e88 <USBD_GetString+0x52>
 8007eb8:	e000      	b.n	8007ebc <USBD_GetString+0x86>
    return;
 8007eba:	bf00      	nop
  }
}
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ed2:	e005      	b.n	8007ee0 <USBD_GetLen+0x1e>
  {
    len++;
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	3301      	adds	r3, #1
 8007ede:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1f5      	bne.n	8007ed4 <USBD_GetLen+0x12>
  }

  return len;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fcfa 	bl	8008916 <USBD_LL_Transmit>

  return USBD_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 fce9 	bl	8008916 <USBD_LL_Transmit>

  return USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	2100      	movs	r1, #0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fced 	bl	8008958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	2100      	movs	r1, #0
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fcdc 	bl	8008958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fca8 	bl	8008916 <USBD_LL_Transmit>

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2205      	movs	r2, #5
 8007fdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fcb6 	bl	8008958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4912      	ldr	r1, [pc, #72]	; (8008048 <MX_USB_DEVICE_Init+0x50>)
 8008000:	4812      	ldr	r0, [pc, #72]	; (800804c <MX_USB_DEVICE_Init+0x54>)
 8008002:	f7fe fe8f 	bl	8006d24 <USBD_Init>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800800c:	f7f8 fe3c 	bl	8000c88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008010:	490f      	ldr	r1, [pc, #60]	; (8008050 <MX_USB_DEVICE_Init+0x58>)
 8008012:	480e      	ldr	r0, [pc, #56]	; (800804c <MX_USB_DEVICE_Init+0x54>)
 8008014:	f7fe feb6 	bl	8006d84 <USBD_RegisterClass>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800801e:	f7f8 fe33 	bl	8000c88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008022:	490c      	ldr	r1, [pc, #48]	; (8008054 <MX_USB_DEVICE_Init+0x5c>)
 8008024:	4809      	ldr	r0, [pc, #36]	; (800804c <MX_USB_DEVICE_Init+0x54>)
 8008026:	f7fe fdd7 	bl	8006bd8 <USBD_CDC_RegisterInterface>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008030:	f7f8 fe2a 	bl	8000c88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008034:	4805      	ldr	r0, [pc, #20]	; (800804c <MX_USB_DEVICE_Init+0x54>)
 8008036:	f7fe fecc 	bl	8006dd2 <USBD_Start>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008040:	f7f8 fe22 	bl	8000c88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008044:	bf00      	nop
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000158 	.word	0x20000158
 800804c:	20000698 	.word	0x20000698
 8008050:	20000040 	.word	0x20000040
 8008054:	20000144 	.word	0x20000144

08008058 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800805c:	2200      	movs	r2, #0
 800805e:	4905      	ldr	r1, [pc, #20]	; (8008074 <CDC_Init_FS+0x1c>)
 8008060:	4805      	ldr	r0, [pc, #20]	; (8008078 <CDC_Init_FS+0x20>)
 8008062:	f7fe fdce 	bl	8006c02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008066:	4905      	ldr	r1, [pc, #20]	; (800807c <CDC_Init_FS+0x24>)
 8008068:	4803      	ldr	r0, [pc, #12]	; (8008078 <CDC_Init_FS+0x20>)
 800806a:	f7fe fde8 	bl	8006c3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800806e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008070:	4618      	mov	r0, r3
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20001168 	.word	0x20001168
 8008078:	20000698 	.word	0x20000698
 800807c:	20000968 	.word	0x20000968

08008080 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008084:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008086:	4618      	mov	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
 800809c:	4613      	mov	r3, r2
 800809e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	2b23      	cmp	r3, #35	; 0x23
 80080a4:	d84a      	bhi.n	800813c <CDC_Control_FS+0xac>
 80080a6:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <CDC_Control_FS+0x1c>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	0800813d 	.word	0x0800813d
 80080b0:	0800813d 	.word	0x0800813d
 80080b4:	0800813d 	.word	0x0800813d
 80080b8:	0800813d 	.word	0x0800813d
 80080bc:	0800813d 	.word	0x0800813d
 80080c0:	0800813d 	.word	0x0800813d
 80080c4:	0800813d 	.word	0x0800813d
 80080c8:	0800813d 	.word	0x0800813d
 80080cc:	0800813d 	.word	0x0800813d
 80080d0:	0800813d 	.word	0x0800813d
 80080d4:	0800813d 	.word	0x0800813d
 80080d8:	0800813d 	.word	0x0800813d
 80080dc:	0800813d 	.word	0x0800813d
 80080e0:	0800813d 	.word	0x0800813d
 80080e4:	0800813d 	.word	0x0800813d
 80080e8:	0800813d 	.word	0x0800813d
 80080ec:	0800813d 	.word	0x0800813d
 80080f0:	0800813d 	.word	0x0800813d
 80080f4:	0800813d 	.word	0x0800813d
 80080f8:	0800813d 	.word	0x0800813d
 80080fc:	0800813d 	.word	0x0800813d
 8008100:	0800813d 	.word	0x0800813d
 8008104:	0800813d 	.word	0x0800813d
 8008108:	0800813d 	.word	0x0800813d
 800810c:	0800813d 	.word	0x0800813d
 8008110:	0800813d 	.word	0x0800813d
 8008114:	0800813d 	.word	0x0800813d
 8008118:	0800813d 	.word	0x0800813d
 800811c:	0800813d 	.word	0x0800813d
 8008120:	0800813d 	.word	0x0800813d
 8008124:	0800813d 	.word	0x0800813d
 8008128:	0800813d 	.word	0x0800813d
 800812c:	0800813d 	.word	0x0800813d
 8008130:	0800813d 	.word	0x0800813d
 8008134:	0800813d 	.word	0x0800813d
 8008138:	0800813d 	.word	0x0800813d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800813c:	bf00      	nop
  }

  return (USBD_OK);
 800813e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	4805      	ldr	r0, [pc, #20]	; (8008170 <CDC_Receive_FS+0x24>)
 800815a:	f7fe fd70 	bl	8006c3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800815e:	4804      	ldr	r0, [pc, #16]	; (8008170 <CDC_Receive_FS+0x24>)
 8008160:	f7fe fdb6 	bl	8006cd0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008164:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000698 	.word	0x20000698

08008174 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008184:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <CDC_Transmit_FS+0x48>)
 8008186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800818a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008196:	2301      	movs	r3, #1
 8008198:	e00b      	b.n	80081b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800819a:	887b      	ldrh	r3, [r7, #2]
 800819c:	461a      	mov	r2, r3
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4806      	ldr	r0, [pc, #24]	; (80081bc <CDC_Transmit_FS+0x48>)
 80081a2:	f7fe fd2e 	bl	8006c02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081a6:	4805      	ldr	r0, [pc, #20]	; (80081bc <CDC_Transmit_FS+0x48>)
 80081a8:	f7fe fd62 	bl	8006c70 <USBD_CDC_TransmitPacket>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000698 	.word	0x20000698

080081c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	6039      	str	r1, [r7, #0]
 80081ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2212      	movs	r2, #18
 80081f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081f6:	4b03      	ldr	r3, [pc, #12]	; (8008204 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	20000174 	.word	0x20000174

08008208 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2204      	movs	r2, #4
 8008218:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800821a:	4b03      	ldr	r3, [pc, #12]	; (8008228 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	20000188 	.word	0x20000188

0800822c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	6039      	str	r1, [r7, #0]
 8008236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	4907      	ldr	r1, [pc, #28]	; (8008260 <USBD_FS_ProductStrDescriptor+0x34>)
 8008242:	4808      	ldr	r0, [pc, #32]	; (8008264 <USBD_FS_ProductStrDescriptor+0x38>)
 8008244:	f7ff fdf7 	bl	8007e36 <USBD_GetString>
 8008248:	e004      	b.n	8008254 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	4904      	ldr	r1, [pc, #16]	; (8008260 <USBD_FS_ProductStrDescriptor+0x34>)
 800824e:	4805      	ldr	r0, [pc, #20]	; (8008264 <USBD_FS_ProductStrDescriptor+0x38>)
 8008250:	f7ff fdf1 	bl	8007e36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008254:	4b02      	ldr	r3, [pc, #8]	; (8008260 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20001968 	.word	0x20001968
 8008264:	080093c4 	.word	0x080093c4

08008268 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	4603      	mov	r3, r0
 8008270:	6039      	str	r1, [r7, #0]
 8008272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	4904      	ldr	r1, [pc, #16]	; (8008288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008278:	4804      	ldr	r0, [pc, #16]	; (800828c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800827a:	f7ff fddc 	bl	8007e36 <USBD_GetString>
  return USBD_StrDesc;
 800827e:	4b02      	ldr	r3, [pc, #8]	; (8008288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20001968 	.word	0x20001968
 800828c:	080093dc 	.word	0x080093dc

08008290 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	6039      	str	r1, [r7, #0]
 800829a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	221a      	movs	r2, #26
 80082a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082a2:	f000 f843 	bl	800832c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082a6:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	2000018c 	.word	0x2000018c

080082b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	6039      	str	r1, [r7, #0]
 80082be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d105      	bne.n	80082d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	4907      	ldr	r1, [pc, #28]	; (80082e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ca:	4808      	ldr	r0, [pc, #32]	; (80082ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80082cc:	f7ff fdb3 	bl	8007e36 <USBD_GetString>
 80082d0:	e004      	b.n	80082dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4904      	ldr	r1, [pc, #16]	; (80082e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082d6:	4805      	ldr	r0, [pc, #20]	; (80082ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80082d8:	f7ff fdad 	bl	8007e36 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082dc:	4b02      	ldr	r3, [pc, #8]	; (80082e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20001968 	.word	0x20001968
 80082ec:	080093f0 	.word	0x080093f0

080082f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d105      	bne.n	800830e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	4907      	ldr	r1, [pc, #28]	; (8008324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008306:	4808      	ldr	r0, [pc, #32]	; (8008328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008308:	f7ff fd95 	bl	8007e36 <USBD_GetString>
 800830c:	e004      	b.n	8008318 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	4904      	ldr	r1, [pc, #16]	; (8008324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008312:	4805      	ldr	r0, [pc, #20]	; (8008328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008314:	f7ff fd8f 	bl	8007e36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20001968 	.word	0x20001968
 8008328:	080093fc 	.word	0x080093fc

0800832c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008332:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <Get_SerialNum+0x44>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008338:	4b0e      	ldr	r3, [pc, #56]	; (8008374 <Get_SerialNum+0x48>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800833e:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <Get_SerialNum+0x4c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008352:	2208      	movs	r2, #8
 8008354:	4909      	ldr	r1, [pc, #36]	; (800837c <Get_SerialNum+0x50>)
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 f814 	bl	8008384 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800835c:	2204      	movs	r2, #4
 800835e:	4908      	ldr	r1, [pc, #32]	; (8008380 <Get_SerialNum+0x54>)
 8008360:	68b8      	ldr	r0, [r7, #8]
 8008362:	f000 f80f 	bl	8008384 <IntToUnicode>
  }
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	1fff7a10 	.word	0x1fff7a10
 8008374:	1fff7a14 	.word	0x1fff7a14
 8008378:	1fff7a18 	.word	0x1fff7a18
 800837c:	2000018e 	.word	0x2000018e
 8008380:	2000019e 	.word	0x2000019e

08008384 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]
 800839a:	e027      	b.n	80083ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	0f1b      	lsrs	r3, r3, #28
 80083a0:	2b09      	cmp	r3, #9
 80083a2:	d80b      	bhi.n	80083bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	0f1b      	lsrs	r3, r3, #28
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	4619      	mov	r1, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	440b      	add	r3, r1
 80083b4:	3230      	adds	r2, #48	; 0x30
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e00a      	b.n	80083d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	0f1b      	lsrs	r3, r3, #28
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	4619      	mov	r1, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	440b      	add	r3, r1
 80083cc:	3237      	adds	r2, #55	; 0x37
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	3301      	adds	r3, #1
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	4413      	add	r3, r2
 80083e2:	2200      	movs	r2, #0
 80083e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	3301      	adds	r3, #1
 80083ea:	75fb      	strb	r3, [r7, #23]
 80083ec:	7dfa      	ldrb	r2, [r7, #23]
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d3d3      	bcc.n	800839c <IntToUnicode+0x18>
  }
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	; 0x28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	60da      	str	r2, [r3, #12]
 800841a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008424:	d147      	bne.n	80084b6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008426:	2300      	movs	r3, #0
 8008428:	613b      	str	r3, [r7, #16]
 800842a:	4b25      	ldr	r3, [pc, #148]	; (80084c0 <HAL_PCD_MspInit+0xbc>)
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	4a24      	ldr	r2, [pc, #144]	; (80084c0 <HAL_PCD_MspInit+0xbc>)
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	6313      	str	r3, [r2, #48]	; 0x30
 8008436:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <HAL_PCD_MspInit+0xbc>)
 8008438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008448:	2300      	movs	r3, #0
 800844a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800844c:	2300      	movs	r3, #0
 800844e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008450:	f107 0314 	add.w	r3, r7, #20
 8008454:	4619      	mov	r1, r3
 8008456:	481b      	ldr	r0, [pc, #108]	; (80084c4 <HAL_PCD_MspInit+0xc0>)
 8008458:	f7f8 ffe2 	bl	8001420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800845c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008462:	2302      	movs	r3, #2
 8008464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800846a:	2300      	movs	r3, #0
 800846c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800846e:	230a      	movs	r3, #10
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008472:	f107 0314 	add.w	r3, r7, #20
 8008476:	4619      	mov	r1, r3
 8008478:	4812      	ldr	r0, [pc, #72]	; (80084c4 <HAL_PCD_MspInit+0xc0>)
 800847a:	f7f8 ffd1 	bl	8001420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <HAL_PCD_MspInit+0xbc>)
 8008480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008482:	4a0f      	ldr	r2, [pc, #60]	; (80084c0 <HAL_PCD_MspInit+0xbc>)
 8008484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008488:	6353      	str	r3, [r2, #52]	; 0x34
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <HAL_PCD_MspInit+0xbc>)
 8008490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008492:	4a0b      	ldr	r2, [pc, #44]	; (80084c0 <HAL_PCD_MspInit+0xbc>)
 8008494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008498:	6453      	str	r3, [r2, #68]	; 0x44
 800849a:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <HAL_PCD_MspInit+0xbc>)
 800849c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084a6:	2200      	movs	r2, #0
 80084a8:	2100      	movs	r1, #0
 80084aa:	2043      	movs	r0, #67	; 0x43
 80084ac:	f7f8 ff81 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084b0:	2043      	movs	r0, #67	; 0x43
 80084b2:	f7f8 ff9a 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084b6:	bf00      	nop
 80084b8:	3728      	adds	r7, #40	; 0x28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	40023800 	.word	0x40023800
 80084c4:	40020000 	.word	0x40020000

080084c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7fe fcc2 	bl	8006e68 <USBD_LL_SetupStage>
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	6879      	ldr	r1, [r7, #4]
 8008502:	4613      	mov	r3, r2
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	1a9b      	subs	r3, r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	440b      	add	r3, r1
 800850c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	4619      	mov	r1, r3
 8008516:	f7fe fcfc 	bl	8006f12 <USBD_LL_DataOutStage>
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	460b      	mov	r3, r1
 800852c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008534:	78fa      	ldrb	r2, [r7, #3]
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	4613      	mov	r3, r2
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	3348      	adds	r3, #72	; 0x48
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	4619      	mov	r1, r3
 800854a:	f7fe fd45 	bl	8006fd8 <USBD_LL_DataInStage>
}
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fe59 	bl	800721c <USBD_LL_SOF>
}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800857a:	2301      	movs	r3, #1
 800857c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d102      	bne.n	800858c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
 800858a:	e008      	b.n	800859e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	2b02      	cmp	r3, #2
 8008592:	d102      	bne.n	800859a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008594:	2301      	movs	r3, #1
 8008596:	73fb      	strb	r3, [r7, #15]
 8008598:	e001      	b.n	800859e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800859a:	f7f8 fb75 	bl	8000c88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a4:	7bfa      	ldrb	r2, [r7, #15]
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fe fdf9 	bl	80071a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fda5 	bl	8007104 <USBD_LL_Reset>
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fdf4 	bl	80071c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6812      	ldr	r2, [r2, #0]
 80085e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085ea:	f043 0301 	orr.w	r3, r3, #1
 80085ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085f8:	4b04      	ldr	r3, [pc, #16]	; (800860c <HAL_PCD_SuspendCallback+0x48>)
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	4a03      	ldr	r2, [pc, #12]	; (800860c <HAL_PCD_SuspendCallback+0x48>)
 80085fe:	f043 0306 	orr.w	r3, r3, #6
 8008602:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	e000ed00 	.word	0xe000ed00

08008610 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe fde4 	bl	80071ec <USBD_LL_Resume>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fe32 	bl	80072ac <USBD_LL_IsoOUTIncomplete>
}
 8008648:	bf00      	nop
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fdfa 	bl	8007260 <USBD_LL_IsoINIncomplete>
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fe38 	bl	80072f8 <USBD_LL_DevConnected>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fe35 	bl	800730e <USBD_LL_DevDisconnected>
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d13c      	bne.n	8008736 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80086bc:	4a20      	ldr	r2, [pc, #128]	; (8008740 <USBD_LL_Init+0x94>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1e      	ldr	r2, [pc, #120]	; (8008740 <USBD_LL_Init+0x94>)
 80086c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086cc:	4b1c      	ldr	r3, [pc, #112]	; (8008740 <USBD_LL_Init+0x94>)
 80086ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80086d4:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <USBD_LL_Init+0x94>)
 80086d6:	2204      	movs	r2, #4
 80086d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80086da:	4b19      	ldr	r3, [pc, #100]	; (8008740 <USBD_LL_Init+0x94>)
 80086dc:	2202      	movs	r2, #2
 80086de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086e0:	4b17      	ldr	r3, [pc, #92]	; (8008740 <USBD_LL_Init+0x94>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086e6:	4b16      	ldr	r3, [pc, #88]	; (8008740 <USBD_LL_Init+0x94>)
 80086e8:	2202      	movs	r2, #2
 80086ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086ec:	4b14      	ldr	r3, [pc, #80]	; (8008740 <USBD_LL_Init+0x94>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086f2:	4b13      	ldr	r3, [pc, #76]	; (8008740 <USBD_LL_Init+0x94>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086f8:	4b11      	ldr	r3, [pc, #68]	; (8008740 <USBD_LL_Init+0x94>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80086fe:	4b10      	ldr	r3, [pc, #64]	; (8008740 <USBD_LL_Init+0x94>)
 8008700:	2201      	movs	r2, #1
 8008702:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008704:	4b0e      	ldr	r3, [pc, #56]	; (8008740 <USBD_LL_Init+0x94>)
 8008706:	2200      	movs	r2, #0
 8008708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800870a:	480d      	ldr	r0, [pc, #52]	; (8008740 <USBD_LL_Init+0x94>)
 800870c:	f7f9 fe22 	bl	8002354 <HAL_PCD_Init>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008716:	f7f8 fab7 	bl	8000c88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800871a:	2180      	movs	r1, #128	; 0x80
 800871c:	4808      	ldr	r0, [pc, #32]	; (8008740 <USBD_LL_Init+0x94>)
 800871e:	f7fa ff80 	bl	8003622 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008722:	2240      	movs	r2, #64	; 0x40
 8008724:	2100      	movs	r1, #0
 8008726:	4806      	ldr	r0, [pc, #24]	; (8008740 <USBD_LL_Init+0x94>)
 8008728:	f7fa ff34 	bl	8003594 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800872c:	2280      	movs	r2, #128	; 0x80
 800872e:	2101      	movs	r1, #1
 8008730:	4803      	ldr	r0, [pc, #12]	; (8008740 <USBD_LL_Init+0x94>)
 8008732:	f7fa ff2f 	bl	8003594 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20001b68 	.word	0x20001b68

08008744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800875a:	4618      	mov	r0, r3
 800875c:	f7f9 ff17 	bl	800258e <HAL_PCD_Start>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f942 	bl	80089f0 <USBD_Get_USB_Status>
 800876c:	4603      	mov	r3, r0
 800876e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008770:	7bbb      	ldrb	r3, [r7, #14]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	4608      	mov	r0, r1
 8008784:	4611      	mov	r1, r2
 8008786:	461a      	mov	r2, r3
 8008788:	4603      	mov	r3, r0
 800878a:	70fb      	strb	r3, [r7, #3]
 800878c:	460b      	mov	r3, r1
 800878e:	70bb      	strb	r3, [r7, #2]
 8008790:	4613      	mov	r3, r2
 8008792:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087a2:	78bb      	ldrb	r3, [r7, #2]
 80087a4:	883a      	ldrh	r2, [r7, #0]
 80087a6:	78f9      	ldrb	r1, [r7, #3]
 80087a8:	f7fa fafb 	bl	8002da2 <HAL_PCD_EP_Open>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f91c 	bl	80089f0 <USBD_Get_USB_Status>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087e0:	78fa      	ldrb	r2, [r7, #3]
 80087e2:	4611      	mov	r1, r2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fa fb44 	bl	8002e72 <HAL_PCD_EP_Close>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f8fd 	bl	80089f0 <USBD_Get_USB_Status>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7fa fc1c 	bl	8003060 <HAL_PCD_EP_SetStall>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f8de 	bl	80089f0 <USBD_Get_USB_Status>
 8008834:	4603      	mov	r3, r0
 8008836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008838:	7bbb      	ldrb	r3, [r7, #14]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f7fa fc61 	bl	8003128 <HAL_PCD_EP_ClrStall>
 8008866:	4603      	mov	r3, r0
 8008868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f8bf 	bl	80089f0 <USBD_Get_USB_Status>
 8008872:	4603      	mov	r3, r0
 8008874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008876:	7bbb      	ldrb	r3, [r7, #14]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008892:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008898:	2b00      	cmp	r3, #0
 800889a:	da0b      	bge.n	80088b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	4613      	mov	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	1a9b      	subs	r3, r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	440b      	add	r3, r1
 80088ae:	333e      	adds	r3, #62	; 0x3e
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	e00b      	b.n	80088cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ba:	68f9      	ldr	r1, [r7, #12]
 80088bc:	4613      	mov	r3, r2
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	1a9b      	subs	r3, r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80088ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088f2:	78fa      	ldrb	r2, [r7, #3]
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fa fa2e 	bl	8002d58 <HAL_PCD_SetAddress>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f874 	bl	80089f0 <USBD_Get_USB_Status>
 8008908:	4603      	mov	r3, r0
 800890a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890c:	7bbb      	ldrb	r3, [r7, #14]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b086      	sub	sp, #24
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	603b      	str	r3, [r7, #0]
 8008922:	460b      	mov	r3, r1
 8008924:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008934:	7af9      	ldrb	r1, [r7, #11]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	f7fa fb47 	bl	8002fcc <HAL_PCD_EP_Transmit>
 800893e:	4603      	mov	r3, r0
 8008940:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 f853 	bl	80089f0 <USBD_Get_USB_Status>
 800894a:	4603      	mov	r3, r0
 800894c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800894e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	607a      	str	r2, [r7, #4]
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	460b      	mov	r3, r1
 8008966:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008976:	7af9      	ldrb	r1, [r7, #11]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	f7fa fac3 	bl	8002f06 <HAL_PCD_EP_Receive>
 8008980:	4603      	mov	r3, r0
 8008982:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008984:	7dfb      	ldrb	r3, [r7, #23]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f832 	bl	80089f0 <USBD_Get_USB_Status>
 800898c:	4603      	mov	r3, r0
 800898e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008990:	7dbb      	ldrb	r3, [r7, #22]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089ac:	78fa      	ldrb	r2, [r7, #3]
 80089ae:	4611      	mov	r1, r2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fa faf3 	bl	8002f9c <HAL_PCD_EP_GetRxCount>
 80089b6:	4603      	mov	r3, r0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089c8:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <USBD_static_malloc+0x18>)
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000230 	.word	0x20000230

080089dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]

}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d817      	bhi.n	8008a34 <USBD_Get_USB_Status+0x44>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <USBD_Get_USB_Status+0x1c>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a23 	.word	0x08008a23
 8008a14:	08008a29 	.word	0x08008a29
 8008a18:	08008a2f 	.word	0x08008a2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a20:	e00b      	b.n	8008a3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a22:	2303      	movs	r3, #3
 8008a24:	73fb      	strb	r3, [r7, #15]
    break;
 8008a26:	e008      	b.n	8008a3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	e005      	b.n	8008a3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	73fb      	strb	r3, [r7, #15]
    break;
 8008a32:	e002      	b.n	8008a3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a34:	2303      	movs	r3, #3
 8008a36:	73fb      	strb	r3, [r7, #15]
    break;
 8008a38:	bf00      	nop
  }
  return usb_status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <__errno>:
 8008a48:	4b01      	ldr	r3, [pc, #4]	; (8008a50 <__errno+0x8>)
 8008a4a:	6818      	ldr	r0, [r3, #0]
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	200001a8 	.word	0x200001a8

08008a54 <__libc_init_array>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4d0d      	ldr	r5, [pc, #52]	; (8008a8c <__libc_init_array+0x38>)
 8008a58:	4c0d      	ldr	r4, [pc, #52]	; (8008a90 <__libc_init_array+0x3c>)
 8008a5a:	1b64      	subs	r4, r4, r5
 8008a5c:	10a4      	asrs	r4, r4, #2
 8008a5e:	2600      	movs	r6, #0
 8008a60:	42a6      	cmp	r6, r4
 8008a62:	d109      	bne.n	8008a78 <__libc_init_array+0x24>
 8008a64:	4d0b      	ldr	r5, [pc, #44]	; (8008a94 <__libc_init_array+0x40>)
 8008a66:	4c0c      	ldr	r4, [pc, #48]	; (8008a98 <__libc_init_array+0x44>)
 8008a68:	f000 fc62 	bl	8009330 <_init>
 8008a6c:	1b64      	subs	r4, r4, r5
 8008a6e:	10a4      	asrs	r4, r4, #2
 8008a70:	2600      	movs	r6, #0
 8008a72:	42a6      	cmp	r6, r4
 8008a74:	d105      	bne.n	8008a82 <__libc_init_array+0x2e>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7c:	4798      	blx	r3
 8008a7e:	3601      	adds	r6, #1
 8008a80:	e7ee      	b.n	8008a60 <__libc_init_array+0xc>
 8008a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a86:	4798      	blx	r3
 8008a88:	3601      	adds	r6, #1
 8008a8a:	e7f2      	b.n	8008a72 <__libc_init_array+0x1e>
 8008a8c:	0800a01c 	.word	0x0800a01c
 8008a90:	0800a01c 	.word	0x0800a01c
 8008a94:	0800a01c 	.word	0x0800a01c
 8008a98:	0800a020 	.word	0x0800a020

08008a9c <memset>:
 8008a9c:	4402      	add	r2, r0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d100      	bne.n	8008aa6 <memset+0xa>
 8008aa4:	4770      	bx	lr
 8008aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8008aaa:	e7f9      	b.n	8008aa0 <memset+0x4>

08008aac <sniprintf>:
 8008aac:	b40c      	push	{r2, r3}
 8008aae:	b530      	push	{r4, r5, lr}
 8008ab0:	4b17      	ldr	r3, [pc, #92]	; (8008b10 <sniprintf+0x64>)
 8008ab2:	1e0c      	subs	r4, r1, #0
 8008ab4:	681d      	ldr	r5, [r3, #0]
 8008ab6:	b09d      	sub	sp, #116	; 0x74
 8008ab8:	da08      	bge.n	8008acc <sniprintf+0x20>
 8008aba:	238b      	movs	r3, #139	; 0x8b
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac2:	b01d      	add	sp, #116	; 0x74
 8008ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ac8:	b002      	add	sp, #8
 8008aca:	4770      	bx	lr
 8008acc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ad4:	bf14      	ite	ne
 8008ad6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ada:	4623      	moveq	r3, r4
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	9307      	str	r3, [sp, #28]
 8008ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ae4:	9002      	str	r0, [sp, #8]
 8008ae6:	9006      	str	r0, [sp, #24]
 8008ae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008aec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008aee:	ab21      	add	r3, sp, #132	; 0x84
 8008af0:	a902      	add	r1, sp, #8
 8008af2:	4628      	mov	r0, r5
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	f000 f869 	bl	8008bcc <_svfiprintf_r>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	bfbc      	itt	lt
 8008afe:	238b      	movlt	r3, #139	; 0x8b
 8008b00:	602b      	strlt	r3, [r5, #0]
 8008b02:	2c00      	cmp	r4, #0
 8008b04:	d0dd      	beq.n	8008ac2 <sniprintf+0x16>
 8008b06:	9b02      	ldr	r3, [sp, #8]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	e7d9      	b.n	8008ac2 <sniprintf+0x16>
 8008b0e:	bf00      	nop
 8008b10:	200001a8 	.word	0x200001a8

08008b14 <__ssputs_r>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	688e      	ldr	r6, [r1, #8]
 8008b1a:	429e      	cmp	r6, r3
 8008b1c:	4682      	mov	sl, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	4690      	mov	r8, r2
 8008b22:	461f      	mov	r7, r3
 8008b24:	d838      	bhi.n	8008b98 <__ssputs_r+0x84>
 8008b26:	898a      	ldrh	r2, [r1, #12]
 8008b28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b2c:	d032      	beq.n	8008b94 <__ssputs_r+0x80>
 8008b2e:	6825      	ldr	r5, [r4, #0]
 8008b30:	6909      	ldr	r1, [r1, #16]
 8008b32:	eba5 0901 	sub.w	r9, r5, r1
 8008b36:	6965      	ldr	r5, [r4, #20]
 8008b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b40:	3301      	adds	r3, #1
 8008b42:	444b      	add	r3, r9
 8008b44:	106d      	asrs	r5, r5, #1
 8008b46:	429d      	cmp	r5, r3
 8008b48:	bf38      	it	cc
 8008b4a:	461d      	movcc	r5, r3
 8008b4c:	0553      	lsls	r3, r2, #21
 8008b4e:	d531      	bpl.n	8008bb4 <__ssputs_r+0xa0>
 8008b50:	4629      	mov	r1, r5
 8008b52:	f000 fb47 	bl	80091e4 <_malloc_r>
 8008b56:	4606      	mov	r6, r0
 8008b58:	b950      	cbnz	r0, 8008b70 <__ssputs_r+0x5c>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	f8ca 3000 	str.w	r3, [sl]
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b70:	6921      	ldr	r1, [r4, #16]
 8008b72:	464a      	mov	r2, r9
 8008b74:	f000 fabe 	bl	80090f4 <memcpy>
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	6126      	str	r6, [r4, #16]
 8008b86:	6165      	str	r5, [r4, #20]
 8008b88:	444e      	add	r6, r9
 8008b8a:	eba5 0509 	sub.w	r5, r5, r9
 8008b8e:	6026      	str	r6, [r4, #0]
 8008b90:	60a5      	str	r5, [r4, #8]
 8008b92:	463e      	mov	r6, r7
 8008b94:	42be      	cmp	r6, r7
 8008b96:	d900      	bls.n	8008b9a <__ssputs_r+0x86>
 8008b98:	463e      	mov	r6, r7
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	6820      	ldr	r0, [r4, #0]
 8008b9e:	4641      	mov	r1, r8
 8008ba0:	f000 fab6 	bl	8009110 <memmove>
 8008ba4:	68a3      	ldr	r3, [r4, #8]
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	1b9b      	subs	r3, r3, r6
 8008baa:	4432      	add	r2, r6
 8008bac:	60a3      	str	r3, [r4, #8]
 8008bae:	6022      	str	r2, [r4, #0]
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	e7db      	b.n	8008b6c <__ssputs_r+0x58>
 8008bb4:	462a      	mov	r2, r5
 8008bb6:	f000 fb6f 	bl	8009298 <_realloc_r>
 8008bba:	4606      	mov	r6, r0
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d1e1      	bne.n	8008b84 <__ssputs_r+0x70>
 8008bc0:	6921      	ldr	r1, [r4, #16]
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f000 fabe 	bl	8009144 <_free_r>
 8008bc8:	e7c7      	b.n	8008b5a <__ssputs_r+0x46>
	...

08008bcc <_svfiprintf_r>:
 8008bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd0:	4698      	mov	r8, r3
 8008bd2:	898b      	ldrh	r3, [r1, #12]
 8008bd4:	061b      	lsls	r3, r3, #24
 8008bd6:	b09d      	sub	sp, #116	; 0x74
 8008bd8:	4607      	mov	r7, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	4614      	mov	r4, r2
 8008bde:	d50e      	bpl.n	8008bfe <_svfiprintf_r+0x32>
 8008be0:	690b      	ldr	r3, [r1, #16]
 8008be2:	b963      	cbnz	r3, 8008bfe <_svfiprintf_r+0x32>
 8008be4:	2140      	movs	r1, #64	; 0x40
 8008be6:	f000 fafd 	bl	80091e4 <_malloc_r>
 8008bea:	6028      	str	r0, [r5, #0]
 8008bec:	6128      	str	r0, [r5, #16]
 8008bee:	b920      	cbnz	r0, 8008bfa <_svfiprintf_r+0x2e>
 8008bf0:	230c      	movs	r3, #12
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	e0d1      	b.n	8008d9e <_svfiprintf_r+0x1d2>
 8008bfa:	2340      	movs	r3, #64	; 0x40
 8008bfc:	616b      	str	r3, [r5, #20]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	9309      	str	r3, [sp, #36]	; 0x24
 8008c02:	2320      	movs	r3, #32
 8008c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c0c:	2330      	movs	r3, #48	; 0x30
 8008c0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008db8 <_svfiprintf_r+0x1ec>
 8008c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c16:	f04f 0901 	mov.w	r9, #1
 8008c1a:	4623      	mov	r3, r4
 8008c1c:	469a      	mov	sl, r3
 8008c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c22:	b10a      	cbz	r2, 8008c28 <_svfiprintf_r+0x5c>
 8008c24:	2a25      	cmp	r2, #37	; 0x25
 8008c26:	d1f9      	bne.n	8008c1c <_svfiprintf_r+0x50>
 8008c28:	ebba 0b04 	subs.w	fp, sl, r4
 8008c2c:	d00b      	beq.n	8008c46 <_svfiprintf_r+0x7a>
 8008c2e:	465b      	mov	r3, fp
 8008c30:	4622      	mov	r2, r4
 8008c32:	4629      	mov	r1, r5
 8008c34:	4638      	mov	r0, r7
 8008c36:	f7ff ff6d 	bl	8008b14 <__ssputs_r>
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	f000 80aa 	beq.w	8008d94 <_svfiprintf_r+0x1c8>
 8008c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c42:	445a      	add	r2, fp
 8008c44:	9209      	str	r2, [sp, #36]	; 0x24
 8008c46:	f89a 3000 	ldrb.w	r3, [sl]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 80a2 	beq.w	8008d94 <_svfiprintf_r+0x1c8>
 8008c50:	2300      	movs	r3, #0
 8008c52:	f04f 32ff 	mov.w	r2, #4294967295
 8008c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c5a:	f10a 0a01 	add.w	sl, sl, #1
 8008c5e:	9304      	str	r3, [sp, #16]
 8008c60:	9307      	str	r3, [sp, #28]
 8008c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c66:	931a      	str	r3, [sp, #104]	; 0x68
 8008c68:	4654      	mov	r4, sl
 8008c6a:	2205      	movs	r2, #5
 8008c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c70:	4851      	ldr	r0, [pc, #324]	; (8008db8 <_svfiprintf_r+0x1ec>)
 8008c72:	f7f7 fab5 	bl	80001e0 <memchr>
 8008c76:	9a04      	ldr	r2, [sp, #16]
 8008c78:	b9d8      	cbnz	r0, 8008cb2 <_svfiprintf_r+0xe6>
 8008c7a:	06d0      	lsls	r0, r2, #27
 8008c7c:	bf44      	itt	mi
 8008c7e:	2320      	movmi	r3, #32
 8008c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c84:	0711      	lsls	r1, r2, #28
 8008c86:	bf44      	itt	mi
 8008c88:	232b      	movmi	r3, #43	; 0x2b
 8008c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c92:	2b2a      	cmp	r3, #42	; 0x2a
 8008c94:	d015      	beq.n	8008cc2 <_svfiprintf_r+0xf6>
 8008c96:	9a07      	ldr	r2, [sp, #28]
 8008c98:	4654      	mov	r4, sl
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	f04f 0c0a 	mov.w	ip, #10
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ca6:	3b30      	subs	r3, #48	; 0x30
 8008ca8:	2b09      	cmp	r3, #9
 8008caa:	d94e      	bls.n	8008d4a <_svfiprintf_r+0x17e>
 8008cac:	b1b0      	cbz	r0, 8008cdc <_svfiprintf_r+0x110>
 8008cae:	9207      	str	r2, [sp, #28]
 8008cb0:	e014      	b.n	8008cdc <_svfiprintf_r+0x110>
 8008cb2:	eba0 0308 	sub.w	r3, r0, r8
 8008cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	46a2      	mov	sl, r4
 8008cc0:	e7d2      	b.n	8008c68 <_svfiprintf_r+0x9c>
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	1d19      	adds	r1, r3, #4
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	9103      	str	r1, [sp, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	bfbb      	ittet	lt
 8008cce:	425b      	neglt	r3, r3
 8008cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8008cd4:	9307      	strge	r3, [sp, #28]
 8008cd6:	9307      	strlt	r3, [sp, #28]
 8008cd8:	bfb8      	it	lt
 8008cda:	9204      	strlt	r2, [sp, #16]
 8008cdc:	7823      	ldrb	r3, [r4, #0]
 8008cde:	2b2e      	cmp	r3, #46	; 0x2e
 8008ce0:	d10c      	bne.n	8008cfc <_svfiprintf_r+0x130>
 8008ce2:	7863      	ldrb	r3, [r4, #1]
 8008ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce6:	d135      	bne.n	8008d54 <_svfiprintf_r+0x188>
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	1d1a      	adds	r2, r3, #4
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	9203      	str	r2, [sp, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bfb8      	it	lt
 8008cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cf8:	3402      	adds	r4, #2
 8008cfa:	9305      	str	r3, [sp, #20]
 8008cfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008dc8 <_svfiprintf_r+0x1fc>
 8008d00:	7821      	ldrb	r1, [r4, #0]
 8008d02:	2203      	movs	r2, #3
 8008d04:	4650      	mov	r0, sl
 8008d06:	f7f7 fa6b 	bl	80001e0 <memchr>
 8008d0a:	b140      	cbz	r0, 8008d1e <_svfiprintf_r+0x152>
 8008d0c:	2340      	movs	r3, #64	; 0x40
 8008d0e:	eba0 000a 	sub.w	r0, r0, sl
 8008d12:	fa03 f000 	lsl.w	r0, r3, r0
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	4303      	orrs	r3, r0
 8008d1a:	3401      	adds	r4, #1
 8008d1c:	9304      	str	r3, [sp, #16]
 8008d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d22:	4826      	ldr	r0, [pc, #152]	; (8008dbc <_svfiprintf_r+0x1f0>)
 8008d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d28:	2206      	movs	r2, #6
 8008d2a:	f7f7 fa59 	bl	80001e0 <memchr>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d038      	beq.n	8008da4 <_svfiprintf_r+0x1d8>
 8008d32:	4b23      	ldr	r3, [pc, #140]	; (8008dc0 <_svfiprintf_r+0x1f4>)
 8008d34:	bb1b      	cbnz	r3, 8008d7e <_svfiprintf_r+0x1b2>
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	3307      	adds	r3, #7
 8008d3a:	f023 0307 	bic.w	r3, r3, #7
 8008d3e:	3308      	adds	r3, #8
 8008d40:	9303      	str	r3, [sp, #12]
 8008d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d44:	4433      	add	r3, r6
 8008d46:	9309      	str	r3, [sp, #36]	; 0x24
 8008d48:	e767      	b.n	8008c1a <_svfiprintf_r+0x4e>
 8008d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d4e:	460c      	mov	r4, r1
 8008d50:	2001      	movs	r0, #1
 8008d52:	e7a5      	b.n	8008ca0 <_svfiprintf_r+0xd4>
 8008d54:	2300      	movs	r3, #0
 8008d56:	3401      	adds	r4, #1
 8008d58:	9305      	str	r3, [sp, #20]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	f04f 0c0a 	mov.w	ip, #10
 8008d60:	4620      	mov	r0, r4
 8008d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d66:	3a30      	subs	r2, #48	; 0x30
 8008d68:	2a09      	cmp	r2, #9
 8008d6a:	d903      	bls.n	8008d74 <_svfiprintf_r+0x1a8>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0c5      	beq.n	8008cfc <_svfiprintf_r+0x130>
 8008d70:	9105      	str	r1, [sp, #20]
 8008d72:	e7c3      	b.n	8008cfc <_svfiprintf_r+0x130>
 8008d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d78:	4604      	mov	r4, r0
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e7f0      	b.n	8008d60 <_svfiprintf_r+0x194>
 8008d7e:	ab03      	add	r3, sp, #12
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	462a      	mov	r2, r5
 8008d84:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <_svfiprintf_r+0x1f8>)
 8008d86:	a904      	add	r1, sp, #16
 8008d88:	4638      	mov	r0, r7
 8008d8a:	f3af 8000 	nop.w
 8008d8e:	1c42      	adds	r2, r0, #1
 8008d90:	4606      	mov	r6, r0
 8008d92:	d1d6      	bne.n	8008d42 <_svfiprintf_r+0x176>
 8008d94:	89ab      	ldrh	r3, [r5, #12]
 8008d96:	065b      	lsls	r3, r3, #25
 8008d98:	f53f af2c 	bmi.w	8008bf4 <_svfiprintf_r+0x28>
 8008d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d9e:	b01d      	add	sp, #116	; 0x74
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da4:	ab03      	add	r3, sp, #12
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	462a      	mov	r2, r5
 8008daa:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <_svfiprintf_r+0x1f8>)
 8008dac:	a904      	add	r1, sp, #16
 8008dae:	4638      	mov	r0, r7
 8008db0:	f000 f87a 	bl	8008ea8 <_printf_i>
 8008db4:	e7eb      	b.n	8008d8e <_svfiprintf_r+0x1c2>
 8008db6:	bf00      	nop
 8008db8:	08009fe0 	.word	0x08009fe0
 8008dbc:	08009fea 	.word	0x08009fea
 8008dc0:	00000000 	.word	0x00000000
 8008dc4:	08008b15 	.word	0x08008b15
 8008dc8:	08009fe6 	.word	0x08009fe6

08008dcc <_printf_common>:
 8008dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	4699      	mov	r9, r3
 8008dd4:	688a      	ldr	r2, [r1, #8]
 8008dd6:	690b      	ldr	r3, [r1, #16]
 8008dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	bfb8      	it	lt
 8008de0:	4613      	movlt	r3, r2
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008de8:	4607      	mov	r7, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b10a      	cbz	r2, 8008df2 <_printf_common+0x26>
 8008dee:	3301      	adds	r3, #1
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	0699      	lsls	r1, r3, #26
 8008df6:	bf42      	ittt	mi
 8008df8:	6833      	ldrmi	r3, [r6, #0]
 8008dfa:	3302      	addmi	r3, #2
 8008dfc:	6033      	strmi	r3, [r6, #0]
 8008dfe:	6825      	ldr	r5, [r4, #0]
 8008e00:	f015 0506 	ands.w	r5, r5, #6
 8008e04:	d106      	bne.n	8008e14 <_printf_common+0x48>
 8008e06:	f104 0a19 	add.w	sl, r4, #25
 8008e0a:	68e3      	ldr	r3, [r4, #12]
 8008e0c:	6832      	ldr	r2, [r6, #0]
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	dc26      	bgt.n	8008e62 <_printf_common+0x96>
 8008e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e18:	1e13      	subs	r3, r2, #0
 8008e1a:	6822      	ldr	r2, [r4, #0]
 8008e1c:	bf18      	it	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	0692      	lsls	r2, r2, #26
 8008e22:	d42b      	bmi.n	8008e7c <_printf_common+0xb0>
 8008e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	47c0      	blx	r8
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d01e      	beq.n	8008e70 <_printf_common+0xa4>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	68e5      	ldr	r5, [r4, #12]
 8008e36:	6832      	ldr	r2, [r6, #0]
 8008e38:	f003 0306 	and.w	r3, r3, #6
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	bf08      	it	eq
 8008e40:	1aad      	subeq	r5, r5, r2
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	6922      	ldr	r2, [r4, #16]
 8008e46:	bf0c      	ite	eq
 8008e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e4c:	2500      	movne	r5, #0
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	bfc4      	itt	gt
 8008e52:	1a9b      	subgt	r3, r3, r2
 8008e54:	18ed      	addgt	r5, r5, r3
 8008e56:	2600      	movs	r6, #0
 8008e58:	341a      	adds	r4, #26
 8008e5a:	42b5      	cmp	r5, r6
 8008e5c:	d11a      	bne.n	8008e94 <_printf_common+0xc8>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e008      	b.n	8008e74 <_printf_common+0xa8>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4652      	mov	r2, sl
 8008e66:	4649      	mov	r1, r9
 8008e68:	4638      	mov	r0, r7
 8008e6a:	47c0      	blx	r8
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d103      	bne.n	8008e78 <_printf_common+0xac>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	3501      	adds	r5, #1
 8008e7a:	e7c6      	b.n	8008e0a <_printf_common+0x3e>
 8008e7c:	18e1      	adds	r1, r4, r3
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	2030      	movs	r0, #48	; 0x30
 8008e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e86:	4422      	add	r2, r4
 8008e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e90:	3302      	adds	r3, #2
 8008e92:	e7c7      	b.n	8008e24 <_printf_common+0x58>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4622      	mov	r2, r4
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c0      	blx	r8
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d0e6      	beq.n	8008e70 <_printf_common+0xa4>
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7d9      	b.n	8008e5a <_printf_common+0x8e>
	...

08008ea8 <_printf_i>:
 8008ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	460c      	mov	r4, r1
 8008eae:	4691      	mov	r9, r2
 8008eb0:	7e27      	ldrb	r7, [r4, #24]
 8008eb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008eb4:	2f78      	cmp	r7, #120	; 0x78
 8008eb6:	4680      	mov	r8, r0
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ebe:	d807      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ec0:	2f62      	cmp	r7, #98	; 0x62
 8008ec2:	d80a      	bhi.n	8008eda <_printf_i+0x32>
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	f000 80d8 	beq.w	800907a <_printf_i+0x1d2>
 8008eca:	2f58      	cmp	r7, #88	; 0x58
 8008ecc:	f000 80a3 	beq.w	8009016 <_printf_i+0x16e>
 8008ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ed8:	e03a      	b.n	8008f50 <_printf_i+0xa8>
 8008eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ede:	2b15      	cmp	r3, #21
 8008ee0:	d8f6      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ee2:	a001      	add	r0, pc, #4	; (adr r0, 8008ee8 <_printf_i+0x40>)
 8008ee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ee8:	08008f41 	.word	0x08008f41
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008ed1 	.word	0x08008ed1
 8008ef4:	08008ed1 	.word	0x08008ed1
 8008ef8:	08008ed1 	.word	0x08008ed1
 8008efc:	08008ed1 	.word	0x08008ed1
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008ed1 	.word	0x08008ed1
 8008f08:	08008ed1 	.word	0x08008ed1
 8008f0c:	08008ed1 	.word	0x08008ed1
 8008f10:	08008ed1 	.word	0x08008ed1
 8008f14:	08009061 	.word	0x08009061
 8008f18:	08008f85 	.word	0x08008f85
 8008f1c:	08009043 	.word	0x08009043
 8008f20:	08008ed1 	.word	0x08008ed1
 8008f24:	08008ed1 	.word	0x08008ed1
 8008f28:	08009083 	.word	0x08009083
 8008f2c:	08008ed1 	.word	0x08008ed1
 8008f30:	08008f85 	.word	0x08008f85
 8008f34:	08008ed1 	.word	0x08008ed1
 8008f38:	08008ed1 	.word	0x08008ed1
 8008f3c:	0800904b 	.word	0x0800904b
 8008f40:	680b      	ldr	r3, [r1, #0]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	600a      	str	r2, [r1, #0]
 8008f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f50:	2301      	movs	r3, #1
 8008f52:	e0a3      	b.n	800909c <_printf_i+0x1f4>
 8008f54:	6825      	ldr	r5, [r4, #0]
 8008f56:	6808      	ldr	r0, [r1, #0]
 8008f58:	062e      	lsls	r6, r5, #24
 8008f5a:	f100 0304 	add.w	r3, r0, #4
 8008f5e:	d50a      	bpl.n	8008f76 <_printf_i+0xce>
 8008f60:	6805      	ldr	r5, [r0, #0]
 8008f62:	600b      	str	r3, [r1, #0]
 8008f64:	2d00      	cmp	r5, #0
 8008f66:	da03      	bge.n	8008f70 <_printf_i+0xc8>
 8008f68:	232d      	movs	r3, #45	; 0x2d
 8008f6a:	426d      	negs	r5, r5
 8008f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f70:	485e      	ldr	r0, [pc, #376]	; (80090ec <_printf_i+0x244>)
 8008f72:	230a      	movs	r3, #10
 8008f74:	e019      	b.n	8008faa <_printf_i+0x102>
 8008f76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f7a:	6805      	ldr	r5, [r0, #0]
 8008f7c:	600b      	str	r3, [r1, #0]
 8008f7e:	bf18      	it	ne
 8008f80:	b22d      	sxthne	r5, r5
 8008f82:	e7ef      	b.n	8008f64 <_printf_i+0xbc>
 8008f84:	680b      	ldr	r3, [r1, #0]
 8008f86:	6825      	ldr	r5, [r4, #0]
 8008f88:	1d18      	adds	r0, r3, #4
 8008f8a:	6008      	str	r0, [r1, #0]
 8008f8c:	0628      	lsls	r0, r5, #24
 8008f8e:	d501      	bpl.n	8008f94 <_printf_i+0xec>
 8008f90:	681d      	ldr	r5, [r3, #0]
 8008f92:	e002      	b.n	8008f9a <_printf_i+0xf2>
 8008f94:	0669      	lsls	r1, r5, #25
 8008f96:	d5fb      	bpl.n	8008f90 <_printf_i+0xe8>
 8008f98:	881d      	ldrh	r5, [r3, #0]
 8008f9a:	4854      	ldr	r0, [pc, #336]	; (80090ec <_printf_i+0x244>)
 8008f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8008f9e:	bf0c      	ite	eq
 8008fa0:	2308      	moveq	r3, #8
 8008fa2:	230a      	movne	r3, #10
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008faa:	6866      	ldr	r6, [r4, #4]
 8008fac:	60a6      	str	r6, [r4, #8]
 8008fae:	2e00      	cmp	r6, #0
 8008fb0:	bfa2      	ittt	ge
 8008fb2:	6821      	ldrge	r1, [r4, #0]
 8008fb4:	f021 0104 	bicge.w	r1, r1, #4
 8008fb8:	6021      	strge	r1, [r4, #0]
 8008fba:	b90d      	cbnz	r5, 8008fc0 <_printf_i+0x118>
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	d04d      	beq.n	800905c <_printf_i+0x1b4>
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8008fca:	5dc7      	ldrb	r7, [r0, r7]
 8008fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fd0:	462f      	mov	r7, r5
 8008fd2:	42bb      	cmp	r3, r7
 8008fd4:	460d      	mov	r5, r1
 8008fd6:	d9f4      	bls.n	8008fc2 <_printf_i+0x11a>
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d10b      	bne.n	8008ff4 <_printf_i+0x14c>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	07df      	lsls	r7, r3, #31
 8008fe0:	d508      	bpl.n	8008ff4 <_printf_i+0x14c>
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6861      	ldr	r1, [r4, #4]
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	bfde      	ittt	le
 8008fea:	2330      	movle	r3, #48	; 0x30
 8008fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ff0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ff4:	1b92      	subs	r2, r2, r6
 8008ff6:	6122      	str	r2, [r4, #16]
 8008ff8:	f8cd a000 	str.w	sl, [sp]
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	aa03      	add	r2, sp, #12
 8009000:	4621      	mov	r1, r4
 8009002:	4640      	mov	r0, r8
 8009004:	f7ff fee2 	bl	8008dcc <_printf_common>
 8009008:	3001      	adds	r0, #1
 800900a:	d14c      	bne.n	80090a6 <_printf_i+0x1fe>
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	b004      	add	sp, #16
 8009012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009016:	4835      	ldr	r0, [pc, #212]	; (80090ec <_printf_i+0x244>)
 8009018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	680e      	ldr	r6, [r1, #0]
 8009020:	061f      	lsls	r7, r3, #24
 8009022:	f856 5b04 	ldr.w	r5, [r6], #4
 8009026:	600e      	str	r6, [r1, #0]
 8009028:	d514      	bpl.n	8009054 <_printf_i+0x1ac>
 800902a:	07d9      	lsls	r1, r3, #31
 800902c:	bf44      	itt	mi
 800902e:	f043 0320 	orrmi.w	r3, r3, #32
 8009032:	6023      	strmi	r3, [r4, #0]
 8009034:	b91d      	cbnz	r5, 800903e <_printf_i+0x196>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	f023 0320 	bic.w	r3, r3, #32
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	2310      	movs	r3, #16
 8009040:	e7b0      	b.n	8008fa4 <_printf_i+0xfc>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	f043 0320 	orr.w	r3, r3, #32
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	2378      	movs	r3, #120	; 0x78
 800904c:	4828      	ldr	r0, [pc, #160]	; (80090f0 <_printf_i+0x248>)
 800904e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009052:	e7e3      	b.n	800901c <_printf_i+0x174>
 8009054:	065e      	lsls	r6, r3, #25
 8009056:	bf48      	it	mi
 8009058:	b2ad      	uxthmi	r5, r5
 800905a:	e7e6      	b.n	800902a <_printf_i+0x182>
 800905c:	4616      	mov	r6, r2
 800905e:	e7bb      	b.n	8008fd8 <_printf_i+0x130>
 8009060:	680b      	ldr	r3, [r1, #0]
 8009062:	6826      	ldr	r6, [r4, #0]
 8009064:	6960      	ldr	r0, [r4, #20]
 8009066:	1d1d      	adds	r5, r3, #4
 8009068:	600d      	str	r5, [r1, #0]
 800906a:	0635      	lsls	r5, r6, #24
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	d501      	bpl.n	8009074 <_printf_i+0x1cc>
 8009070:	6018      	str	r0, [r3, #0]
 8009072:	e002      	b.n	800907a <_printf_i+0x1d2>
 8009074:	0671      	lsls	r1, r6, #25
 8009076:	d5fb      	bpl.n	8009070 <_printf_i+0x1c8>
 8009078:	8018      	strh	r0, [r3, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	6123      	str	r3, [r4, #16]
 800907e:	4616      	mov	r6, r2
 8009080:	e7ba      	b.n	8008ff8 <_printf_i+0x150>
 8009082:	680b      	ldr	r3, [r1, #0]
 8009084:	1d1a      	adds	r2, r3, #4
 8009086:	600a      	str	r2, [r1, #0]
 8009088:	681e      	ldr	r6, [r3, #0]
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	2100      	movs	r1, #0
 800908e:	4630      	mov	r0, r6
 8009090:	f7f7 f8a6 	bl	80001e0 <memchr>
 8009094:	b108      	cbz	r0, 800909a <_printf_i+0x1f2>
 8009096:	1b80      	subs	r0, r0, r6
 8009098:	6060      	str	r0, [r4, #4]
 800909a:	6863      	ldr	r3, [r4, #4]
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	2300      	movs	r3, #0
 80090a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a4:	e7a8      	b.n	8008ff8 <_printf_i+0x150>
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	4632      	mov	r2, r6
 80090aa:	4649      	mov	r1, r9
 80090ac:	4640      	mov	r0, r8
 80090ae:	47d0      	blx	sl
 80090b0:	3001      	adds	r0, #1
 80090b2:	d0ab      	beq.n	800900c <_printf_i+0x164>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	079b      	lsls	r3, r3, #30
 80090b8:	d413      	bmi.n	80090e2 <_printf_i+0x23a>
 80090ba:	68e0      	ldr	r0, [r4, #12]
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	4298      	cmp	r0, r3
 80090c0:	bfb8      	it	lt
 80090c2:	4618      	movlt	r0, r3
 80090c4:	e7a4      	b.n	8009010 <_printf_i+0x168>
 80090c6:	2301      	movs	r3, #1
 80090c8:	4632      	mov	r2, r6
 80090ca:	4649      	mov	r1, r9
 80090cc:	4640      	mov	r0, r8
 80090ce:	47d0      	blx	sl
 80090d0:	3001      	adds	r0, #1
 80090d2:	d09b      	beq.n	800900c <_printf_i+0x164>
 80090d4:	3501      	adds	r5, #1
 80090d6:	68e3      	ldr	r3, [r4, #12]
 80090d8:	9903      	ldr	r1, [sp, #12]
 80090da:	1a5b      	subs	r3, r3, r1
 80090dc:	42ab      	cmp	r3, r5
 80090de:	dcf2      	bgt.n	80090c6 <_printf_i+0x21e>
 80090e0:	e7eb      	b.n	80090ba <_printf_i+0x212>
 80090e2:	2500      	movs	r5, #0
 80090e4:	f104 0619 	add.w	r6, r4, #25
 80090e8:	e7f5      	b.n	80090d6 <_printf_i+0x22e>
 80090ea:	bf00      	nop
 80090ec:	08009ff1 	.word	0x08009ff1
 80090f0:	0800a002 	.word	0x0800a002

080090f4 <memcpy>:
 80090f4:	440a      	add	r2, r1
 80090f6:	4291      	cmp	r1, r2
 80090f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090fc:	d100      	bne.n	8009100 <memcpy+0xc>
 80090fe:	4770      	bx	lr
 8009100:	b510      	push	{r4, lr}
 8009102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800910a:	4291      	cmp	r1, r2
 800910c:	d1f9      	bne.n	8009102 <memcpy+0xe>
 800910e:	bd10      	pop	{r4, pc}

08009110 <memmove>:
 8009110:	4288      	cmp	r0, r1
 8009112:	b510      	push	{r4, lr}
 8009114:	eb01 0402 	add.w	r4, r1, r2
 8009118:	d902      	bls.n	8009120 <memmove+0x10>
 800911a:	4284      	cmp	r4, r0
 800911c:	4623      	mov	r3, r4
 800911e:	d807      	bhi.n	8009130 <memmove+0x20>
 8009120:	1e43      	subs	r3, r0, #1
 8009122:	42a1      	cmp	r1, r4
 8009124:	d008      	beq.n	8009138 <memmove+0x28>
 8009126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800912a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800912e:	e7f8      	b.n	8009122 <memmove+0x12>
 8009130:	4402      	add	r2, r0
 8009132:	4601      	mov	r1, r0
 8009134:	428a      	cmp	r2, r1
 8009136:	d100      	bne.n	800913a <memmove+0x2a>
 8009138:	bd10      	pop	{r4, pc}
 800913a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800913e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009142:	e7f7      	b.n	8009134 <memmove+0x24>

08009144 <_free_r>:
 8009144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009146:	2900      	cmp	r1, #0
 8009148:	d048      	beq.n	80091dc <_free_r+0x98>
 800914a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914e:	9001      	str	r0, [sp, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f1a1 0404 	sub.w	r4, r1, #4
 8009156:	bfb8      	it	lt
 8009158:	18e4      	addlt	r4, r4, r3
 800915a:	f000 f8d3 	bl	8009304 <__malloc_lock>
 800915e:	4a20      	ldr	r2, [pc, #128]	; (80091e0 <_free_r+0x9c>)
 8009160:	9801      	ldr	r0, [sp, #4]
 8009162:	6813      	ldr	r3, [r2, #0]
 8009164:	4615      	mov	r5, r2
 8009166:	b933      	cbnz	r3, 8009176 <_free_r+0x32>
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	6014      	str	r4, [r2, #0]
 800916c:	b003      	add	sp, #12
 800916e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009172:	f000 b8cd 	b.w	8009310 <__malloc_unlock>
 8009176:	42a3      	cmp	r3, r4
 8009178:	d90b      	bls.n	8009192 <_free_r+0x4e>
 800917a:	6821      	ldr	r1, [r4, #0]
 800917c:	1862      	adds	r2, r4, r1
 800917e:	4293      	cmp	r3, r2
 8009180:	bf04      	itt	eq
 8009182:	681a      	ldreq	r2, [r3, #0]
 8009184:	685b      	ldreq	r3, [r3, #4]
 8009186:	6063      	str	r3, [r4, #4]
 8009188:	bf04      	itt	eq
 800918a:	1852      	addeq	r2, r2, r1
 800918c:	6022      	streq	r2, [r4, #0]
 800918e:	602c      	str	r4, [r5, #0]
 8009190:	e7ec      	b.n	800916c <_free_r+0x28>
 8009192:	461a      	mov	r2, r3
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b10b      	cbz	r3, 800919c <_free_r+0x58>
 8009198:	42a3      	cmp	r3, r4
 800919a:	d9fa      	bls.n	8009192 <_free_r+0x4e>
 800919c:	6811      	ldr	r1, [r2, #0]
 800919e:	1855      	adds	r5, r2, r1
 80091a0:	42a5      	cmp	r5, r4
 80091a2:	d10b      	bne.n	80091bc <_free_r+0x78>
 80091a4:	6824      	ldr	r4, [r4, #0]
 80091a6:	4421      	add	r1, r4
 80091a8:	1854      	adds	r4, r2, r1
 80091aa:	42a3      	cmp	r3, r4
 80091ac:	6011      	str	r1, [r2, #0]
 80091ae:	d1dd      	bne.n	800916c <_free_r+0x28>
 80091b0:	681c      	ldr	r4, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	6053      	str	r3, [r2, #4]
 80091b6:	4421      	add	r1, r4
 80091b8:	6011      	str	r1, [r2, #0]
 80091ba:	e7d7      	b.n	800916c <_free_r+0x28>
 80091bc:	d902      	bls.n	80091c4 <_free_r+0x80>
 80091be:	230c      	movs	r3, #12
 80091c0:	6003      	str	r3, [r0, #0]
 80091c2:	e7d3      	b.n	800916c <_free_r+0x28>
 80091c4:	6825      	ldr	r5, [r4, #0]
 80091c6:	1961      	adds	r1, r4, r5
 80091c8:	428b      	cmp	r3, r1
 80091ca:	bf04      	itt	eq
 80091cc:	6819      	ldreq	r1, [r3, #0]
 80091ce:	685b      	ldreq	r3, [r3, #4]
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	bf04      	itt	eq
 80091d4:	1949      	addeq	r1, r1, r5
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	6054      	str	r4, [r2, #4]
 80091da:	e7c7      	b.n	800916c <_free_r+0x28>
 80091dc:	b003      	add	sp, #12
 80091de:	bd30      	pop	{r4, r5, pc}
 80091e0:	20000450 	.word	0x20000450

080091e4 <_malloc_r>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	1ccd      	adds	r5, r1, #3
 80091e8:	f025 0503 	bic.w	r5, r5, #3
 80091ec:	3508      	adds	r5, #8
 80091ee:	2d0c      	cmp	r5, #12
 80091f0:	bf38      	it	cc
 80091f2:	250c      	movcc	r5, #12
 80091f4:	2d00      	cmp	r5, #0
 80091f6:	4606      	mov	r6, r0
 80091f8:	db01      	blt.n	80091fe <_malloc_r+0x1a>
 80091fa:	42a9      	cmp	r1, r5
 80091fc:	d903      	bls.n	8009206 <_malloc_r+0x22>
 80091fe:	230c      	movs	r3, #12
 8009200:	6033      	str	r3, [r6, #0]
 8009202:	2000      	movs	r0, #0
 8009204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009206:	f000 f87d 	bl	8009304 <__malloc_lock>
 800920a:	4921      	ldr	r1, [pc, #132]	; (8009290 <_malloc_r+0xac>)
 800920c:	680a      	ldr	r2, [r1, #0]
 800920e:	4614      	mov	r4, r2
 8009210:	b99c      	cbnz	r4, 800923a <_malloc_r+0x56>
 8009212:	4f20      	ldr	r7, [pc, #128]	; (8009294 <_malloc_r+0xb0>)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	b923      	cbnz	r3, 8009222 <_malloc_r+0x3e>
 8009218:	4621      	mov	r1, r4
 800921a:	4630      	mov	r0, r6
 800921c:	f000 f862 	bl	80092e4 <_sbrk_r>
 8009220:	6038      	str	r0, [r7, #0]
 8009222:	4629      	mov	r1, r5
 8009224:	4630      	mov	r0, r6
 8009226:	f000 f85d 	bl	80092e4 <_sbrk_r>
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	d123      	bne.n	8009276 <_malloc_r+0x92>
 800922e:	230c      	movs	r3, #12
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	4630      	mov	r0, r6
 8009234:	f000 f86c 	bl	8009310 <__malloc_unlock>
 8009238:	e7e3      	b.n	8009202 <_malloc_r+0x1e>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	1b5b      	subs	r3, r3, r5
 800923e:	d417      	bmi.n	8009270 <_malloc_r+0x8c>
 8009240:	2b0b      	cmp	r3, #11
 8009242:	d903      	bls.n	800924c <_malloc_r+0x68>
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	441c      	add	r4, r3
 8009248:	6025      	str	r5, [r4, #0]
 800924a:	e004      	b.n	8009256 <_malloc_r+0x72>
 800924c:	6863      	ldr	r3, [r4, #4]
 800924e:	42a2      	cmp	r2, r4
 8009250:	bf0c      	ite	eq
 8009252:	600b      	streq	r3, [r1, #0]
 8009254:	6053      	strne	r3, [r2, #4]
 8009256:	4630      	mov	r0, r6
 8009258:	f000 f85a 	bl	8009310 <__malloc_unlock>
 800925c:	f104 000b 	add.w	r0, r4, #11
 8009260:	1d23      	adds	r3, r4, #4
 8009262:	f020 0007 	bic.w	r0, r0, #7
 8009266:	1ac2      	subs	r2, r0, r3
 8009268:	d0cc      	beq.n	8009204 <_malloc_r+0x20>
 800926a:	1a1b      	subs	r3, r3, r0
 800926c:	50a3      	str	r3, [r4, r2]
 800926e:	e7c9      	b.n	8009204 <_malloc_r+0x20>
 8009270:	4622      	mov	r2, r4
 8009272:	6864      	ldr	r4, [r4, #4]
 8009274:	e7cc      	b.n	8009210 <_malloc_r+0x2c>
 8009276:	1cc4      	adds	r4, r0, #3
 8009278:	f024 0403 	bic.w	r4, r4, #3
 800927c:	42a0      	cmp	r0, r4
 800927e:	d0e3      	beq.n	8009248 <_malloc_r+0x64>
 8009280:	1a21      	subs	r1, r4, r0
 8009282:	4630      	mov	r0, r6
 8009284:	f000 f82e 	bl	80092e4 <_sbrk_r>
 8009288:	3001      	adds	r0, #1
 800928a:	d1dd      	bne.n	8009248 <_malloc_r+0x64>
 800928c:	e7cf      	b.n	800922e <_malloc_r+0x4a>
 800928e:	bf00      	nop
 8009290:	20000450 	.word	0x20000450
 8009294:	20000454 	.word	0x20000454

08009298 <_realloc_r>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	4607      	mov	r7, r0
 800929c:	4614      	mov	r4, r2
 800929e:	460e      	mov	r6, r1
 80092a0:	b921      	cbnz	r1, 80092ac <_realloc_r+0x14>
 80092a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092a6:	4611      	mov	r1, r2
 80092a8:	f7ff bf9c 	b.w	80091e4 <_malloc_r>
 80092ac:	b922      	cbnz	r2, 80092b8 <_realloc_r+0x20>
 80092ae:	f7ff ff49 	bl	8009144 <_free_r>
 80092b2:	4625      	mov	r5, r4
 80092b4:	4628      	mov	r0, r5
 80092b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b8:	f000 f830 	bl	800931c <_malloc_usable_size_r>
 80092bc:	42a0      	cmp	r0, r4
 80092be:	d20f      	bcs.n	80092e0 <_realloc_r+0x48>
 80092c0:	4621      	mov	r1, r4
 80092c2:	4638      	mov	r0, r7
 80092c4:	f7ff ff8e 	bl	80091e4 <_malloc_r>
 80092c8:	4605      	mov	r5, r0
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d0f2      	beq.n	80092b4 <_realloc_r+0x1c>
 80092ce:	4631      	mov	r1, r6
 80092d0:	4622      	mov	r2, r4
 80092d2:	f7ff ff0f 	bl	80090f4 <memcpy>
 80092d6:	4631      	mov	r1, r6
 80092d8:	4638      	mov	r0, r7
 80092da:	f7ff ff33 	bl	8009144 <_free_r>
 80092de:	e7e9      	b.n	80092b4 <_realloc_r+0x1c>
 80092e0:	4635      	mov	r5, r6
 80092e2:	e7e7      	b.n	80092b4 <_realloc_r+0x1c>

080092e4 <_sbrk_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4d06      	ldr	r5, [pc, #24]	; (8009300 <_sbrk_r+0x1c>)
 80092e8:	2300      	movs	r3, #0
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	f7f7 fe7c 	bl	8000fec <_sbrk>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_sbrk_r+0x1a>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_sbrk_r+0x1a>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	20001f70 	.word	0x20001f70

08009304 <__malloc_lock>:
 8009304:	4801      	ldr	r0, [pc, #4]	; (800930c <__malloc_lock+0x8>)
 8009306:	f000 b811 	b.w	800932c <__retarget_lock_acquire_recursive>
 800930a:	bf00      	nop
 800930c:	20001f78 	.word	0x20001f78

08009310 <__malloc_unlock>:
 8009310:	4801      	ldr	r0, [pc, #4]	; (8009318 <__malloc_unlock+0x8>)
 8009312:	f000 b80c 	b.w	800932e <__retarget_lock_release_recursive>
 8009316:	bf00      	nop
 8009318:	20001f78 	.word	0x20001f78

0800931c <_malloc_usable_size_r>:
 800931c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009320:	1f18      	subs	r0, r3, #4
 8009322:	2b00      	cmp	r3, #0
 8009324:	bfbc      	itt	lt
 8009326:	580b      	ldrlt	r3, [r1, r0]
 8009328:	18c0      	addlt	r0, r0, r3
 800932a:	4770      	bx	lr

0800932c <__retarget_lock_acquire_recursive>:
 800932c:	4770      	bx	lr

0800932e <__retarget_lock_release_recursive>:
 800932e:	4770      	bx	lr

08009330 <_init>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	bf00      	nop
 8009334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009336:	bc08      	pop	{r3}
 8009338:	469e      	mov	lr, r3
 800933a:	4770      	bx	lr

0800933c <_fini>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	bf00      	nop
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr
