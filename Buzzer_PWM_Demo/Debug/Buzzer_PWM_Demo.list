
Buzzer_PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000928c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0e8  0800a0e8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0e8  0800a0e8  0001a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0f0  0800a0f0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0f0  0800a0f0  0001a0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0f4  0800a0f4  0001a0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a0f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d6c  2000020c  0800a304  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f78  0800a304  00021f78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019752  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba6  00000000  00000000  0003998e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0003d538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  0003ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025861  00000000  00000000  000401c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4cf  00000000  00000000  00065a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2cc6  00000000  00000000  00082ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155bbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065b8  00000000  00000000  00155c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009404 	.word	0x08009404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08009404 	.word	0x08009404

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8000584:	b084      	sub	sp, #16
 8000586:	b580      	push	{r7, lr}
 8000588:	b088      	sub	sp, #32
 800058a:	af00      	add	r7, sp, #0
 800058c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000590:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8000594:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000596:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800059a:	f004 f823 	bl	80045e4 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 800059e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80005a2:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80005a4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005a8:	f003 fefa 	bl	80043a0 <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ac:	2360      	movs	r3, #96	; 0x60
 80005ae:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80005b0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80005b4:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80005c2:	4619      	mov	r1, r3
 80005c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005c8:	f004 f87c 	bl	80046c4 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80005cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005ce:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005d2:	f003 ff3f 	bl	8004454 <HAL_TIM_PWM_Start>
}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005e0:	b004      	add	sp, #16
 80005e2:	4770      	bx	lr

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e6:	b099      	sub	sp, #100	; 0x64
 80005e8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fd77 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f8c9 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fa51 	bl	8000a98 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f6:	f000 f947 	bl	8000888 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005fa:	f000 f973 	bl	80008e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005fe:	f000 f9a1 	bl	8000944 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000602:	f000 f9d5 	bl	80009b0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000606:	f007 fd21 	bl	800804c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	4853      	ldr	r0, [pc, #332]	; (800075c <main+0x178>)
 800060e:	f003 ff21 	bl	8004454 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  melodyCount = sizeof(melodySizes)/ sizeof(uint32_t);
 8000612:	2305      	movs	r3, #5
 8000614:	60bb      	str	r3, [r7, #8]

	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e085      	b.n	8000728 <main+0x144>
	  {
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	e069      	b.n	80006f6 <main+0x112>
	  	  {
//		  	  buzzerSetNewFrequency(melody[melodyIndex][noteIndex]);
			  NoteFreq = melody[melodyIndex][noteIndex];
 8000622:	4a4f      	ldr	r2, [pc, #316]	; (8000760 <main+0x17c>)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	60fb      	str	r3, [r7, #12]
			  if (NoteFreq == 0) NoteFreq = 1;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <main+0x5a>
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]

			  ARR_period = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 800063e:	4a49      	ldr	r2, [pc, #292]	; (8000764 <main+0x180>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	fb92 f3f3 	sdiv	r3, r2, r3
 8000646:	607b      	str	r3, [r7, #4]
			  setPWM(htim2, TIM_CHANNEL_1, ARR_period, ARR_period/2);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	b29a      	uxth	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0fd9      	lsrs	r1, r3, #31
 8000650:	440b      	add	r3, r1
 8000652:	105b      	asrs	r3, r3, #1
 8000654:	b29b      	uxth	r3, r3
 8000656:	4e41      	ldr	r6, [pc, #260]	; (800075c <main+0x178>)
 8000658:	9310      	str	r3, [sp, #64]	; 0x40
 800065a:	920f      	str	r2, [sp, #60]	; 0x3c
 800065c:	2300      	movs	r3, #0
 800065e:	930e      	str	r3, [sp, #56]	; 0x38
 8000660:	466d      	mov	r5, sp
 8000662:	f106 0410 	add.w	r4, r6, #16
 8000666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000676:	e885 0003 	stmia.w	r5, {r0, r1}
 800067a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800067e:	f7ff ff81 	bl	8000584 <setPWM>

			  Delaymsecs = noteDurations[melodyIndex][noteIndex] * melodySlowfactor[melodyIndex];
 8000682:	4a39      	ldr	r2, [pc, #228]	; (8000768 <main+0x184>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4936      	ldr	r1, [pc, #216]	; (800076c <main+0x188>)
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	603b      	str	r3, [r7, #0]

			  snprintf (SendBuffer,BUFSIZE,"Melody[%d],Note #%d F=%d Hz Duration:%d ms| ARR=%d CCR1=%d\r\n",melodyIndex,noteIndex,melody[melodyIndex][noteIndex],Delaymsecs,htim2.Instance->ARR,htim2.Instance->CCR1);
 80006a0:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <main+0x17c>)
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a2a      	ldr	r2, [pc, #168]	; (800075c <main+0x178>)
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80006b6:	4929      	ldr	r1, [pc, #164]	; (800075c <main+0x178>)
 80006b8:	6809      	ldr	r1, [r1, #0]
 80006ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80006bc:	9104      	str	r1, [sp, #16]
 80006be:	9203      	str	r2, [sp, #12]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	9202      	str	r2, [sp, #8]
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	4a28      	ldr	r2, [pc, #160]	; (8000770 <main+0x18c>)
 80006ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d2:	4828      	ldr	r0, [pc, #160]	; (8000774 <main+0x190>)
 80006d4:	f008 fa14 	bl	8008b00 <sniprintf>
	          CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80006d8:	4826      	ldr	r0, [pc, #152]	; (8000774 <main+0x190>)
 80006da:	f7ff fd79 	bl	80001d0 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	4619      	mov	r1, r3
 80006e2:	4824      	ldr	r0, [pc, #144]	; (8000774 <main+0x190>)
 80006e4:	f007 fd70 	bl	80081c8 <CDC_Transmit_FS>

		  	  HAL_Delay(Delaymsecs);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fd68 	bl	80011c0 <HAL_Delay>
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	3301      	adds	r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4a20      	ldr	r2, [pc, #128]	; (8000778 <main+0x194>)
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	429a      	cmp	r2, r3
 8000702:	d88e      	bhi.n	8000622 <main+0x3e>
	  	  }
		  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of Melody[%d]\r\n\r\n",melodyIndex);
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4a1d      	ldr	r2, [pc, #116]	; (800077c <main+0x198>)
 8000708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070c:	4819      	ldr	r0, [pc, #100]	; (8000774 <main+0x190>)
 800070e:	f008 f9f7 	bl	8008b00 <sniprintf>
	      CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000712:	4818      	ldr	r0, [pc, #96]	; (8000774 <main+0x190>)
 8000714:	f7ff fd5c 	bl	80001d0 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	4619      	mov	r1, r3
 800071c:	4815      	ldr	r0, [pc, #84]	; (8000774 <main+0x190>)
 800071e:	f007 fd53 	bl	80081c8 <CDC_Transmit_FS>
	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	429a      	cmp	r2, r3
 800072e:	f6ff af75 	blt.w	800061c <main+0x38>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of All Melodies[%d]\r\n\r\n",melodyIndex);
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <main+0x19c>)
 8000736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <main+0x190>)
 800073c:	f008 f9e0 	bl	8008b00 <sniprintf>
      CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <main+0x190>)
 8000742:	f7ff fd45 	bl	80001d0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	4619      	mov	r1, r3
 800074a:	480a      	ldr	r0, [pc, #40]	; (8000774 <main+0x190>)
 800074c:	f007 fd3c 	bl	80081c8 <CDC_Transmit_FS>

      HAL_Delay(2000);
 8000750:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000754:	f000 fd34 	bl	80011c0 <HAL_Delay>
  {
 8000758:	e75b      	b.n	8000612 <main+0x2e>
 800075a:	bf00      	nop
 800075c:	2000031c 	.word	0x2000031c
 8000760:	20000000 	.word	0x20000000
 8000764:	000f4240 	.word	0x000f4240
 8000768:	20000014 	.word	0x20000014
 800076c:	0800a07c 	.word	0x0800a07c
 8000770:	0800941c 	.word	0x0800941c
 8000774:	20000364 	.word	0x20000364
 8000778:	0800a088 	.word	0x0800a088
 800077c:	0800945c 	.word	0x0800945c
 8000780:	08009478 	.word	0x08009478

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b098      	sub	sp, #96	; 0x60
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f008 f9ac 	bl	8008af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <SystemClock_Config+0xfc>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a30      	ldr	r2, [pc, #192]	; (8000880 <SystemClock_Config+0xfc>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <SystemClock_Config+0xfc>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <SystemClock_Config+0x100>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <SystemClock_Config+0x100>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <SystemClock_Config+0x100>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000802:	2308      	movs	r3, #8
 8000804:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000806:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800080a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000810:	2307      	movs	r3, #7
 8000812:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000818:	4618      	mov	r0, r3
 800081a:	f002 ff25 	bl	8003668 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000824:	f000 fa36 	bl	8000c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000834:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	2105      	movs	r1, #5
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f986 	bl	8003b58 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000852:	f000 fa1f 	bl	8000c94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000856:	2301      	movs	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800085a:	23c0      	movs	r3, #192	; 0xc0
 800085c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fb82 	bl	8003f70 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000872:	f000 fa0f 	bl	8000c94 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3760      	adds	r7, #96	; 0x60
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_I2C1_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C1_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c6:	f000 ff67 	bl	8001798 <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f9e0 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000228 	.word	0x20000228
 80008dc:	40005400 	.word	0x40005400
 80008e0:	000186a0 	.word	0x000186a0

080008e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_I2S3_Init+0x54>)
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <MX_I2S3_Init+0x58>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2S3_Init+0x54>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_I2S3_Init+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_I2S3_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_I2S3_Init+0x54>)
 8000904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000908:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_I2S3_Init+0x54>)
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <MX_I2S3_Init+0x5c>)
 800090e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_I2S3_Init+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_I2S3_Init+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_I2S3_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_I2S3_Init+0x54>)
 8000924:	f001 f87c 	bl	8001a20 <HAL_I2S_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800092e:	f000 f9b1 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000027c 	.word	0x2000027c
 800093c:	40003c00 	.word	0x40003c00
 8000940:	00017700 	.word	0x00017700

08000944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_SPI1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_SPI1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000990:	220a      	movs	r2, #10
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000996:	f003 fc2b 	bl	80041f0 <HAL_SPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a0:	f000 f978 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200002c4 	.word	0x200002c4
 80009ac:	40013000 	.word	0x40013000

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_TIM2_Init+0xe4>)
 80009e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_TIM2_Init+0xe4>)
 80009ea:	2253      	movs	r2, #83	; 0x53
 80009ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_TIM2_Init+0xe4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_TIM2_Init+0xe4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_TIM2_Init+0xe4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_TIM2_Init+0xe4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a06:	4823      	ldr	r0, [pc, #140]	; (8000a94 <MX_TIM2_Init+0xe4>)
 8000a08:	f003 fc7b 	bl	8004302 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a12:	f000 f93f 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <MX_TIM2_Init+0xe4>)
 8000a24:	f003 ff0c 	bl	8004840 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a2e:	f000 f931 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_TIM2_Init+0xe4>)
 8000a34:	f003 fcb4 	bl	80043a0 <HAL_TIM_PWM_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a3e:	f000 f929 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <MX_TIM2_Init+0xe4>)
 8000a52:	f004 fac9 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a5c:	f000 f91a 	bl	8000c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a60:	2360      	movs	r3, #96	; 0x60
 8000a62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <MX_TIM2_Init+0xe4>)
 8000a78:	f003 fe24 	bl	80046c4 <HAL_TIM_PWM_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a82:	f000 f907 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <MX_TIM2_Init+0xe4>)
 8000a88:	f000 fa4a 	bl	8000f20 <HAL_TIM_MspPostInit>

}
 8000a8c:	bf00      	nop
 8000a8e:	3738      	adds	r7, #56	; 0x38
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000031c 	.word	0x2000031c

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	4b71      	ldr	r3, [pc, #452]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a70      	ldr	r2, [pc, #448]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b6e      	ldr	r3, [pc, #440]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	4b6a      	ldr	r3, [pc, #424]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a69      	ldr	r2, [pc, #420]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b67      	ldr	r3, [pc, #412]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b63      	ldr	r3, [pc, #396]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a62      	ldr	r2, [pc, #392]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b60      	ldr	r3, [pc, #384]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b5c      	ldr	r3, [pc, #368]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a5b      	ldr	r2, [pc, #364]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b55      	ldr	r3, [pc, #340]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a54      	ldr	r2, [pc, #336]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b52      	ldr	r3, [pc, #328]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b4e      	ldr	r3, [pc, #312]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a4d      	ldr	r2, [pc, #308]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <MX_GPIO_Init+0x1e0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2108      	movs	r1, #8
 8000b5a:	4848      	ldr	r0, [pc, #288]	; (8000c7c <MX_GPIO_Init+0x1e4>)
 8000b5c:	f000 fe02 	bl	8001764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2101      	movs	r1, #1
 8000b64:	4846      	ldr	r0, [pc, #280]	; (8000c80 <MX_GPIO_Init+0x1e8>)
 8000b66:	f000 fdfd 	bl	8001764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b70:	4844      	ldr	r0, [pc, #272]	; (8000c84 <MX_GPIO_Init+0x1ec>)
 8000b72:	f000 fdf7 	bl	8001764 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b76:	2308      	movs	r3, #8
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	483b      	ldr	r0, [pc, #236]	; (8000c7c <MX_GPIO_Init+0x1e4>)
 8000b8e:	f000 fc4d 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4835      	ldr	r0, [pc, #212]	; (8000c80 <MX_GPIO_Init+0x1e8>)
 8000baa:	f000 fc3f 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482d      	ldr	r0, [pc, #180]	; (8000c80 <MX_GPIO_Init+0x1e8>)
 8000bca:	f000 fc2f 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x1f0>)
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	482a      	ldr	r0, [pc, #168]	; (8000c8c <MX_GPIO_Init+0x1f4>)
 8000be2:	f000 fc23 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000be6:	2304      	movs	r3, #4
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4825      	ldr	r0, [pc, #148]	; (8000c90 <MX_GPIO_Init+0x1f8>)
 8000bfa:	f000 fc17 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c10:	2305      	movs	r3, #5
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481d      	ldr	r0, [pc, #116]	; (8000c90 <MX_GPIO_Init+0x1f8>)
 8000c1c:	f000 fc06 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c20:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c24:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4812      	ldr	r0, [pc, #72]	; (8000c84 <MX_GPIO_Init+0x1ec>)
 8000c3a:	f000 fbf7 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c3e:	2320      	movs	r3, #32
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_GPIO_Init+0x1ec>)
 8000c52:	f000 fbeb 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_GPIO_Init+0x1f0>)
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_GPIO_Init+0x1e4>)
 8000c6a:	f000 fbdf 	bl	800142c <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3730      	adds	r7, #48	; 0x30
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020c00 	.word	0x40020c00
 8000c88:	10120000 	.word	0x10120000
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f000 fb62 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_I2C_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d40:	2304      	movs	r3, #4
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <HAL_I2C_MspInit+0x8c>)
 8000d4c:	f000 fb6e 	bl	800142c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_I2S_MspInit+0xc0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d14a      	bne.n	8000e38 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000df6:	2310      	movs	r3, #16
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <HAL_I2S_MspInit+0xc8>)
 8000e12:	f000 fb0b 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e16:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e28:	2306      	movs	r3, #6
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <HAL_I2S_MspInit+0xcc>)
 8000e34:	f000 fafa 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40003c00 	.word	0x40003c00
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020800 	.word	0x40020800

08000e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_SPI_MspInit+0x84>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12b      	bne.n	8000eca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eaa:	23e0      	movs	r3, #224	; 0xe0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_SPI_MspInit+0x8c>)
 8000ec6:	f000 fab1 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40013000 	.word	0x40013000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef0:	d10d      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_TIM_Base_MspInit+0x3c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_TIM_Base_MspInit+0x3c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_TIM_Base_MspInit+0x3c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f40:	d11e      	bne.n	8000f80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_TIM_MspPostInit+0x68>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <HAL_TIM_MspPostInit+0x68>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_TIM_MspPostInit+0x68>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <HAL_TIM_MspPostInit+0x6c>)
 8000f7c:	f000 fa56 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8d0 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <OTG_FS_IRQHandler+0x10>)
 8000fea:	f001 fb09 	bl	8002600 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20001940 	.word	0x20001940

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f007 fd38 	bl	8008a9c <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20020000 	.word	0x20020000
 8001058:	00000400 	.word	0x00000400
 800105c:	20000464 	.word	0x20000464
 8001060:	20001f78 	.word	0x20001f78

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108e:	490e      	ldr	r1, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a4:	4c0b      	ldr	r4, [pc, #44]	; (80010d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010b2:	f7ff ffd7 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f007 fcf7 	bl	8008aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fa93 	bl	80005e4 <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80010cc:	0800a0f8 	.word	0x0800a0f8
  ldr r2, =_sbss
 80010d0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80010d4:	20001f78 	.word	0x20001f78

080010d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>
	...

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_Init+0x40>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_Init+0x40>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x40>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f94f 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f808 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff fdc6 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023c00 	.word	0x40023c00

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f967 	bl	8001412 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f92f 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000028 	.word	0x20000028
 8001178:	20000030 	.word	0x20000030
 800117c:	2000002c 	.word	0x2000002c

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000030 	.word	0x20000030
 80011a4:	20000468 	.word	0x20000468

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000468 	.word	0x20000468

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffee 	bl	80011a8 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_Delay+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffde 	bl	80011a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000030 	.word	0x20000030

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff8e 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff29 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff3e 	bl	8001250 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff8e 	bl	80012fc <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff31 	bl	800126c <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa2 	bl	8001364 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	e16b      	b.n	8001720 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001448:	2201      	movs	r2, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 815a 	bne.w	800171a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d005      	beq.n	800147e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147a:	2b02      	cmp	r3, #2
 800147c:	d130      	bne.n	80014e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f003 0201 	and.w	r2, r3, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d017      	beq.n	800151c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d123      	bne.n	8001570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	08da      	lsrs	r2, r3, #3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3208      	adds	r2, #8
 8001530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	69b9      	ldr	r1, [r7, #24]
 800156c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0203 	and.w	r2, r3, #3
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80b4 	beq.w	800171a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b60      	ldr	r3, [pc, #384]	; (8001738 <HAL_GPIO_Init+0x30c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a5f      	ldr	r2, [pc, #380]	; (8001738 <HAL_GPIO_Init+0x30c>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b5d      	ldr	r3, [pc, #372]	; (8001738 <HAL_GPIO_Init+0x30c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ce:	4a5b      	ldr	r2, [pc, #364]	; (800173c <HAL_GPIO_Init+0x310>)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	220f      	movs	r2, #15
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_GPIO_Init+0x314>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d02b      	beq.n	8001652 <HAL_GPIO_Init+0x226>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a51      	ldr	r2, [pc, #324]	; (8001744 <HAL_GPIO_Init+0x318>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d025      	beq.n	800164e <HAL_GPIO_Init+0x222>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a50      	ldr	r2, [pc, #320]	; (8001748 <HAL_GPIO_Init+0x31c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d01f      	beq.n	800164a <HAL_GPIO_Init+0x21e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4f      	ldr	r2, [pc, #316]	; (800174c <HAL_GPIO_Init+0x320>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x21a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4e      	ldr	r2, [pc, #312]	; (8001750 <HAL_GPIO_Init+0x324>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x216>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4d      	ldr	r2, [pc, #308]	; (8001754 <HAL_GPIO_Init+0x328>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x212>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <HAL_GPIO_Init+0x32c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x20e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4b      	ldr	r2, [pc, #300]	; (800175c <HAL_GPIO_Init+0x330>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x20a>
 8001632:	2307      	movs	r3, #7
 8001634:	e00e      	b.n	8001654 <HAL_GPIO_Init+0x228>
 8001636:	2308      	movs	r3, #8
 8001638:	e00c      	b.n	8001654 <HAL_GPIO_Init+0x228>
 800163a:	2306      	movs	r3, #6
 800163c:	e00a      	b.n	8001654 <HAL_GPIO_Init+0x228>
 800163e:	2305      	movs	r3, #5
 8001640:	e008      	b.n	8001654 <HAL_GPIO_Init+0x228>
 8001642:	2304      	movs	r3, #4
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x228>
 8001646:	2303      	movs	r3, #3
 8001648:	e004      	b.n	8001654 <HAL_GPIO_Init+0x228>
 800164a:	2302      	movs	r3, #2
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x228>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x228>
 8001652:	2300      	movs	r3, #0
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	f002 0203 	and.w	r2, r2, #3
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	4093      	lsls	r3, r2
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001664:	4935      	ldr	r1, [pc, #212]	; (800173c <HAL_GPIO_Init+0x310>)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_GPIO_Init+0x334>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001696:	4a32      	ldr	r2, [pc, #200]	; (8001760 <HAL_GPIO_Init+0x334>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_GPIO_Init+0x334>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c0:	4a27      	ldr	r2, [pc, #156]	; (8001760 <HAL_GPIO_Init+0x334>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <HAL_GPIO_Init+0x334>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ea:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_GPIO_Init+0x334>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_GPIO_Init+0x334>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <HAL_GPIO_Init+0x334>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3301      	adds	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	2b0f      	cmp	r3, #15
 8001724:	f67f ae90 	bls.w	8001448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40013800 	.word	0x40013800
 8001740:	40020000 	.word	0x40020000
 8001744:	40020400 	.word	0x40020400
 8001748:	40020800 	.word	0x40020800
 800174c:	40020c00 	.word	0x40020c00
 8001750:	40021000 	.word	0x40021000
 8001754:	40021400 	.word	0x40021400
 8001758:	40021800 	.word	0x40021800
 800175c:	40021c00 	.word	0x40021c00
 8001760:	40013c00 	.word	0x40013c00

08001764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
 8001770:	4613      	mov	r3, r2
 8001772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001774:	787b      	ldrb	r3, [r7, #1]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001780:	e003      	b.n	800178a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	041a      	lsls	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	619a      	str	r2, [r3, #24]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e12b      	b.n	8001a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fa96 	bl	8000cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2224      	movs	r2, #36	; 0x24
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017fc:	f002 fba4 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a81      	ldr	r2, [pc, #516]	; (8001a0c <HAL_I2C_Init+0x274>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d807      	bhi.n	800181c <HAL_I2C_Init+0x84>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4a80      	ldr	r2, [pc, #512]	; (8001a10 <HAL_I2C_Init+0x278>)
 8001810:	4293      	cmp	r3, r2
 8001812:	bf94      	ite	ls
 8001814:	2301      	movls	r3, #1
 8001816:	2300      	movhi	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e006      	b.n	800182a <HAL_I2C_Init+0x92>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4a7d      	ldr	r2, [pc, #500]	; (8001a14 <HAL_I2C_Init+0x27c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	bf94      	ite	ls
 8001824:	2301      	movls	r3, #1
 8001826:	2300      	movhi	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0e7      	b.n	8001a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4a78      	ldr	r2, [pc, #480]	; (8001a18 <HAL_I2C_Init+0x280>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0c9b      	lsrs	r3, r3, #18
 800183c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a6a      	ldr	r2, [pc, #424]	; (8001a0c <HAL_I2C_Init+0x274>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d802      	bhi.n	800186c <HAL_I2C_Init+0xd4>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3301      	adds	r3, #1
 800186a:	e009      	b.n	8001880 <HAL_I2C_Init+0xe8>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	4a69      	ldr	r2, [pc, #420]	; (8001a1c <HAL_I2C_Init+0x284>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	3301      	adds	r3, #1
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	430b      	orrs	r3, r1
 8001886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001892:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	495c      	ldr	r1, [pc, #368]	; (8001a0c <HAL_I2C_Init+0x274>)
 800189c:	428b      	cmp	r3, r1
 800189e:	d819      	bhi.n	80018d4 <HAL_I2C_Init+0x13c>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1e59      	subs	r1, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ae:	1c59      	adds	r1, r3, #1
 80018b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018b4:	400b      	ands	r3, r1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <HAL_I2C_Init+0x138>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1e59      	subs	r1, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c8:	3301      	adds	r3, #1
 80018ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ce:	e051      	b.n	8001974 <HAL_I2C_Init+0x1dc>
 80018d0:	2304      	movs	r3, #4
 80018d2:	e04f      	b.n	8001974 <HAL_I2C_Init+0x1dc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d111      	bne.n	8001900 <HAL_I2C_Init+0x168>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1e58      	subs	r0, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	440b      	add	r3, r1
 80018ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	e012      	b.n	8001926 <HAL_I2C_Init+0x18e>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1e58      	subs	r0, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6859      	ldr	r1, [r3, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	0099      	lsls	r1, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	fbb0 f3f3 	udiv	r3, r0, r3
 8001916:	3301      	adds	r3, #1
 8001918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Init+0x196>
 800192a:	2301      	movs	r3, #1
 800192c:	e022      	b.n	8001974 <HAL_I2C_Init+0x1dc>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10e      	bne.n	8001954 <HAL_I2C_Init+0x1bc>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1e58      	subs	r0, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6859      	ldr	r1, [r3, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	440b      	add	r3, r1
 8001944:	fbb0 f3f3 	udiv	r3, r0, r3
 8001948:	3301      	adds	r3, #1
 800194a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001952:	e00f      	b.n	8001974 <HAL_I2C_Init+0x1dc>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e58      	subs	r0, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	0099      	lsls	r1, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	fbb0 f3f3 	udiv	r3, r0, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	6809      	ldr	r1, [r1, #0]
 8001978:	4313      	orrs	r3, r2
 800197a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6911      	ldr	r1, [r2, #16]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68d2      	ldr	r2, [r2, #12]
 80019ae:	4311      	orrs	r1, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	000186a0 	.word	0x000186a0
 8001a10:	001e847f 	.word	0x001e847f
 8001a14:	003d08ff 	.word	0x003d08ff
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	10624dd3 	.word	0x10624dd3

08001a20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e128      	b.n	8001c84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a90      	ldr	r2, [pc, #576]	; (8001c8c <HAL_I2S_Init+0x26c>)
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff f997 	bl	8000d80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2202      	movs	r2, #2
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a68:	f023 030f 	bic.w	r3, r3, #15
 8001a6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2202      	movs	r2, #2
 8001a74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d060      	beq.n	8001b40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a86:	2310      	movs	r3, #16
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e001      	b.n	8001a90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d802      	bhi.n	8001a9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f002 fb48 	bl	8004134 <HAL_RCCEx_GetPeriphCLKFreq>
 8001aa4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aae:	d125      	bne.n	8001afc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d010      	beq.n	8001ada <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	461a      	mov	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	3305      	adds	r3, #5
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	e01f      	b.n	8001b1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	3305      	adds	r3, #5
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e00e      	b.n	8001b1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	3305      	adds	r3, #5
 8001b18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4a5c      	ldr	r2, [pc, #368]	; (8001c90 <HAL_I2S_Init+0x270>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	08db      	lsrs	r3, r3, #3
 8001b24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	e003      	b.n	8001b48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d902      	bls.n	8001b54 <HAL_I2S_Init+0x134>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	2bff      	cmp	r3, #255	; 0xff
 8001b52:	d907      	bls.n	8001b64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f043 0210 	orr.w	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e08f      	b.n	8001c84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	ea42 0103 	orr.w	r1, r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b82:	f023 030f 	bic.w	r3, r3, #15
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6851      	ldr	r1, [r2, #4]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6892      	ldr	r2, [r2, #8]
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68d2      	ldr	r2, [r2, #12]
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6992      	ldr	r2, [r2, #24]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d161      	bne.n	8001c74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <HAL_I2S_Init+0x274>)
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a37      	ldr	r2, [pc, #220]	; (8001c98 <HAL_I2S_Init+0x278>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2S_Init+0x1a4>
 8001bc0:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <HAL_I2S_Init+0x27c>)
 8001bc2:	e001      	b.n	8001bc8 <HAL_I2S_Init+0x1a8>
 8001bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	4932      	ldr	r1, [pc, #200]	; (8001c98 <HAL_I2S_Init+0x278>)
 8001bd0:	428a      	cmp	r2, r1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_I2S_Init+0x1b8>
 8001bd4:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <HAL_I2S_Init+0x27c>)
 8001bd6:	e001      	b.n	8001bdc <HAL_I2S_Init+0x1bc>
 8001bd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001be0:	f023 030f 	bic.w	r3, r3, #15
 8001be4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <HAL_I2S_Init+0x278>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d101      	bne.n	8001bf4 <HAL_I2S_Init+0x1d4>
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_I2S_Init+0x27c>)
 8001bf2:	e001      	b.n	8001bf8 <HAL_I2S_Init+0x1d8>
 8001bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <HAL_I2S_Init+0x278>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_I2S_Init+0x1ea>
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_I2S_Init+0x27c>)
 8001c08:	e001      	b.n	8001c0e <HAL_I2S_Init+0x1ee>
 8001c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c1a:	d003      	beq.n	8001c24 <HAL_I2S_Init+0x204>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	e001      	b.n	8001c30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	897b      	ldrh	r3, [r7, #10]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_I2S_Init+0x278>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_I2S_Init+0x24c>
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_I2S_Init+0x27c>)
 8001c6a:	e001      	b.n	8001c70 <HAL_I2S_Init+0x250>
 8001c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c70:	897a      	ldrh	r2, [r7, #10]
 8001c72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	08001d97 	.word	0x08001d97
 8001c90:	cccccccd 	.word	0xcccccccd
 8001c94:	08001ead 	.word	0x08001ead
 8001c98:	40003800 	.word	0x40003800
 8001c9c:	40003400 	.word	0x40003400

08001ca0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	1c9a      	adds	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10e      	bne.n	8001d30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffb8 	bl	8001ca0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	1c9a      	adds	r2, r3, #2
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10e      	bne.n	8001d8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff93 	bl	8001cb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d13a      	bne.n	8001e28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d109      	bne.n	8001dd0 <I2S_IRQHandler+0x3a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d102      	bne.n	8001dd0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffb4 	bl	8001d38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d126      	bne.n	8001e28 <I2S_IRQHandler+0x92>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d11f      	bne.n	8001e28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001df6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f043 0202 	orr.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff50 	bl	8001cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d136      	bne.n	8001ea2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d109      	bne.n	8001e52 <I2S_IRQHandler+0xbc>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d102      	bne.n	8001e52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff45 	bl	8001cdc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d122      	bne.n	8001ea2 <I2S_IRQHandler+0x10c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d11b      	bne.n	8001ea2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff13 	bl	8001cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ec6:	4b92      	ldr	r3, [pc, #584]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ec8:	e001      	b.n	8001ece <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a8b      	ldr	r2, [pc, #556]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ee4:	4b8a      	ldr	r3, [pc, #552]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ee6:	e001      	b.n	8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef8:	d004      	beq.n	8001f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 8099 	bne.w	8002036 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f925 	bl	8002168 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f9c8 	bl	80022c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d13a      	bne.n	8001fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d035      	beq.n	8001fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6e      	ldr	r2, [pc, #440]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f56:	4b6e      	ldr	r3, [pc, #440]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f58:	e001      	b.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4969      	ldr	r1, [pc, #420]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f66:	428b      	cmp	r3, r1
 8001f68:	d101      	bne.n	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f6a:	4b69      	ldr	r3, [pc, #420]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f6c:	e001      	b.n	8001f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f76:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f043 0202 	orr.w	r2, r3, #2
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe88 	bl	8001cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	f040 80c3 	bne.w	800214a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80bd 	beq.w	800214a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fde:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a49      	ldr	r2, [pc, #292]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001fea:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fec:	e001      	b.n	8001ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001fee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4944      	ldr	r1, [pc, #272]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ffa:	428b      	cmp	r3, r1
 8001ffc:	d101      	bne.n	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ffe:	4b44      	ldr	r3, [pc, #272]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002000:	e001      	b.n	8002006 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002006:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800200a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f043 0204 	orr.w	r2, r3, #4
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fe4a 	bl	8001cc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002034:	e089      	b.n	800214a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8be 	bl	80021cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f8fd 	bl	8002264 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d12f      	bne.n	80020d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d02a      	beq.n	80020d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800208c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800209a:	e001      	b.n	80020a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800209c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4919      	ldr	r1, [pc, #100]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020a8:	428b      	cmp	r3, r1
 80020aa:	d101      	bne.n	80020b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020ae:	e001      	b.n	80020b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80020b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f043 0202 	orr.w	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fdfa 	bl	8001cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d136      	bne.n	800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d031      	beq.n	800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020f4:	e001      	b.n	80020fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80020f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4902      	ldr	r1, [pc, #8]	; (800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002102:	428b      	cmp	r3, r1
 8002104:	d106      	bne.n	8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002106:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002108:	e006      	b.n	8002118 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800210a:	bf00      	nop
 800210c:	40003800 	.word	0x40003800
 8002110:	40003400 	.word	0x40003400
 8002114:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002118:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800211c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800212c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f043 0204 	orr.w	r2, r3, #4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fdc0 	bl	8001cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002148:	e000      	b.n	800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800214a:	bf00      	nop
}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c99      	adds	r1, r3, #2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6251      	str	r1, [r2, #36]	; 0x24
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d113      	bne.n	80021c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ffc9 	bl	8002154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	1c99      	adds	r1, r3, #2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6251      	str	r1, [r2, #36]	; 0x24
 80021de:	8819      	ldrh	r1, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <I2SEx_TxISR_I2SExt+0x90>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <I2SEx_TxISR_I2SExt+0x22>
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <I2SEx_TxISR_I2SExt+0x94>)
 80021ec:	e001      	b.n	80021f2 <I2SEx_TxISR_I2SExt+0x26>
 80021ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f2:	460a      	mov	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d121      	bne.n	8002252 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <I2SEx_TxISR_I2SExt+0x90>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <I2SEx_TxISR_I2SExt+0x50>
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <I2SEx_TxISR_I2SExt+0x94>)
 800221a:	e001      	b.n	8002220 <I2SEx_TxISR_I2SExt+0x54>
 800221c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	490d      	ldr	r1, [pc, #52]	; (800225c <I2SEx_TxISR_I2SExt+0x90>)
 8002228:	428b      	cmp	r3, r1
 800222a:	d101      	bne.n	8002230 <I2SEx_TxISR_I2SExt+0x64>
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <I2SEx_TxISR_I2SExt+0x94>)
 800222e:	e001      	b.n	8002234 <I2SEx_TxISR_I2SExt+0x68>
 8002230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002234:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002238:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff81 	bl	8002154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40003800 	.word	0x40003800
 8002260:	40003400 	.word	0x40003400

08002264 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68d8      	ldr	r0, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	1c99      	adds	r1, r3, #2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800227c:	b282      	uxth	r2, r0
 800227e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d113      	bne.n	80022c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff4a 	bl	8002154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a20      	ldr	r2, [pc, #128]	; (8002358 <I2SEx_RxISR_I2SExt+0x90>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <I2SEx_RxISR_I2SExt+0x16>
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <I2SEx_RxISR_I2SExt+0x94>)
 80022dc:	e001      	b.n	80022e2 <I2SEx_RxISR_I2SExt+0x1a>
 80022de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e2:	68d8      	ldr	r0, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	1c99      	adds	r1, r3, #2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022ee:	b282      	uxth	r2, r0
 80022f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d121      	bne.n	800234e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <I2SEx_RxISR_I2SExt+0x90>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <I2SEx_RxISR_I2SExt+0x50>
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <I2SEx_RxISR_I2SExt+0x94>)
 8002316:	e001      	b.n	800231c <I2SEx_RxISR_I2SExt+0x54>
 8002318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	490d      	ldr	r1, [pc, #52]	; (8002358 <I2SEx_RxISR_I2SExt+0x90>)
 8002324:	428b      	cmp	r3, r1
 8002326:	d101      	bne.n	800232c <I2SEx_RxISR_I2SExt+0x64>
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <I2SEx_RxISR_I2SExt+0x94>)
 800232a:	e001      	b.n	8002330 <I2SEx_RxISR_I2SExt+0x68>
 800232c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002330:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002334:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d106      	bne.n	800234e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff03 	bl	8002154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40003800 	.word	0x40003800
 800235c:	40003400 	.word	0x40003400

08002360 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	b08f      	sub	sp, #60	; 0x3c
 8002364:	af0a      	add	r7, sp, #40	; 0x28
 8002366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e10f      	b.n	8002592 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f006 f863 	bl	8008458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2203      	movs	r2, #3
 8002396:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 ffaa 	bl	800530a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	687e      	ldr	r6, [r7, #4]
 80023be:	466d      	mov	r5, sp
 80023c0:	f106 0410 	add.w	r4, r6, #16
 80023c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d4:	1d33      	adds	r3, r6, #4
 80023d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d8:	6838      	ldr	r0, [r7, #0]
 80023da:	f002 fe81 	bl	80050e0 <USB_CoreInit>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 ff98 	bl	800532c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e04a      	b.n	8002498 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	333d      	adds	r3, #61	; 0x3d
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	333c      	adds	r3, #60	; 0x3c
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	b298      	uxth	r0, r3
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	3342      	adds	r3, #66	; 0x42
 800243e:	4602      	mov	r2, r0
 8002440:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	333f      	adds	r3, #63	; 0x3f
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3344      	adds	r3, #68	; 0x44
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3348      	adds	r3, #72	; 0x48
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	3350      	adds	r3, #80	; 0x50
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	3301      	adds	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d3af      	bcc.n	8002402 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e044      	b.n	8002532 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3301      	adds	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d3b5      	bcc.n	80024a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	687e      	ldr	r6, [r7, #4]
 8002544:	466d      	mov	r5, sp
 8002546:	f106 0410 	add.w	r4, r6, #16
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002556:	e885 0003 	stmia.w	r5, {r0, r1}
 800255a:	1d33      	adds	r3, r6, #4
 800255c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	f002 ff0e 	bl	8005380 <USB_DevInit>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00d      	b.n	8002592 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 ff56 	bl	800643c <USB_DevDisconnect>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_PCD_Start+0x1c>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e020      	b.n	80025f8 <HAL_PCD_Start+0x5e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d109      	bne.n	80025da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d005      	beq.n	80025da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fe82 	bl	80052e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 ff06 	bl	80063fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b08d      	sub	sp, #52	; 0x34
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f003 ffc4 	bl	80065a4 <USB_GetMode>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 839d 	bne.w	8002d5e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 ff28 	bl	800647e <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8393 	beq.w	8002d5c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f003 ff1f 	bl	800647e <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 0202 	and.w	r2, r2, #2
 8002658:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 ff0d 	bl	800647e <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b10      	cmp	r3, #16
 800266c:	d161      	bne.n	8002732 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0210 	bic.w	r2, r2, #16
 800267c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f003 020f 	and.w	r2, r3, #15
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	3304      	adds	r3, #4
 800269c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	0c5b      	lsrs	r3, r3, #17
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d124      	bne.n	80026f4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d035      	beq.n	8002722 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	6a38      	ldr	r0, [r7, #32]
 80026ca:	f003 fd73 	bl	80061b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026da:	441a      	add	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ec:	441a      	add	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	619a      	str	r2, [r3, #24]
 80026f2:	e016      	b.n	8002722 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	0c5b      	lsrs	r3, r3, #17
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d110      	bne.n	8002722 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002706:	2208      	movs	r2, #8
 8002708:	4619      	mov	r1, r3
 800270a:	6a38      	ldr	r0, [r7, #32]
 800270c:	f003 fd52 	bl	80061b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800271c:	441a      	add	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0210 	orr.w	r2, r2, #16
 8002730:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f003 fea1 	bl	800647e <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002742:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002746:	d16e      	bne.n	8002826 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fea7 	bl	80064a4 <USB_ReadDevAllOutEpInterrupt>
 8002756:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002758:	e062      	b.n	8002820 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d057      	beq.n	8002814 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fecc 	bl	800650c <USB_ReadDevOutEPInterrupt>
 8002774:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00c      	beq.n	800279a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278c:	461a      	mov	r2, r3
 800278e:	2301      	movs	r3, #1
 8002790:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fdb1 	bl	80032fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00c      	beq.n	80027be <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b0:	461a      	mov	r2, r3
 80027b2:	2308      	movs	r3, #8
 80027b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 feab 	bl	8003514 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	2310      	movs	r3, #16
 80027d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f0:	461a      	mov	r2, r3
 80027f2:	2320      	movs	r3, #32
 80027f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002812:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	3301      	adds	r3, #1
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d199      	bne.n	800275a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f003 fe27 	bl	800647e <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800283a:	f040 80c0 	bne.w	80029be <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fe48 	bl	80064d8 <USB_ReadDevAllInEpInterrupt>
 8002848:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800284e:	e0b2      	b.n	80029b6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80a7 	beq.w	80029aa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f003 fe6e 	bl	8006548 <USB_ReadDevInEPInterrupt>
 800286c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d057      	beq.n	8002928 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	2201      	movs	r2, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43db      	mvns	r3, r3
 8002892:	69f9      	ldr	r1, [r7, #28]
 8002894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002898:	4013      	ands	r3, r2
 800289a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a8:	461a      	mov	r2, r3
 80028aa:	2301      	movs	r3, #1
 80028ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d132      	bne.n	800291c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3348      	adds	r3, #72	; 0x48
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4403      	add	r3, r0
 80028d6:	3344      	adds	r3, #68	; 0x44
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4419      	add	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4403      	add	r3, r0
 80028ea:	3348      	adds	r3, #72	; 0x48
 80028ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d113      	bne.n	800291c <HAL_PCD_IRQHandler+0x31c>
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3350      	adds	r3, #80	; 0x50
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d108      	bne.n	800291c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002914:	461a      	mov	r2, r3
 8002916:	2101      	movs	r1, #1
 8002918:	f003 fe76 	bl	8006608 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	b2db      	uxtb	r3, r3
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f005 fe27 	bl	8008576 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800293e:	461a      	mov	r2, r3
 8002940:	2308      	movs	r3, #8
 8002942:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295a:	461a      	mov	r2, r3
 800295c:	2310      	movs	r3, #16
 800295e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002976:	461a      	mov	r2, r3
 8002978:	2340      	movs	r3, #64	; 0x40
 800297a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002992:	461a      	mov	r2, r3
 8002994:	2302      	movs	r3, #2
 8002996:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fc1b 	bl	80031e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	3301      	adds	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f af49 	bne.w	8002850 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 fd5b 	bl	800647e <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029d2:	d122      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029fa:	2100      	movs	r1, #0
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fe27 	bl	8003650 <HAL_PCDEx_LPM_Callback>
 8002a02:	e002      	b.n	8002a0a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f005 fe2d 	bl	8008664 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fd2d 	bl	800647e <USB_ReadInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a2e:	d112      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d102      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f005 fde9 	bl	8008618 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a54:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fd0f 	bl	800647e <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	f040 80c7 	bne.w	8002bfc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2110      	movs	r1, #16
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f002 fddd 	bl	8005648 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a92:	e056      	b.n	8002b42 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aa6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ac6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ae6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af4:	461a      	mov	r2, r3
 8002af6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002afa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0c:	0151      	lsls	r1, r2, #5
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	440a      	add	r2, r1
 8002b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2c:	0151      	lsls	r1, r2, #5
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	440a      	add	r2, r1
 8002b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	3301      	adds	r3, #1
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3a3      	bcc.n	8002a94 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b5a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b5e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d016      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b78:	f043 030b 	orr.w	r3, r3, #11
 8002b7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8e:	f043 030b 	orr.w	r3, r3, #11
 8002b92:	6453      	str	r3, [r2, #68]	; 0x44
 8002b94:	e015      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ba8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002bac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bbc:	f043 030b 	orr.w	r3, r3, #11
 8002bc0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bd4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002be6:	461a      	mov	r2, r3
 8002be8:	f003 fd0e 	bl	8006608 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 fc3c 	bl	800647e <USB_ReadInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c10:	d124      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 fcd2 	bl	80065c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 fd72 	bl	800570a <USB_GetDevSpeed>
 8002c26:	4603      	mov	r3, r0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681c      	ldr	r4, [r3, #0]
 8002c32:	f001 f97d 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8002c36:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4620      	mov	r0, r4
 8002c42:	f002 faaf 	bl	80051a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f005 fcbd 	bl	80085c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 fc0c 	bl	800647e <USB_ReadInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d10a      	bne.n	8002c86 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f005 fc9a 	bl	80085aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f002 0208 	and.w	r2, r2, #8
 8002c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fbf7 	bl	800647e <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c9a:	d10f      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f005 fcfc 	bl	80086a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 fbdc 	bl	800647e <USB_ReadInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ccc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f005 fccf 	bl	8008680 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fbc1 	bl	800647e <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d10a      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f005 fcdd 	bl	80086c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fbab 	bl	800647e <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d115      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f005 fccd 	bl	80086e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	e000      	b.n	8002d5e <HAL_PCD_IRQHandler+0x75e>
      return;
 8002d5c:	bf00      	nop
    }
  }
}
 8002d5e:	3734      	adds	r7, #52	; 0x34
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd90      	pop	{r4, r7, pc}

08002d64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_SetAddress+0x1a>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e013      	b.n	8002da6 <HAL_PCD_SetAddress+0x42>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 fb09 	bl	80063ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	4608      	mov	r0, r1
 8002db8:	4611      	mov	r1, r2
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	70fb      	strb	r3, [r7, #3]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	803b      	strh	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	da0f      	bge.n	8002df4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	f003 020f 	and.w	r2, r3, #15
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	3338      	adds	r3, #56	; 0x38
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	705a      	strb	r2, [r3, #1]
 8002df2:	e00f      	b.n	8002e14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e20:	883a      	ldrh	r2, [r7, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	78ba      	ldrb	r2, [r7, #2]
 8002e2a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e3e:	78bb      	ldrb	r3, [r7, #2]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d102      	bne.n	8002e4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_PCD_EP_Open+0xaa>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e00e      	b.n	8002e76 <HAL_PCD_EP_Open+0xc8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68f9      	ldr	r1, [r7, #12]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 fc74 	bl	8005754 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e74:	7afb      	ldrb	r3, [r7, #11]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	da0f      	bge.n	8002eb2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 020f 	and.w	r2, r3, #15
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3338      	adds	r3, #56	; 0x38
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	705a      	strb	r2, [r3, #1]
 8002eb0:	e00f      	b.n	8002ed2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_PCD_EP_Close+0x6e>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e00e      	b.n	8002f0a <HAL_PCD_EP_Close+0x8c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68f9      	ldr	r1, [r7, #12]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 fcb2 	bl	8005864 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f22:	7afb      	ldrb	r3, [r7, #11]
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	3304      	adds	r3, #4
 8002f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f54:	7afb      	ldrb	r3, [r7, #11]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d102      	bne.n	8002f6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	6979      	ldr	r1, [r7, #20]
 8002f86:	f002 ff8d 	bl	8005ea4 <USB_EP0StartXfer>
 8002f8a:	e008      	b.n	8002f9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	6979      	ldr	r1, [r7, #20]
 8002f9a:	f002 fd3f 	bl	8005a1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 020f 	and.w	r2, r3, #15
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	3338      	adds	r3, #56	; 0x38
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2201      	movs	r2, #1
 8003016:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	b2da      	uxtb	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003032:	7afb      	ldrb	r3, [r7, #11]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	6979      	ldr	r1, [r7, #20]
 800304a:	f002 ff2b 	bl	8005ea4 <USB_EP0StartXfer>
 800304e:	e008      	b.n	8003062 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6979      	ldr	r1, [r7, #20]
 800305e:	f002 fcdd 	bl	8005a1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d901      	bls.n	800308a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e050      	b.n	800312c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800308a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308e:	2b00      	cmp	r3, #0
 8003090:	da0f      	bge.n	80030b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3338      	adds	r3, #56	; 0x38
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	3304      	adds	r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	705a      	strb	r2, [r3, #1]
 80030b0:	e00d      	b.n	80030ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_PCD_EP_SetStall+0x82>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e01e      	b.n	800312c <HAL_PCD_EP_SetStall+0xc0>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 f882 	bl	8006206 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	b2d9      	uxtb	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800311c:	461a      	mov	r2, r3
 800311e:	f003 fa73 	bl	8006608 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 020f 	and.w	r2, r3, #15
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d901      	bls.n	8003152 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e042      	b.n	80031d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003156:	2b00      	cmp	r3, #0
 8003158:	da0f      	bge.n	800317a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	3338      	adds	r3, #56	; 0x38
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	705a      	strb	r2, [r3, #1]
 8003178:	e00f      	b.n	800319a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	f003 020f 	and.w	r2, r3, #15
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_PCD_EP_ClrStall+0x86>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e00e      	b.n	80031d8 <HAL_PCD_EP_ClrStall+0xa4>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68f9      	ldr	r1, [r7, #12]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 f88a 	bl	80062e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	3338      	adds	r3, #56	; 0x38
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	3304      	adds	r3, #4
 8003206:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	d901      	bls.n	8003218 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e06c      	b.n	80032f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	429a      	cmp	r2, r3
 800322c:	d902      	bls.n	8003234 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	3303      	adds	r3, #3
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800323c:	e02b      	b.n	8003296 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	429a      	cmp	r2, r3
 8003252:	d902      	bls.n	800325a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3303      	adds	r3, #3
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003272:	b2db      	uxtb	r3, r3
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4603      	mov	r3, r0
 8003278:	6978      	ldr	r0, [r7, #20]
 800327a:	f002 ff66 	bl	800614a <USB_WritePacket>

    ep->xfer_buff  += len;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	441a      	add	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	441a      	add	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d809      	bhi.n	80032c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d203      	bcs.n	80032c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1be      	bne.n	800323e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d811      	bhi.n	80032f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	2201      	movs	r2, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	6939      	ldr	r1, [r7, #16]
 80032e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ec:	4013      	ands	r3, r2
 80032ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	333c      	adds	r3, #60	; 0x3c
 8003314:	3304      	adds	r3, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b01      	cmp	r3, #1
 8003330:	f040 80a0 	bne.w	8003474 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a72      	ldr	r2, [pc, #456]	; (800350c <PCD_EP_OutXfrComplete_int+0x210>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f240 80dd 	bls.w	8003502 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80d7 	beq.w	8003502 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003360:	461a      	mov	r2, r3
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	6093      	str	r3, [r2, #8]
 8003368:	e0cb      	b.n	8003502 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003380:	461a      	mov	r2, r3
 8003382:	2320      	movs	r3, #32
 8003384:	6093      	str	r3, [r2, #8]
 8003386:	e0bc      	b.n	8003502 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 80b7 	bne.w	8003502 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a5d      	ldr	r2, [pc, #372]	; (800350c <PCD_EP_OutXfrComplete_int+0x210>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d90f      	bls.n	80033bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b2:	461a      	mov	r2, r3
 80033b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b8:	6093      	str	r3, [r2, #8]
 80033ba:	e0a2      	b.n	8003502 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	0159      	lsls	r1, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	440b      	add	r3, r1
 80033d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4403      	add	r3, r0
 80033f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4403      	add	r3, r0
 800341a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4419      	add	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4403      	add	r3, r0
 8003430:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003434:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d114      	bne.n	8003466 <PCD_EP_OutXfrComplete_int+0x16a>
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800345e:	461a      	mov	r2, r3
 8003460:	2101      	movs	r1, #1
 8003462:	f003 f8d1 	bl	8006608 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f005 f867 	bl	8008540 <HAL_PCD_DataOutStageCallback>
 8003472:	e046      	b.n	8003502 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a26      	ldr	r2, [pc, #152]	; (8003510 <PCD_EP_OutXfrComplete_int+0x214>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d124      	bne.n	80034c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003492:	461a      	mov	r2, r3
 8003494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003498:	6093      	str	r3, [r2, #8]
 800349a:	e032      	b.n	8003502 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b2:	461a      	mov	r2, r3
 80034b4:	2320      	movs	r3, #32
 80034b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f005 f83e 	bl	8008540 <HAL_PCD_DataOutStageCallback>
 80034c4:	e01d      	b.n	8003502 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d114      	bne.n	80034f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d108      	bne.n	80034f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ee:	461a      	mov	r2, r3
 80034f0:	2100      	movs	r1, #0
 80034f2:	f003 f889 	bl	8006608 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f005 f81f 	bl	8008540 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	4f54300a 	.word	0x4f54300a
 8003510:	4f54310a 	.word	0x4f54310a

08003514 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	333c      	adds	r3, #60	; 0x3c
 800352c:	3304      	adds	r3, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <PCD_EP_OutSetupPacket_int+0x88>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d90e      	bls.n	8003568 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	461a      	mov	r2, r3
 8003562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003566:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f004 ffd7 	bl	800851c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <PCD_EP_OutSetupPacket_int+0x88>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d90c      	bls.n	8003590 <PCD_EP_OutSetupPacket_int+0x7c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d108      	bne.n	8003590 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003588:	461a      	mov	r2, r3
 800358a:	2101      	movs	r1, #1
 800358c:	f003 f83c 	bl	8006608 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	4f54300a 	.word	0x4f54300a

080035a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
 80035ac:	4613      	mov	r3, r2
 80035ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035be:	883b      	ldrh	r3, [r7, #0]
 80035c0:	0419      	lsls	r1, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
 80035cc:	e028      	b.n	8003620 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	4413      	add	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035dc:	2300      	movs	r3, #0
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e00d      	b.n	80035fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	3340      	adds	r3, #64	; 0x40
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4413      	add	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	3301      	adds	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	3b01      	subs	r3, #1
 8003604:	429a      	cmp	r2, r3
 8003606:	d3ec      	bcc.n	80035e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003608:	883b      	ldrh	r3, [r7, #0]
 800360a:	0418      	lsls	r0, r3, #16
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	3b01      	subs	r3, #1
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	4302      	orrs	r2, r0
 8003618:	3340      	adds	r3, #64	; 0x40
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e267      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d075      	beq.n	8003772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003686:	4b88      	ldr	r3, [pc, #544]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b04      	cmp	r3, #4
 8003690:	d00c      	beq.n	80036ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003692:	4b85      	ldr	r3, [pc, #532]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369a:	2b08      	cmp	r3, #8
 800369c:	d112      	bne.n	80036c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369e:	4b82      	ldr	r3, [pc, #520]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d05b      	beq.n	8003770 <HAL_RCC_OscConfig+0x108>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d157      	bne.n	8003770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e242      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d106      	bne.n	80036dc <HAL_RCC_OscConfig+0x74>
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a75      	ldr	r2, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e01d      	b.n	8003718 <HAL_RCC_OscConfig+0xb0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x98>
 80036e6:	4b70      	ldr	r3, [pc, #448]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6f      	ldr	r2, [pc, #444]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80036ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6c      	ldr	r2, [pc, #432]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0xb0>
 8003700:	4b69      	ldr	r3, [pc, #420]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a68      	ldr	r2, [pc, #416]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4b66      	ldr	r3, [pc, #408]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a65      	ldr	r2, [pc, #404]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fd fd42 	bl	80011a8 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003728:	f7fd fd3e 	bl	80011a8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	; 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e207      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b5b      	ldr	r3, [pc, #364]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0xc0>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fd fd2e 	bl	80011a8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003750:	f7fd fd2a 	bl	80011a8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1f3      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	4b51      	ldr	r3, [pc, #324]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0xe8>
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d063      	beq.n	8003846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377e:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003792:	2b08      	cmp	r3, #8
 8003794:	d11c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003796:	4b44      	ldr	r3, [pc, #272]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x152>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e1c7      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4937      	ldr	r1, [pc, #220]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	e03a      	b.n	8003846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HAL_RCC_OscConfig+0x244>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fd fce3 	bl	80011a8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e6:	f7fd fcdf 	bl	80011a8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e1a8      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003804:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4925      	ldr	r1, [pc, #148]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381a:	4b24      	ldr	r3, [pc, #144]	; (80038ac <HAL_RCC_OscConfig+0x244>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fd fcc2 	bl	80011a8 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003828:	f7fd fcbe 	bl	80011a8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e187      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d036      	beq.n	80038c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <HAL_RCC_OscConfig+0x248>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fd fca2 	bl	80011a8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003868:	f7fd fc9e 	bl	80011a8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e167      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_OscConfig+0x240>)
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x200>
 8003886:	e01b      	b.n	80038c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_RCC_OscConfig+0x248>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7fd fc8b 	bl	80011a8 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	e00e      	b.n	80038b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003896:	f7fd fc87 	bl	80011a8 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d907      	bls.n	80038b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e150      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	42470000 	.word	0x42470000
 80038b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	4b88      	ldr	r3, [pc, #544]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ea      	bne.n	8003896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8097 	beq.w	80039fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d2:	4b81      	ldr	r3, [pc, #516]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	4b7d      	ldr	r3, [pc, #500]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4a7c      	ldr	r2, [pc, #496]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ec:	6413      	str	r3, [r2, #64]	; 0x40
 80038ee:	4b7a      	ldr	r3, [pc, #488]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fe:	4b77      	ldr	r3, [pc, #476]	; (8003adc <HAL_RCC_OscConfig+0x474>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d118      	bne.n	800393c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390a:	4b74      	ldr	r3, [pc, #464]	; (8003adc <HAL_RCC_OscConfig+0x474>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a73      	ldr	r2, [pc, #460]	; (8003adc <HAL_RCC_OscConfig+0x474>)
 8003910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003916:	f7fd fc47 	bl	80011a8 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7fd fc43 	bl	80011a8 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e10c      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <HAL_RCC_OscConfig+0x474>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d106      	bne.n	8003952 <HAL_RCC_OscConfig+0x2ea>
 8003944:	4b64      	ldr	r3, [pc, #400]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a63      	ldr	r2, [pc, #396]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x324>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b05      	cmp	r3, #5
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x30c>
 800395a:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a5e      	ldr	r2, [pc, #376]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
 8003966:	4b5c      	ldr	r3, [pc, #368]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a5b      	ldr	r2, [pc, #364]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x324>
 8003974:	4b58      	ldr	r3, [pc, #352]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a57      	ldr	r2, [pc, #348]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a54      	ldr	r2, [pc, #336]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 0304 	bic.w	r3, r3, #4
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d015      	beq.n	80039c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fd fc08 	bl	80011a8 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399c:	f7fd fc04 	bl	80011a8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e0cb      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	4b49      	ldr	r3, [pc, #292]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ee      	beq.n	800399c <HAL_RCC_OscConfig+0x334>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fd fbf2 	bl	80011a8 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c6:	e00a      	b.n	80039de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd fbee 	bl	80011a8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0b5      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039de:	4b3e      	ldr	r3, [pc, #248]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ee      	bne.n	80039c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	4a38      	ldr	r2, [pc, #224]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 80039f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80a1 	beq.w	8003b48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a06:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d05c      	beq.n	8003acc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d141      	bne.n	8003a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <HAL_RCC_OscConfig+0x478>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fd fbc2 	bl	80011a8 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fd fbbe 	bl	80011a8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e087      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	491b      	ldr	r1, [pc, #108]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x478>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fd fb97 	bl	80011a8 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fd fb93 	bl	80011a8 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e05c      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x416>
 8003a9c:	e054      	b.n	8003b48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_RCC_OscConfig+0x478>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fb80 	bl	80011a8 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fd fb7c 	bl	80011a8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e045      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x444>
 8003aca:	e03d      	b.n	8003b48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e038      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x4ec>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d028      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d121      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d11a      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b14:	4013      	ands	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d111      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800

08003b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0cc      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b68      	ldr	r3, [pc, #416]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d90c      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b63      	ldr	r3, [pc, #396]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0b8      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d020      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bac:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a52      	ldr	r2, [pc, #328]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b50      	ldr	r3, [pc, #320]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	494d      	ldr	r1, [pc, #308]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d044      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d119      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e07f      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c16:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e06f      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e067      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c36:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 0203 	bic.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4934      	ldr	r1, [pc, #208]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c48:	f7fd faae 	bl	80011a8 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fd faaa 	bl	80011a8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e04f      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 020c 	and.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1eb      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d20c      	bcs.n	8003ca0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e032      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cac:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4916      	ldr	r1, [pc, #88]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	490e      	ldr	r1, [pc, #56]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cde:	f000 f821 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	490a      	ldr	r1, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf0:	5ccb      	ldrb	r3, [r1, r3]
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fd fa0e 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023c00 	.word	0x40023c00
 8003d14:	40023800 	.word	0x40023800
 8003d18:	0800a09c 	.word	0x0800a09c
 8003d1c:	20000028 	.word	0x20000028
 8003d20:	2000002c 	.word	0x2000002c

08003d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d28:	b094      	sub	sp, #80	; 0x50
 8003d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d30:	2300      	movs	r3, #0
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	2300      	movs	r3, #0
 8003d36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d3c:	4b79      	ldr	r3, [pc, #484]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d00d      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x40>
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	f200 80e1 	bhi.w	8003f10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x34>
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d56:	e0db      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b73      	ldr	r3, [pc, #460]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d5c:	e0db      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5e:	4b73      	ldr	r3, [pc, #460]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d62:	e0d8      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d64:	4b6f      	ldr	r3, [pc, #444]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6e:	4b6d      	ldr	r3, [pc, #436]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d063      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7a:	4b6a      	ldr	r3, [pc, #424]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	099b      	lsrs	r3, r3, #6
 8003d80:	2200      	movs	r2, #0
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d8e:	2300      	movs	r3, #0
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
 8003d92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d96:	4622      	mov	r2, r4
 8003d98:	462b      	mov	r3, r5
 8003d9a:	f04f 0000 	mov.w	r0, #0
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	0159      	lsls	r1, r3, #5
 8003da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da8:	0150      	lsls	r0, r2, #5
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4621      	mov	r1, r4
 8003db0:	1a51      	subs	r1, r2, r1
 8003db2:	6139      	str	r1, [r7, #16]
 8003db4:	4629      	mov	r1, r5
 8003db6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc8:	4659      	mov	r1, fp
 8003dca:	018b      	lsls	r3, r1, #6
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	018a      	lsls	r2, r1, #6
 8003dd6:	4651      	mov	r1, sl
 8003dd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003ddc:	4659      	mov	r1, fp
 8003dde:	eb63 0901 	sbc.w	r9, r3, r1
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df6:	4690      	mov	r8, r2
 8003df8:	4699      	mov	r9, r3
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	eb18 0303 	adds.w	r3, r8, r3
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	462b      	mov	r3, r5
 8003e04:	eb49 0303 	adc.w	r3, r9, r3
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e16:	4629      	mov	r1, r5
 8003e18:	024b      	lsls	r3, r1, #9
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e20:	4621      	mov	r1, r4
 8003e22:	024a      	lsls	r2, r1, #9
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e34:	f7fc fa24 	bl	8000280 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	e058      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e42:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	2200      	movs	r2, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
 8003e58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	0159      	lsls	r1, r3, #5
 8003e6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6e:	0150      	lsls	r0, r2, #5
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4641      	mov	r1, r8
 8003e76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e94:	ebb2 040a 	subs.w	r4, r2, sl
 8003e98:	eb63 050b 	sbc.w	r5, r3, fp
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	00eb      	lsls	r3, r5, #3
 8003ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eaa:	00e2      	lsls	r2, r4, #3
 8003eac:	4614      	mov	r4, r2
 8003eae:	461d      	mov	r5, r3
 8003eb0:	4643      	mov	r3, r8
 8003eb2:	18e3      	adds	r3, r4, r3
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	eb45 0303 	adc.w	r3, r5, r3
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eca:	4629      	mov	r1, r5
 8003ecc:	028b      	lsls	r3, r1, #10
 8003ece:	4621      	mov	r1, r4
 8003ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	028a      	lsls	r2, r1, #10
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ede:	2200      	movs	r2, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	61fa      	str	r2, [r7, #28]
 8003ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee8:	f7fc f9ca 	bl	8000280 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f0e:	e002      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3750      	adds	r7, #80	; 0x50
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	00f42400 	.word	0x00f42400
 8003f2c:	007a1200 	.word	0x007a1200

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000028 	.word	0x20000028

08003f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f4c:	f7ff fff0 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	0a9b      	lsrs	r3, r3, #10
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4903      	ldr	r1, [pc, #12]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	0800a0ac 	.word	0x0800a0ac

08003f70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d035      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f98:	4b62      	ldr	r3, [pc, #392]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd f903 	bl	80011a8 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fa6:	f7fd f8ff 	bl	80011a8 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e0b0      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fb8:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	019a      	lsls	r2, r3, #6
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	071b      	lsls	r3, r3, #28
 8003fd0:	4955      	ldr	r1, [pc, #340]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fd8:	4b52      	ldr	r3, [pc, #328]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fde:	f7fd f8e3 	bl	80011a8 <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fe6:	f7fd f8df 	bl	80011a8 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e090      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8083 	beq.w	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b44      	ldr	r3, [pc, #272]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40
 8004022:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a3e      	ldr	r2, [pc, #248]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800403a:	f7fd f8b5 	bl	80011a8 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fd f8b1 	bl	80011a8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e062      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004054:	4b35      	ldr	r3, [pc, #212]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004060:	4b31      	ldr	r3, [pc, #196]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004068:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d028      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800407e:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004086:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004088:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004094:	4a24      	ldr	r2, [pc, #144]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d114      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fd f87f 	bl	80011a8 <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd f87b 	bl	80011a8 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e02a      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040dc:	d10d      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	490d      	ldr	r1, [pc, #52]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]
 80040f8:	e005      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004100:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004104:	6093      	str	r3, [r2, #8]
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004112:	4905      	ldr	r1, [pc, #20]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004114:	4313      	orrs	r3, r2
 8004116:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	42470068 	.word	0x42470068
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000
 8004130:	42470e40 	.word	0x42470e40

08004134 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d13e      	bne.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d12f      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800416a:	617b      	str	r3, [r7, #20]
          break;
 800416c:	e02f      	b.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800416e:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417a:	d108      	bne.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800417c:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	4a18      	ldr	r2, [pc, #96]	; (80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	e007      	b.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800418e:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004196:	4a15      	ldr	r2, [pc, #84]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	099b      	lsrs	r3, r3, #6
 80041a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	fb02 f303 	mul.w	r3, r2, r3
 80041b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	0f1b      	lsrs	r3, r3, #28
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]
          break;
 80041c6:	e002      	b.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
          break;
 80041cc:	bf00      	nop
        }
      }
      break;
 80041ce:	bf00      	nop
    }
  }
  return frequency;
 80041d0:	697b      	ldr	r3, [r7, #20]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
 80041e4:	00bb8000 	.word	0x00bb8000
 80041e8:	007a1200 	.word	0x007a1200
 80041ec:	00f42400 	.word	0x00f42400

080041f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e07b      	b.n	80042fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d108      	bne.n	800421c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004212:	d009      	beq.n	8004228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	61da      	str	r2, [r3, #28]
 800421a:	e005      	b.n	8004228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fc fe04 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	ea42 0103 	orr.w	r1, r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0104 	and.w	r1, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f003 0210 	and.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e041      	b.n	8004398 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fc fdd9 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3304      	adds	r3, #4
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f000 fb41 	bl	80049c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f839 	bl	800443e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 faf2 	bl	80049c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_TIM_PWM_Start+0x24>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e022      	b.n	80044be <HAL_TIM_PWM_Start+0x6a>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d109      	bne.n	8004492 <HAL_TIM_PWM_Start+0x3e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e015      	b.n	80044be <HAL_TIM_PWM_Start+0x6a>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d109      	bne.n	80044ac <HAL_TIM_PWM_Start+0x58>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e008      	b.n	80044be <HAL_TIM_PWM_Start+0x6a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	bf14      	ite	ne
 80044b8:	2301      	movne	r3, #1
 80044ba:	2300      	moveq	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e07c      	b.n	80045c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x82>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d4:	e013      	b.n	80044fe <HAL_TIM_PWM_Start+0xaa>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x92>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e4:	e00b      	b.n	80044fe <HAL_TIM_PWM_Start+0xaa>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Start+0xa2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f4:	e003      	b.n	80044fe <HAL_TIM_PWM_Start+0xaa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	6839      	ldr	r1, [r7, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fd48 	bl	8004f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <HAL_TIM_PWM_Start+0x174>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIM_PWM_Start+0xcc>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <HAL_TIM_PWM_Start+0x178>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d101      	bne.n	8004524 <HAL_TIM_PWM_Start+0xd0>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_TIM_PWM_Start+0xd2>
 8004524:	2300      	movs	r3, #0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <HAL_TIM_PWM_Start+0x174>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d01d      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <HAL_TIM_PWM_Start+0x17c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_TIM_PWM_Start+0x180>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <HAL_TIM_PWM_Start+0x184>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a16      	ldr	r2, [pc, #88]	; (80045cc <HAL_TIM_PWM_Start+0x178>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a18      	ldr	r2, [pc, #96]	; (80045dc <HAL_TIM_PWM_Start+0x188>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <HAL_TIM_PWM_Start+0x18c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d111      	bne.n	80045ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b06      	cmp	r3, #6
 800459a:	d010      	beq.n	80045be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	e007      	b.n	80045be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010400 	.word	0x40010400
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40001800 	.word	0x40001800

080045e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	6839      	ldr	r1, [r7, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fcd0 	bl	8004f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2e      	ldr	r2, [pc, #184]	; (80046bc <HAL_TIM_PWM_Stop+0xd8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_TIM_PWM_Stop+0x2c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2d      	ldr	r2, [pc, #180]	; (80046c0 <HAL_TIM_PWM_Stop+0xdc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d101      	bne.n	8004614 <HAL_TIM_PWM_Stop+0x30>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <HAL_TIM_PWM_Stop+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	f241 1311 	movw	r3, #4369	; 0x1111
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <HAL_TIM_PWM_Stop+0x66>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	f240 4344 	movw	r3, #1092	; 0x444
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_TIM_PWM_Stop+0x66>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	f241 1311 	movw	r3, #4369	; 0x1111
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_TIM_PWM_Stop+0x96>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1a      	ldr	r2, [r3, #32]
 8004660:	f240 4344 	movw	r3, #1092	; 0x444
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d107      	bne.n	800467a <HAL_TIM_PWM_Stop+0x96>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Stop+0xa6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004688:	e013      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xce>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Stop+0xb6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004698:	e00b      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xce>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Stop+0xc6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a8:	e003      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xce>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40010400 	.word	0x40010400

080046c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0ac      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x174>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	f200 809f 	bhi.w	800482c <HAL_TIM_PWM_ConfigChannel+0x168>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004729 	.word	0x08004729
 80046f8:	0800482d 	.word	0x0800482d
 80046fc:	0800482d 	.word	0x0800482d
 8004700:	0800482d 	.word	0x0800482d
 8004704:	08004769 	.word	0x08004769
 8004708:	0800482d 	.word	0x0800482d
 800470c:	0800482d 	.word	0x0800482d
 8004710:	0800482d 	.word	0x0800482d
 8004714:	080047ab 	.word	0x080047ab
 8004718:	0800482d 	.word	0x0800482d
 800471c:	0800482d 	.word	0x0800482d
 8004720:	0800482d 	.word	0x0800482d
 8004724:	080047eb 	.word	0x080047eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f9ea 	bl	8004b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0208 	orr.w	r2, r2, #8
 8004742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0204 	bic.w	r2, r2, #4
 8004752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6999      	ldr	r1, [r3, #24]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	619a      	str	r2, [r3, #24]
      break;
 8004766:	e062      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa3a 	bl	8004be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6999      	ldr	r1, [r3, #24]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	021a      	lsls	r2, r3, #8
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	619a      	str	r2, [r3, #24]
      break;
 80047a8:	e041      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fa8f 	bl	8004cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0208 	orr.w	r2, r2, #8
 80047c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0204 	bic.w	r2, r2, #4
 80047d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69d9      	ldr	r1, [r3, #28]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	61da      	str	r2, [r3, #28]
      break;
 80047e8:	e021      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fae3 	bl	8004dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69d9      	ldr	r1, [r3, #28]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	021a      	lsls	r2, r3, #8
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	61da      	str	r2, [r3, #28]
      break;
 800482a:	e000      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800482c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIM_ConfigClockSource+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e0b3      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x180>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d03e      	beq.n	8004910 <HAL_TIM_ConfigClockSource+0xd0>
 8004892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004896:	f200 8087 	bhi.w	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	f000 8085 	beq.w	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	d87f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048a8:	2b70      	cmp	r3, #112	; 0x70
 80048aa:	d01a      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xa2>
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d87b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048b0:	2b60      	cmp	r3, #96	; 0x60
 80048b2:	d050      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x116>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d877      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048b8:	2b50      	cmp	r3, #80	; 0x50
 80048ba:	d03c      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xf6>
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d873      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d058      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0x136>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d86f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048c8:	2b30      	cmp	r3, #48	; 0x30
 80048ca:	d064      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048cc:	2b30      	cmp	r3, #48	; 0x30
 80048ce:	d86b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d060      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d867      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05c      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d05a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048e0:	e062      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6899      	ldr	r1, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f000 fb33 	bl	8004f5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004904:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	609a      	str	r2, [r3, #8]
      break;
 800490e:	e04e      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f000 fb1c 	bl	8004f5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004932:	609a      	str	r2, [r3, #8]
      break;
 8004934:	e03b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	461a      	mov	r2, r3
 8004944:	f000 fa90 	bl	8004e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2150      	movs	r1, #80	; 0x50
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fae9 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004954:	e02b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6859      	ldr	r1, [r3, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	461a      	mov	r2, r3
 8004964:	f000 faaf 	bl	8004ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2160      	movs	r1, #96	; 0x60
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fad9 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004974:	e01b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f000 fa70 	bl	8004e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2140      	movs	r1, #64	; 0x40
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fac9 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004994:	e00b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f000 fac0 	bl	8004f26 <TIM_ITRx_SetConfig>
        break;
 80049a6:	e002      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049a8:	bf00      	nop
 80049aa:	e000      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a40      	ldr	r2, [pc, #256]	; (8004adc <TIM_Base_SetConfig+0x114>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e6:	d00f      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a3d      	ldr	r2, [pc, #244]	; (8004ae0 <TIM_Base_SetConfig+0x118>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a3c      	ldr	r2, [pc, #240]	; (8004ae4 <TIM_Base_SetConfig+0x11c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d007      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a3b      	ldr	r2, [pc, #236]	; (8004ae8 <TIM_Base_SetConfig+0x120>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a3a      	ldr	r2, [pc, #232]	; (8004aec <TIM_Base_SetConfig+0x124>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2f      	ldr	r2, [pc, #188]	; (8004adc <TIM_Base_SetConfig+0x114>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d02b      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d027      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ae0 <TIM_Base_SetConfig+0x118>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d023      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2b      	ldr	r2, [pc, #172]	; (8004ae4 <TIM_Base_SetConfig+0x11c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01f      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <TIM_Base_SetConfig+0x120>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01b      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a29      	ldr	r2, [pc, #164]	; (8004aec <TIM_Base_SetConfig+0x124>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d017      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <TIM_Base_SetConfig+0x128>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a27      	ldr	r2, [pc, #156]	; (8004af4 <TIM_Base_SetConfig+0x12c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00f      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <TIM_Base_SetConfig+0x130>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00b      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a25      	ldr	r2, [pc, #148]	; (8004afc <TIM_Base_SetConfig+0x134>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d007      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a24      	ldr	r2, [pc, #144]	; (8004b00 <TIM_Base_SetConfig+0x138>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <TIM_Base_SetConfig+0x13c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d108      	bne.n	8004a8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <TIM_Base_SetConfig+0x114>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a0c      	ldr	r2, [pc, #48]	; (8004aec <TIM_Base_SetConfig+0x124>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	615a      	str	r2, [r3, #20]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800
 8004ae8:	40000c00 	.word	0x40000c00
 8004aec:	40010400 	.word	0x40010400
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40014400 	.word	0x40014400
 8004af8:	40014800 	.word	0x40014800
 8004afc:	40001800 	.word	0x40001800
 8004b00:	40001c00 	.word	0x40001c00
 8004b04:	40002000 	.word	0x40002000

08004b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f023 0302 	bic.w	r3, r3, #2
 8004b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <TIM_OC1_SetConfig+0xd8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_OC1_SetConfig+0x64>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <TIM_OC1_SetConfig+0xdc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d10c      	bne.n	8004b86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0308 	bic.w	r3, r3, #8
 8004b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <TIM_OC1_SetConfig+0xd8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_OC1_SetConfig+0x8e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <TIM_OC1_SetConfig+0xdc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d111      	bne.n	8004bba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	621a      	str	r2, [r3, #32]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40010400 	.word	0x40010400

08004be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f023 0210 	bic.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0320 	bic.w	r3, r3, #32
 8004c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <TIM_OC2_SetConfig+0xe4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC2_SetConfig+0x68>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a21      	ldr	r2, [pc, #132]	; (8004cd0 <TIM_OC2_SetConfig+0xe8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10d      	bne.n	8004c6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <TIM_OC2_SetConfig+0xe4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_OC2_SetConfig+0x94>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <TIM_OC2_SetConfig+0xe8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d113      	bne.n	8004ca4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40010400 	.word	0x40010400

08004cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <TIM_OC3_SetConfig+0xe0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <TIM_OC3_SetConfig+0x66>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a20      	ldr	r2, [pc, #128]	; (8004db8 <TIM_OC3_SetConfig+0xe4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d10d      	bne.n	8004d56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <TIM_OC3_SetConfig+0xe0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_OC3_SetConfig+0x92>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a15      	ldr	r2, [pc, #84]	; (8004db8 <TIM_OC3_SetConfig+0xe4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d113      	bne.n	8004d8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	621a      	str	r2, [r3, #32]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40010400 	.word	0x40010400

08004dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	031b      	lsls	r3, r3, #12
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a12      	ldr	r2, [pc, #72]	; (8004e60 <TIM_OC4_SetConfig+0xa4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC4_SetConfig+0x68>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <TIM_OC4_SetConfig+0xa8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d109      	bne.n	8004e38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40010400 	.word	0x40010400

08004e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 030a 	bic.w	r3, r3, #10
 8004ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0210 	bic.w	r2, r3, #16
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	031b      	lsls	r3, r3, #12
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f043 0307 	orr.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2201      	movs	r2, #1
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e05a      	b.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d022      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d01d      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d018      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1a      	ldr	r2, [pc, #104]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10c      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4313      	orrs	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e0:	b084      	sub	sp, #16
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	f107 001c 	add.w	r0, r7, #28
 80050ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d122      	bne.n	800513e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800510c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005122:	2b01      	cmp	r3, #1
 8005124:	d105      	bne.n	8005132 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f001 fac6 	bl	80066c4 <USB_CoreReset>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]
 800513c:	e01a      	b.n	8005174 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f001 faba 	bl	80066c4 <USB_CoreReset>
 8005150:	4603      	mov	r3, r0
 8005152:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
 8005166:	e005      	b.n	8005174 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10b      	bne.n	8005192 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f043 0206 	orr.w	r2, r3, #6
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800519e:	b004      	add	sp, #16
 80051a0:	4770      	bx	lr
	...

080051a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d165      	bne.n	8005284 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a41      	ldr	r2, [pc, #260]	; (80052c0 <USB_SetTurnaroundTime+0x11c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d906      	bls.n	80051ce <USB_SetTurnaroundTime+0x2a>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a40      	ldr	r2, [pc, #256]	; (80052c4 <USB_SetTurnaroundTime+0x120>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d202      	bcs.n	80051ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051c8:	230f      	movs	r3, #15
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e062      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a3c      	ldr	r2, [pc, #240]	; (80052c4 <USB_SetTurnaroundTime+0x120>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d306      	bcc.n	80051e4 <USB_SetTurnaroundTime+0x40>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a3b      	ldr	r2, [pc, #236]	; (80052c8 <USB_SetTurnaroundTime+0x124>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d202      	bcs.n	80051e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051de:	230e      	movs	r3, #14
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e057      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a38      	ldr	r2, [pc, #224]	; (80052c8 <USB_SetTurnaroundTime+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d306      	bcc.n	80051fa <USB_SetTurnaroundTime+0x56>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a37      	ldr	r2, [pc, #220]	; (80052cc <USB_SetTurnaroundTime+0x128>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d202      	bcs.n	80051fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051f4:	230d      	movs	r3, #13
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e04c      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4a33      	ldr	r2, [pc, #204]	; (80052cc <USB_SetTurnaroundTime+0x128>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d306      	bcc.n	8005210 <USB_SetTurnaroundTime+0x6c>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a32      	ldr	r2, [pc, #200]	; (80052d0 <USB_SetTurnaroundTime+0x12c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d802      	bhi.n	8005210 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800520a:	230c      	movs	r3, #12
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e041      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a2f      	ldr	r2, [pc, #188]	; (80052d0 <USB_SetTurnaroundTime+0x12c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d906      	bls.n	8005226 <USB_SetTurnaroundTime+0x82>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a2e      	ldr	r2, [pc, #184]	; (80052d4 <USB_SetTurnaroundTime+0x130>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d802      	bhi.n	8005226 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005220:	230b      	movs	r3, #11
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e036      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <USB_SetTurnaroundTime+0x130>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d906      	bls.n	800523c <USB_SetTurnaroundTime+0x98>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <USB_SetTurnaroundTime+0x134>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d802      	bhi.n	800523c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005236:	230a      	movs	r3, #10
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e02b      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4a26      	ldr	r2, [pc, #152]	; (80052d8 <USB_SetTurnaroundTime+0x134>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d906      	bls.n	8005252 <USB_SetTurnaroundTime+0xae>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a25      	ldr	r2, [pc, #148]	; (80052dc <USB_SetTurnaroundTime+0x138>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d202      	bcs.n	8005252 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800524c:	2309      	movs	r3, #9
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e020      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4a21      	ldr	r2, [pc, #132]	; (80052dc <USB_SetTurnaroundTime+0x138>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d306      	bcc.n	8005268 <USB_SetTurnaroundTime+0xc4>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a20      	ldr	r2, [pc, #128]	; (80052e0 <USB_SetTurnaroundTime+0x13c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d802      	bhi.n	8005268 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005262:	2308      	movs	r3, #8
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e015      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <USB_SetTurnaroundTime+0x13c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d906      	bls.n	800527e <USB_SetTurnaroundTime+0xda>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <USB_SetTurnaroundTime+0x140>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d202      	bcs.n	800527e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005278:	2307      	movs	r3, #7
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e00a      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800527e:	2306      	movs	r3, #6
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e007      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800528a:	2309      	movs	r3, #9
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e001      	b.n	8005294 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005290:	2309      	movs	r3, #9
 8005292:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	029b      	lsls	r3, r3, #10
 80052a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	00d8acbf 	.word	0x00d8acbf
 80052c4:	00e4e1c0 	.word	0x00e4e1c0
 80052c8:	00f42400 	.word	0x00f42400
 80052cc:	01067380 	.word	0x01067380
 80052d0:	011a499f 	.word	0x011a499f
 80052d4:	01312cff 	.word	0x01312cff
 80052d8:	014ca43f 	.word	0x014ca43f
 80052dc:	016e3600 	.word	0x016e3600
 80052e0:	01a6ab1f 	.word	0x01a6ab1f
 80052e4:	01e84800 	.word	0x01e84800

080052e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f043 0201 	orr.w	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d106      	bne.n	8005358 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	e00b      	b.n	8005370 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60da      	str	r2, [r3, #12]
 800536a:	e001      	b.n	8005370 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e003      	b.n	8005378 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005370:	2032      	movs	r0, #50	; 0x32
 8005372:	f7fb ff25 	bl	80011c0 <HAL_Delay>

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005380:	b084      	sub	sp, #16
 8005382:	b580      	push	{r7, lr}
 8005384:	b086      	sub	sp, #24
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800538e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	e009      	b.n	80053b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3340      	adds	r3, #64	; 0x40
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	3301      	adds	r3, #1
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b0e      	cmp	r3, #14
 80053b8:	d9f2      	bls.n	80053a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d11c      	bne.n	80053fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ce:	f043 0302 	orr.w	r3, r3, #2
 80053d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
 80053f8:	e00b      	b.n	8005412 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005418:	461a      	mov	r2, r3
 800541a:	2300      	movs	r3, #0
 800541c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	4619      	mov	r1, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542c:	461a      	mov	r2, r3
 800542e:	680b      	ldr	r3, [r1, #0]
 8005430:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10c      	bne.n	8005452 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800543e:	2100      	movs	r1, #0
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f949 	bl	80056d8 <USB_SetDevSpeed>
 8005446:	e008      	b.n	800545a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005448:	2101      	movs	r1, #1
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f944 	bl	80056d8 <USB_SetDevSpeed>
 8005450:	e003      	b.n	800545a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005452:	2103      	movs	r1, #3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f93f 	bl	80056d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800545a:	2110      	movs	r1, #16
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f8f3 	bl	8005648 <USB_FlushTxFifo>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f911 	bl	8005694 <USB_FlushRxFifo>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	461a      	mov	r2, r3
 8005484:	2300      	movs	r3, #0
 8005486:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	461a      	mov	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a0:	2300      	movs	r3, #0
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	e043      	b.n	800552e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054bc:	d118      	bne.n	80054f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	461a      	mov	r2, r3
 80054d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e013      	b.n	8005502 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	461a      	mov	r2, r3
 80054e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e008      	b.n	8005502 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	461a      	mov	r2, r3
 80054fe:	2300      	movs	r3, #0
 8005500:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	461a      	mov	r2, r3
 8005510:	2300      	movs	r3, #0
 8005512:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	461a      	mov	r2, r3
 8005522:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005526:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	3301      	adds	r3, #1
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	429a      	cmp	r2, r3
 8005534:	d3b7      	bcc.n	80054a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e043      	b.n	80055c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800554e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005552:	d118      	bne.n	8005586 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10a      	bne.n	8005570 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	461a      	mov	r2, r3
 8005568:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e013      	b.n	8005598 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	461a      	mov	r2, r3
 800557e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	e008      	b.n	8005598 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	461a      	mov	r2, r3
 8005594:	2300      	movs	r3, #0
 8005596:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	461a      	mov	r2, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	461a      	mov	r2, r3
 80055b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3301      	adds	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d3b7      	bcc.n	800553c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f043 0210 	orr.w	r2, r3, #16
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <USB_DevInit+0x2c4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f043 0208 	orr.w	r2, r3, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800561e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d107      	bne.n	8005634 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562c:	f043 0304 	orr.w	r3, r3, #4
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005640:	b004      	add	sp, #16
 8005642:	4770      	bx	lr
 8005644:	803c3800 	.word	0x803c3800

08005648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	019b      	lsls	r3, r3, #6
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <USB_FlushTxFifo+0x48>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e006      	b.n	8005682 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b20      	cmp	r3, #32
 800567e:	d0f0      	beq.n	8005662 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	00030d40 	.word	0x00030d40

08005694 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2210      	movs	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3301      	adds	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <USB_FlushRxFifo+0x40>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e006      	b.n	80056c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d0f0      	beq.n	80056a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	00030d40 	.word	0x00030d40

080056d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4313      	orrs	r3, r2
 80056fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800570a:	b480      	push	{r7}
 800570c:	b087      	sub	sp, #28
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0306 	and.w	r3, r3, #6
 8005722:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]
 800572e:	e00a      	b.n	8005746 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d002      	beq.n	800573c <USB_GetDevSpeed+0x32>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b06      	cmp	r3, #6
 800573a:	d102      	bne.n	8005742 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800573c:	2302      	movs	r3, #2
 800573e:	75fb      	strb	r3, [r7, #23]
 8005740:	e001      	b.n	8005746 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005742:	230f      	movs	r3, #15
 8005744:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005746:	7dfb      	ldrb	r3, [r7, #23]
}
 8005748:	4618      	mov	r0, r3
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d13a      	bne.n	80057e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	b29b      	uxth	r3, r3
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578e:	4313      	orrs	r3, r2
 8005790:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d155      	bne.n	8005854 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	78db      	ldrb	r3, [r3, #3]
 80057c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	059b      	lsls	r3, r3, #22
 80057ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057cc:	4313      	orrs	r3, r2
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e036      	b.n	8005854 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	2101      	movs	r1, #1
 80057f8:	fa01 f303 	lsl.w	r3, r1, r3
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	68f9      	ldr	r1, [r7, #12]
 8005800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005804:	4313      	orrs	r3, r2
 8005806:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11a      	bne.n	8005854 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	78db      	ldrb	r3, [r3, #3]
 8005838:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800583a:	430b      	orrs	r3, r1
 800583c:	4313      	orrs	r3, r2
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005852:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d161      	bne.n	8005944 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005896:	d11f      	bne.n	80058d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	2101      	movs	r1, #1
 80058ea:	fa01 f303 	lsl.w	r3, r1, r3
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f8:	4013      	ands	r3, r2
 80058fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	2101      	movs	r1, #1
 800590e:	fa01 f303 	lsl.w	r3, r1, r3
 8005912:	b29b      	uxth	r3, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	68f9      	ldr	r1, [r7, #12]
 8005918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800591c:	4013      	ands	r3, r2
 800591e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	0159      	lsls	r1, r3, #5
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	440b      	add	r3, r1
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	4619      	mov	r1, r3
 800593c:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <USB_DeactivateEndpoint+0x1b0>)
 800593e:	4013      	ands	r3, r2
 8005940:	600b      	str	r3, [r1, #0]
 8005942:	e060      	b.n	8005a06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800595a:	d11f      	bne.n	800599c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800597a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800599a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	43db      	mvns	r3, r3
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059bc:	4013      	ands	r3, r2
 80059be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	43db      	mvns	r3, r3
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e0:	4013      	ands	r3, r2
 80059e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	0159      	lsls	r1, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	440b      	add	r3, r1
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	4619      	mov	r1, r3
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <USB_DeactivateEndpoint+0x1b4>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	ec337800 	.word	0xec337800
 8005a18:	eff37800 	.word	0xeff37800

08005a1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	; 0x28
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	f040 815c 	bne.w	8005cf6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d132      	bne.n	8005aac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa4:	0cdb      	lsrs	r3, r3, #19
 8005aa6:	04db      	lsls	r3, r3, #19
 8005aa8:	6113      	str	r3, [r2, #16]
 8005aaa:	e074      	b.n	8005b96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac6:	0cdb      	lsrs	r3, r3, #19
 8005ac8:	04db      	lsls	r3, r3, #19
 8005aca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6959      	ldr	r1, [r3, #20]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	440b      	add	r3, r1
 8005b08:	1e59      	subs	r1, r3, #1
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b12:	04d9      	lsls	r1, r3, #19
 8005b14:	4b9d      	ldr	r3, [pc, #628]	; (8005d8c <USB_EPStartXfer+0x370>)
 8005b16:	400b      	ands	r3, r1
 8005b18:	69b9      	ldr	r1, [r7, #24]
 8005b1a:	0148      	lsls	r0, r1, #5
 8005b1c:	69f9      	ldr	r1, [r7, #28]
 8005b1e:	4401      	add	r1, r0
 8005b20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b24:	4313      	orrs	r3, r2
 8005b26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3e:	69b9      	ldr	r1, [r7, #24]
 8005b40:	0148      	lsls	r0, r1, #5
 8005b42:	69f9      	ldr	r1, [r7, #28]
 8005b44:	4401      	add	r1, r0
 8005b46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	78db      	ldrb	r3, [r3, #3]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d11f      	bne.n	8005b96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d14b      	bne.n	8005c34 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	78db      	ldrb	r3, [r3, #3]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d128      	bne.n	8005c12 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d110      	bne.n	8005bf2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e00f      	b.n	8005c12 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e12f      	b.n	8005e94 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	78db      	ldrb	r3, [r3, #3]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d015      	beq.n	8005c88 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8117 	beq.w	8005e94 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	2101      	movs	r1, #1
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	69f9      	ldr	r1, [r7, #28]
 8005c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c82:	4313      	orrs	r3, r2
 8005c84:	634b      	str	r3, [r1, #52]	; 0x34
 8005c86:	e105      	b.n	8005e94 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d110      	bne.n	8005cba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e00f      	b.n	8005cda <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	68d9      	ldr	r1, [r3, #12]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	b298      	uxth	r0, r3
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4603      	mov	r3, r0
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fa2b 	bl	800614a <USB_WritePacket>
 8005cf4:	e0ce      	b.n	8005e94 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d10:	0cdb      	lsrs	r3, r3, #19
 8005d12:	04db      	lsls	r3, r3, #19
 8005d14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d126      	bne.n	8005d90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d58:	69b9      	ldr	r1, [r7, #24]
 8005d5a:	0148      	lsls	r0, r1, #5
 8005d5c:	69f9      	ldr	r1, [r7, #28]
 8005d5e:	4401      	add	r1, r0
 8005d60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d64:	4313      	orrs	r3, r2
 8005d66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d86:	6113      	str	r3, [r2, #16]
 8005d88:	e036      	b.n	8005df8 <USB_EPStartXfer+0x3dc>
 8005d8a:	bf00      	nop
 8005d8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4413      	add	r3, r2
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	8afb      	ldrh	r3, [r7, #22]
 8005db6:	04d9      	lsls	r1, r3, #19
 8005db8:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <USB_EPStartXfer+0x484>)
 8005dba:	400b      	ands	r3, r1
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	0148      	lsls	r0, r1, #5
 8005dc0:	69f9      	ldr	r1, [r7, #28]
 8005dc2:	4401      	add	r1, r0
 8005dc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	8af9      	ldrh	r1, [r7, #22]
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de8:	69b9      	ldr	r1, [r7, #24]
 8005dea:	0148      	lsls	r0, r1, #5
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	4401      	add	r1, r0
 8005df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d10d      	bne.n	8005e1a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	68d9      	ldr	r1, [r3, #12]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	460a      	mov	r2, r1
 8005e18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	78db      	ldrb	r3, [r3, #3]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d128      	bne.n	8005e74 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d110      	bne.n	8005e54 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e00f      	b.n	8005e74 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	1ff80000 	.word	0x1ff80000

08005ea4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	f040 80cd 	bne.w	8006060 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d132      	bne.n	8005f34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2c:	0cdb      	lsrs	r3, r3, #19
 8005f2e:	04db      	lsls	r3, r3, #19
 8005f30:	6113      	str	r3, [r2, #16]
 8005f32:	e04e      	b.n	8005fd2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4e:	0cdb      	lsrs	r3, r3, #19
 8005f50:	04db      	lsls	r3, r3, #19
 8005f52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	695a      	ldr	r2, [r3, #20]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d903      	bls.n	8005f8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005faa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc2:	6939      	ldr	r1, [r7, #16]
 8005fc4:	0148      	lsls	r0, r1, #5
 8005fc6:	6979      	ldr	r1, [r7, #20]
 8005fc8:	4401      	add	r1, r0
 8005fca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d11e      	bne.n	8006016 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	461a      	mov	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	e092      	b.n	800613c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006030:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006034:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d07e      	beq.n	800613c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	2101      	movs	r1, #1
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	6979      	ldr	r1, [r7, #20]
 8006056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800605a:	4313      	orrs	r3, r2
 800605c:	634b      	str	r3, [r1, #52]	; 0x34
 800605e:	e06d      	b.n	800613c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607a:	0cdb      	lsrs	r3, r3, #19
 800607c:	04db      	lsls	r3, r3, #19
 800607e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800609e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ea:	6939      	ldr	r1, [r7, #16]
 80060ec:	0148      	lsls	r0, r1, #5
 80060ee:	6979      	ldr	r1, [r7, #20]
 80060f0:	4401      	add	r1, r0
 80060f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060f6:	4313      	orrs	r3, r2
 80060f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10d      	bne.n	800611c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	68d9      	ldr	r1, [r3, #12]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	460a      	mov	r2, r1
 800611a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800613a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800614a:	b480      	push	{r7}
 800614c:	b089      	sub	sp, #36	; 0x24
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	4611      	mov	r1, r2
 8006156:	461a      	mov	r2, r3
 8006158:	460b      	mov	r3, r1
 800615a:	71fb      	strb	r3, [r7, #7]
 800615c:	4613      	mov	r3, r2
 800615e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006168:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800616c:	2b00      	cmp	r3, #0
 800616e:	d11a      	bne.n	80061a6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006170:	88bb      	ldrh	r3, [r7, #4]
 8006172:	3303      	adds	r3, #3
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006178:	2300      	movs	r3, #0
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	e00f      	b.n	800619e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	031a      	lsls	r2, r3, #12
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618a:	461a      	mov	r2, r3
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3304      	adds	r3, #4
 8006196:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	3301      	adds	r3, #1
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d3eb      	bcc.n	800617e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3724      	adds	r7, #36	; 0x24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	3303      	adds	r3, #3
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e00b      	b.n	80061f0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3304      	adds	r3, #4
 80061e8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	3301      	adds	r3, #1
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d3ef      	bcc.n	80061d8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80061f8:	69fb      	ldr	r3, [r7, #28]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3724      	adds	r7, #36	; 0x24
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d12c      	bne.n	800627c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	db12      	blt.n	800625a <USB_EPSetStall+0x54>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00f      	beq.n	800625a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006258:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e02b      	b.n	80062d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	db12      	blt.n	80062b4 <USB_EPSetStall+0xae>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00f      	beq.n	80062b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d128      	bne.n	8006350 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800631c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	78db      	ldrb	r3, [r3, #3]
 8006322:	2b03      	cmp	r3, #3
 8006324:	d003      	beq.n	800632e <USB_EPClearStall+0x4c>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	78db      	ldrb	r3, [r3, #3]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d138      	bne.n	80063a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	440a      	add	r2, r1
 8006344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e027      	b.n	80063a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800636e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	78db      	ldrb	r3, [r3, #3]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d003      	beq.n	8006380 <USB_EPClearStall+0x9e>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	78db      	ldrb	r3, [r3, #3]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d10f      	bne.n	80063a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e8:	4313      	orrs	r3, r2
 80063ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006414:	f023 0303 	bic.w	r3, r3, #3
 8006418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006428:	f023 0302 	bic.w	r3, r3, #2
 800642c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646a:	f043 0302 	orr.w	r3, r3, #2
 800646e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4013      	ands	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006496:	68fb      	ldr	r3, [r7, #12]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	0c1b      	lsrs	r3, r3, #16
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	b29b      	uxth	r3, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	4013      	ands	r3, r2
 8006538:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800653a:	68bb      	ldr	r3, [r7, #8]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	fa22 f303 	lsr.w	r3, r2, r3
 8006578:	01db      	lsls	r3, r3, #7
 800657a:	b2db      	uxtb	r3, r3
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4013      	ands	r3, r2
 8006594:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006596:	68bb      	ldr	r3, [r7, #8]
}
 8006598:	4618      	mov	r0, r3
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0301 	and.w	r3, r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065de:	f023 0307 	bic.w	r3, r3, #7
 80065e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
	...

08006608 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	460b      	mov	r3, r1
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	333c      	adds	r3, #60	; 0x3c
 800661e:	3304      	adds	r3, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4a26      	ldr	r2, [pc, #152]	; (80066c0 <USB_EP0_OutStart+0xb8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d90a      	bls.n	8006642 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663c:	d101      	bne.n	8006642 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e037      	b.n	80066b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	461a      	mov	r2, r3
 800664a:	2300      	movs	r3, #0
 800664c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006670:	f043 0318 	orr.w	r3, r3, #24
 8006674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006684:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006688:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10f      	bne.n	80066b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80066ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	4f54300a 	.word	0x4f54300a

080066c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4a13      	ldr	r2, [pc, #76]	; (8006728 <USB_CoreReset+0x64>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e01b      	b.n	800671a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	daf2      	bge.n	80066d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f043 0201 	orr.w	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a09      	ldr	r2, [pc, #36]	; (8006728 <USB_CoreReset+0x64>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d901      	bls.n	800670c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e006      	b.n	800671a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b01      	cmp	r3, #1
 8006716:	d0f0      	beq.n	80066fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	00030d40 	.word	0x00030d40

0800672c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006738:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800673c:	f002 f96a 	bl	8008a14 <USBD_static_malloc>
 8006740:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d105      	bne.n	8006754 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006750:	2302      	movs	r3, #2
 8006752:	e066      	b.n	8006822 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7c1b      	ldrb	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d119      	bne.n	8006798 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006768:	2202      	movs	r2, #2
 800676a:	2181      	movs	r1, #129	; 0x81
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f002 f82e 	bl	80087ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800677c:	2202      	movs	r2, #2
 800677e:	2101      	movs	r1, #1
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f002 f824 	bl	80087ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2210      	movs	r2, #16
 8006792:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006796:	e016      	b.n	80067c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	2202      	movs	r2, #2
 800679c:	2181      	movs	r1, #129	; 0x81
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 f815 	bl	80087ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	2202      	movs	r2, #2
 80067ae:	2101      	movs	r1, #1
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 f80c 	bl	80087ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2210      	movs	r2, #16
 80067c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067c6:	2308      	movs	r3, #8
 80067c8:	2203      	movs	r2, #3
 80067ca:	2182      	movs	r1, #130	; 0x82
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 fffe 	bl	80087ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7c1b      	ldrb	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006806:	2101      	movs	r1, #1
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f002 f8cf 	bl	80089ac <USBD_LL_PrepareReceive>
 800680e:	e007      	b.n	8006820 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006816:	2340      	movs	r3, #64	; 0x40
 8006818:	2101      	movs	r1, #1
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 f8c6 	bl	80089ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006836:	2181      	movs	r1, #129	; 0x81
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 ffee 	bl	800881a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006844:	2101      	movs	r1, #1
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 ffe7 	bl	800881a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006854:	2182      	movs	r1, #130	; 0x82
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 ffdf 	bl	800881a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00e      	beq.n	8006894 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006886:	4618      	mov	r0, r3
 8006888:	f002 f8d2 	bl	8008a30 <USBD_static_free>
    pdev->pClassData = NULL;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e0af      	b.n	8006a28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d03f      	beq.n	8006954 <USBD_CDC_Setup+0xb4>
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	f040 809f 	bne.w	8006a18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	88db      	ldrh	r3, [r3, #6]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d02e      	beq.n	8006940 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	b25b      	sxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	da16      	bge.n	800691a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80068f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	88d2      	ldrh	r2, [r2, #6]
 80068fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	88db      	ldrh	r3, [r3, #6]
 8006904:	2b07      	cmp	r3, #7
 8006906:	bf28      	it	cs
 8006908:	2307      	movcs	r3, #7
 800690a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	89fa      	ldrh	r2, [r7, #14]
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fb19 	bl	8007f4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006918:	e085      	b.n	8006a26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	785a      	ldrb	r2, [r3, #1]
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	88db      	ldrh	r3, [r3, #6]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006930:	6939      	ldr	r1, [r7, #16]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	88db      	ldrh	r3, [r3, #6]
 8006936:	461a      	mov	r2, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 fb32 	bl	8007fa2 <USBD_CtlPrepareRx>
      break;
 800693e:	e072      	b.n	8006a26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	7850      	ldrb	r0, [r2, #1]
 800694c:	2200      	movs	r2, #0
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	4798      	blx	r3
      break;
 8006952:	e068      	b.n	8006a26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b0b      	cmp	r3, #11
 800695a:	d852      	bhi.n	8006a02 <USBD_CDC_Setup+0x162>
 800695c:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <USBD_CDC_Setup+0xc4>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	08006995 	.word	0x08006995
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a03 	.word	0x08006a03
 8006970:	08006a03 	.word	0x08006a03
 8006974:	08006a03 	.word	0x08006a03
 8006978:	08006a03 	.word	0x08006a03
 800697c:	08006a03 	.word	0x08006a03
 8006980:	08006a03 	.word	0x08006a03
 8006984:	08006a03 	.word	0x08006a03
 8006988:	08006a03 	.word	0x08006a03
 800698c:	080069bf 	.word	0x080069bf
 8006990:	080069e9 	.word	0x080069e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b03      	cmp	r3, #3
 800699e:	d107      	bne.n	80069b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069a0:	f107 030a 	add.w	r3, r7, #10
 80069a4:	2202      	movs	r2, #2
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 face 	bl	8007f4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069ae:	e032      	b.n	8006a16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 fa58 	bl	8007e68 <USBD_CtlError>
            ret = USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	75fb      	strb	r3, [r7, #23]
          break;
 80069bc:	e02b      	b.n	8006a16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d107      	bne.n	80069da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069ca:	f107 030d 	add.w	r3, r7, #13
 80069ce:	2201      	movs	r2, #1
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fab9 	bl	8007f4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069d8:	e01d      	b.n	8006a16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fa43 	bl	8007e68 <USBD_CtlError>
            ret = USBD_FAIL;
 80069e2:	2303      	movs	r3, #3
 80069e4:	75fb      	strb	r3, [r7, #23]
          break;
 80069e6:	e016      	b.n	8006a16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d00f      	beq.n	8006a14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 fa36 	bl	8007e68 <USBD_CtlError>
            ret = USBD_FAIL;
 80069fc:	2303      	movs	r3, #3
 80069fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a00:	e008      	b.n	8006a14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fa2f 	bl	8007e68 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a0e:	e002      	b.n	8006a16 <USBD_CDC_Setup+0x176>
          break;
 8006a10:	bf00      	nop
 8006a12:	e008      	b.n	8006a26 <USBD_CDC_Setup+0x186>
          break;
 8006a14:	bf00      	nop
      }
      break;
 8006a16:	e006      	b.n	8006a26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fa24 	bl	8007e68 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a20:	2303      	movs	r3, #3
 8006a22:	75fb      	strb	r3, [r7, #23]
      break;
 8006a24:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e04f      	b.n	8006af2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3318      	adds	r3, #24
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d029      	beq.n	8006ac4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	3318      	adds	r3, #24
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	78f9      	ldrb	r1, [r7, #3]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	460b      	mov	r3, r1
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	1a5b      	subs	r3, r3, r1
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4403      	add	r3, r0
 8006a90:	3344      	adds	r3, #68	; 0x44
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d110      	bne.n	8006ac4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	3318      	adds	r3, #24
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ab6:	78f9      	ldrb	r1, [r7, #3]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2200      	movs	r2, #0
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 ff54 	bl	800896a <USBD_LL_Transmit>
 8006ac2:	e015      	b.n	8006af0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e015      	b.n	8006b48 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 ff64 	bl	80089ee <USBD_LL_GetRxDataSize>
 8006b26:	4602      	mov	r2, r0
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b42:	4611      	mov	r1, r2
 8006b44:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e01b      	b.n	8006ba2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <USBD_CDC_EP0_RxReady+0x50>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b7a:	2bff      	cmp	r3, #255	; 0xff
 8006b7c:	d010      	beq.n	8006ba0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006b8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b94:	b292      	uxth	r2, r2
 8006b96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	22ff      	movs	r2, #255	; 0xff
 8006b9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2243      	movs	r2, #67	; 0x43
 8006bb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006bba:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	200000bc 	.word	0x200000bc

08006bcc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2243      	movs	r2, #67	; 0x43
 8006bd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006bda:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000078 	.word	0x20000078

08006bec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2243      	movs	r2, #67	; 0x43
 8006bf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006bfa:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	20000100 	.word	0x20000100

08006c0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	220a      	movs	r2, #10
 8006c18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c1a:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20000034 	.word	0x20000034

08006c2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e004      	b.n	8006c4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b087      	sub	sp, #28
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c68:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e008      	b.n	8006c86 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ca2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e004      	b.n	8006cb8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e01a      	b.n	8006d1c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d114      	bne.n	8006d1a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d0e:	2181      	movs	r1, #129	; 0x81
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 fe2a 	bl	800896a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e016      	b.n	8006d70 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	7c1b      	ldrb	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d54:	2101      	movs	r1, #1
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fe28 	bl	80089ac <USBD_LL_PrepareReceive>
 8006d5c:	e007      	b.n	8006d6e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	2101      	movs	r1, #1
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fe1f 	bl	80089ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e01f      	b.n	8006dd0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	79fa      	ldrb	r2, [r7, #7]
 8006dc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f001 fc9b 	bl	8008700 <USBD_LL_Init>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e016      	b.n	8006e1e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	f107 020e 	add.w	r2, r7, #14
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	4602      	mov	r2, r0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 fcb2 	bl	8008798 <USBD_LL_Start>
 8006e34:	4603      	mov	r3, r0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e60:	2303      	movs	r3, #3
 8006e62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	78fa      	ldrb	r2, [r7, #3]
 8006eac:	4611      	mov	r1, r2
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
  }

  return USBD_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 ff90 	bl	8007df4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d01a      	beq.n	8006f2e <USBD_LL_SetupStage+0x72>
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d822      	bhi.n	8006f42 <USBD_LL_SetupStage+0x86>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <USBD_LL_SetupStage+0x4a>
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d00a      	beq.n	8006f1a <USBD_LL_SetupStage+0x5e>
 8006f04:	e01d      	b.n	8006f42 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa62 	bl	80073d8 <USBD_StdDevReq>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
      break;
 8006f18:	e020      	b.n	8006f5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fac6 	bl	80074b4 <USBD_StdItfReq>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2c:	e016      	b.n	8006f5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fb05 	bl	8007546 <USBD_StdEPReq>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f40:	e00c      	b.n	8006f5c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fc81 	bl	8008858 <USBD_LL_StallEP>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5a:	bf00      	nop
  }

  return ret;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b086      	sub	sp, #24
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	607a      	str	r2, [r7, #4]
 8006f72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d138      	bne.n	8006fec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d14a      	bne.n	8007022 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d913      	bls.n	8006fc0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	1ad2      	subs	r2, r2, r3
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	bf28      	it	cs
 8006fb2:	4613      	movcs	r3, r2
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f001 f80f 	bl	8007fdc <USBD_CtlContinueRx>
 8006fbe:	e030      	b.n	8007022 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d10b      	bne.n	8006fe4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f001 f80a 	bl	8007ffe <USBD_CtlSendStatus>
 8006fea:	e01a      	b.n	8007022 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d114      	bne.n	8007022 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00e      	beq.n	8007022 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	7afa      	ldrb	r2, [r7, #11]
 800700e:	4611      	mov	r1, r2
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	4798      	blx	r3
 8007014:	4603      	mov	r3, r0
 8007016:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	e000      	b.n	8007024 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	460b      	mov	r3, r1
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d16b      	bne.n	8007118 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3314      	adds	r3, #20
 8007044:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800704c:	2b02      	cmp	r3, #2
 800704e:	d156      	bne.n	80070fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	429a      	cmp	r2, r3
 800705a:	d914      	bls.n	8007086 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	1ad2      	subs	r2, r2, r3
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	461a      	mov	r2, r3
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 ff84 	bl	8007f80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007078:	2300      	movs	r3, #0
 800707a:	2200      	movs	r2, #0
 800707c:	2100      	movs	r1, #0
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f001 fc94 	bl	80089ac <USBD_LL_PrepareReceive>
 8007084:	e03b      	b.n	80070fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	d11c      	bne.n	80070cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800709a:	429a      	cmp	r2, r3
 800709c:	d316      	bcc.n	80070cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d20f      	bcs.n	80070cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070ac:	2200      	movs	r2, #0
 80070ae:	2100      	movs	r1, #0
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 ff65 	bl	8007f80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070be:	2300      	movs	r3, #0
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f001 fc71 	bl	80089ac <USBD_LL_PrepareReceive>
 80070ca:	e018      	b.n	80070fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d10b      	bne.n	80070f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070f0:	2180      	movs	r1, #128	; 0x80
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f001 fbb0 	bl	8008858 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 ff93 	bl	8008024 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007104:	2b01      	cmp	r3, #1
 8007106:	d122      	bne.n	800714e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff fe98 	bl	8006e3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007116:	e01a      	b.n	800714e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b03      	cmp	r3, #3
 8007122:	d114      	bne.n	800714e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00e      	beq.n	800714e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	7afa      	ldrb	r2, [r7, #11]
 800713a:	4611      	mov	r1, r2
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	4798      	blx	r3
 8007140:	4603      	mov	r3, r0
 8007142:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	e000      	b.n	8007150 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007188:	2303      	movs	r3, #3
 800718a:	e02f      	b.n	80071ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00f      	beq.n	80071b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6852      	ldr	r2, [r2, #4]
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	4611      	mov	r1, r2
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b6:	2340      	movs	r3, #64	; 0x40
 80071b8:	2200      	movs	r2, #0
 80071ba:	2100      	movs	r1, #0
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fb06 	bl	80087ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2240      	movs	r2, #64	; 0x40
 80071ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071d2:	2340      	movs	r3, #64	; 0x40
 80071d4:	2200      	movs	r2, #0
 80071d6:	2180      	movs	r1, #128	; 0x80
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 faf8 	bl	80087ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2240      	movs	r2, #64	; 0x40
 80071e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007222:	b2da      	uxtb	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2204      	movs	r2, #4
 800722e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b04      	cmp	r3, #4
 8007252:	d106      	bne.n	8007262 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800725a:	b2da      	uxtb	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007282:	2303      	movs	r3, #3
 8007284:	e012      	b.n	80072ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b03      	cmp	r3, #3
 8007290:	d10b      	bne.n	80072aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e014      	b.n	80072f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d10d      	bne.n	80072f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	4611      	mov	r1, r2
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007316:	2303      	movs	r3, #3
 8007318:	e014      	b.n	8007344 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b03      	cmp	r3, #3
 8007324:	d10d      	bne.n	8007342 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	4611      	mov	r1, r2
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007378:	2b00      	cmp	r3, #0
 800737a:	d009      	beq.n	8007390 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6852      	ldr	r2, [r2, #4]
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	4611      	mov	r1, r2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
  }

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800739a:	b480      	push	{r7}
 800739c:	b087      	sub	sp, #28
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	3301      	adds	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073b8:	8a3b      	ldrh	r3, [r7, #16]
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	b21a      	sxth	r2, r3
 80073be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	b21b      	sxth	r3, r3
 80073c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073c8:	89fb      	ldrh	r3, [r7, #14]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d005      	beq.n	80073fe <USBD_StdDevReq+0x26>
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d853      	bhi.n	800749e <USBD_StdDevReq+0xc6>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <USBD_StdDevReq+0x3a>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d14f      	bne.n	800749e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]
      break;
 8007410:	e04a      	b.n	80074a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b09      	cmp	r3, #9
 8007418:	d83b      	bhi.n	8007492 <USBD_StdDevReq+0xba>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <USBD_StdDevReq+0x48>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007475 	.word	0x08007475
 8007424:	08007489 	.word	0x08007489
 8007428:	08007493 	.word	0x08007493
 800742c:	0800747f 	.word	0x0800747f
 8007430:	08007493 	.word	0x08007493
 8007434:	08007453 	.word	0x08007453
 8007438:	08007449 	.word	0x08007449
 800743c:	08007493 	.word	0x08007493
 8007440:	0800746b 	.word	0x0800746b
 8007444:	0800745d 	.word	0x0800745d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9de 	bl	800780c <USBD_GetDescriptor>
          break;
 8007450:	e024      	b.n	800749c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fb43 	bl	8007ae0 <USBD_SetAddress>
          break;
 800745a:	e01f      	b.n	800749c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fb82 	bl	8007b68 <USBD_SetConfig>
 8007464:	4603      	mov	r3, r0
 8007466:	73fb      	strb	r3, [r7, #15]
          break;
 8007468:	e018      	b.n	800749c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fc21 	bl	8007cb4 <USBD_GetConfig>
          break;
 8007472:	e013      	b.n	800749c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fc52 	bl	8007d20 <USBD_GetStatus>
          break;
 800747c:	e00e      	b.n	800749c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fc81 	bl	8007d88 <USBD_SetFeature>
          break;
 8007486:	e009      	b.n	800749c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fc90 	bl	8007db0 <USBD_ClrFeature>
          break;
 8007490:	e004      	b.n	800749c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fce7 	bl	8007e68 <USBD_CtlError>
          break;
 800749a:	bf00      	nop
      }
      break;
 800749c:	e004      	b.n	80074a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fce1 	bl	8007e68 <USBD_CtlError>
      break;
 80074a6:	bf00      	nop
  }

  return ret;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop

080074b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d005      	beq.n	80074da <USBD_StdItfReq+0x26>
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d82f      	bhi.n	8007532 <USBD_StdItfReq+0x7e>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <USBD_StdItfReq+0x26>
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d12b      	bne.n	8007532 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d81d      	bhi.n	8007524 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	889b      	ldrh	r3, [r3, #4]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d813      	bhi.n	800751a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	88db      	ldrh	r3, [r3, #6]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d110      	bne.n	800752e <USBD_StdItfReq+0x7a>
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10d      	bne.n	800752e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fd73 	bl	8007ffe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007518:	e009      	b.n	800752e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fca3 	bl	8007e68 <USBD_CtlError>
          break;
 8007522:	e004      	b.n	800752e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fc9e 	bl	8007e68 <USBD_CtlError>
          break;
 800752c:	e000      	b.n	8007530 <USBD_StdItfReq+0x7c>
          break;
 800752e:	bf00      	nop
      }
      break;
 8007530:	e004      	b.n	800753c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc97 	bl	8007e68 <USBD_CtlError>
      break;
 800753a:	bf00      	nop
  }

  return ret;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	889b      	ldrh	r3, [r3, #4]
 8007558:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d007      	beq.n	8007576 <USBD_StdEPReq+0x30>
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	f200 8145 	bhi.w	80077f6 <USBD_StdEPReq+0x2b0>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <USBD_StdEPReq+0x44>
 8007570:	2b20      	cmp	r3, #32
 8007572:	f040 8140 	bne.w	80077f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	4798      	blx	r3
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]
      break;
 8007588:	e13a      	b.n	8007800 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d007      	beq.n	80075a2 <USBD_StdEPReq+0x5c>
 8007592:	2b03      	cmp	r3, #3
 8007594:	f300 8129 	bgt.w	80077ea <USBD_StdEPReq+0x2a4>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d07f      	beq.n	800769c <USBD_StdEPReq+0x156>
 800759c:	2b01      	cmp	r3, #1
 800759e:	d03c      	beq.n	800761a <USBD_StdEPReq+0xd4>
 80075a0:	e123      	b.n	80077ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d002      	beq.n	80075b4 <USBD_StdEPReq+0x6e>
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d016      	beq.n	80075e0 <USBD_StdEPReq+0x9a>
 80075b2:	e02c      	b.n	800760e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <USBD_StdEPReq+0x90>
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b80      	cmp	r3, #128	; 0x80
 80075be:	d00a      	beq.n	80075d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f947 	bl	8008858 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075ca:	2180      	movs	r1, #128	; 0x80
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 f943 	bl	8008858 <USBD_LL_StallEP>
 80075d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075d4:	e020      	b.n	8007618 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc45 	bl	8007e68 <USBD_CtlError>
              break;
 80075de:	e01b      	b.n	8007618 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	885b      	ldrh	r3, [r3, #2]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10e      	bne.n	8007606 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <USBD_StdEPReq+0xc0>
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b80      	cmp	r3, #128	; 0x80
 80075f2:	d008      	beq.n	8007606 <USBD_StdEPReq+0xc0>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	88db      	ldrh	r3, [r3, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 f929 	bl	8008858 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fcf9 	bl	8007ffe <USBD_CtlSendStatus>

              break;
 800760c:	e004      	b.n	8007618 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc29 	bl	8007e68 <USBD_CtlError>
              break;
 8007616:	bf00      	nop
          }
          break;
 8007618:	e0ec      	b.n	80077f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d002      	beq.n	800762c <USBD_StdEPReq+0xe6>
 8007626:	2b03      	cmp	r3, #3
 8007628:	d016      	beq.n	8007658 <USBD_StdEPReq+0x112>
 800762a:	e030      	b.n	800768e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00d      	beq.n	800764e <USBD_StdEPReq+0x108>
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b80      	cmp	r3, #128	; 0x80
 8007636:	d00a      	beq.n	800764e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f90b 	bl	8008858 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007642:	2180      	movs	r1, #128	; 0x80
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f907 	bl	8008858 <USBD_LL_StallEP>
 800764a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800764c:	e025      	b.n	800769a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fc09 	bl	8007e68 <USBD_CtlError>
              break;
 8007656:	e020      	b.n	800769a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11b      	bne.n	8007698 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007666:	2b00      	cmp	r3, #0
 8007668:	d004      	beq.n	8007674 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 f911 	bl	8008896 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fcc2 	bl	8007ffe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800768c:	e004      	b.n	8007698 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fbe9 	bl	8007e68 <USBD_CtlError>
              break;
 8007696:	e000      	b.n	800769a <USBD_StdEPReq+0x154>
              break;
 8007698:	bf00      	nop
          }
          break;
 800769a:	e0ab      	b.n	80077f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d002      	beq.n	80076ae <USBD_StdEPReq+0x168>
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d032      	beq.n	8007712 <USBD_StdEPReq+0x1cc>
 80076ac:	e097      	b.n	80077de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <USBD_StdEPReq+0x17e>
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b80      	cmp	r3, #128	; 0x80
 80076b8:	d004      	beq.n	80076c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fbd3 	bl	8007e68 <USBD_CtlError>
                break;
 80076c2:	e091      	b.n	80077e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da0b      	bge.n	80076e4 <USBD_StdEPReq+0x19e>
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	3310      	adds	r3, #16
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	4413      	add	r3, r2
 80076e0:	3304      	adds	r3, #4
 80076e2:	e00b      	b.n	80076fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ea:	4613      	mov	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4413      	add	r3, r2
 80076fa:	3304      	adds	r3, #4
 80076fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2202      	movs	r2, #2
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fc1d 	bl	8007f4a <USBD_CtlSendData>
              break;
 8007710:	e06a      	b.n	80077e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007716:	2b00      	cmp	r3, #0
 8007718:	da11      	bge.n	800773e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	f003 020f 	and.w	r2, r3, #15
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	3324      	adds	r3, #36	; 0x24
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d117      	bne.n	8007764 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fb96 	bl	8007e68 <USBD_CtlError>
                  break;
 800773c:	e054      	b.n	80077e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	f003 020f 	and.w	r2, r3, #15
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb83 	bl	8007e68 <USBD_CtlError>
                  break;
 8007762:	e041      	b.n	80077e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da0b      	bge.n	8007784 <USBD_StdEPReq+0x23e>
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	3310      	adds	r3, #16
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	3304      	adds	r3, #4
 8007782:	e00b      	b.n	800779c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4413      	add	r3, r2
 800779a:	3304      	adds	r3, #4
 800779c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <USBD_StdEPReq+0x264>
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b80      	cmp	r3, #128	; 0x80
 80077a8:	d103      	bne.n	80077b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	e00e      	b.n	80077d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 f88c 	bl	80088d4 <USBD_LL_IsStallEP>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2201      	movs	r2, #1
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e002      	b.n	80077d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2202      	movs	r2, #2
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fbb7 	bl	8007f4a <USBD_CtlSendData>
              break;
 80077dc:	e004      	b.n	80077e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fb41 	bl	8007e68 <USBD_CtlError>
              break;
 80077e6:	bf00      	nop
          }
          break;
 80077e8:	e004      	b.n	80077f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fb3b 	bl	8007e68 <USBD_CtlError>
          break;
 80077f2:	bf00      	nop
      }
      break;
 80077f4:	e004      	b.n	8007800 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fb35 	bl	8007e68 <USBD_CtlError>
      break;
 80077fe:	bf00      	nop
  }

  return ret;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	885b      	ldrh	r3, [r3, #2]
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	2b06      	cmp	r3, #6
 800782e:	f200 8128 	bhi.w	8007a82 <USBD_GetDescriptor+0x276>
 8007832:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <USBD_GetDescriptor+0x2c>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	08007855 	.word	0x08007855
 800783c:	0800786d 	.word	0x0800786d
 8007840:	080078ad 	.word	0x080078ad
 8007844:	08007a83 	.word	0x08007a83
 8007848:	08007a83 	.word	0x08007a83
 800784c:	08007a23 	.word	0x08007a23
 8007850:	08007a4f 	.word	0x08007a4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	7c12      	ldrb	r2, [r2, #16]
 8007860:	f107 0108 	add.w	r1, r7, #8
 8007864:	4610      	mov	r0, r2
 8007866:	4798      	blx	r3
 8007868:	60f8      	str	r0, [r7, #12]
      break;
 800786a:	e112      	b.n	8007a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7c1b      	ldrb	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10d      	bne.n	8007890 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	f107 0208 	add.w	r2, r7, #8
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3
 8007884:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3301      	adds	r3, #1
 800788a:	2202      	movs	r2, #2
 800788c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800788e:	e100      	b.n	8007a92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	f107 0208 	add.w	r2, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3301      	adds	r3, #1
 80078a6:	2202      	movs	r2, #2
 80078a8:	701a      	strb	r2, [r3, #0]
      break;
 80078aa:	e0f2      	b.n	8007a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	885b      	ldrh	r3, [r3, #2]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	f200 80ac 	bhi.w	8007a10 <USBD_GetDescriptor+0x204>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <USBD_GetDescriptor+0xb4>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078d9 	.word	0x080078d9
 80078c4:	0800790d 	.word	0x0800790d
 80078c8:	08007941 	.word	0x08007941
 80078cc:	08007975 	.word	0x08007975
 80078d0:	080079a9 	.word	0x080079a9
 80078d4:	080079dd 	.word	0x080079dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7c12      	ldrb	r2, [r2, #16]
 80078f0:	f107 0108 	add.w	r1, r7, #8
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fa:	e091      	b.n	8007a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fab2 	bl	8007e68 <USBD_CtlError>
            err++;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	3301      	adds	r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
          break;
 800790a:	e089      	b.n	8007a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	7c12      	ldrb	r2, [r2, #16]
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792e:	e077      	b.n	8007a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa98 	bl	8007e68 <USBD_CtlError>
            err++;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	3301      	adds	r3, #1
 800793c:	72fb      	strb	r3, [r7, #11]
          break;
 800793e:	e06f      	b.n	8007a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007962:	e05d      	b.n	8007a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa7e 	bl	8007e68 <USBD_CtlError>
            err++;
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	3301      	adds	r3, #1
 8007970:	72fb      	strb	r3, [r7, #11]
          break;
 8007972:	e055      	b.n	8007a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7c12      	ldrb	r2, [r2, #16]
 800798c:	f107 0108 	add.w	r1, r7, #8
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
 8007994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007996:	e043      	b.n	8007a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa64 	bl	8007e68 <USBD_CtlError>
            err++;
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	3301      	adds	r3, #1
 80079a4:	72fb      	strb	r3, [r7, #11]
          break;
 80079a6:	e03b      	b.n	8007a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	7c12      	ldrb	r2, [r2, #16]
 80079c0:	f107 0108 	add.w	r1, r7, #8
 80079c4:	4610      	mov	r0, r2
 80079c6:	4798      	blx	r3
 80079c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ca:	e029      	b.n	8007a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa4a 	bl	8007e68 <USBD_CtlError>
            err++;
 80079d4:	7afb      	ldrb	r3, [r7, #11]
 80079d6:	3301      	adds	r3, #1
 80079d8:	72fb      	strb	r3, [r7, #11]
          break;
 80079da:	e021      	b.n	8007a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	7c12      	ldrb	r2, [r2, #16]
 80079f4:	f107 0108 	add.w	r1, r7, #8
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fe:	e00f      	b.n	8007a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa30 	bl	8007e68 <USBD_CtlError>
            err++;
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0e:	e007      	b.n	8007a20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa28 	bl	8007e68 <USBD_CtlError>
          err++;
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a1e:	bf00      	nop
      }
      break;
 8007a20:	e037      	b.n	8007a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7c1b      	ldrb	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a32:	f107 0208 	add.w	r2, r7, #8
 8007a36:	4610      	mov	r0, r2
 8007a38:	4798      	blx	r3
 8007a3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a3c:	e029      	b.n	8007a92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fa11 	bl	8007e68 <USBD_CtlError>
        err++;
 8007a46:	7afb      	ldrb	r3, [r7, #11]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a4c:	e021      	b.n	8007a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7c1b      	ldrb	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10d      	bne.n	8007a72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f107 0208 	add.w	r2, r7, #8
 8007a62:	4610      	mov	r0, r2
 8007a64:	4798      	blx	r3
 8007a66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	2207      	movs	r2, #7
 8007a6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a70:	e00f      	b.n	8007a92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f9f7 	bl	8007e68 <USBD_CtlError>
        err++;
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a80:	e007      	b.n	8007a92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f9ef 	bl	8007e68 <USBD_CtlError>
      err++;
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a90:	bf00      	nop
  }

  if (err != 0U)
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11e      	bne.n	8007ad6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	88db      	ldrh	r3, [r3, #6]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d016      	beq.n	8007ace <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007aa0:	893b      	ldrh	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00e      	beq.n	8007ac4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	88da      	ldrh	r2, [r3, #6]
 8007aaa:	893b      	ldrh	r3, [r7, #8]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bf28      	it	cs
 8007ab0:	4613      	movcs	r3, r2
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ab6:	893b      	ldrh	r3, [r7, #8]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa44 	bl	8007f4a <USBD_CtlSendData>
 8007ac2:	e009      	b.n	8007ad8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f9ce 	bl	8007e68 <USBD_CtlError>
 8007acc:	e004      	b.n	8007ad8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa95 	bl	8007ffe <USBD_CtlSendStatus>
 8007ad4:	e000      	b.n	8007ad8 <USBD_GetDescriptor+0x2cc>
    return;
 8007ad6:	bf00      	nop
  }
}
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop

08007ae0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	889b      	ldrh	r3, [r3, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d131      	bne.n	8007b56 <USBD_SetAddress+0x76>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	88db      	ldrh	r3, [r3, #6]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d12d      	bne.n	8007b56 <USBD_SetAddress+0x76>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	2b7f      	cmp	r3, #127	; 0x7f
 8007b00:	d829      	bhi.n	8007b56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d104      	bne.n	8007b24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9a3 	bl	8007e68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b22:	e01d      	b.n	8007b60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7bfa      	ldrb	r2, [r7, #15]
 8007b28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fefb 	bl	800892c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa61 	bl	8007ffe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2202      	movs	r2, #2
 8007b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4a:	e009      	b.n	8007b60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b54:	e004      	b.n	8007b60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f985 	bl	8007e68 <USBD_CtlError>
  }
}
 8007b5e:	bf00      	nop
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	4b4c      	ldr	r3, [pc, #304]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007b7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b80:	4b4b      	ldr	r3, [pc, #300]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d905      	bls.n	8007b94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f96c 	bl	8007e68 <USBD_CtlError>
    return USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e088      	b.n	8007ca6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d002      	beq.n	8007ba6 <USBD_SetConfig+0x3e>
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d025      	beq.n	8007bf0 <USBD_SetConfig+0x88>
 8007ba4:	e071      	b.n	8007c8a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ba6:	4b42      	ldr	r3, [pc, #264]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d01c      	beq.n	8007be8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007bae:	4b40      	ldr	r3, [pc, #256]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bb8:	4b3d      	ldr	r3, [pc, #244]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff f948 	bl	8006e54 <USBD_SetClassConfig>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f949 	bl	8007e68 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bd6:	e065      	b.n	8007ca4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fa10 	bl	8007ffe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2203      	movs	r2, #3
 8007be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007be6:	e05d      	b.n	8007ca4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa08 	bl	8007ffe <USBD_CtlSendStatus>
      break;
 8007bee:	e059      	b.n	8007ca4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007bf0:	4b2f      	ldr	r3, [pc, #188]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d112      	bne.n	8007c1e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c00:	4b2b      	ldr	r3, [pc, #172]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c0a:	4b29      	ldr	r3, [pc, #164]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff f93b 	bl	8006e8c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f9f1 	bl	8007ffe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c1c:	e042      	b.n	8007ca4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c1e:	4b24      	ldr	r3, [pc, #144]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d02a      	beq.n	8007c82 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff f929 	bl	8006e8c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c3a:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7ff f902 	bl	8006e54 <USBD_SetClassConfig>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00f      	beq.n	8007c7a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f903 	bl	8007e68 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff f90e 	bl	8006e8c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c78:	e014      	b.n	8007ca4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9bf 	bl	8007ffe <USBD_CtlSendStatus>
      break;
 8007c80:	e010      	b.n	8007ca4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f9bb 	bl	8007ffe <USBD_CtlSendStatus>
      break;
 8007c88:	e00c      	b.n	8007ca4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f8eb 	bl	8007e68 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c92:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <USBD_SetConfig+0x148>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff f8f7 	bl	8006e8c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca2:	bf00      	nop
  }

  return ret;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	2000046c 	.word	0x2000046c

08007cb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	88db      	ldrh	r3, [r3, #6]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d004      	beq.n	8007cd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f8cd 	bl	8007e68 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cce:	e023      	b.n	8007d18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	dc02      	bgt.n	8007ce2 <USBD_GetConfig+0x2e>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dc03      	bgt.n	8007ce8 <USBD_GetConfig+0x34>
 8007ce0:	e015      	b.n	8007d0e <USBD_GetConfig+0x5a>
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d00b      	beq.n	8007cfe <USBD_GetConfig+0x4a>
 8007ce6:	e012      	b.n	8007d0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f927 	bl	8007f4a <USBD_CtlSendData>
        break;
 8007cfc:	e00c      	b.n	8007d18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3304      	adds	r3, #4
 8007d02:	2201      	movs	r2, #1
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f91f 	bl	8007f4a <USBD_CtlSendData>
        break;
 8007d0c:	e004      	b.n	8007d18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f8a9 	bl	8007e68 <USBD_CtlError>
        break;
 8007d16:	bf00      	nop
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d81e      	bhi.n	8007d76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	88db      	ldrh	r3, [r3, #6]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d004      	beq.n	8007d4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f890 	bl	8007e68 <USBD_CtlError>
        break;
 8007d48:	e01a      	b.n	8007d80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f043 0202 	orr.w	r2, r3, #2
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f8eb 	bl	8007f4a <USBD_CtlSendData>
      break;
 8007d74:	e004      	b.n	8007d80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f875 	bl	8007e68 <USBD_CtlError>
      break;
 8007d7e:	bf00      	nop
  }
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d106      	bne.n	8007da8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f92b 	bl	8007ffe <USBD_CtlSendStatus>
  }
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d80b      	bhi.n	8007de0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	885b      	ldrh	r3, [r3, #2]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10c      	bne.n	8007dea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f910 	bl	8007ffe <USBD_CtlSendStatus>
      }
      break;
 8007dde:	e004      	b.n	8007dea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f840 	bl	8007e68 <USBD_CtlError>
      break;
 8007de8:	e000      	b.n	8007dec <USBD_ClrFeature+0x3c>
      break;
 8007dea:	bf00      	nop
  }
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	781a      	ldrb	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff fabb 	bl	800739a <SWAPBYTE>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3301      	adds	r3, #1
 8007e36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7ff faae 	bl	800739a <SWAPBYTE>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	461a      	mov	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff faa1 	bl	800739a <SWAPBYTE>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	80da      	strh	r2, [r3, #6]
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e72:	2180      	movs	r1, #128	; 0x80
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fcef 	bl	8008858 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fceb 	bl	8008858 <USBD_LL_StallEP>
}
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d036      	beq.n	8007f0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ea4:	6938      	ldr	r0, [r7, #16]
 8007ea6:	f000 f836 	bl	8007f16 <USBD_GetLen>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	3301      	adds	r3, #1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	7812      	ldrb	r2, [r2, #0]
 8007ec2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	4413      	add	r3, r2
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007eda:	e013      	b.n	8007f04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	3301      	adds	r3, #1
 8007eec:	613b      	str	r3, [r7, #16]
    idx++;
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4413      	add	r3, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	701a      	strb	r2, [r3, #0]
    idx++;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	3301      	adds	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e7      	bne.n	8007edc <USBD_GetString+0x52>
 8007f0c:	e000      	b.n	8007f10 <USBD_GetString+0x86>
    return;
 8007f0e:	bf00      	nop
  }
}
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b085      	sub	sp, #20
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f26:	e005      	b.n	8007f34 <USBD_GetLen+0x1e>
  {
    len++;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	3301      	adds	r3, #1
 8007f32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f5      	bne.n	8007f28 <USBD_GetLen+0x12>
  }

  return len;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fcfa 	bl	800896a <USBD_LL_Transmit>

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	2100      	movs	r1, #0
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fce9 	bl	800896a <USBD_LL_Transmit>

  return USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2203      	movs	r2, #3
 8007fb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	2100      	movs	r1, #0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fced 	bl	80089ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	2100      	movs	r1, #0
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fcdc 	bl	80089ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2204      	movs	r2, #4
 800800a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800800e:	2300      	movs	r3, #0
 8008010:	2200      	movs	r2, #0
 8008012:	2100      	movs	r1, #0
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fca8 	bl	800896a <USBD_LL_Transmit>

  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2205      	movs	r2, #5
 8008030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008034:	2300      	movs	r3, #0
 8008036:	2200      	movs	r2, #0
 8008038:	2100      	movs	r1, #0
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fcb6 	bl	80089ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008050:	2200      	movs	r2, #0
 8008052:	4912      	ldr	r1, [pc, #72]	; (800809c <MX_USB_DEVICE_Init+0x50>)
 8008054:	4812      	ldr	r0, [pc, #72]	; (80080a0 <MX_USB_DEVICE_Init+0x54>)
 8008056:	f7fe fe8f 	bl	8006d78 <USBD_Init>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008060:	f7f8 fe18 	bl	8000c94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008064:	490f      	ldr	r1, [pc, #60]	; (80080a4 <MX_USB_DEVICE_Init+0x58>)
 8008066:	480e      	ldr	r0, [pc, #56]	; (80080a0 <MX_USB_DEVICE_Init+0x54>)
 8008068:	f7fe feb6 	bl	8006dd8 <USBD_RegisterClass>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008072:	f7f8 fe0f 	bl	8000c94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008076:	490c      	ldr	r1, [pc, #48]	; (80080a8 <MX_USB_DEVICE_Init+0x5c>)
 8008078:	4809      	ldr	r0, [pc, #36]	; (80080a0 <MX_USB_DEVICE_Init+0x54>)
 800807a:	f7fe fdd7 	bl	8006c2c <USBD_CDC_RegisterInterface>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008084:	f7f8 fe06 	bl	8000c94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008088:	4805      	ldr	r0, [pc, #20]	; (80080a0 <MX_USB_DEVICE_Init+0x54>)
 800808a:	f7fe fecc 	bl	8006e26 <USBD_Start>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008094:	f7f8 fdfe 	bl	8000c94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008098:	bf00      	nop
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000158 	.word	0x20000158
 80080a0:	20000470 	.word	0x20000470
 80080a4:	20000040 	.word	0x20000040
 80080a8:	20000144 	.word	0x20000144

080080ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080b0:	2200      	movs	r2, #0
 80080b2:	4905      	ldr	r1, [pc, #20]	; (80080c8 <CDC_Init_FS+0x1c>)
 80080b4:	4805      	ldr	r0, [pc, #20]	; (80080cc <CDC_Init_FS+0x20>)
 80080b6:	f7fe fdce 	bl	8006c56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080ba:	4905      	ldr	r1, [pc, #20]	; (80080d0 <CDC_Init_FS+0x24>)
 80080bc:	4803      	ldr	r0, [pc, #12]	; (80080cc <CDC_Init_FS+0x20>)
 80080be:	f7fe fde8 	bl	8006c92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20000f40 	.word	0x20000f40
 80080cc:	20000470 	.word	0x20000470
 80080d0:	20000740 	.word	0x20000740

080080d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080da:	4618      	mov	r0, r3
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
 80080f0:	4613      	mov	r3, r2
 80080f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	2b23      	cmp	r3, #35	; 0x23
 80080f8:	d84a      	bhi.n	8008190 <CDC_Control_FS+0xac>
 80080fa:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <CDC_Control_FS+0x1c>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008191 	.word	0x08008191
 8008104:	08008191 	.word	0x08008191
 8008108:	08008191 	.word	0x08008191
 800810c:	08008191 	.word	0x08008191
 8008110:	08008191 	.word	0x08008191
 8008114:	08008191 	.word	0x08008191
 8008118:	08008191 	.word	0x08008191
 800811c:	08008191 	.word	0x08008191
 8008120:	08008191 	.word	0x08008191
 8008124:	08008191 	.word	0x08008191
 8008128:	08008191 	.word	0x08008191
 800812c:	08008191 	.word	0x08008191
 8008130:	08008191 	.word	0x08008191
 8008134:	08008191 	.word	0x08008191
 8008138:	08008191 	.word	0x08008191
 800813c:	08008191 	.word	0x08008191
 8008140:	08008191 	.word	0x08008191
 8008144:	08008191 	.word	0x08008191
 8008148:	08008191 	.word	0x08008191
 800814c:	08008191 	.word	0x08008191
 8008150:	08008191 	.word	0x08008191
 8008154:	08008191 	.word	0x08008191
 8008158:	08008191 	.word	0x08008191
 800815c:	08008191 	.word	0x08008191
 8008160:	08008191 	.word	0x08008191
 8008164:	08008191 	.word	0x08008191
 8008168:	08008191 	.word	0x08008191
 800816c:	08008191 	.word	0x08008191
 8008170:	08008191 	.word	0x08008191
 8008174:	08008191 	.word	0x08008191
 8008178:	08008191 	.word	0x08008191
 800817c:	08008191 	.word	0x08008191
 8008180:	08008191 	.word	0x08008191
 8008184:	08008191 	.word	0x08008191
 8008188:	08008191 	.word	0x08008191
 800818c:	08008191 	.word	0x08008191
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008190:	bf00      	nop
  }

  return (USBD_OK);
 8008192:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4805      	ldr	r0, [pc, #20]	; (80081c4 <CDC_Receive_FS+0x24>)
 80081ae:	f7fe fd70 	bl	8006c92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081b2:	4804      	ldr	r0, [pc, #16]	; (80081c4 <CDC_Receive_FS+0x24>)
 80081b4:	f7fe fdb6 	bl	8006d24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000470 	.word	0x20000470

080081c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081d8:	4b0d      	ldr	r3, [pc, #52]	; (8008210 <CDC_Transmit_FS+0x48>)
 80081da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e00b      	b.n	8008206 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081ee:	887b      	ldrh	r3, [r7, #2]
 80081f0:	461a      	mov	r2, r3
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4806      	ldr	r0, [pc, #24]	; (8008210 <CDC_Transmit_FS+0x48>)
 80081f6:	f7fe fd2e 	bl	8006c56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081fa:	4805      	ldr	r0, [pc, #20]	; (8008210 <CDC_Transmit_FS+0x48>)
 80081fc:	f7fe fd62 	bl	8006cc4 <USBD_CDC_TransmitPacket>
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000470 	.word	0x20000470

08008214 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800822a:	4618      	mov	r0, r3
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
	...

08008238 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2212      	movs	r2, #18
 8008248:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800824a:	4b03      	ldr	r3, [pc, #12]	; (8008258 <USBD_FS_DeviceDescriptor+0x20>)
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	20000174 	.word	0x20000174

0800825c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2204      	movs	r2, #4
 800826c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800826e:	4b03      	ldr	r3, [pc, #12]	; (800827c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000188 	.word	0x20000188

08008280 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d105      	bne.n	800829e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	4907      	ldr	r1, [pc, #28]	; (80082b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008296:	4808      	ldr	r0, [pc, #32]	; (80082b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008298:	f7ff fdf7 	bl	8007e8a <USBD_GetString>
 800829c:	e004      	b.n	80082a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4904      	ldr	r1, [pc, #16]	; (80082b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80082a2:	4805      	ldr	r0, [pc, #20]	; (80082b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80082a4:	f7ff fdf1 	bl	8007e8a <USBD_GetString>
  }
  return USBD_StrDesc;
 80082a8:	4b02      	ldr	r3, [pc, #8]	; (80082b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20001740 	.word	0x20001740
 80082b8:	08009498 	.word	0x08009498

080082bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	4904      	ldr	r1, [pc, #16]	; (80082dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082cc:	4804      	ldr	r0, [pc, #16]	; (80082e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082ce:	f7ff fddc 	bl	8007e8a <USBD_GetString>
  return USBD_StrDesc;
 80082d2:	4b02      	ldr	r3, [pc, #8]	; (80082dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20001740 	.word	0x20001740
 80082e0:	080094b0 	.word	0x080094b0

080082e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	6039      	str	r1, [r7, #0]
 80082ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	221a      	movs	r2, #26
 80082f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082f6:	f000 f843 	bl	8008380 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082fa:	4b02      	ldr	r3, [pc, #8]	; (8008304 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	2000018c 	.word	0x2000018c

08008308 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	6039      	str	r1, [r7, #0]
 8008312:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d105      	bne.n	8008326 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4907      	ldr	r1, [pc, #28]	; (800833c <USBD_FS_ConfigStrDescriptor+0x34>)
 800831e:	4808      	ldr	r0, [pc, #32]	; (8008340 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008320:	f7ff fdb3 	bl	8007e8a <USBD_GetString>
 8008324:	e004      	b.n	8008330 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4904      	ldr	r1, [pc, #16]	; (800833c <USBD_FS_ConfigStrDescriptor+0x34>)
 800832a:	4805      	ldr	r0, [pc, #20]	; (8008340 <USBD_FS_ConfigStrDescriptor+0x38>)
 800832c:	f7ff fdad 	bl	8007e8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008330:	4b02      	ldr	r3, [pc, #8]	; (800833c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20001740 	.word	0x20001740
 8008340:	080094c4 	.word	0x080094c4

08008344 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d105      	bne.n	8008362 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	4907      	ldr	r1, [pc, #28]	; (8008378 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800835a:	4808      	ldr	r0, [pc, #32]	; (800837c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800835c:	f7ff fd95 	bl	8007e8a <USBD_GetString>
 8008360:	e004      	b.n	800836c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	4904      	ldr	r1, [pc, #16]	; (8008378 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008366:	4805      	ldr	r0, [pc, #20]	; (800837c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008368:	f7ff fd8f 	bl	8007e8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800836c:	4b02      	ldr	r3, [pc, #8]	; (8008378 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20001740 	.word	0x20001740
 800837c:	080094d0 	.word	0x080094d0

08008380 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008386:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <Get_SerialNum+0x44>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800838c:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <Get_SerialNum+0x48>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008392:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <Get_SerialNum+0x4c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4413      	add	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d009      	beq.n	80083ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083a6:	2208      	movs	r2, #8
 80083a8:	4909      	ldr	r1, [pc, #36]	; (80083d0 <Get_SerialNum+0x50>)
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f814 	bl	80083d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083b0:	2204      	movs	r2, #4
 80083b2:	4908      	ldr	r1, [pc, #32]	; (80083d4 <Get_SerialNum+0x54>)
 80083b4:	68b8      	ldr	r0, [r7, #8]
 80083b6:	f000 f80f 	bl	80083d8 <IntToUnicode>
  }
}
 80083ba:	bf00      	nop
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	1fff7a10 	.word	0x1fff7a10
 80083c8:	1fff7a14 	.word	0x1fff7a14
 80083cc:	1fff7a18 	.word	0x1fff7a18
 80083d0:	2000018e 	.word	0x2000018e
 80083d4:	2000019e 	.word	0x2000019e

080083d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083ea:	2300      	movs	r3, #0
 80083ec:	75fb      	strb	r3, [r7, #23]
 80083ee:	e027      	b.n	8008440 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	0f1b      	lsrs	r3, r3, #28
 80083f4:	2b09      	cmp	r3, #9
 80083f6:	d80b      	bhi.n	8008410 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	0f1b      	lsrs	r3, r3, #28
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	4619      	mov	r1, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	440b      	add	r3, r1
 8008408:	3230      	adds	r2, #48	; 0x30
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	e00a      	b.n	8008426 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	0f1b      	lsrs	r3, r3, #28
 8008414:	b2da      	uxtb	r2, r3
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	4619      	mov	r1, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	440b      	add	r3, r1
 8008420:	3237      	adds	r2, #55	; 0x37
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	3301      	adds	r3, #1
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	4413      	add	r3, r2
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	3301      	adds	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
 8008440:	7dfa      	ldrb	r2, [r7, #23]
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	429a      	cmp	r2, r3
 8008446:	d3d3      	bcc.n	80083f0 <IntToUnicode+0x18>
  }
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	371c      	adds	r7, #28
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
	...

08008458 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08a      	sub	sp, #40	; 0x28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008460:	f107 0314 	add.w	r3, r7, #20
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	605a      	str	r2, [r3, #4]
 800846a:	609a      	str	r2, [r3, #8]
 800846c:	60da      	str	r2, [r3, #12]
 800846e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008478:	d147      	bne.n	800850a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800847a:	2300      	movs	r3, #0
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	4b25      	ldr	r3, [pc, #148]	; (8008514 <HAL_PCD_MspInit+0xbc>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	4a24      	ldr	r2, [pc, #144]	; (8008514 <HAL_PCD_MspInit+0xbc>)
 8008484:	f043 0301 	orr.w	r3, r3, #1
 8008488:	6313      	str	r3, [r2, #48]	; 0x30
 800848a:	4b22      	ldr	r3, [pc, #136]	; (8008514 <HAL_PCD_MspInit+0xbc>)
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	613b      	str	r3, [r7, #16]
 8008494:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800849a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800849c:	2300      	movs	r3, #0
 800849e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80084a4:	f107 0314 	add.w	r3, r7, #20
 80084a8:	4619      	mov	r1, r3
 80084aa:	481b      	ldr	r0, [pc, #108]	; (8008518 <HAL_PCD_MspInit+0xc0>)
 80084ac:	f7f8 ffbe 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b6:	2302      	movs	r3, #2
 80084b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084be:	2300      	movs	r3, #0
 80084c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084c2:	230a      	movs	r3, #10
 80084c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c6:	f107 0314 	add.w	r3, r7, #20
 80084ca:	4619      	mov	r1, r3
 80084cc:	4812      	ldr	r0, [pc, #72]	; (8008518 <HAL_PCD_MspInit+0xc0>)
 80084ce:	f7f8 ffad 	bl	800142c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <HAL_PCD_MspInit+0xbc>)
 80084d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d6:	4a0f      	ldr	r2, [pc, #60]	; (8008514 <HAL_PCD_MspInit+0xbc>)
 80084d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084dc:	6353      	str	r3, [r2, #52]	; 0x34
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <HAL_PCD_MspInit+0xbc>)
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	4a0b      	ldr	r2, [pc, #44]	; (8008514 <HAL_PCD_MspInit+0xbc>)
 80084e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084ec:	6453      	str	r3, [r2, #68]	; 0x44
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <HAL_PCD_MspInit+0xbc>)
 80084f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084fa:	2200      	movs	r2, #0
 80084fc:	2100      	movs	r1, #0
 80084fe:	2043      	movs	r0, #67	; 0x43
 8008500:	f7f8 ff5d 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008504:	2043      	movs	r0, #67	; 0x43
 8008506:	f7f8 ff76 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800850a:	bf00      	nop
 800850c:	3728      	adds	r7, #40	; 0x28
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40023800 	.word	0x40023800
 8008518:	40020000 	.word	0x40020000

0800851c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f7fe fcc2 	bl	8006ebc <USBD_LL_SetupStage>
}
 8008538:	bf00      	nop
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008552:	78fa      	ldrb	r2, [r7, #3]
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	1a9b      	subs	r3, r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	4619      	mov	r1, r3
 800856a:	f7fe fcfc 	bl	8006f66 <USBD_LL_DataOutStage>
}
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008588:	78fa      	ldrb	r2, [r7, #3]
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	3348      	adds	r3, #72	; 0x48
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	4619      	mov	r1, r3
 800859e:	f7fe fd45 	bl	800702c <USBD_LL_DataInStage>
}
 80085a2:	bf00      	nop
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe fe59 	bl	8007270 <USBD_LL_SOF>
}
 80085be:	bf00      	nop
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085ce:	2301      	movs	r3, #1
 80085d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d102      	bne.n	80085e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
 80085de:	e008      	b.n	80085f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d102      	bne.n	80085ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
 80085ec:	e001      	b.n	80085f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80085ee:	f7f8 fb51 	bl	8000c94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085f8:	7bfa      	ldrb	r2, [r7, #15]
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fe fdf9 	bl	80071f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008608:	4618      	mov	r0, r3
 800860a:	f7fe fda5 	bl	8007158 <USBD_LL_Reset>
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe fdf4 	bl	8007214 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800863e:	f043 0301 	orr.w	r3, r3, #1
 8008642:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800864c:	4b04      	ldr	r3, [pc, #16]	; (8008660 <HAL_PCD_SuspendCallback+0x48>)
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	4a03      	ldr	r2, [pc, #12]	; (8008660 <HAL_PCD_SuspendCallback+0x48>)
 8008652:	f043 0306 	orr.w	r3, r3, #6
 8008656:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	e000ed00 	.word	0xe000ed00

08008664 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fde4 	bl	8007240 <USBD_LL_Resume>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008692:	78fa      	ldrb	r2, [r7, #3]
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fe32 	bl	8007300 <USBD_LL_IsoOUTIncomplete>
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	4611      	mov	r1, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fdfa 	bl	80072b4 <USBD_LL_IsoINIncomplete>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fe38 	bl	800734c <USBD_LL_DevConnected>
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fe35 	bl	8007362 <USBD_LL_DevDisconnected>
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d13c      	bne.n	800878a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008710:	4a20      	ldr	r2, [pc, #128]	; (8008794 <USBD_LL_Init+0x94>)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a1e      	ldr	r2, [pc, #120]	; (8008794 <USBD_LL_Init+0x94>)
 800871c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008720:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <USBD_LL_Init+0x94>)
 8008722:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008726:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008728:	4b1a      	ldr	r3, [pc, #104]	; (8008794 <USBD_LL_Init+0x94>)
 800872a:	2204      	movs	r2, #4
 800872c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800872e:	4b19      	ldr	r3, [pc, #100]	; (8008794 <USBD_LL_Init+0x94>)
 8008730:	2202      	movs	r2, #2
 8008732:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008734:	4b17      	ldr	r3, [pc, #92]	; (8008794 <USBD_LL_Init+0x94>)
 8008736:	2200      	movs	r2, #0
 8008738:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <USBD_LL_Init+0x94>)
 800873c:	2202      	movs	r2, #2
 800873e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008740:	4b14      	ldr	r3, [pc, #80]	; (8008794 <USBD_LL_Init+0x94>)
 8008742:	2200      	movs	r2, #0
 8008744:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008746:	4b13      	ldr	r3, [pc, #76]	; (8008794 <USBD_LL_Init+0x94>)
 8008748:	2200      	movs	r2, #0
 800874a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800874c:	4b11      	ldr	r3, [pc, #68]	; (8008794 <USBD_LL_Init+0x94>)
 800874e:	2200      	movs	r2, #0
 8008750:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008752:	4b10      	ldr	r3, [pc, #64]	; (8008794 <USBD_LL_Init+0x94>)
 8008754:	2201      	movs	r2, #1
 8008756:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008758:	4b0e      	ldr	r3, [pc, #56]	; (8008794 <USBD_LL_Init+0x94>)
 800875a:	2200      	movs	r2, #0
 800875c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800875e:	480d      	ldr	r0, [pc, #52]	; (8008794 <USBD_LL_Init+0x94>)
 8008760:	f7f9 fdfe 	bl	8002360 <HAL_PCD_Init>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800876a:	f7f8 fa93 	bl	8000c94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800876e:	2180      	movs	r1, #128	; 0x80
 8008770:	4808      	ldr	r0, [pc, #32]	; (8008794 <USBD_LL_Init+0x94>)
 8008772:	f7fa ff5c 	bl	800362e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008776:	2240      	movs	r2, #64	; 0x40
 8008778:	2100      	movs	r1, #0
 800877a:	4806      	ldr	r0, [pc, #24]	; (8008794 <USBD_LL_Init+0x94>)
 800877c:	f7fa ff10 	bl	80035a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008780:	2280      	movs	r2, #128	; 0x80
 8008782:	2101      	movs	r1, #1
 8008784:	4803      	ldr	r0, [pc, #12]	; (8008794 <USBD_LL_Init+0x94>)
 8008786:	f7fa ff0b 	bl	80035a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20001940 	.word	0x20001940

08008798 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7f9 fef3 	bl	800259a <HAL_PCD_Start>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 f942 	bl	8008a44 <USBD_Get_USB_Status>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	4608      	mov	r0, r1
 80087d8:	4611      	mov	r1, r2
 80087da:	461a      	mov	r2, r3
 80087dc:	4603      	mov	r3, r0
 80087de:	70fb      	strb	r3, [r7, #3]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70bb      	strb	r3, [r7, #2]
 80087e4:	4613      	mov	r3, r2
 80087e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087f6:	78bb      	ldrb	r3, [r7, #2]
 80087f8:	883a      	ldrh	r2, [r7, #0]
 80087fa:	78f9      	ldrb	r1, [r7, #3]
 80087fc:	f7fa fad7 	bl	8002dae <HAL_PCD_EP_Open>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f91c 	bl	8008a44 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008810:	7bbb      	ldrb	r3, [r7, #14]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	f7fa fb20 	bl	8002e7e <HAL_PCD_EP_Close>
 800883e:	4603      	mov	r3, r0
 8008840:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 f8fd 	bl	8008a44 <USBD_Get_USB_Status>
 800884a:	4603      	mov	r3, r0
 800884c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f7fa fbf8 	bl	800306c <HAL_PCD_EP_SetStall>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f8de 	bl	8008a44 <USBD_Get_USB_Status>
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888c:	7bbb      	ldrb	r3, [r7, #14]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fa fc3d 	bl	8003134 <HAL_PCD_EP_ClrStall>
 80088ba:	4603      	mov	r3, r0
 80088bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 f8bf 	bl	8008a44 <USBD_Get_USB_Status>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	da0b      	bge.n	8008908 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088f6:	68f9      	ldr	r1, [r7, #12]
 80088f8:	4613      	mov	r3, r2
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	1a9b      	subs	r3, r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	333e      	adds	r3, #62	; 0x3e
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	e00b      	b.n	8008920 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	4613      	mov	r3, r2
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800891e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f7fa fa0a 	bl	8002d64 <HAL_PCD_SetAddress>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f874 	bl	8008a44 <USBD_Get_USB_Status>
 800895c:	4603      	mov	r3, r0
 800895e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008960:	7bbb      	ldrb	r3, [r7, #14]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b086      	sub	sp, #24
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
 8008976:	460b      	mov	r3, r1
 8008978:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008988:	7af9      	ldrb	r1, [r7, #11]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	f7fa fb23 	bl	8002fd8 <HAL_PCD_EP_Transmit>
 8008992:	4603      	mov	r3, r0
 8008994:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 f853 	bl	8008a44 <USBD_Get_USB_Status>
 800899e:	4603      	mov	r3, r0
 80089a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	603b      	str	r3, [r7, #0]
 80089b8:	460b      	mov	r3, r1
 80089ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089ca:	7af9      	ldrb	r1, [r7, #11]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	f7fa fa9f 	bl	8002f12 <HAL_PCD_EP_Receive>
 80089d4:	4603      	mov	r3, r0
 80089d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f832 	bl	8008a44 <USBD_Get_USB_Status>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a00:	78fa      	ldrb	r2, [r7, #3]
 8008a02:	4611      	mov	r1, r2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fa facf 	bl	8002fa8 <HAL_PCD_EP_GetRxCount>
 8008a0a:	4603      	mov	r3, r0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a1c:	4b03      	ldr	r3, [pc, #12]	; (8008a2c <USBD_static_malloc+0x18>)
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20001d48 	.word	0x20001d48

08008a30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]

}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	2b03      	cmp	r3, #3
 8008a56:	d817      	bhi.n	8008a88 <USBD_Get_USB_Status+0x44>
 8008a58:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <USBD_Get_USB_Status+0x1c>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008a71 	.word	0x08008a71
 8008a64:	08008a77 	.word	0x08008a77
 8008a68:	08008a7d 	.word	0x08008a7d
 8008a6c:	08008a83 	.word	0x08008a83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
    break;
 8008a74:	e00b      	b.n	8008a8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a76:	2303      	movs	r3, #3
 8008a78:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7a:	e008      	b.n	8008a8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a80:	e005      	b.n	8008a8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a82:	2303      	movs	r3, #3
 8008a84:	73fb      	strb	r3, [r7, #15]
    break;
 8008a86:	e002      	b.n	8008a8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8c:	bf00      	nop
  }
  return usb_status;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <__errno>:
 8008a9c:	4b01      	ldr	r3, [pc, #4]	; (8008aa4 <__errno+0x8>)
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	200001a8 	.word	0x200001a8

08008aa8 <__libc_init_array>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	4d0d      	ldr	r5, [pc, #52]	; (8008ae0 <__libc_init_array+0x38>)
 8008aac:	4c0d      	ldr	r4, [pc, #52]	; (8008ae4 <__libc_init_array+0x3c>)
 8008aae:	1b64      	subs	r4, r4, r5
 8008ab0:	10a4      	asrs	r4, r4, #2
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	42a6      	cmp	r6, r4
 8008ab6:	d109      	bne.n	8008acc <__libc_init_array+0x24>
 8008ab8:	4d0b      	ldr	r5, [pc, #44]	; (8008ae8 <__libc_init_array+0x40>)
 8008aba:	4c0c      	ldr	r4, [pc, #48]	; (8008aec <__libc_init_array+0x44>)
 8008abc:	f000 fca2 	bl	8009404 <_init>
 8008ac0:	1b64      	subs	r4, r4, r5
 8008ac2:	10a4      	asrs	r4, r4, #2
 8008ac4:	2600      	movs	r6, #0
 8008ac6:	42a6      	cmp	r6, r4
 8008ac8:	d105      	bne.n	8008ad6 <__libc_init_array+0x2e>
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad0:	4798      	blx	r3
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	e7ee      	b.n	8008ab4 <__libc_init_array+0xc>
 8008ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ada:	4798      	blx	r3
 8008adc:	3601      	adds	r6, #1
 8008ade:	e7f2      	b.n	8008ac6 <__libc_init_array+0x1e>
 8008ae0:	0800a0f0 	.word	0x0800a0f0
 8008ae4:	0800a0f0 	.word	0x0800a0f0
 8008ae8:	0800a0f0 	.word	0x0800a0f0
 8008aec:	0800a0f4 	.word	0x0800a0f4

08008af0 <memset>:
 8008af0:	4402      	add	r2, r0
 8008af2:	4603      	mov	r3, r0
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d100      	bne.n	8008afa <memset+0xa>
 8008af8:	4770      	bx	lr
 8008afa:	f803 1b01 	strb.w	r1, [r3], #1
 8008afe:	e7f9      	b.n	8008af4 <memset+0x4>

08008b00 <sniprintf>:
 8008b00:	b40c      	push	{r2, r3}
 8008b02:	b530      	push	{r4, r5, lr}
 8008b04:	4b17      	ldr	r3, [pc, #92]	; (8008b64 <sniprintf+0x64>)
 8008b06:	1e0c      	subs	r4, r1, #0
 8008b08:	681d      	ldr	r5, [r3, #0]
 8008b0a:	b09d      	sub	sp, #116	; 0x74
 8008b0c:	da08      	bge.n	8008b20 <sniprintf+0x20>
 8008b0e:	238b      	movs	r3, #139	; 0x8b
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	b01d      	add	sp, #116	; 0x74
 8008b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b1c:	b002      	add	sp, #8
 8008b1e:	4770      	bx	lr
 8008b20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b28:	bf14      	ite	ne
 8008b2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b2e:	4623      	moveq	r3, r4
 8008b30:	9304      	str	r3, [sp, #16]
 8008b32:	9307      	str	r3, [sp, #28]
 8008b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b38:	9002      	str	r0, [sp, #8]
 8008b3a:	9006      	str	r0, [sp, #24]
 8008b3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b42:	ab21      	add	r3, sp, #132	; 0x84
 8008b44:	a902      	add	r1, sp, #8
 8008b46:	4628      	mov	r0, r5
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	f000 f869 	bl	8008c20 <_svfiprintf_r>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	bfbc      	itt	lt
 8008b52:	238b      	movlt	r3, #139	; 0x8b
 8008b54:	602b      	strlt	r3, [r5, #0]
 8008b56:	2c00      	cmp	r4, #0
 8008b58:	d0dd      	beq.n	8008b16 <sniprintf+0x16>
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	e7d9      	b.n	8008b16 <sniprintf+0x16>
 8008b62:	bf00      	nop
 8008b64:	200001a8 	.word	0x200001a8

08008b68 <__ssputs_r>:
 8008b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	688e      	ldr	r6, [r1, #8]
 8008b6e:	429e      	cmp	r6, r3
 8008b70:	4682      	mov	sl, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	4690      	mov	r8, r2
 8008b76:	461f      	mov	r7, r3
 8008b78:	d838      	bhi.n	8008bec <__ssputs_r+0x84>
 8008b7a:	898a      	ldrh	r2, [r1, #12]
 8008b7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b80:	d032      	beq.n	8008be8 <__ssputs_r+0x80>
 8008b82:	6825      	ldr	r5, [r4, #0]
 8008b84:	6909      	ldr	r1, [r1, #16]
 8008b86:	eba5 0901 	sub.w	r9, r5, r1
 8008b8a:	6965      	ldr	r5, [r4, #20]
 8008b8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b94:	3301      	adds	r3, #1
 8008b96:	444b      	add	r3, r9
 8008b98:	106d      	asrs	r5, r5, #1
 8008b9a:	429d      	cmp	r5, r3
 8008b9c:	bf38      	it	cc
 8008b9e:	461d      	movcc	r5, r3
 8008ba0:	0553      	lsls	r3, r2, #21
 8008ba2:	d531      	bpl.n	8008c08 <__ssputs_r+0xa0>
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	f000 fb63 	bl	8009270 <_malloc_r>
 8008baa:	4606      	mov	r6, r0
 8008bac:	b950      	cbnz	r0, 8008bc4 <__ssputs_r+0x5c>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	f8ca 3000 	str.w	r3, [sl]
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc4:	6921      	ldr	r1, [r4, #16]
 8008bc6:	464a      	mov	r2, r9
 8008bc8:	f000 fabe 	bl	8009148 <memcpy>
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd6:	81a3      	strh	r3, [r4, #12]
 8008bd8:	6126      	str	r6, [r4, #16]
 8008bda:	6165      	str	r5, [r4, #20]
 8008bdc:	444e      	add	r6, r9
 8008bde:	eba5 0509 	sub.w	r5, r5, r9
 8008be2:	6026      	str	r6, [r4, #0]
 8008be4:	60a5      	str	r5, [r4, #8]
 8008be6:	463e      	mov	r6, r7
 8008be8:	42be      	cmp	r6, r7
 8008bea:	d900      	bls.n	8008bee <__ssputs_r+0x86>
 8008bec:	463e      	mov	r6, r7
 8008bee:	6820      	ldr	r0, [r4, #0]
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	f000 fab6 	bl	8009164 <memmove>
 8008bf8:	68a3      	ldr	r3, [r4, #8]
 8008bfa:	1b9b      	subs	r3, r3, r6
 8008bfc:	60a3      	str	r3, [r4, #8]
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	4433      	add	r3, r6
 8008c02:	6023      	str	r3, [r4, #0]
 8008c04:	2000      	movs	r0, #0
 8008c06:	e7db      	b.n	8008bc0 <__ssputs_r+0x58>
 8008c08:	462a      	mov	r2, r5
 8008c0a:	f000 fba5 	bl	8009358 <_realloc_r>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d1e1      	bne.n	8008bd8 <__ssputs_r+0x70>
 8008c14:	6921      	ldr	r1, [r4, #16]
 8008c16:	4650      	mov	r0, sl
 8008c18:	f000 fabe 	bl	8009198 <_free_r>
 8008c1c:	e7c7      	b.n	8008bae <__ssputs_r+0x46>
	...

08008c20 <_svfiprintf_r>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	4698      	mov	r8, r3
 8008c26:	898b      	ldrh	r3, [r1, #12]
 8008c28:	061b      	lsls	r3, r3, #24
 8008c2a:	b09d      	sub	sp, #116	; 0x74
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	460d      	mov	r5, r1
 8008c30:	4614      	mov	r4, r2
 8008c32:	d50e      	bpl.n	8008c52 <_svfiprintf_r+0x32>
 8008c34:	690b      	ldr	r3, [r1, #16]
 8008c36:	b963      	cbnz	r3, 8008c52 <_svfiprintf_r+0x32>
 8008c38:	2140      	movs	r1, #64	; 0x40
 8008c3a:	f000 fb19 	bl	8009270 <_malloc_r>
 8008c3e:	6028      	str	r0, [r5, #0]
 8008c40:	6128      	str	r0, [r5, #16]
 8008c42:	b920      	cbnz	r0, 8008c4e <_svfiprintf_r+0x2e>
 8008c44:	230c      	movs	r3, #12
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4c:	e0d1      	b.n	8008df2 <_svfiprintf_r+0x1d2>
 8008c4e:	2340      	movs	r3, #64	; 0x40
 8008c50:	616b      	str	r3, [r5, #20]
 8008c52:	2300      	movs	r3, #0
 8008c54:	9309      	str	r3, [sp, #36]	; 0x24
 8008c56:	2320      	movs	r3, #32
 8008c58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c60:	2330      	movs	r3, #48	; 0x30
 8008c62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e0c <_svfiprintf_r+0x1ec>
 8008c66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c6a:	f04f 0901 	mov.w	r9, #1
 8008c6e:	4623      	mov	r3, r4
 8008c70:	469a      	mov	sl, r3
 8008c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c76:	b10a      	cbz	r2, 8008c7c <_svfiprintf_r+0x5c>
 8008c78:	2a25      	cmp	r2, #37	; 0x25
 8008c7a:	d1f9      	bne.n	8008c70 <_svfiprintf_r+0x50>
 8008c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c80:	d00b      	beq.n	8008c9a <_svfiprintf_r+0x7a>
 8008c82:	465b      	mov	r3, fp
 8008c84:	4622      	mov	r2, r4
 8008c86:	4629      	mov	r1, r5
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f7ff ff6d 	bl	8008b68 <__ssputs_r>
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f000 80aa 	beq.w	8008de8 <_svfiprintf_r+0x1c8>
 8008c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c96:	445a      	add	r2, fp
 8008c98:	9209      	str	r2, [sp, #36]	; 0x24
 8008c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 80a2 	beq.w	8008de8 <_svfiprintf_r+0x1c8>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8008caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cae:	f10a 0a01 	add.w	sl, sl, #1
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	9307      	str	r3, [sp, #28]
 8008cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cba:	931a      	str	r3, [sp, #104]	; 0x68
 8008cbc:	4654      	mov	r4, sl
 8008cbe:	2205      	movs	r2, #5
 8008cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc4:	4851      	ldr	r0, [pc, #324]	; (8008e0c <_svfiprintf_r+0x1ec>)
 8008cc6:	f7f7 fa8b 	bl	80001e0 <memchr>
 8008cca:	9a04      	ldr	r2, [sp, #16]
 8008ccc:	b9d8      	cbnz	r0, 8008d06 <_svfiprintf_r+0xe6>
 8008cce:	06d0      	lsls	r0, r2, #27
 8008cd0:	bf44      	itt	mi
 8008cd2:	2320      	movmi	r3, #32
 8008cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cd8:	0711      	lsls	r1, r2, #28
 8008cda:	bf44      	itt	mi
 8008cdc:	232b      	movmi	r3, #43	; 0x2b
 8008cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce8:	d015      	beq.n	8008d16 <_svfiprintf_r+0xf6>
 8008cea:	9a07      	ldr	r2, [sp, #28]
 8008cec:	4654      	mov	r4, sl
 8008cee:	2000      	movs	r0, #0
 8008cf0:	f04f 0c0a 	mov.w	ip, #10
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cfa:	3b30      	subs	r3, #48	; 0x30
 8008cfc:	2b09      	cmp	r3, #9
 8008cfe:	d94e      	bls.n	8008d9e <_svfiprintf_r+0x17e>
 8008d00:	b1b0      	cbz	r0, 8008d30 <_svfiprintf_r+0x110>
 8008d02:	9207      	str	r2, [sp, #28]
 8008d04:	e014      	b.n	8008d30 <_svfiprintf_r+0x110>
 8008d06:	eba0 0308 	sub.w	r3, r0, r8
 8008d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	46a2      	mov	sl, r4
 8008d14:	e7d2      	b.n	8008cbc <_svfiprintf_r+0x9c>
 8008d16:	9b03      	ldr	r3, [sp, #12]
 8008d18:	1d19      	adds	r1, r3, #4
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	9103      	str	r1, [sp, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bfbb      	ittet	lt
 8008d22:	425b      	neglt	r3, r3
 8008d24:	f042 0202 	orrlt.w	r2, r2, #2
 8008d28:	9307      	strge	r3, [sp, #28]
 8008d2a:	9307      	strlt	r3, [sp, #28]
 8008d2c:	bfb8      	it	lt
 8008d2e:	9204      	strlt	r2, [sp, #16]
 8008d30:	7823      	ldrb	r3, [r4, #0]
 8008d32:	2b2e      	cmp	r3, #46	; 0x2e
 8008d34:	d10c      	bne.n	8008d50 <_svfiprintf_r+0x130>
 8008d36:	7863      	ldrb	r3, [r4, #1]
 8008d38:	2b2a      	cmp	r3, #42	; 0x2a
 8008d3a:	d135      	bne.n	8008da8 <_svfiprintf_r+0x188>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	9203      	str	r2, [sp, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfb8      	it	lt
 8008d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d4c:	3402      	adds	r4, #2
 8008d4e:	9305      	str	r3, [sp, #20]
 8008d50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e1c <_svfiprintf_r+0x1fc>
 8008d54:	7821      	ldrb	r1, [r4, #0]
 8008d56:	2203      	movs	r2, #3
 8008d58:	4650      	mov	r0, sl
 8008d5a:	f7f7 fa41 	bl	80001e0 <memchr>
 8008d5e:	b140      	cbz	r0, 8008d72 <_svfiprintf_r+0x152>
 8008d60:	2340      	movs	r3, #64	; 0x40
 8008d62:	eba0 000a 	sub.w	r0, r0, sl
 8008d66:	fa03 f000 	lsl.w	r0, r3, r0
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	4303      	orrs	r3, r0
 8008d6e:	3401      	adds	r4, #1
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d76:	4826      	ldr	r0, [pc, #152]	; (8008e10 <_svfiprintf_r+0x1f0>)
 8008d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d7c:	2206      	movs	r2, #6
 8008d7e:	f7f7 fa2f 	bl	80001e0 <memchr>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d038      	beq.n	8008df8 <_svfiprintf_r+0x1d8>
 8008d86:	4b23      	ldr	r3, [pc, #140]	; (8008e14 <_svfiprintf_r+0x1f4>)
 8008d88:	bb1b      	cbnz	r3, 8008dd2 <_svfiprintf_r+0x1b2>
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	3307      	adds	r3, #7
 8008d8e:	f023 0307 	bic.w	r3, r3, #7
 8008d92:	3308      	adds	r3, #8
 8008d94:	9303      	str	r3, [sp, #12]
 8008d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d98:	4433      	add	r3, r6
 8008d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d9c:	e767      	b.n	8008c6e <_svfiprintf_r+0x4e>
 8008d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008da2:	460c      	mov	r4, r1
 8008da4:	2001      	movs	r0, #1
 8008da6:	e7a5      	b.n	8008cf4 <_svfiprintf_r+0xd4>
 8008da8:	2300      	movs	r3, #0
 8008daa:	3401      	adds	r4, #1
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	4619      	mov	r1, r3
 8008db0:	f04f 0c0a 	mov.w	ip, #10
 8008db4:	4620      	mov	r0, r4
 8008db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dba:	3a30      	subs	r2, #48	; 0x30
 8008dbc:	2a09      	cmp	r2, #9
 8008dbe:	d903      	bls.n	8008dc8 <_svfiprintf_r+0x1a8>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0c5      	beq.n	8008d50 <_svfiprintf_r+0x130>
 8008dc4:	9105      	str	r1, [sp, #20]
 8008dc6:	e7c3      	b.n	8008d50 <_svfiprintf_r+0x130>
 8008dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dcc:	4604      	mov	r4, r0
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e7f0      	b.n	8008db4 <_svfiprintf_r+0x194>
 8008dd2:	ab03      	add	r3, sp, #12
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	462a      	mov	r2, r5
 8008dd8:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <_svfiprintf_r+0x1f8>)
 8008dda:	a904      	add	r1, sp, #16
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f3af 8000 	nop.w
 8008de2:	1c42      	adds	r2, r0, #1
 8008de4:	4606      	mov	r6, r0
 8008de6:	d1d6      	bne.n	8008d96 <_svfiprintf_r+0x176>
 8008de8:	89ab      	ldrh	r3, [r5, #12]
 8008dea:	065b      	lsls	r3, r3, #25
 8008dec:	f53f af2c 	bmi.w	8008c48 <_svfiprintf_r+0x28>
 8008df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008df2:	b01d      	add	sp, #116	; 0x74
 8008df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df8:	ab03      	add	r3, sp, #12
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	462a      	mov	r2, r5
 8008dfe:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <_svfiprintf_r+0x1f8>)
 8008e00:	a904      	add	r1, sp, #16
 8008e02:	4638      	mov	r0, r7
 8008e04:	f000 f87a 	bl	8008efc <_printf_i>
 8008e08:	e7eb      	b.n	8008de2 <_svfiprintf_r+0x1c2>
 8008e0a:	bf00      	nop
 8008e0c:	0800a0b4 	.word	0x0800a0b4
 8008e10:	0800a0be 	.word	0x0800a0be
 8008e14:	00000000 	.word	0x00000000
 8008e18:	08008b69 	.word	0x08008b69
 8008e1c:	0800a0ba 	.word	0x0800a0ba

08008e20 <_printf_common>:
 8008e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e24:	4616      	mov	r6, r2
 8008e26:	4699      	mov	r9, r3
 8008e28:	688a      	ldr	r2, [r1, #8]
 8008e2a:	690b      	ldr	r3, [r1, #16]
 8008e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e30:	4293      	cmp	r3, r2
 8008e32:	bfb8      	it	lt
 8008e34:	4613      	movlt	r3, r2
 8008e36:	6033      	str	r3, [r6, #0]
 8008e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	b10a      	cbz	r2, 8008e46 <_printf_common+0x26>
 8008e42:	3301      	adds	r3, #1
 8008e44:	6033      	str	r3, [r6, #0]
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	0699      	lsls	r1, r3, #26
 8008e4a:	bf42      	ittt	mi
 8008e4c:	6833      	ldrmi	r3, [r6, #0]
 8008e4e:	3302      	addmi	r3, #2
 8008e50:	6033      	strmi	r3, [r6, #0]
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	f015 0506 	ands.w	r5, r5, #6
 8008e58:	d106      	bne.n	8008e68 <_printf_common+0x48>
 8008e5a:	f104 0a19 	add.w	sl, r4, #25
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	6832      	ldr	r2, [r6, #0]
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	dc26      	bgt.n	8008eb6 <_printf_common+0x96>
 8008e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e6c:	1e13      	subs	r3, r2, #0
 8008e6e:	6822      	ldr	r2, [r4, #0]
 8008e70:	bf18      	it	ne
 8008e72:	2301      	movne	r3, #1
 8008e74:	0692      	lsls	r2, r2, #26
 8008e76:	d42b      	bmi.n	8008ed0 <_printf_common+0xb0>
 8008e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	4638      	mov	r0, r7
 8008e80:	47c0      	blx	r8
 8008e82:	3001      	adds	r0, #1
 8008e84:	d01e      	beq.n	8008ec4 <_printf_common+0xa4>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	68e5      	ldr	r5, [r4, #12]
 8008e8a:	6832      	ldr	r2, [r6, #0]
 8008e8c:	f003 0306 	and.w	r3, r3, #6
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	bf08      	it	eq
 8008e94:	1aad      	subeq	r5, r5, r2
 8008e96:	68a3      	ldr	r3, [r4, #8]
 8008e98:	6922      	ldr	r2, [r4, #16]
 8008e9a:	bf0c      	ite	eq
 8008e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea0:	2500      	movne	r5, #0
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	bfc4      	itt	gt
 8008ea6:	1a9b      	subgt	r3, r3, r2
 8008ea8:	18ed      	addgt	r5, r5, r3
 8008eaa:	2600      	movs	r6, #0
 8008eac:	341a      	adds	r4, #26
 8008eae:	42b5      	cmp	r5, r6
 8008eb0:	d11a      	bne.n	8008ee8 <_printf_common+0xc8>
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	e008      	b.n	8008ec8 <_printf_common+0xa8>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4652      	mov	r2, sl
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	47c0      	blx	r8
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d103      	bne.n	8008ecc <_printf_common+0xac>
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ecc:	3501      	adds	r5, #1
 8008ece:	e7c6      	b.n	8008e5e <_printf_common+0x3e>
 8008ed0:	18e1      	adds	r1, r4, r3
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	2030      	movs	r0, #48	; 0x30
 8008ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eda:	4422      	add	r2, r4
 8008edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ee4:	3302      	adds	r3, #2
 8008ee6:	e7c7      	b.n	8008e78 <_printf_common+0x58>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	4622      	mov	r2, r4
 8008eec:	4649      	mov	r1, r9
 8008eee:	4638      	mov	r0, r7
 8008ef0:	47c0      	blx	r8
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	d0e6      	beq.n	8008ec4 <_printf_common+0xa4>
 8008ef6:	3601      	adds	r6, #1
 8008ef8:	e7d9      	b.n	8008eae <_printf_common+0x8e>
	...

08008efc <_printf_i>:
 8008efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	7e0f      	ldrb	r7, [r1, #24]
 8008f02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f04:	2f78      	cmp	r7, #120	; 0x78
 8008f06:	4691      	mov	r9, r2
 8008f08:	4680      	mov	r8, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	469a      	mov	sl, r3
 8008f0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f12:	d807      	bhi.n	8008f24 <_printf_i+0x28>
 8008f14:	2f62      	cmp	r7, #98	; 0x62
 8008f16:	d80a      	bhi.n	8008f2e <_printf_i+0x32>
 8008f18:	2f00      	cmp	r7, #0
 8008f1a:	f000 80d8 	beq.w	80090ce <_printf_i+0x1d2>
 8008f1e:	2f58      	cmp	r7, #88	; 0x58
 8008f20:	f000 80a3 	beq.w	800906a <_printf_i+0x16e>
 8008f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f2c:	e03a      	b.n	8008fa4 <_printf_i+0xa8>
 8008f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f32:	2b15      	cmp	r3, #21
 8008f34:	d8f6      	bhi.n	8008f24 <_printf_i+0x28>
 8008f36:	a101      	add	r1, pc, #4	; (adr r1, 8008f3c <_printf_i+0x40>)
 8008f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f3c:	08008f95 	.word	0x08008f95
 8008f40:	08008fa9 	.word	0x08008fa9
 8008f44:	08008f25 	.word	0x08008f25
 8008f48:	08008f25 	.word	0x08008f25
 8008f4c:	08008f25 	.word	0x08008f25
 8008f50:	08008f25 	.word	0x08008f25
 8008f54:	08008fa9 	.word	0x08008fa9
 8008f58:	08008f25 	.word	0x08008f25
 8008f5c:	08008f25 	.word	0x08008f25
 8008f60:	08008f25 	.word	0x08008f25
 8008f64:	08008f25 	.word	0x08008f25
 8008f68:	080090b5 	.word	0x080090b5
 8008f6c:	08008fd9 	.word	0x08008fd9
 8008f70:	08009097 	.word	0x08009097
 8008f74:	08008f25 	.word	0x08008f25
 8008f78:	08008f25 	.word	0x08008f25
 8008f7c:	080090d7 	.word	0x080090d7
 8008f80:	08008f25 	.word	0x08008f25
 8008f84:	08008fd9 	.word	0x08008fd9
 8008f88:	08008f25 	.word	0x08008f25
 8008f8c:	08008f25 	.word	0x08008f25
 8008f90:	0800909f 	.word	0x0800909f
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	1d1a      	adds	r2, r3, #4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	602a      	str	r2, [r5, #0]
 8008f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e0a3      	b.n	80090f0 <_printf_i+0x1f4>
 8008fa8:	6820      	ldr	r0, [r4, #0]
 8008faa:	6829      	ldr	r1, [r5, #0]
 8008fac:	0606      	lsls	r6, r0, #24
 8008fae:	f101 0304 	add.w	r3, r1, #4
 8008fb2:	d50a      	bpl.n	8008fca <_printf_i+0xce>
 8008fb4:	680e      	ldr	r6, [r1, #0]
 8008fb6:	602b      	str	r3, [r5, #0]
 8008fb8:	2e00      	cmp	r6, #0
 8008fba:	da03      	bge.n	8008fc4 <_printf_i+0xc8>
 8008fbc:	232d      	movs	r3, #45	; 0x2d
 8008fbe:	4276      	negs	r6, r6
 8008fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc4:	485e      	ldr	r0, [pc, #376]	; (8009140 <_printf_i+0x244>)
 8008fc6:	230a      	movs	r3, #10
 8008fc8:	e019      	b.n	8008ffe <_printf_i+0x102>
 8008fca:	680e      	ldr	r6, [r1, #0]
 8008fcc:	602b      	str	r3, [r5, #0]
 8008fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fd2:	bf18      	it	ne
 8008fd4:	b236      	sxthne	r6, r6
 8008fd6:	e7ef      	b.n	8008fb8 <_printf_i+0xbc>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	6820      	ldr	r0, [r4, #0]
 8008fdc:	1d19      	adds	r1, r3, #4
 8008fde:	6029      	str	r1, [r5, #0]
 8008fe0:	0601      	lsls	r1, r0, #24
 8008fe2:	d501      	bpl.n	8008fe8 <_printf_i+0xec>
 8008fe4:	681e      	ldr	r6, [r3, #0]
 8008fe6:	e002      	b.n	8008fee <_printf_i+0xf2>
 8008fe8:	0646      	lsls	r6, r0, #25
 8008fea:	d5fb      	bpl.n	8008fe4 <_printf_i+0xe8>
 8008fec:	881e      	ldrh	r6, [r3, #0]
 8008fee:	4854      	ldr	r0, [pc, #336]	; (8009140 <_printf_i+0x244>)
 8008ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ff2:	bf0c      	ite	eq
 8008ff4:	2308      	moveq	r3, #8
 8008ff6:	230a      	movne	r3, #10
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ffe:	6865      	ldr	r5, [r4, #4]
 8009000:	60a5      	str	r5, [r4, #8]
 8009002:	2d00      	cmp	r5, #0
 8009004:	bfa2      	ittt	ge
 8009006:	6821      	ldrge	r1, [r4, #0]
 8009008:	f021 0104 	bicge.w	r1, r1, #4
 800900c:	6021      	strge	r1, [r4, #0]
 800900e:	b90e      	cbnz	r6, 8009014 <_printf_i+0x118>
 8009010:	2d00      	cmp	r5, #0
 8009012:	d04d      	beq.n	80090b0 <_printf_i+0x1b4>
 8009014:	4615      	mov	r5, r2
 8009016:	fbb6 f1f3 	udiv	r1, r6, r3
 800901a:	fb03 6711 	mls	r7, r3, r1, r6
 800901e:	5dc7      	ldrb	r7, [r0, r7]
 8009020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009024:	4637      	mov	r7, r6
 8009026:	42bb      	cmp	r3, r7
 8009028:	460e      	mov	r6, r1
 800902a:	d9f4      	bls.n	8009016 <_printf_i+0x11a>
 800902c:	2b08      	cmp	r3, #8
 800902e:	d10b      	bne.n	8009048 <_printf_i+0x14c>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	07de      	lsls	r6, r3, #31
 8009034:	d508      	bpl.n	8009048 <_printf_i+0x14c>
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	6861      	ldr	r1, [r4, #4]
 800903a:	4299      	cmp	r1, r3
 800903c:	bfde      	ittt	le
 800903e:	2330      	movle	r3, #48	; 0x30
 8009040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009048:	1b52      	subs	r2, r2, r5
 800904a:	6122      	str	r2, [r4, #16]
 800904c:	f8cd a000 	str.w	sl, [sp]
 8009050:	464b      	mov	r3, r9
 8009052:	aa03      	add	r2, sp, #12
 8009054:	4621      	mov	r1, r4
 8009056:	4640      	mov	r0, r8
 8009058:	f7ff fee2 	bl	8008e20 <_printf_common>
 800905c:	3001      	adds	r0, #1
 800905e:	d14c      	bne.n	80090fa <_printf_i+0x1fe>
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	b004      	add	sp, #16
 8009066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906a:	4835      	ldr	r0, [pc, #212]	; (8009140 <_printf_i+0x244>)
 800906c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009070:	6829      	ldr	r1, [r5, #0]
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	f851 6b04 	ldr.w	r6, [r1], #4
 8009078:	6029      	str	r1, [r5, #0]
 800907a:	061d      	lsls	r5, r3, #24
 800907c:	d514      	bpl.n	80090a8 <_printf_i+0x1ac>
 800907e:	07df      	lsls	r7, r3, #31
 8009080:	bf44      	itt	mi
 8009082:	f043 0320 	orrmi.w	r3, r3, #32
 8009086:	6023      	strmi	r3, [r4, #0]
 8009088:	b91e      	cbnz	r6, 8009092 <_printf_i+0x196>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	f023 0320 	bic.w	r3, r3, #32
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	2310      	movs	r3, #16
 8009094:	e7b0      	b.n	8008ff8 <_printf_i+0xfc>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	f043 0320 	orr.w	r3, r3, #32
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	2378      	movs	r3, #120	; 0x78
 80090a0:	4828      	ldr	r0, [pc, #160]	; (8009144 <_printf_i+0x248>)
 80090a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090a6:	e7e3      	b.n	8009070 <_printf_i+0x174>
 80090a8:	0659      	lsls	r1, r3, #25
 80090aa:	bf48      	it	mi
 80090ac:	b2b6      	uxthmi	r6, r6
 80090ae:	e7e6      	b.n	800907e <_printf_i+0x182>
 80090b0:	4615      	mov	r5, r2
 80090b2:	e7bb      	b.n	800902c <_printf_i+0x130>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	6826      	ldr	r6, [r4, #0]
 80090b8:	6961      	ldr	r1, [r4, #20]
 80090ba:	1d18      	adds	r0, r3, #4
 80090bc:	6028      	str	r0, [r5, #0]
 80090be:	0635      	lsls	r5, r6, #24
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	d501      	bpl.n	80090c8 <_printf_i+0x1cc>
 80090c4:	6019      	str	r1, [r3, #0]
 80090c6:	e002      	b.n	80090ce <_printf_i+0x1d2>
 80090c8:	0670      	lsls	r0, r6, #25
 80090ca:	d5fb      	bpl.n	80090c4 <_printf_i+0x1c8>
 80090cc:	8019      	strh	r1, [r3, #0]
 80090ce:	2300      	movs	r3, #0
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	4615      	mov	r5, r2
 80090d4:	e7ba      	b.n	800904c <_printf_i+0x150>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	602a      	str	r2, [r5, #0]
 80090dc:	681d      	ldr	r5, [r3, #0]
 80090de:	6862      	ldr	r2, [r4, #4]
 80090e0:	2100      	movs	r1, #0
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7f7 f87c 	bl	80001e0 <memchr>
 80090e8:	b108      	cbz	r0, 80090ee <_printf_i+0x1f2>
 80090ea:	1b40      	subs	r0, r0, r5
 80090ec:	6060      	str	r0, [r4, #4]
 80090ee:	6863      	ldr	r3, [r4, #4]
 80090f0:	6123      	str	r3, [r4, #16]
 80090f2:	2300      	movs	r3, #0
 80090f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090f8:	e7a8      	b.n	800904c <_printf_i+0x150>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	462a      	mov	r2, r5
 80090fe:	4649      	mov	r1, r9
 8009100:	4640      	mov	r0, r8
 8009102:	47d0      	blx	sl
 8009104:	3001      	adds	r0, #1
 8009106:	d0ab      	beq.n	8009060 <_printf_i+0x164>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	079b      	lsls	r3, r3, #30
 800910c:	d413      	bmi.n	8009136 <_printf_i+0x23a>
 800910e:	68e0      	ldr	r0, [r4, #12]
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	4298      	cmp	r0, r3
 8009114:	bfb8      	it	lt
 8009116:	4618      	movlt	r0, r3
 8009118:	e7a4      	b.n	8009064 <_printf_i+0x168>
 800911a:	2301      	movs	r3, #1
 800911c:	4632      	mov	r2, r6
 800911e:	4649      	mov	r1, r9
 8009120:	4640      	mov	r0, r8
 8009122:	47d0      	blx	sl
 8009124:	3001      	adds	r0, #1
 8009126:	d09b      	beq.n	8009060 <_printf_i+0x164>
 8009128:	3501      	adds	r5, #1
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	9903      	ldr	r1, [sp, #12]
 800912e:	1a5b      	subs	r3, r3, r1
 8009130:	42ab      	cmp	r3, r5
 8009132:	dcf2      	bgt.n	800911a <_printf_i+0x21e>
 8009134:	e7eb      	b.n	800910e <_printf_i+0x212>
 8009136:	2500      	movs	r5, #0
 8009138:	f104 0619 	add.w	r6, r4, #25
 800913c:	e7f5      	b.n	800912a <_printf_i+0x22e>
 800913e:	bf00      	nop
 8009140:	0800a0c5 	.word	0x0800a0c5
 8009144:	0800a0d6 	.word	0x0800a0d6

08009148 <memcpy>:
 8009148:	440a      	add	r2, r1
 800914a:	4291      	cmp	r1, r2
 800914c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009150:	d100      	bne.n	8009154 <memcpy+0xc>
 8009152:	4770      	bx	lr
 8009154:	b510      	push	{r4, lr}
 8009156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800915a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800915e:	4291      	cmp	r1, r2
 8009160:	d1f9      	bne.n	8009156 <memcpy+0xe>
 8009162:	bd10      	pop	{r4, pc}

08009164 <memmove>:
 8009164:	4288      	cmp	r0, r1
 8009166:	b510      	push	{r4, lr}
 8009168:	eb01 0402 	add.w	r4, r1, r2
 800916c:	d902      	bls.n	8009174 <memmove+0x10>
 800916e:	4284      	cmp	r4, r0
 8009170:	4623      	mov	r3, r4
 8009172:	d807      	bhi.n	8009184 <memmove+0x20>
 8009174:	1e43      	subs	r3, r0, #1
 8009176:	42a1      	cmp	r1, r4
 8009178:	d008      	beq.n	800918c <memmove+0x28>
 800917a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800917e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009182:	e7f8      	b.n	8009176 <memmove+0x12>
 8009184:	4402      	add	r2, r0
 8009186:	4601      	mov	r1, r0
 8009188:	428a      	cmp	r2, r1
 800918a:	d100      	bne.n	800918e <memmove+0x2a>
 800918c:	bd10      	pop	{r4, pc}
 800918e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009196:	e7f7      	b.n	8009188 <memmove+0x24>

08009198 <_free_r>:
 8009198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800919a:	2900      	cmp	r1, #0
 800919c:	d044      	beq.n	8009228 <_free_r+0x90>
 800919e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a2:	9001      	str	r0, [sp, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f1a1 0404 	sub.w	r4, r1, #4
 80091aa:	bfb8      	it	lt
 80091ac:	18e4      	addlt	r4, r4, r3
 80091ae:	f000 f913 	bl	80093d8 <__malloc_lock>
 80091b2:	4a1e      	ldr	r2, [pc, #120]	; (800922c <_free_r+0x94>)
 80091b4:	9801      	ldr	r0, [sp, #4]
 80091b6:	6813      	ldr	r3, [r2, #0]
 80091b8:	b933      	cbnz	r3, 80091c8 <_free_r+0x30>
 80091ba:	6063      	str	r3, [r4, #4]
 80091bc:	6014      	str	r4, [r2, #0]
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c4:	f000 b90e 	b.w	80093e4 <__malloc_unlock>
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	d908      	bls.n	80091de <_free_r+0x46>
 80091cc:	6825      	ldr	r5, [r4, #0]
 80091ce:	1961      	adds	r1, r4, r5
 80091d0:	428b      	cmp	r3, r1
 80091d2:	bf01      	itttt	eq
 80091d4:	6819      	ldreq	r1, [r3, #0]
 80091d6:	685b      	ldreq	r3, [r3, #4]
 80091d8:	1949      	addeq	r1, r1, r5
 80091da:	6021      	streq	r1, [r4, #0]
 80091dc:	e7ed      	b.n	80091ba <_free_r+0x22>
 80091de:	461a      	mov	r2, r3
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	b10b      	cbz	r3, 80091e8 <_free_r+0x50>
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	d9fa      	bls.n	80091de <_free_r+0x46>
 80091e8:	6811      	ldr	r1, [r2, #0]
 80091ea:	1855      	adds	r5, r2, r1
 80091ec:	42a5      	cmp	r5, r4
 80091ee:	d10b      	bne.n	8009208 <_free_r+0x70>
 80091f0:	6824      	ldr	r4, [r4, #0]
 80091f2:	4421      	add	r1, r4
 80091f4:	1854      	adds	r4, r2, r1
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	6011      	str	r1, [r2, #0]
 80091fa:	d1e0      	bne.n	80091be <_free_r+0x26>
 80091fc:	681c      	ldr	r4, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	6053      	str	r3, [r2, #4]
 8009202:	4421      	add	r1, r4
 8009204:	6011      	str	r1, [r2, #0]
 8009206:	e7da      	b.n	80091be <_free_r+0x26>
 8009208:	d902      	bls.n	8009210 <_free_r+0x78>
 800920a:	230c      	movs	r3, #12
 800920c:	6003      	str	r3, [r0, #0]
 800920e:	e7d6      	b.n	80091be <_free_r+0x26>
 8009210:	6825      	ldr	r5, [r4, #0]
 8009212:	1961      	adds	r1, r4, r5
 8009214:	428b      	cmp	r3, r1
 8009216:	bf04      	itt	eq
 8009218:	6819      	ldreq	r1, [r3, #0]
 800921a:	685b      	ldreq	r3, [r3, #4]
 800921c:	6063      	str	r3, [r4, #4]
 800921e:	bf04      	itt	eq
 8009220:	1949      	addeq	r1, r1, r5
 8009222:	6021      	streq	r1, [r4, #0]
 8009224:	6054      	str	r4, [r2, #4]
 8009226:	e7ca      	b.n	80091be <_free_r+0x26>
 8009228:	b003      	add	sp, #12
 800922a:	bd30      	pop	{r4, r5, pc}
 800922c:	20001f68 	.word	0x20001f68

08009230 <sbrk_aligned>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	4e0e      	ldr	r6, [pc, #56]	; (800926c <sbrk_aligned+0x3c>)
 8009234:	460c      	mov	r4, r1
 8009236:	6831      	ldr	r1, [r6, #0]
 8009238:	4605      	mov	r5, r0
 800923a:	b911      	cbnz	r1, 8009242 <sbrk_aligned+0x12>
 800923c:	f000 f8bc 	bl	80093b8 <_sbrk_r>
 8009240:	6030      	str	r0, [r6, #0]
 8009242:	4621      	mov	r1, r4
 8009244:	4628      	mov	r0, r5
 8009246:	f000 f8b7 	bl	80093b8 <_sbrk_r>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d00a      	beq.n	8009264 <sbrk_aligned+0x34>
 800924e:	1cc4      	adds	r4, r0, #3
 8009250:	f024 0403 	bic.w	r4, r4, #3
 8009254:	42a0      	cmp	r0, r4
 8009256:	d007      	beq.n	8009268 <sbrk_aligned+0x38>
 8009258:	1a21      	subs	r1, r4, r0
 800925a:	4628      	mov	r0, r5
 800925c:	f000 f8ac 	bl	80093b8 <_sbrk_r>
 8009260:	3001      	adds	r0, #1
 8009262:	d101      	bne.n	8009268 <sbrk_aligned+0x38>
 8009264:	f04f 34ff 	mov.w	r4, #4294967295
 8009268:	4620      	mov	r0, r4
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	20001f6c 	.word	0x20001f6c

08009270 <_malloc_r>:
 8009270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009274:	1ccd      	adds	r5, r1, #3
 8009276:	f025 0503 	bic.w	r5, r5, #3
 800927a:	3508      	adds	r5, #8
 800927c:	2d0c      	cmp	r5, #12
 800927e:	bf38      	it	cc
 8009280:	250c      	movcc	r5, #12
 8009282:	2d00      	cmp	r5, #0
 8009284:	4607      	mov	r7, r0
 8009286:	db01      	blt.n	800928c <_malloc_r+0x1c>
 8009288:	42a9      	cmp	r1, r5
 800928a:	d905      	bls.n	8009298 <_malloc_r+0x28>
 800928c:	230c      	movs	r3, #12
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	2600      	movs	r6, #0
 8009292:	4630      	mov	r0, r6
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009298:	4e2e      	ldr	r6, [pc, #184]	; (8009354 <_malloc_r+0xe4>)
 800929a:	f000 f89d 	bl	80093d8 <__malloc_lock>
 800929e:	6833      	ldr	r3, [r6, #0]
 80092a0:	461c      	mov	r4, r3
 80092a2:	bb34      	cbnz	r4, 80092f2 <_malloc_r+0x82>
 80092a4:	4629      	mov	r1, r5
 80092a6:	4638      	mov	r0, r7
 80092a8:	f7ff ffc2 	bl	8009230 <sbrk_aligned>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	4604      	mov	r4, r0
 80092b0:	d14d      	bne.n	800934e <_malloc_r+0xde>
 80092b2:	6834      	ldr	r4, [r6, #0]
 80092b4:	4626      	mov	r6, r4
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d140      	bne.n	800933c <_malloc_r+0xcc>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	4631      	mov	r1, r6
 80092be:	4638      	mov	r0, r7
 80092c0:	eb04 0803 	add.w	r8, r4, r3
 80092c4:	f000 f878 	bl	80093b8 <_sbrk_r>
 80092c8:	4580      	cmp	r8, r0
 80092ca:	d13a      	bne.n	8009342 <_malloc_r+0xd2>
 80092cc:	6821      	ldr	r1, [r4, #0]
 80092ce:	3503      	adds	r5, #3
 80092d0:	1a6d      	subs	r5, r5, r1
 80092d2:	f025 0503 	bic.w	r5, r5, #3
 80092d6:	3508      	adds	r5, #8
 80092d8:	2d0c      	cmp	r5, #12
 80092da:	bf38      	it	cc
 80092dc:	250c      	movcc	r5, #12
 80092de:	4629      	mov	r1, r5
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff ffa5 	bl	8009230 <sbrk_aligned>
 80092e6:	3001      	adds	r0, #1
 80092e8:	d02b      	beq.n	8009342 <_malloc_r+0xd2>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	442b      	add	r3, r5
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	e00e      	b.n	8009310 <_malloc_r+0xa0>
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	1b52      	subs	r2, r2, r5
 80092f6:	d41e      	bmi.n	8009336 <_malloc_r+0xc6>
 80092f8:	2a0b      	cmp	r2, #11
 80092fa:	d916      	bls.n	800932a <_malloc_r+0xba>
 80092fc:	1961      	adds	r1, r4, r5
 80092fe:	42a3      	cmp	r3, r4
 8009300:	6025      	str	r5, [r4, #0]
 8009302:	bf18      	it	ne
 8009304:	6059      	strne	r1, [r3, #4]
 8009306:	6863      	ldr	r3, [r4, #4]
 8009308:	bf08      	it	eq
 800930a:	6031      	streq	r1, [r6, #0]
 800930c:	5162      	str	r2, [r4, r5]
 800930e:	604b      	str	r3, [r1, #4]
 8009310:	4638      	mov	r0, r7
 8009312:	f104 060b 	add.w	r6, r4, #11
 8009316:	f000 f865 	bl	80093e4 <__malloc_unlock>
 800931a:	f026 0607 	bic.w	r6, r6, #7
 800931e:	1d23      	adds	r3, r4, #4
 8009320:	1af2      	subs	r2, r6, r3
 8009322:	d0b6      	beq.n	8009292 <_malloc_r+0x22>
 8009324:	1b9b      	subs	r3, r3, r6
 8009326:	50a3      	str	r3, [r4, r2]
 8009328:	e7b3      	b.n	8009292 <_malloc_r+0x22>
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	42a3      	cmp	r3, r4
 800932e:	bf0c      	ite	eq
 8009330:	6032      	streq	r2, [r6, #0]
 8009332:	605a      	strne	r2, [r3, #4]
 8009334:	e7ec      	b.n	8009310 <_malloc_r+0xa0>
 8009336:	4623      	mov	r3, r4
 8009338:	6864      	ldr	r4, [r4, #4]
 800933a:	e7b2      	b.n	80092a2 <_malloc_r+0x32>
 800933c:	4634      	mov	r4, r6
 800933e:	6876      	ldr	r6, [r6, #4]
 8009340:	e7b9      	b.n	80092b6 <_malloc_r+0x46>
 8009342:	230c      	movs	r3, #12
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	4638      	mov	r0, r7
 8009348:	f000 f84c 	bl	80093e4 <__malloc_unlock>
 800934c:	e7a1      	b.n	8009292 <_malloc_r+0x22>
 800934e:	6025      	str	r5, [r4, #0]
 8009350:	e7de      	b.n	8009310 <_malloc_r+0xa0>
 8009352:	bf00      	nop
 8009354:	20001f68 	.word	0x20001f68

08009358 <_realloc_r>:
 8009358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935c:	4680      	mov	r8, r0
 800935e:	4614      	mov	r4, r2
 8009360:	460e      	mov	r6, r1
 8009362:	b921      	cbnz	r1, 800936e <_realloc_r+0x16>
 8009364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	4611      	mov	r1, r2
 800936a:	f7ff bf81 	b.w	8009270 <_malloc_r>
 800936e:	b92a      	cbnz	r2, 800937c <_realloc_r+0x24>
 8009370:	f7ff ff12 	bl	8009198 <_free_r>
 8009374:	4625      	mov	r5, r4
 8009376:	4628      	mov	r0, r5
 8009378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800937c:	f000 f838 	bl	80093f0 <_malloc_usable_size_r>
 8009380:	4284      	cmp	r4, r0
 8009382:	4607      	mov	r7, r0
 8009384:	d802      	bhi.n	800938c <_realloc_r+0x34>
 8009386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800938a:	d812      	bhi.n	80093b2 <_realloc_r+0x5a>
 800938c:	4621      	mov	r1, r4
 800938e:	4640      	mov	r0, r8
 8009390:	f7ff ff6e 	bl	8009270 <_malloc_r>
 8009394:	4605      	mov	r5, r0
 8009396:	2800      	cmp	r0, #0
 8009398:	d0ed      	beq.n	8009376 <_realloc_r+0x1e>
 800939a:	42bc      	cmp	r4, r7
 800939c:	4622      	mov	r2, r4
 800939e:	4631      	mov	r1, r6
 80093a0:	bf28      	it	cs
 80093a2:	463a      	movcs	r2, r7
 80093a4:	f7ff fed0 	bl	8009148 <memcpy>
 80093a8:	4631      	mov	r1, r6
 80093aa:	4640      	mov	r0, r8
 80093ac:	f7ff fef4 	bl	8009198 <_free_r>
 80093b0:	e7e1      	b.n	8009376 <_realloc_r+0x1e>
 80093b2:	4635      	mov	r5, r6
 80093b4:	e7df      	b.n	8009376 <_realloc_r+0x1e>
	...

080093b8 <_sbrk_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_sbrk_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f7 fe18 	bl	8000ff8 <_sbrk>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_sbrk_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_sbrk_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20001f70 	.word	0x20001f70

080093d8 <__malloc_lock>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__malloc_lock+0x8>)
 80093da:	f000 b811 	b.w	8009400 <__retarget_lock_acquire_recursive>
 80093de:	bf00      	nop
 80093e0:	20001f74 	.word	0x20001f74

080093e4 <__malloc_unlock>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__malloc_unlock+0x8>)
 80093e6:	f000 b80c 	b.w	8009402 <__retarget_lock_release_recursive>
 80093ea:	bf00      	nop
 80093ec:	20001f74 	.word	0x20001f74

080093f0 <_malloc_usable_size_r>:
 80093f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f4:	1f18      	subs	r0, r3, #4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bfbc      	itt	lt
 80093fa:	580b      	ldrlt	r3, [r1, r0]
 80093fc:	18c0      	addlt	r0, r0, r3
 80093fe:	4770      	bx	lr

08009400 <__retarget_lock_acquire_recursive>:
 8009400:	4770      	bx	lr

08009402 <__retarget_lock_release_recursive>:
 8009402:	4770      	bx	lr

08009404 <_init>:
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	bf00      	nop
 8009408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940a:	bc08      	pop	{r3}
 800940c:	469e      	mov	lr, r3
 800940e:	4770      	bx	lr

08009410 <_fini>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	bf00      	nop
 8009414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009416:	bc08      	pop	{r3}
 8009418:	469e      	mov	lr, r3
 800941a:	4770      	bx	lr
