
Buzzer_PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009344  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  080094d4  080094d4  000194d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a0  0800a1a0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a8  0800a1a8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea4  200001f8  0800a3a8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000209c  0800a3a8  0002209c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018610  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d61  00000000  00000000  0003887b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  0003c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011dc  00000000  00000000  0003dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252fc  00000000  00000000  0003eecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e16d  00000000  00000000  000641c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d79  00000000  00000000  00082335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066e4  00000000  00000000  001550b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0015b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094bc 	.word	0x080094bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080094bc 	.word	0x080094bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 800057c:	b084      	sub	sp, #16
 800057e:	b580      	push	{r7, lr}
 8000580:	b088      	sub	sp, #32
 8000582:	af00      	add	r7, sp, #0
 8000584:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000588:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800058c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800058e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000592:	f004 f823 	bl	80045dc <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 8000596:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 800059c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005a0:	f003 fefa 	bl	8004398 <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005a4:	2360      	movs	r3, #96	; 0x60
 80005a6:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80005a8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80005ac:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80005ba:	4619      	mov	r1, r3
 80005bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005c0:	f004 f87c 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80005c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005ca:	f003 ff3f 	bl	800444c <HAL_TIM_PWM_Start>
}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b099      	sub	sp, #100	; 0x64
 80005e0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fd77 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8c9 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fa39 	bl	8000a60 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ee:	f000 f92f 	bl	8000850 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005f2:	f000 f95b 	bl	80008ac <MX_I2S3_Init>
  MX_SPI1_Init();
 80005f6:	f000 f989 	bl	800090c <MX_SPI1_Init>
  MX_TIM2_Init();
 80005fa:	f000 f9bd 	bl	8000978 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80005fe:	f007 fd7d 	bl	80080fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000602:	2100      	movs	r1, #0
 8000604:	4853      	ldr	r0, [pc, #332]	; (8000754 <main+0x178>)
 8000606:	f003 ff21 	bl	800444c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  melodyCount = sizeof(melodySizes)/ sizeof(uint32_t);
 800060a:	2305      	movs	r3, #5
 800060c:	60bb      	str	r3, [r7, #8]

	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e085      	b.n	8000720 <main+0x144>
	  {
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	e069      	b.n	80006ee <main+0x112>
	  	  {
//		  	  buzzerSetNewFrequency(melody[melodyIndex][noteIndex]);
			  NoteFreq = melody[melodyIndex][noteIndex];
 800061a:	4a4f      	ldr	r2, [pc, #316]	; (8000758 <main+0x17c>)
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	60fb      	str	r3, [r7, #12]
			  if (NoteFreq == 0) NoteFreq = 1;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <main+0x5a>
 8000632:	2301      	movs	r3, #1
 8000634:	60fb      	str	r3, [r7, #12]

			  ARR_period = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 8000636:	4a49      	ldr	r2, [pc, #292]	; (800075c <main+0x180>)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	fb92 f3f3 	sdiv	r3, r2, r3
 800063e:	607b      	str	r3, [r7, #4]
			  setPWM(htim2, TIM_CHANNEL_1, ARR_period, ARR_period/2);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	b29a      	uxth	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	0fd9      	lsrs	r1, r3, #31
 8000648:	440b      	add	r3, r1
 800064a:	105b      	asrs	r3, r3, #1
 800064c:	b29b      	uxth	r3, r3
 800064e:	4e41      	ldr	r6, [pc, #260]	; (8000754 <main+0x178>)
 8000650:	9310      	str	r3, [sp, #64]	; 0x40
 8000652:	920f      	str	r2, [sp, #60]	; 0x3c
 8000654:	2300      	movs	r3, #0
 8000656:	930e      	str	r3, [sp, #56]	; 0x38
 8000658:	466d      	mov	r5, sp
 800065a:	f106 0410 	add.w	r4, r6, #16
 800065e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800066e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000672:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000676:	f7ff ff81 	bl	800057c <setPWM>

			  Delaymsecs = noteDurations[melodyIndex][noteIndex] * melodySlowfactor[melodyIndex];
 800067a:	4a39      	ldr	r2, [pc, #228]	; (8000760 <main+0x184>)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4936      	ldr	r1, [pc, #216]	; (8000764 <main+0x188>)
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	603b      	str	r3, [r7, #0]

			  snprintf (SendBuffer,BUFSIZE,"Melody[%d],Note #%d F=%d Hz Duration:%d ms| ARR=%d CCR1=%d\r\n",melodyIndex,noteIndex,melody[melodyIndex][noteIndex],Delaymsecs,htim2.Instance->ARR,htim2.Instance->CCR1);
 8000698:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <main+0x17c>)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <main+0x178>)
 80006aa:	6812      	ldr	r2, [r2, #0]
 80006ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80006ae:	4929      	ldr	r1, [pc, #164]	; (8000754 <main+0x178>)
 80006b0:	6809      	ldr	r1, [r1, #0]
 80006b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80006b4:	9104      	str	r1, [sp, #16]
 80006b6:	9203      	str	r2, [sp, #12]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	9202      	str	r2, [sp, #8]
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	4a28      	ldr	r2, [pc, #160]	; (8000768 <main+0x18c>)
 80006c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ca:	4828      	ldr	r0, [pc, #160]	; (800076c <main+0x190>)
 80006cc:	f008 fa3e 	bl	8008b4c <sniprintf>
	          CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80006d0:	4826      	ldr	r0, [pc, #152]	; (800076c <main+0x190>)
 80006d2:	f7ff fd7d 	bl	80001d0 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4619      	mov	r1, r3
 80006da:	4824      	ldr	r0, [pc, #144]	; (800076c <main+0x190>)
 80006dc:	f007 fdcc 	bl	8008278 <CDC_Transmit_FS>

		  	  HAL_Delay(Delaymsecs);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fd68 	bl	80011b8 <HAL_Delay>
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	3301      	adds	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <main+0x194>)
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d88e      	bhi.n	800061a <main+0x3e>
	  	  }
		  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of Melody[%d]\r\n\r\n",melodyIndex);
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <main+0x198>)
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	4819      	ldr	r0, [pc, #100]	; (800076c <main+0x190>)
 8000706:	f008 fa21 	bl	8008b4c <sniprintf>
	      CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800070a:	4818      	ldr	r0, [pc, #96]	; (800076c <main+0x190>)
 800070c:	f7ff fd60 	bl	80001d0 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	4619      	mov	r1, r3
 8000714:	4815      	ldr	r0, [pc, #84]	; (800076c <main+0x190>)
 8000716:	f007 fdaf 	bl	8008278 <CDC_Transmit_FS>
	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	429a      	cmp	r2, r3
 8000726:	f6ff af75 	blt.w	8000614 <main+0x38>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of All Melodies[%d]\r\n\r\n",melodyIndex);
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <main+0x19c>)
 800072e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <main+0x190>)
 8000734:	f008 fa0a 	bl	8008b4c <sniprintf>
      CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <main+0x190>)
 800073a:	f7ff fd49 	bl	80001d0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	4619      	mov	r1, r3
 8000742:	480a      	ldr	r0, [pc, #40]	; (800076c <main+0x190>)
 8000744:	f007 fd98 	bl	8008278 <CDC_Transmit_FS>

      HAL_Delay(2000);
 8000748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800074c:	f000 fd34 	bl	80011b8 <HAL_Delay>
  {
 8000750:	e75b      	b.n	800060a <main+0x2e>
 8000752:	bf00      	nop
 8000754:	20000308 	.word	0x20000308
 8000758:	20000000 	.word	0x20000000
 800075c:	000f4240 	.word	0x000f4240
 8000760:	20000014 	.word	0x20000014
 8000764:	0800a134 	.word	0x0800a134
 8000768:	080094d4 	.word	0x080094d4
 800076c:	20000350 	.word	0x20000350
 8000770:	0800a140 	.word	0x0800a140
 8000774:	08009514 	.word	0x08009514
 8000778:	08009530 	.word	0x08009530

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f008 fa12 	bl	8008bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ec:	2308      	movs	r3, #8
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fa:	2307      	movs	r3, #7
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	4618      	mov	r0, r3
 8000804:	f002 ff2c 	bl	8003660 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080e:	f000 fa25 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2105      	movs	r1, #5
 8000830:	4618      	mov	r0, r3
 8000832:	f003 f98d 	bl	8003b50 <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800083c:	f000 fa0e 	bl	8000c5c <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3750      	adds	r7, #80	; 0x50
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000856:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <MX_I2C1_Init+0x54>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C1_Init+0x50>)
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x58>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_I2C1_Init+0x50>)
 800086e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000872:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_I2C1_Init+0x50>)
 800088e:	f000 ff7f 	bl	8001790 <HAL_I2C_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 f9e0 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000214 	.word	0x20000214
 80008a4:	40005400 	.word	0x40005400
 80008a8:	000186a0 	.word	0x000186a0

080008ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_I2S3_Init+0x54>)
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <MX_I2S3_Init+0x58>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2S3_Init+0x54>)
 80008b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_I2S3_Init+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_I2S3_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MX_I2S3_Init+0x54>)
 80008cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_I2S3_Init+0x54>)
 80008d4:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <MX_I2S3_Init+0x5c>)
 80008d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_I2S3_Init+0x54>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_I2S3_Init+0x54>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_I2S3_Init+0x54>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_I2S3_Init+0x54>)
 80008ec:	f001 f894 	bl	8001a18 <HAL_I2S_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008f6:	f000 f9b1 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000268 	.word	0x20000268
 8000904:	40003c00 	.word	0x40003c00
 8000908:	00017700 	.word	0x00017700

0800090c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_SPI1_Init+0x64>)
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <MX_SPI1_Init+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_SPI1_Init+0x64>)
 8000918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800091c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_SPI1_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_SPI1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_SPI1_Init+0x64>)
 8000938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_SPI1_Init+0x64>)
 8000958:	220a      	movs	r2, #10
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_SPI1_Init+0x64>)
 800095e:	f003 fc43 	bl	80041e8 <HAL_SPI_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 f978 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200002b0 	.word	0x200002b0
 8000974:	40013000 	.word	0x40013000

08000978 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
 80009a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a8:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009b2:	2253      	movs	r2, #83	; 0x53
 80009b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ce:	4823      	ldr	r0, [pc, #140]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009d0:	f003 fc93 	bl	80042fa <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009da:	f000 f93f 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e8:	4619      	mov	r1, r3
 80009ea:	481c      	ldr	r0, [pc, #112]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009ec:	f003 ff28 	bl	8004840 <HAL_TIM_ConfigClockSource>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009f6:	f000 f931 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009fa:	4818      	ldr	r0, [pc, #96]	; (8000a5c <MX_TIM2_Init+0xe4>)
 80009fc:	f003 fccc 	bl	8004398 <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a06:	f000 f929 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	4619      	mov	r1, r3
 8000a18:	4810      	ldr	r0, [pc, #64]	; (8000a5c <MX_TIM2_Init+0xe4>)
 8000a1a:	f004 fae9 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a24:	f000 f91a 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2360      	movs	r3, #96	; 0x60
 8000a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM2_Init+0xe4>)
 8000a40:	f003 fe3c 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a4a:	f000 f907 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM2_Init+0xe4>)
 8000a50:	f000 fa62 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 8000a54:	bf00      	nop
 8000a56:	3738      	adds	r7, #56	; 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000308 	.word	0x20000308

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	4b72      	ldr	r3, [pc, #456]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a71      	ldr	r2, [pc, #452]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b6f      	ldr	r3, [pc, #444]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	4b6b      	ldr	r3, [pc, #428]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a6a      	ldr	r2, [pc, #424]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b68      	ldr	r3, [pc, #416]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a63      	ldr	r2, [pc, #396]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b61      	ldr	r3, [pc, #388]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a5c      	ldr	r2, [pc, #368]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b56      	ldr	r3, [pc, #344]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a55      	ldr	r2, [pc, #340]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b4f      	ldr	r3, [pc, #316]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a4e      	ldr	r2, [pc, #312]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b4c      	ldr	r3, [pc, #304]	; (8000c44 <MX_GPIO_Init+0x1e4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2108      	movs	r1, #8
 8000b22:	4849      	ldr	r0, [pc, #292]	; (8000c48 <MX_GPIO_Init+0x1e8>)
 8000b24:	f000 fe1a 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4847      	ldr	r0, [pc, #284]	; (8000c4c <MX_GPIO_Init+0x1ec>)
 8000b2e:	f000 fe15 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b32:	2200      	movs	r2, #0
 8000b34:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b38:	4845      	ldr	r0, [pc, #276]	; (8000c50 <MX_GPIO_Init+0x1f0>)
 8000b3a:	f000 fe0f 	bl	800175c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	483c      	ldr	r0, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x1e8>)
 8000b56:	f000 fc65 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4836      	ldr	r0, [pc, #216]	; (8000c4c <MX_GPIO_Init+0x1ec>)
 8000b72:	f000 fc57 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b76:	2308      	movs	r3, #8
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b86:	2305      	movs	r3, #5
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	482e      	ldr	r0, [pc, #184]	; (8000c4c <MX_GPIO_Init+0x1ec>)
 8000b92:	f000 fc47 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b9a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482a      	ldr	r0, [pc, #168]	; (8000c54 <MX_GPIO_Init+0x1f4>)
 8000bac:	f000 fc3a 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4825      	ldr	r0, [pc, #148]	; (8000c58 <MX_GPIO_Init+0x1f8>)
 8000bc4:	f000 fc2e 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	481c      	ldr	r0, [pc, #112]	; (8000c58 <MX_GPIO_Init+0x1f8>)
 8000be6:	f000 fc1d 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bea:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_GPIO_Init+0x1f0>)
 8000c04:	f000 fc0e 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c08:	2320      	movs	r3, #32
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_GPIO_Init+0x1f0>)
 8000c1c:	f000 fc02 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c24:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_GPIO_Init+0x1e8>)
 8000c36:	f000 fbf5 	bl	8001424 <HAL_GPIO_Init>

}
 8000c3a:	bf00      	nop
 8000c3c:	3730      	adds	r7, #48	; 0x30
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020c00 	.word	0x40020c00
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020400 	.word	0x40020400

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca6:	2007      	movs	r0, #7
 8000ca8:	f000 fb7a 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_I2C_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12c      	bne.n	8000d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cf6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfc:	2312      	movs	r3, #18
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <HAL_I2C_MspInit+0x8c>)
 8000d14:	f000 fb86 	bl	8001424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400

08000d48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08e      	sub	sp, #56	; 0x38
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <HAL_I2S_MspInit+0xf0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d15a      	bne.n	8000e2e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d7c:	23c0      	movs	r3, #192	; 0xc0
 8000d7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 f8ed 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d94:	f7ff ff62 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dec:	2310      	movs	r3, #16
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <HAL_I2S_MspInit+0xf8>)
 8000e08:	f000 fb0c 	bl	8001424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e0c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <HAL_I2S_MspInit+0xfc>)
 8000e2a:	f000 fafb 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3738      	adds	r7, #56	; 0x38
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40003c00 	.word	0x40003c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020800 	.word	0x40020800

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_SPI_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ea2:	23e0      	movs	r3, #224	; 0xe0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	f000 fab1 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40013000 	.word	0x40013000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d10d      	bne.n	8000f06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_TIM_Base_MspInit+0x3c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_TIM_Base_MspInit+0x3c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_TIM_Base_MspInit+0x3c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f38:	d11e      	bne.n	8000f78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_TIM_MspPostInit+0x68>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <HAL_TIM_MspPostInit+0x68>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_TIM_MspPostInit+0x68>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <HAL_TIM_MspPostInit+0x6c>)
 8000f74:	f000 fa56 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f8d0 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <OTG_FS_IRQHandler+0x10>)
 8000fe2:	f001 fb09 	bl	80025f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000192c 	.word	0x2000192c

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f007 fdd0 	bl	8008bc4 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20020000 	.word	0x20020000
 8001050:	00000400 	.word	0x00000400
 8001054:	20000450 	.word	0x20000450
 8001058:	200020a0 	.word	0x200020a0

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffd7 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f007 fd8f 	bl	8008bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fa93 	bl	80005dc <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80010c4:	0800a1b0 	.word	0x0800a1b0
  ldr r2, =_sbss
 80010c8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80010cc:	2000209c 	.word	0x2000209c

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f94f 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fdae 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f967 	bl	800140a <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f92f 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000028 	.word	0x20000028
 8001170:	20000030 	.word	0x20000030
 8001174:	2000002c 	.word	0x2000002c

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000030 	.word	0x20000030
 800119c:	20000454 	.word	0x20000454

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000454 	.word	0x20000454

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000030 	.word	0x20000030

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff29 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff3e 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff31 	bl	8001264 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	e16b      	b.n	8001718 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 815a 	bne.w	8001712 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d005      	beq.n	8001476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001472:	2b02      	cmp	r3, #2
 8001474:	d130      	bne.n	80014d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 0201 	and.w	r2, r3, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d017      	beq.n	8001514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d123      	bne.n	8001568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	08da      	lsrs	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3208      	adds	r2, #8
 8001528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	69b9      	ldr	r1, [r7, #24]
 8001564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0203 	and.w	r2, r3, #3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80b4 	beq.w	8001712 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b60      	ldr	r3, [pc, #384]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a5f      	ldr	r2, [pc, #380]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c6:	4a5b      	ldr	r2, [pc, #364]	; (8001734 <HAL_GPIO_Init+0x310>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a52      	ldr	r2, [pc, #328]	; (8001738 <HAL_GPIO_Init+0x314>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d02b      	beq.n	800164a <HAL_GPIO_Init+0x226>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_GPIO_Init+0x318>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d025      	beq.n	8001646 <HAL_GPIO_Init+0x222>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_GPIO_Init+0x31c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01f      	beq.n	8001642 <HAL_GPIO_Init+0x21e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_GPIO_Init+0x320>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d019      	beq.n	800163e <HAL_GPIO_Init+0x21a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4e      	ldr	r2, [pc, #312]	; (8001748 <HAL_GPIO_Init+0x324>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x216>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4d      	ldr	r2, [pc, #308]	; (800174c <HAL_GPIO_Init+0x328>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x212>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <HAL_GPIO_Init+0x32c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x20e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <HAL_GPIO_Init+0x330>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x20a>
 800162a:	2307      	movs	r3, #7
 800162c:	e00e      	b.n	800164c <HAL_GPIO_Init+0x228>
 800162e:	2308      	movs	r3, #8
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x228>
 8001632:	2306      	movs	r3, #6
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x228>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x228>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x228>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x228>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x228>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x228>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	4935      	ldr	r1, [pc, #212]	; (8001734 <HAL_GPIO_Init+0x310>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_GPIO_Init+0x334>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_GPIO_Init+0x334>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_GPIO_Init+0x334>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <HAL_GPIO_Init+0x334>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_GPIO_Init+0x334>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e2:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <HAL_GPIO_Init+0x334>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_GPIO_Init+0x334>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800170c:	4a12      	ldr	r2, [pc, #72]	; (8001758 <HAL_GPIO_Init+0x334>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f ae90 	bls.w	8001440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40021800 	.word	0x40021800
 8001754:	40021c00 	.word	0x40021c00
 8001758:	40013c00 	.word	0x40013c00

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e12b      	b.n	80019fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fa7e 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2224      	movs	r2, #36	; 0x24
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017f4:	f002 fba4 	bl	8003f40 <HAL_RCC_GetPCLK1Freq>
 80017f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4a81      	ldr	r2, [pc, #516]	; (8001a04 <HAL_I2C_Init+0x274>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d807      	bhi.n	8001814 <HAL_I2C_Init+0x84>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4a80      	ldr	r2, [pc, #512]	; (8001a08 <HAL_I2C_Init+0x278>)
 8001808:	4293      	cmp	r3, r2
 800180a:	bf94      	ite	ls
 800180c:	2301      	movls	r3, #1
 800180e:	2300      	movhi	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	e006      	b.n	8001822 <HAL_I2C_Init+0x92>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a7d      	ldr	r2, [pc, #500]	; (8001a0c <HAL_I2C_Init+0x27c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	bf94      	ite	ls
 800181c:	2301      	movls	r3, #1
 800181e:	2300      	movhi	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0e7      	b.n	80019fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4a78      	ldr	r2, [pc, #480]	; (8001a10 <HAL_I2C_Init+0x280>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9b      	lsrs	r3, r3, #18
 8001834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a6a      	ldr	r2, [pc, #424]	; (8001a04 <HAL_I2C_Init+0x274>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d802      	bhi.n	8001864 <HAL_I2C_Init+0xd4>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3301      	adds	r3, #1
 8001862:	e009      	b.n	8001878 <HAL_I2C_Init+0xe8>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	4a69      	ldr	r2, [pc, #420]	; (8001a14 <HAL_I2C_Init+0x284>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	3301      	adds	r3, #1
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	430b      	orrs	r3, r1
 800187e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800188a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	495c      	ldr	r1, [pc, #368]	; (8001a04 <HAL_I2C_Init+0x274>)
 8001894:	428b      	cmp	r3, r1
 8001896:	d819      	bhi.n	80018cc <HAL_I2C_Init+0x13c>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1e59      	subs	r1, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a6:	1c59      	adds	r1, r3, #1
 80018a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018ac:	400b      	ands	r3, r1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <HAL_I2C_Init+0x138>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e59      	subs	r1, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c6:	e051      	b.n	800196c <HAL_I2C_Init+0x1dc>
 80018c8:	2304      	movs	r3, #4
 80018ca:	e04f      	b.n	800196c <HAL_I2C_Init+0x1dc>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d111      	bne.n	80018f8 <HAL_I2C_Init+0x168>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	440b      	add	r3, r1
 80018e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	e012      	b.n	800191e <HAL_I2C_Init+0x18e>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1e58      	subs	r0, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	0099      	lsls	r1, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	fbb0 f3f3 	udiv	r3, r0, r3
 800190e:	3301      	adds	r3, #1
 8001910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Init+0x196>
 8001922:	2301      	movs	r3, #1
 8001924:	e022      	b.n	800196c <HAL_I2C_Init+0x1dc>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10e      	bne.n	800194c <HAL_I2C_Init+0x1bc>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1e58      	subs	r0, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6859      	ldr	r1, [r3, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	440b      	add	r3, r1
 800193c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001940:	3301      	adds	r3, #1
 8001942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194a:	e00f      	b.n	800196c <HAL_I2C_Init+0x1dc>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1e58      	subs	r0, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	0099      	lsls	r1, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	6809      	ldr	r1, [r1, #0]
 8001970:	4313      	orrs	r3, r2
 8001972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800199a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6911      	ldr	r1, [r2, #16]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	4311      	orrs	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	000186a0 	.word	0x000186a0
 8001a08:	001e847f 	.word	0x001e847f
 8001a0c:	003d08ff 	.word	0x003d08ff
 8001a10:	431bde83 	.word	0x431bde83
 8001a14:	10624dd3 	.word	0x10624dd3

08001a18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e128      	b.n	8001c7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a90      	ldr	r2, [pc, #576]	; (8001c84 <HAL_I2S_Init+0x26c>)
 8001a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff f97f 	bl	8000d48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a60:	f023 030f 	bic.w	r3, r3, #15
 8001a64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d060      	beq.n	8001b38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e001      	b.n	8001a88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a84:	2320      	movs	r3, #32
 8001a86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d802      	bhi.n	8001a96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f002 fb48 	bl	800412c <HAL_RCCEx_GetPeriphCLKFreq>
 8001a9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa6:	d125      	bne.n	8001af4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	3305      	adds	r3, #5
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	e01f      	b.n	8001b12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	3305      	adds	r3, #5
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	e00e      	b.n	8001b12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	461a      	mov	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	3305      	adds	r3, #5
 8001b10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4a5c      	ldr	r2, [pc, #368]	; (8001c88 <HAL_I2S_Init+0x270>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	08db      	lsrs	r3, r3, #3
 8001b1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	e003      	b.n	8001b40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d902      	bls.n	8001b4c <HAL_I2S_Init+0x134>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	2bff      	cmp	r3, #255	; 0xff
 8001b4a:	d907      	bls.n	8001b5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	f043 0210 	orr.w	r2, r3, #16
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e08f      	b.n	8001c7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	ea42 0103 	orr.w	r1, r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b7a:	f023 030f 	bic.w	r3, r3, #15
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6851      	ldr	r1, [r2, #4]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6892      	ldr	r2, [r2, #8]
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68d2      	ldr	r2, [r2, #12]
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6992      	ldr	r2, [r2, #24]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d161      	bne.n	8001c6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a38      	ldr	r2, [pc, #224]	; (8001c8c <HAL_I2S_Init+0x274>)
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a37      	ldr	r2, [pc, #220]	; (8001c90 <HAL_I2S_Init+0x278>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_I2S_Init+0x1a4>
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_I2S_Init+0x27c>)
 8001bba:	e001      	b.n	8001bc0 <HAL_I2S_Init+0x1a8>
 8001bbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	4932      	ldr	r1, [pc, #200]	; (8001c90 <HAL_I2S_Init+0x278>)
 8001bc8:	428a      	cmp	r2, r1
 8001bca:	d101      	bne.n	8001bd0 <HAL_I2S_Init+0x1b8>
 8001bcc:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <HAL_I2S_Init+0x27c>)
 8001bce:	e001      	b.n	8001bd4 <HAL_I2S_Init+0x1bc>
 8001bd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bd8:	f023 030f 	bic.w	r3, r3, #15
 8001bdc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_I2S_Init+0x278>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_I2S_Init+0x1d4>
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_I2S_Init+0x27c>)
 8001bea:	e001      	b.n	8001bf0 <HAL_I2S_Init+0x1d8>
 8001bec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <HAL_I2S_Init+0x278>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2S_Init+0x1ea>
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <HAL_I2S_Init+0x27c>)
 8001c00:	e001      	b.n	8001c06 <HAL_I2S_Init+0x1ee>
 8001c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c12:	d003      	beq.n	8001c1c <HAL_I2S_Init+0x204>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d103      	bne.n	8001c24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e001      	b.n	8001c28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	897b      	ldrh	r3, [r7, #10]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <HAL_I2S_Init+0x278>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2S_Init+0x24c>
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_I2S_Init+0x27c>)
 8001c62:	e001      	b.n	8001c68 <HAL_I2S_Init+0x250>
 8001c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c68:	897a      	ldrh	r2, [r7, #10]
 8001c6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3720      	adds	r7, #32
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	08001d8f 	.word	0x08001d8f
 8001c88:	cccccccd 	.word	0xcccccccd
 8001c8c:	08001ea5 	.word	0x08001ea5
 8001c90:	40003800 	.word	0x40003800
 8001c94:	40003400 	.word	0x40003400

08001c98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	1c9a      	adds	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10e      	bne.n	8001d28 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffb8 	bl	8001c98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	b292      	uxth	r2, r2
 8001d44:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	1c9a      	adds	r2, r3, #2
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10e      	bne.n	8001d86 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff93 	bl	8001cac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d13a      	bne.n	8001e20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d109      	bne.n	8001dc8 <I2S_IRQHandler+0x3a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d102      	bne.n	8001dc8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffb4 	bl	8001d30 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b40      	cmp	r3, #64	; 0x40
 8001dd0:	d126      	bne.n	8001e20 <I2S_IRQHandler+0x92>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d11f      	bne.n	8001e20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff50 	bl	8001cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d136      	bne.n	8001e9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d109      	bne.n	8001e4a <I2S_IRQHandler+0xbc>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	2b80      	cmp	r3, #128	; 0x80
 8001e42:	d102      	bne.n	8001e4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff45 	bl	8001cd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d122      	bne.n	8001e9a <I2S_IRQHandler+0x10c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d11b      	bne.n	8001e9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	f043 0204 	orr.w	r2, r3, #4
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff13 	bl	8001cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a92      	ldr	r2, [pc, #584]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ebe:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ec0:	e001      	b.n	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a8b      	ldr	r2, [pc, #556]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001edc:	4b8a      	ldr	r3, [pc, #552]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ede:	e001      	b.n	8001ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef0:	d004      	beq.n	8001efc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 8099 	bne.w	800202e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d107      	bne.n	8001f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f925 	bl	8002160 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f9c8 	bl	80022c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d13a      	bne.n	8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d035      	beq.n	8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a6e      	ldr	r2, [pc, #440]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f4e:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f50:	e001      	b.n	8001f56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4969      	ldr	r1, [pc, #420]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f5e:	428b      	cmp	r3, r1
 8001f60:	d101      	bne.n	8001f66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f62:	4b69      	ldr	r3, [pc, #420]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f64:	e001      	b.n	8001f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f043 0202 	orr.w	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fe88 	bl	8001cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	f040 80c3 	bne.w	8002142 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80bd 	beq.w	8002142 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a49      	ldr	r2, [pc, #292]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001fe2:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fe4:	e001      	b.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4944      	ldr	r1, [pc, #272]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ff2:	428b      	cmp	r3, r1
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ff6:	4b44      	ldr	r3, [pc, #272]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ff8:	e001      	b.n	8001ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ffe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002002:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f043 0204 	orr.w	r2, r3, #4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fe4a 	bl	8001cc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800202c:	e089      	b.n	8002142 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	d107      	bne.n	8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8be 	bl	80021c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8fd 	bl	800225c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d12f      	bne.n	80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d02a      	beq.n	80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002084:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002092:	e001      	b.n	8002098 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4919      	ldr	r1, [pc, #100]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020a6:	e001      	b.n	80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80020a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fdfa 	bl	8001cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d136      	bne.n	8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d031      	beq.n	8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020ec:	e001      	b.n	80020f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80020ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4902      	ldr	r1, [pc, #8]	; (8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020fa:	428b      	cmp	r3, r1
 80020fc:	d106      	bne.n	800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80020fe:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002100:	e006      	b.n	8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002102:	bf00      	nop
 8002104:	40003800 	.word	0x40003800
 8002108:	40003400 	.word	0x40003400
 800210c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002110:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002114:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002124:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fdc0 	bl	8001cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002140:	e000      	b.n	8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002142:	bf00      	nop
}
 8002144:	bf00      	nop
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	1c99      	adds	r1, r3, #2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6251      	str	r1, [r2, #36]	; 0x24
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d113      	bne.n	80021ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffc9 	bl	800214c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	1c99      	adds	r1, r3, #2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6251      	str	r1, [r2, #36]	; 0x24
 80021d6:	8819      	ldrh	r1, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <I2SEx_TxISR_I2SExt+0x90>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <I2SEx_TxISR_I2SExt+0x22>
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <I2SEx_TxISR_I2SExt+0x94>)
 80021e4:	e001      	b.n	80021ea <I2SEx_TxISR_I2SExt+0x26>
 80021e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ea:	460a      	mov	r2, r1
 80021ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d121      	bne.n	800224a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <I2SEx_TxISR_I2SExt+0x90>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <I2SEx_TxISR_I2SExt+0x50>
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <I2SEx_TxISR_I2SExt+0x94>)
 8002212:	e001      	b.n	8002218 <I2SEx_TxISR_I2SExt+0x54>
 8002214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	490d      	ldr	r1, [pc, #52]	; (8002254 <I2SEx_TxISR_I2SExt+0x90>)
 8002220:	428b      	cmp	r3, r1
 8002222:	d101      	bne.n	8002228 <I2SEx_TxISR_I2SExt+0x64>
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <I2SEx_TxISR_I2SExt+0x94>)
 8002226:	e001      	b.n	800222c <I2SEx_TxISR_I2SExt+0x68>
 8002228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800222c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002230:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff81 	bl	800214c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40003800 	.word	0x40003800
 8002258:	40003400 	.word	0x40003400

0800225c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68d8      	ldr	r0, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	1c99      	adds	r1, r3, #2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002274:	b282      	uxth	r2, r0
 8002276:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d113      	bne.n	80022b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800229e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff4a 	bl	800214c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a20      	ldr	r2, [pc, #128]	; (8002350 <I2SEx_RxISR_I2SExt+0x90>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <I2SEx_RxISR_I2SExt+0x16>
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <I2SEx_RxISR_I2SExt+0x94>)
 80022d4:	e001      	b.n	80022da <I2SEx_RxISR_I2SExt+0x1a>
 80022d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022da:	68d8      	ldr	r0, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	1c99      	adds	r1, r3, #2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022e6:	b282      	uxth	r2, r0
 80022e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d121      	bne.n	8002346 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <I2SEx_RxISR_I2SExt+0x90>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <I2SEx_RxISR_I2SExt+0x50>
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <I2SEx_RxISR_I2SExt+0x94>)
 800230e:	e001      	b.n	8002314 <I2SEx_RxISR_I2SExt+0x54>
 8002310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	490d      	ldr	r1, [pc, #52]	; (8002350 <I2SEx_RxISR_I2SExt+0x90>)
 800231c:	428b      	cmp	r3, r1
 800231e:	d101      	bne.n	8002324 <I2SEx_RxISR_I2SExt+0x64>
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <I2SEx_RxISR_I2SExt+0x94>)
 8002322:	e001      	b.n	8002328 <I2SEx_RxISR_I2SExt+0x68>
 8002324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002328:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800232c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff03 	bl	800214c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40003800 	.word	0x40003800
 8002354:	40003400 	.word	0x40003400

08002358 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235a:	b08f      	sub	sp, #60	; 0x3c
 800235c:	af0a      	add	r7, sp, #40	; 0x28
 800235e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e10f      	b.n	800258a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f006 f8bf 	bl	8008508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2203      	movs	r2, #3
 800238e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 ffb2 	bl	8005312 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	687e      	ldr	r6, [r7, #4]
 80023b6:	466d      	mov	r5, sp
 80023b8:	f106 0410 	add.w	r4, r6, #16
 80023bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80023cc:	1d33      	adds	r3, r6, #4
 80023ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d0:	6838      	ldr	r0, [r7, #0]
 80023d2:	f002 fe89 	bl	80050e8 <USB_CoreInit>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0d0      	b.n	800258a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 ffa0 	bl	8005334 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	e04a      	b.n	8002490 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	333d      	adds	r3, #61	; 0x3d
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	333c      	adds	r3, #60	; 0x3c
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	b298      	uxth	r0, r3
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	3342      	adds	r3, #66	; 0x42
 8002436:	4602      	mov	r2, r0
 8002438:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	333f      	adds	r3, #63	; 0x3f
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3344      	adds	r3, #68	; 0x44
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3348      	adds	r3, #72	; 0x48
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	3350      	adds	r3, #80	; 0x50
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	3301      	adds	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d3af      	bcc.n	80023fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
 800249e:	e044      	b.n	800252a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	3301      	adds	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d3b5      	bcc.n	80024a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	687e      	ldr	r6, [r7, #4]
 800253c:	466d      	mov	r5, sp
 800253e:	f106 0410 	add.w	r4, r6, #16
 8002542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002552:	1d33      	adds	r3, r6, #4
 8002554:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002556:	6838      	ldr	r0, [r7, #0]
 8002558:	f002 ff38 	bl	80053cc <USB_DevInit>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e00d      	b.n	800258a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 ffb4 	bl	80064f0 <USB_DevDisconnect>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002592 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_PCD_Start+0x1c>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e020      	b.n	80025f0 <HAL_PCD_Start+0x5e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d109      	bne.n	80025d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d005      	beq.n	80025d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 fe8a 	bl	80052f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 ff64 	bl	80064ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b08d      	sub	sp, #52	; 0x34
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f004 f822 	bl	8006658 <USB_GetMode>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 839d 	bne.w	8002d56 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f003 ff86 	bl	8006532 <USB_ReadInterrupts>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8393 	beq.w	8002d54 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 ff7d 	bl	8006532 <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f002 0202 	and.w	r2, r2, #2
 8002650:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 ff6b 	bl	8006532 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d161      	bne.n	800272a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0210 	bic.w	r2, r2, #16
 8002674:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	0c5b      	lsrs	r3, r3, #17
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d124      	bne.n	80026ec <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d035      	beq.n	800271a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026bc:	b29b      	uxth	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	6a38      	ldr	r0, [r7, #32]
 80026c2:	f003 fda2 	bl	800620a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d2:	441a      	add	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e4:	441a      	add	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	619a      	str	r2, [r3, #24]
 80026ea:	e016      	b.n	800271a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	0c5b      	lsrs	r3, r3, #17
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	2b06      	cmp	r3, #6
 80026f6:	d110      	bne.n	800271a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026fe:	2208      	movs	r2, #8
 8002700:	4619      	mov	r1, r3
 8002702:	6a38      	ldr	r0, [r7, #32]
 8002704:	f003 fd81 	bl	800620a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	699a      	ldr	r2, [r3, #24]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002714:	441a      	add	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0210 	orr.w	r2, r2, #16
 8002728:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 feff 	bl	8006532 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800273e:	d16e      	bne.n	800281e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f003 ff05 	bl	8006558 <USB_ReadDevAllOutEpInterrupt>
 800274e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002750:	e062      	b.n	8002818 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d057      	beq.n	800280c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f003 ff2a 	bl	80065c0 <USB_ReadDevOutEPInterrupt>
 800276c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	2301      	movs	r3, #1
 8002788:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800278a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fdb1 	bl	80032f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a8:	461a      	mov	r2, r3
 80027aa:	2308      	movs	r3, #8
 80027ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 feab 	bl	800350c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	461a      	mov	r2, r3
 80027ce:	2310      	movs	r3, #16
 80027d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e8:	461a      	mov	r2, r3
 80027ea:	2320      	movs	r3, #32
 80027ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002804:	461a      	mov	r2, r3
 8002806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800280a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3301      	adds	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d199      	bne.n	8002752 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fe85 	bl	8006532 <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002832:	f040 80c0 	bne.w	80029b6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fea6 	bl	800658c <USB_ReadDevAllInEpInterrupt>
 8002840:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002846:	e0b2      	b.n	80029ae <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80a7 	beq.w	80029a2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fecc 	bl	80065fc <USB_ReadDevInEPInterrupt>
 8002864:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d057      	beq.n	8002920 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	2201      	movs	r2, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	43db      	mvns	r3, r3
 800288a:	69f9      	ldr	r1, [r7, #28]
 800288c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002890:	4013      	ands	r3, r2
 8002892:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a0:	461a      	mov	r2, r3
 80028a2:	2301      	movs	r3, #1
 80028a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d132      	bne.n	8002914 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3348      	adds	r3, #72	; 0x48
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4403      	add	r3, r0
 80028ce:	3344      	adds	r3, #68	; 0x44
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4419      	add	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4403      	add	r3, r0
 80028e2:	3348      	adds	r3, #72	; 0x48
 80028e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d113      	bne.n	8002914 <HAL_PCD_IRQHandler+0x31c>
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3350      	adds	r3, #80	; 0x50
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800290c:	461a      	mov	r2, r3
 800290e:	2101      	movs	r1, #1
 8002910:	f003 fed4 	bl	80066bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f005 fe83 	bl	8008626 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002936:	461a      	mov	r2, r3
 8002938:	2308      	movs	r3, #8
 800293a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002952:	461a      	mov	r2, r3
 8002954:	2310      	movs	r3, #16
 8002956:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296e:	461a      	mov	r2, r3
 8002970:	2340      	movs	r3, #64	; 0x40
 8002972:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298a:	461a      	mov	r2, r3
 800298c:	2302      	movs	r3, #2
 800298e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800299a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fc1b 	bl	80031d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3301      	adds	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f47f af49 	bne.w	8002848 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fdb9 	bl	8006532 <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029ca:	d122      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d108      	bne.n	80029fc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029f2:	2100      	movs	r1, #0
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fe27 	bl	8003648 <HAL_PCDEx_LPM_Callback>
 80029fa:	e002      	b.n	8002a02 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f005 fe89 	bl	8008714 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fd8b 	bl	8006532 <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a26:	d112      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d102      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f005 fe45 	bl	80086c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a4c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 fd6d 	bl	8006532 <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a62:	f040 80c7 	bne.w	8002bf4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2110      	movs	r1, #16
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fe07 	bl	8005694 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8a:	e056      	b.n	8002b3a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a9e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab0:	0151      	lsls	r1, r2, #5
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	440a      	add	r2, r1
 8002ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002abe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ada:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ade:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aec:	461a      	mov	r2, r3
 8002aee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002af2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b04:	0151      	lsls	r1, r2, #5
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	440a      	add	r2, r1
 8002b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b24:	0151      	lsls	r1, r2, #5
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	440a      	add	r2, r1
 8002b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	3301      	adds	r3, #1
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d3a3      	bcc.n	8002a8c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b52:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b56:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d016      	beq.n	8002b8e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b70:	f043 030b 	orr.w	r3, r3, #11
 8002b74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b86:	f043 030b 	orr.w	r3, r3, #11
 8002b8a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8c:	e015      	b.n	8002bba <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ba0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ba4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb4:	f043 030b 	orr.w	r3, r3, #11
 8002bb8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bcc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bde:	461a      	mov	r2, r3
 8002be0:	f003 fd6c 	bl	80066bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fc9a 	bl	8006532 <USB_ReadInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c08:	d124      	bne.n	8002c54 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 fd30 	bl	8006674 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f002 fd98 	bl	800574e <USB_GetDevSpeed>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681c      	ldr	r4, [r3, #0]
 8002c2a:	f001 f97d 	bl	8003f28 <HAL_RCC_GetHCLKFreq>
 8002c2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f002 fab7 	bl	80051ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f005 fd19 	bl	8008676 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fc6a 	bl	8006532 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d10a      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f005 fcf6 	bl	800865a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f002 0208 	and.w	r2, r2, #8
 8002c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 fc55 	bl	8006532 <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c92:	d10f      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f005 fd58 	bl	8008754 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fc3a 	bl	8006532 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc8:	d10f      	bne.n	8002cea <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f005 fd2b 	bl	8008730 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fc1f 	bl	8006532 <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d10a      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f005 fd39 	bl	8008778 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 fc09 	bl	8006532 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d115      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f005 fd29 	bl	8008794 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	e000      	b.n	8002d56 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002d54:	bf00      	nop
    }
  }
}
 8002d56:	3734      	adds	r7, #52	; 0x34
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}

08002d5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_PCD_SetAddress+0x1a>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e013      	b.n	8002d9e <HAL_PCD_SetAddress+0x42>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fb67 	bl	8006462 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	4608      	mov	r0, r1
 8002db0:	4611      	mov	r1, r2
 8002db2:	461a      	mov	r2, r3
 8002db4:	4603      	mov	r3, r0
 8002db6:	70fb      	strb	r3, [r7, #3]
 8002db8:	460b      	mov	r3, r1
 8002dba:	803b      	strh	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	da0f      	bge.n	8002dec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 020f 	and.w	r2, r3, #15
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	3338      	adds	r3, #56	; 0x38
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	3304      	adds	r3, #4
 8002de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	705a      	strb	r2, [r3, #1]
 8002dea:	e00f      	b.n	8002e0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 020f 	and.w	r2, r3, #15
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	3304      	adds	r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e18:	883a      	ldrh	r2, [r7, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	78ba      	ldrb	r2, [r7, #2]
 8002e22:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e36:	78bb      	ldrb	r3, [r7, #2]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d102      	bne.n	8002e42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_PCD_EP_Open+0xaa>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e00e      	b.n	8002e6e <HAL_PCD_EP_Open+0xc8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fc9a 	bl	8005798 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	da0f      	bge.n	8002eaa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	3338      	adds	r3, #56	; 0x38
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	705a      	strb	r2, [r3, #1]
 8002ea8:	e00f      	b.n	8002eca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_PCD_EP_Close+0x6e>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e00e      	b.n	8002f02 <HAL_PCD_EP_Close+0x8c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 fcd8 	bl	80058a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	460b      	mov	r3, r1
 8002f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4c:	7afb      	ldrb	r3, [r7, #11]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f66:	7afb      	ldrb	r3, [r7, #11]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6979      	ldr	r1, [r7, #20]
 8002f7e:	f002 ffb3 	bl	8005ee8 <USB_EP0StartXfer>
 8002f82:	e008      	b.n	8002f96 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6979      	ldr	r1, [r7, #20]
 8002f92:	f002 fd65 	bl	8005a60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	f003 020f 	and.w	r2, r3, #15
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3338      	adds	r3, #56	; 0x38
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2201      	movs	r2, #1
 800300e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	b2da      	uxtb	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d102      	bne.n	800302a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800302a:	7afb      	ldrb	r3, [r7, #11]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	f002 ff51 	bl	8005ee8 <USB_EP0StartXfer>
 8003046:	e008      	b.n	800305a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	6979      	ldr	r1, [r7, #20]
 8003056:	f002 fd03 	bl	8005a60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d901      	bls.n	8003082 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e050      	b.n	8003124 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003086:	2b00      	cmp	r3, #0
 8003088:	da0f      	bge.n	80030aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3338      	adds	r3, #56	; 0x38
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	705a      	strb	r2, [r3, #1]
 80030a8:	e00d      	b.n	80030c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_PCD_EP_SetStall+0x82>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e01e      	b.n	8003124 <HAL_PCD_EP_SetStall+0xc0>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 f8e0 	bl	80062ba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	b2d9      	uxtb	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003114:	461a      	mov	r2, r3
 8003116:	f003 fad1 	bl	80066bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 020f 	and.w	r2, r3, #15
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d901      	bls.n	800314a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e042      	b.n	80031d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800314a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800314e:	2b00      	cmp	r3, #0
 8003150:	da0f      	bge.n	8003172 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	f003 020f 	and.w	r2, r3, #15
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	3338      	adds	r3, #56	; 0x38
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	3304      	adds	r3, #4
 8003168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	705a      	strb	r2, [r3, #1]
 8003170:	e00f      	b.n	8003192 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4413      	add	r3, r2
 8003188:	3304      	adds	r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_PCD_EP_ClrStall+0x86>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e00e      	b.n	80031d0 <HAL_PCD_EP_ClrStall+0xa4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 f8e8 	bl	8006396 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af02      	add	r7, sp, #8
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	3338      	adds	r3, #56	; 0x38
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	d901      	bls.n	8003210 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e06c      	b.n	80032ea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	429a      	cmp	r2, r3
 8003224:	d902      	bls.n	800322c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	3303      	adds	r3, #3
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003234:	e02b      	b.n	800328e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	d902      	bls.n	8003252 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3303      	adds	r3, #3
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68d9      	ldr	r1, [r3, #12]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800326a:	b2db      	uxtb	r3, r3
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4603      	mov	r3, r0
 8003270:	6978      	ldr	r0, [r7, #20]
 8003272:	f002 ff8c 	bl	800618e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	441a      	add	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d809      	bhi.n	80032b8 <PCD_WriteEmptyTxFifo+0xe0>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d203      	bcs.n	80032b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1be      	bne.n	8003236 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d811      	bhi.n	80032e8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	2201      	movs	r2, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	43db      	mvns	r3, r3
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e4:	4013      	ands	r3, r2
 80032e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	333c      	adds	r3, #60	; 0x3c
 800330c:	3304      	adds	r3, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b01      	cmp	r3, #1
 8003328:	f040 80a0 	bne.w	800346c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d015      	beq.n	8003362 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a72      	ldr	r2, [pc, #456]	; (8003504 <PCD_EP_OutXfrComplete_int+0x210>)
 800333a:	4293      	cmp	r3, r2
 800333c:	f240 80dd 	bls.w	80034fa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80d7 	beq.w	80034fa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335e:	6093      	str	r3, [r2, #8]
 8003360:	e0cb      	b.n	80034fa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	2320      	movs	r3, #32
 800337c:	6093      	str	r3, [r2, #8]
 800337e:	e0bc      	b.n	80034fa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 80b7 	bne.w	80034fa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <PCD_EP_OutXfrComplete_int+0x210>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d90f      	bls.n	80033b4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	461a      	mov	r2, r3
 80033ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b0:	6093      	str	r3, [r2, #8]
 80033b2:	e0a2      	b.n	80034fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033c6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	0159      	lsls	r1, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	440b      	add	r3, r1
 80033d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033da:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4403      	add	r3, r0
 80033ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033ee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4403      	add	r3, r0
 8003412:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4419      	add	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4403      	add	r3, r0
 8003428:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800342c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d114      	bne.n	800345e <PCD_EP_OutXfrComplete_int+0x16a>
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d108      	bne.n	800345e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003456:	461a      	mov	r2, r3
 8003458:	2101      	movs	r1, #1
 800345a:	f003 f92f 	bl	80066bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f005 f8c3 	bl	80085f0 <HAL_PCD_DataOutStageCallback>
 800346a:	e046      	b.n	80034fa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <PCD_EP_OutXfrComplete_int+0x214>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d124      	bne.n	80034be <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003490:	6093      	str	r3, [r2, #8]
 8003492:	e032      	b.n	80034fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2320      	movs	r3, #32
 80034ae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f005 f89a 	bl	80085f0 <HAL_PCD_DataOutStageCallback>
 80034bc:	e01d      	b.n	80034fa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d114      	bne.n	80034ee <PCD_EP_OutXfrComplete_int+0x1fa>
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d108      	bne.n	80034ee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034e6:	461a      	mov	r2, r3
 80034e8:	2100      	movs	r1, #0
 80034ea:	f003 f8e7 	bl	80066bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f005 f87b 	bl	80085f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	4f54300a 	.word	0x4f54300a
 8003508:	4f54310a 	.word	0x4f54310a

0800350c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	333c      	adds	r3, #60	; 0x3c
 8003524:	3304      	adds	r3, #4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a15      	ldr	r2, [pc, #84]	; (8003594 <PCD_EP_OutSetupPacket_int+0x88>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d90e      	bls.n	8003560 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	461a      	mov	r2, r3
 800355a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f005 f833 	bl	80085cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <PCD_EP_OutSetupPacket_int+0x88>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d90c      	bls.n	8003588 <PCD_EP_OutSetupPacket_int+0x7c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d108      	bne.n	8003588 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003580:	461a      	mov	r2, r3
 8003582:	2101      	movs	r1, #1
 8003584:	f003 f89a 	bl	80066bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	4f54300a 	.word	0x4f54300a

08003598 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
 80035a4:	4613      	mov	r3, r2
 80035a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035b6:	883b      	ldrh	r3, [r7, #0]
 80035b8:	0419      	lsls	r1, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
 80035c4:	e028      	b.n	8003618 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4413      	add	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e00d      	b.n	80035f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	3340      	adds	r3, #64	; 0x40
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4413      	add	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	3301      	adds	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3ec      	bcc.n	80035da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003600:	883b      	ldrh	r3, [r7, #0]
 8003602:	0418      	lsls	r0, r3, #16
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	3b01      	subs	r3, #1
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	4302      	orrs	r2, r0
 8003610:	3340      	adds	r3, #64	; 0x40
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e267      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d075      	beq.n	800376a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367e:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b04      	cmp	r3, #4
 8003688:	d00c      	beq.n	80036a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368a:	4b85      	ldr	r3, [pc, #532]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003692:	2b08      	cmp	r3, #8
 8003694:	d112      	bne.n	80036bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003696:	4b82      	ldr	r3, [pc, #520]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a2:	d10b      	bne.n	80036bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	4b7e      	ldr	r3, [pc, #504]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d05b      	beq.n	8003768 <HAL_RCC_OscConfig+0x108>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d157      	bne.n	8003768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e242      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c4:	d106      	bne.n	80036d4 <HAL_RCC_OscConfig+0x74>
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a75      	ldr	r2, [pc, #468]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e01d      	b.n	8003710 <HAL_RCC_OscConfig+0xb0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x98>
 80036de:	4b70      	ldr	r3, [pc, #448]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6f      	ldr	r2, [pc, #444]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b6d      	ldr	r3, [pc, #436]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6c      	ldr	r2, [pc, #432]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e00b      	b.n	8003710 <HAL_RCC_OscConfig+0xb0>
 80036f8:	4b69      	ldr	r3, [pc, #420]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a68      	ldr	r2, [pc, #416]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a65      	ldr	r2, [pc, #404]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 800370a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fd fd42 	bl	80011a0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003720:	f7fd fd3e 	bl	80011a0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e207      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b5b      	ldr	r3, [pc, #364]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0xc0>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fd fd2e 	bl	80011a0 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003748:	f7fd fd2a 	bl	80011a0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1f3      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0xe8>
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d063      	beq.n	800383e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800378a:	2b08      	cmp	r3, #8
 800378c:	d11c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378e:	4b44      	ldr	r3, [pc, #272]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x152>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e1c7      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4937      	ldr	r1, [pc, #220]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	e03a      	b.n	800383e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d0:	4b34      	ldr	r3, [pc, #208]	; (80038a4 <HAL_RCC_OscConfig+0x244>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fd fce3 	bl	80011a0 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037de:	f7fd fcdf 	bl	80011a0 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e1a8      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f0:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fc:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4925      	ldr	r1, [pc, #148]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]
 8003810:	e015      	b.n	800383e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCC_OscConfig+0x244>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fd fcc2 	bl	80011a0 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003820:	f7fd fcbe 	bl	80011a0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e187      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d036      	beq.n	80038b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCC_OscConfig+0x248>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fd fca2 	bl	80011a0 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003860:	f7fd fc9e 	bl	80011a0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e167      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x240>)
 8003874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x200>
 800387e:	e01b      	b.n	80038b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_OscConfig+0x248>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fd fc8b 	bl	80011a0 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	e00e      	b.n	80038ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388e:	f7fd fc87 	bl	80011a0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d907      	bls.n	80038ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e150      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	42470000 	.word	0x42470000
 80038a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ea      	bne.n	800388e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8097 	beq.w	80039f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ca:	4b81      	ldr	r3, [pc, #516]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	4b7d      	ldr	r3, [pc, #500]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a7c      	ldr	r2, [pc, #496]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b7a      	ldr	r3, [pc, #488]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f6:	4b77      	ldr	r3, [pc, #476]	; (8003ad4 <HAL_RCC_OscConfig+0x474>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d118      	bne.n	8003934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003902:	4b74      	ldr	r3, [pc, #464]	; (8003ad4 <HAL_RCC_OscConfig+0x474>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a73      	ldr	r2, [pc, #460]	; (8003ad4 <HAL_RCC_OscConfig+0x474>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390e:	f7fd fc47 	bl	80011a0 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003916:	f7fd fc43 	bl	80011a0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e10c      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCC_OscConfig+0x474>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d106      	bne.n	800394a <HAL_RCC_OscConfig+0x2ea>
 800393c:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a63      	ldr	r2, [pc, #396]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
 8003948:	e01c      	b.n	8003984 <HAL_RCC_OscConfig+0x324>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b05      	cmp	r3, #5
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0x30c>
 8003952:	4b5f      	ldr	r3, [pc, #380]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a5e      	ldr	r2, [pc, #376]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
 800395e:	4b5c      	ldr	r3, [pc, #368]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a5b      	ldr	r2, [pc, #364]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
 800396a:	e00b      	b.n	8003984 <HAL_RCC_OscConfig+0x324>
 800396c:	4b58      	ldr	r3, [pc, #352]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a57      	ldr	r2, [pc, #348]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	4b55      	ldr	r3, [pc, #340]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	4a54      	ldr	r2, [pc, #336]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 800397e:	f023 0304 	bic.w	r3, r3, #4
 8003982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d015      	beq.n	80039b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fc08 	bl	80011a0 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fd fc04 	bl	80011a0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e0cb      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039aa:	4b49      	ldr	r3, [pc, #292]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0ee      	beq.n	8003994 <HAL_RCC_OscConfig+0x334>
 80039b6:	e014      	b.n	80039e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b8:	f7fd fbf2 	bl	80011a0 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c0:	f7fd fbee 	bl	80011a0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0b5      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d6:	4b3e      	ldr	r3, [pc, #248]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ee      	bne.n	80039c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	4a38      	ldr	r2, [pc, #224]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 80039ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80a1 	beq.w	8003b40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039fe:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d05c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d141      	bne.n	8003a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b31      	ldr	r3, [pc, #196]	; (8003ad8 <HAL_RCC_OscConfig+0x478>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fd fbc2 	bl	80011a0 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fd fbbe 	bl	80011a0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e087      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	3b01      	subs	r3, #1
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	491b      	ldr	r1, [pc, #108]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <HAL_RCC_OscConfig+0x478>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fd fb97 	bl	80011a0 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a76:	f7fd fb93 	bl	80011a0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e05c      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x416>
 8003a94:	e054      	b.n	8003b40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_RCC_OscConfig+0x478>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fd fb80 	bl	80011a0 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fd fb7c 	bl	80011a0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e045      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x444>
 8003ac2:	e03d      	b.n	8003b40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d107      	bne.n	8003adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e038      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_RCC_OscConfig+0x4ec>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d028      	beq.n	8003b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d121      	bne.n	8003b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d11a      	bne.n	8003b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d111      	bne.n	8003b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	3b01      	subs	r3, #1
 8003b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800

08003b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0cc      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b64:	4b68      	ldr	r3, [pc, #416]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d90c      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b65      	ldr	r3, [pc, #404]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b63      	ldr	r3, [pc, #396]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0b8      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba4:	4b59      	ldr	r3, [pc, #356]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bbc:	4b53      	ldr	r3, [pc, #332]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a52      	ldr	r2, [pc, #328]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b50      	ldr	r3, [pc, #320]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	494d      	ldr	r1, [pc, #308]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d044      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b47      	ldr	r3, [pc, #284]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d119      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e07f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0e:	4b3f      	ldr	r3, [pc, #252]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e06f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e067      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4934      	ldr	r1, [pc, #208]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c40:	f7fd faae 	bl	80011a0 <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c48:	f7fd faaa 	bl	80011a0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e04f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 020c 	and.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1eb      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d20c      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e032      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4916      	ldr	r1, [pc, #88]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	490e      	ldr	r1, [pc, #56]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cd6:	f000 f821 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	490a      	ldr	r1, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce8:	5ccb      	ldrb	r3, [r1, r3]
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fa0e 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023c00 	.word	0x40023c00
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	0800a154 	.word	0x0800a154
 8003d14:	20000028 	.word	0x20000028
 8003d18:	2000002c 	.word	0x2000002c

08003d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d20:	b094      	sub	sp, #80	; 0x50
 8003d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	647b      	str	r3, [r7, #68]	; 0x44
 8003d28:	2300      	movs	r3, #0
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d34:	4b79      	ldr	r3, [pc, #484]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x40>
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	f200 80e1 	bhi.w	8003f08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x34>
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d4e:	e0db      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4b73      	ldr	r3, [pc, #460]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d54:	e0db      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d56:	4b73      	ldr	r3, [pc, #460]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d5a:	e0d8      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d5c:	4b6f      	ldr	r3, [pc, #444]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d66:	4b6d      	ldr	r3, [pc, #436]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d063      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d72:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	099b      	lsrs	r3, r3, #6
 8003d78:	2200      	movs	r2, #0
 8003d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
 8003d86:	2300      	movs	r3, #0
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d8e:	4622      	mov	r2, r4
 8003d90:	462b      	mov	r3, r5
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	0159      	lsls	r1, r3, #5
 8003d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da0:	0150      	lsls	r0, r2, #5
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4621      	mov	r1, r4
 8003da8:	1a51      	subs	r1, r2, r1
 8003daa:	6139      	str	r1, [r7, #16]
 8003dac:	4629      	mov	r1, r5
 8003dae:	eb63 0301 	sbc.w	r3, r3, r1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc0:	4659      	mov	r1, fp
 8003dc2:	018b      	lsls	r3, r1, #6
 8003dc4:	4651      	mov	r1, sl
 8003dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dca:	4651      	mov	r1, sl
 8003dcc:	018a      	lsls	r2, r1, #6
 8003dce:	4651      	mov	r1, sl
 8003dd0:	ebb2 0801 	subs.w	r8, r2, r1
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dee:	4690      	mov	r8, r2
 8003df0:	4699      	mov	r9, r3
 8003df2:	4623      	mov	r3, r4
 8003df4:	eb18 0303 	adds.w	r3, r8, r3
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	eb49 0303 	adc.w	r3, r9, r3
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e0e:	4629      	mov	r1, r5
 8003e10:	024b      	lsls	r3, r1, #9
 8003e12:	4621      	mov	r1, r4
 8003e14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e18:	4621      	mov	r1, r4
 8003e1a:	024a      	lsls	r2, r1, #9
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e22:	2200      	movs	r2, #0
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e2c:	f7fc fa28 	bl	8000280 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4613      	mov	r3, r2
 8003e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e38:	e058      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3a:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	099b      	lsrs	r3, r3, #6
 8003e40:	2200      	movs	r2, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	4611      	mov	r1, r2
 8003e46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e54:	4642      	mov	r2, r8
 8003e56:	464b      	mov	r3, r9
 8003e58:	f04f 0000 	mov.w	r0, #0
 8003e5c:	f04f 0100 	mov.w	r1, #0
 8003e60:	0159      	lsls	r1, r3, #5
 8003e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e66:	0150      	lsls	r0, r2, #5
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e72:	4649      	mov	r1, r9
 8003e74:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e8c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e90:	eb63 050b 	sbc.w	r5, r3, fp
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	00eb      	lsls	r3, r5, #3
 8003e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea2:	00e2      	lsls	r2, r4, #3
 8003ea4:	4614      	mov	r4, r2
 8003ea6:	461d      	mov	r5, r3
 8003ea8:	4643      	mov	r3, r8
 8003eaa:	18e3      	adds	r3, r4, r3
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	464b      	mov	r3, r9
 8003eb0:	eb45 0303 	adc.w	r3, r5, r3
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	028b      	lsls	r3, r1, #10
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ecc:	4621      	mov	r1, r4
 8003ece:	028a      	lsls	r2, r1, #10
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	61fa      	str	r2, [r7, #28]
 8003edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee0:	f7fc f9ce 	bl	8000280 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f06:	e002      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3750      	adds	r7, #80	; 0x50
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	00f42400 	.word	0x00f42400
 8003f24:	007a1200 	.word	0x007a1200

08003f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000028 	.word	0x20000028

08003f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f44:	f7ff fff0 	bl	8003f28 <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0a9b      	lsrs	r3, r3, #10
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4903      	ldr	r1, [pc, #12]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	0800a164 	.word	0x0800a164

08003f68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d035      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f90:	4b62      	ldr	r3, [pc, #392]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f96:	f7fd f903 	bl	80011a0 <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f9e:	f7fd f8ff 	bl	80011a0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0b0      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fb0:	4b5b      	ldr	r3, [pc, #364]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	019a      	lsls	r2, r3, #6
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	071b      	lsls	r3, r3, #28
 8003fc8:	4955      	ldr	r1, [pc, #340]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fd0:	4b52      	ldr	r3, [pc, #328]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd6:	f7fd f8e3 	bl	80011a0 <HAL_GetTick>
 8003fda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fde:	f7fd f8df 	bl	80011a0 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e090      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ff0:	4b4b      	ldr	r3, [pc, #300]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8083 	beq.w	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	4b44      	ldr	r3, [pc, #272]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	4a43      	ldr	r2, [pc, #268]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	; 0x40
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3e      	ldr	r2, [pc, #248]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004030:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004032:	f7fd f8b5 	bl	80011a0 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800403a:	f7fd f8b1 	bl	80011a0 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e062      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800404c:	4b35      	ldr	r3, [pc, #212]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004060:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d02f      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	429a      	cmp	r2, r3
 8004074:	d028      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004076:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004080:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004086:	4b28      	ldr	r3, [pc, #160]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800408c:	4a24      	ldr	r2, [pc, #144]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d114      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800409e:	f7fd f87f 	bl	80011a0 <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd f87b 	bl	80011a0 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e02a      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040bc:	4b18      	ldr	r3, [pc, #96]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ee      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d4:	d10d      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ea:	490d      	ldr	r1, [pc, #52]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]
 80040f0:	e005      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040fc:	6093      	str	r3, [r2, #8]
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410a:	4905      	ldr	r1, [pc, #20]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800410c:	4313      	orrs	r3, r2
 800410e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	42470068 	.word	0x42470068
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000
 8004128:	42470e40 	.word	0x42470e40

0800412c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d13e      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800414a:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d12f      	bne.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004160:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004162:	617b      	str	r3, [r7, #20]
          break;
 8004164:	e02f      	b.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004166:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004172:	d108      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	e007      	b.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418e:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419c:	099b      	lsrs	r3, r3, #6
 800419e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b0:	0f1b      	lsrs	r3, r3, #28
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
          break;
 80041be:	e002      	b.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
          break;
 80041c4:	bf00      	nop
        }
      }
      break;
 80041c6:	bf00      	nop
    }
  }
  return frequency;
 80041c8:	697b      	ldr	r3, [r7, #20]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	00bb8000 	.word	0x00bb8000
 80041e0:	007a1200 	.word	0x007a1200
 80041e4:	00f42400 	.word	0x00f42400

080041e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e07b      	b.n	80042f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420a:	d009      	beq.n	8004220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	61da      	str	r2, [r3, #28]
 8004212:	e005      	b.n	8004220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc fe04 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	ea42 0103 	orr.w	r1, r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0104 	and.w	r1, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	f003 0210 	and.w	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e041      	b.n	8004390 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fc fdd9 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f000 fb49 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e041      	b.n	800442e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f839 	bl	8004436 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 fafa 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_TIM_PWM_Start+0x24>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e022      	b.n	80044b6 <HAL_TIM_PWM_Start+0x6a>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b04      	cmp	r3, #4
 8004474:	d109      	bne.n	800448a <HAL_TIM_PWM_Start+0x3e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e015      	b.n	80044b6 <HAL_TIM_PWM_Start+0x6a>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d109      	bne.n	80044a4 <HAL_TIM_PWM_Start+0x58>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e008      	b.n	80044b6 <HAL_TIM_PWM_Start+0x6a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07c      	b.n	80045b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_PWM_Start+0x82>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044cc:	e013      	b.n	80044f6 <HAL_TIM_PWM_Start+0xaa>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d104      	bne.n	80044de <HAL_TIM_PWM_Start+0x92>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044dc:	e00b      	b.n	80044f6 <HAL_TIM_PWM_Start+0xaa>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_PWM_Start+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ec:	e003      	b.n	80044f6 <HAL_TIM_PWM_Start+0xaa>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2201      	movs	r2, #1
 80044fc:	6839      	ldr	r1, [r7, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd50 	bl	8004fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <HAL_TIM_PWM_Start+0x174>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_TIM_PWM_Start+0xcc>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <HAL_TIM_PWM_Start+0x178>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d101      	bne.n	800451c <HAL_TIM_PWM_Start+0xd0>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_TIM_PWM_Start+0xd2>
 800451c:	2300      	movs	r3, #0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <HAL_TIM_PWM_Start+0x174>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d022      	beq.n	8004582 <HAL_TIM_PWM_Start+0x136>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004544:	d01d      	beq.n	8004582 <HAL_TIM_PWM_Start+0x136>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <HAL_TIM_PWM_Start+0x17c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d018      	beq.n	8004582 <HAL_TIM_PWM_Start+0x136>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_TIM_PWM_Start+0x180>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_TIM_PWM_Start+0x136>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <HAL_TIM_PWM_Start+0x184>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00e      	beq.n	8004582 <HAL_TIM_PWM_Start+0x136>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_TIM_PWM_Start+0x178>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d009      	beq.n	8004582 <HAL_TIM_PWM_Start+0x136>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_TIM_PWM_Start+0x188>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d004      	beq.n	8004582 <HAL_TIM_PWM_Start+0x136>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <HAL_TIM_PWM_Start+0x18c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d111      	bne.n	80045a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b06      	cmp	r3, #6
 8004592:	d010      	beq.n	80045b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a4:	e007      	b.n	80045b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40010400 	.word	0x40010400
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40001800 	.word	0x40001800

080045dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fcd8 	bl	8004fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2e      	ldr	r2, [pc, #184]	; (80046b4 <HAL_TIM_PWM_Stop+0xd8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_TIM_PWM_Stop+0x2c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <HAL_TIM_PWM_Stop+0xdc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d101      	bne.n	800460c <HAL_TIM_PWM_Stop+0x30>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <HAL_TIM_PWM_Stop+0x32>
 800460c:	2300      	movs	r3, #0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d017      	beq.n	8004642 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	f241 1311 	movw	r3, #4369	; 0x1111
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <HAL_TIM_PWM_Stop+0x66>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	f240 4344 	movw	r3, #1092	; 0x444
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d107      	bne.n	8004642 <HAL_TIM_PWM_Stop+0x66>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	f241 1311 	movw	r3, #4369	; 0x1111
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10f      	bne.n	8004672 <HAL_TIM_PWM_Stop+0x96>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	f240 4344 	movw	r3, #1092	; 0x444
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <HAL_TIM_PWM_Stop+0x96>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Stop+0xa6>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004680:	e013      	b.n	80046aa <HAL_TIM_PWM_Stop+0xce>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b04      	cmp	r3, #4
 8004686:	d104      	bne.n	8004692 <HAL_TIM_PWM_Stop+0xb6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004690:	e00b      	b.n	80046aa <HAL_TIM_PWM_Stop+0xce>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_PWM_Stop+0xc6>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a0:	e003      	b.n	80046aa <HAL_TIM_PWM_Stop+0xce>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40010400 	.word	0x40010400

080046bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e0ae      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	f200 809f 	bhi.w	8004828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004725 	.word	0x08004725
 80046f4:	08004829 	.word	0x08004829
 80046f8:	08004829 	.word	0x08004829
 80046fc:	08004829 	.word	0x08004829
 8004700:	08004765 	.word	0x08004765
 8004704:	08004829 	.word	0x08004829
 8004708:	08004829 	.word	0x08004829
 800470c:	08004829 	.word	0x08004829
 8004710:	080047a7 	.word	0x080047a7
 8004714:	08004829 	.word	0x08004829
 8004718:	08004829 	.word	0x08004829
 800471c:	08004829 	.word	0x08004829
 8004720:	080047e7 	.word	0x080047e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f9f0 	bl	8004b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0208 	orr.w	r2, r2, #8
 800473e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0204 	bic.w	r2, r2, #4
 800474e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6999      	ldr	r1, [r3, #24]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	619a      	str	r2, [r3, #24]
      break;
 8004762:	e064      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fa40 	bl	8004bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6999      	ldr	r1, [r3, #24]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	021a      	lsls	r2, r3, #8
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	619a      	str	r2, [r3, #24]
      break;
 80047a4:	e043      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fa95 	bl	8004cdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0208 	orr.w	r2, r2, #8
 80047c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0204 	bic.w	r2, r2, #4
 80047d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69d9      	ldr	r1, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	61da      	str	r2, [r3, #28]
      break;
 80047e4:	e023      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fae9 	bl	8004dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69d9      	ldr	r1, [r3, #28]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	021a      	lsls	r2, r3, #8
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	61da      	str	r2, [r3, #28]
      break;
 8004826:	e002      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
      break;
 800482c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004836:	7dfb      	ldrb	r3, [r7, #23]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_TIM_ConfigClockSource+0x1c>
 8004858:	2302      	movs	r3, #2
 800485a:	e0b4      	b.n	80049c6 <HAL_TIM_ConfigClockSource+0x186>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800487a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004894:	d03e      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0xd4>
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	f200 8087 	bhi.w	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	f000 8086 	beq.w	80049b2 <HAL_TIM_ConfigClockSource+0x172>
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d87f      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d01a      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0xa6>
 80048b0:	2b70      	cmp	r3, #112	; 0x70
 80048b2:	d87b      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d050      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x11a>
 80048b8:	2b60      	cmp	r3, #96	; 0x60
 80048ba:	d877      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d03c      	beq.n	800493a <HAL_TIM_ConfigClockSource+0xfa>
 80048c0:	2b50      	cmp	r3, #80	; 0x50
 80048c2:	d873      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d058      	beq.n	800497a <HAL_TIM_ConfigClockSource+0x13a>
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d86f      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b30      	cmp	r3, #48	; 0x30
 80048ce:	d064      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15a>
 80048d0:	2b30      	cmp	r3, #48	; 0x30
 80048d2:	d86b      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d060      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15a>
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d867      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d05c      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15a>
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d05a      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15a>
 80048e4:	e062      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6899      	ldr	r1, [r3, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f000 fb35 	bl	8004f64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	609a      	str	r2, [r3, #8]
      break;
 8004912:	e04f      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f000 fb1e 	bl	8004f64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004936:	609a      	str	r2, [r3, #8]
      break;
 8004938:	e03c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6859      	ldr	r1, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	461a      	mov	r2, r3
 8004948:	f000 fa92 	bl	8004e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2150      	movs	r1, #80	; 0x50
 8004952:	4618      	mov	r0, r3
 8004954:	f000 faeb 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 8004958:	e02c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	461a      	mov	r2, r3
 8004968:	f000 fab1 	bl	8004ece <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2160      	movs	r1, #96	; 0x60
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fadb 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 8004978:	e01c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	f000 fa72 	bl	8004e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	4618      	mov	r0, r3
 8004994:	f000 facb 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 8004998:	e00c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f000 fac2 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 80049aa:	e003      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      break;
 80049b0:	e000      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a40      	ldr	r2, [pc, #256]	; (8004ae4 <TIM_Base_SetConfig+0x114>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d00f      	beq.n	8004a10 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a3d      	ldr	r2, [pc, #244]	; (8004ae8 <TIM_Base_SetConfig+0x118>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a3c      	ldr	r2, [pc, #240]	; (8004aec <TIM_Base_SetConfig+0x11c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <TIM_Base_SetConfig+0x120>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3a      	ldr	r2, [pc, #232]	; (8004af4 <TIM_Base_SetConfig+0x124>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a2f      	ldr	r2, [pc, #188]	; (8004ae4 <TIM_Base_SetConfig+0x114>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02b      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a30:	d027      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2c      	ldr	r2, [pc, #176]	; (8004ae8 <TIM_Base_SetConfig+0x118>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d023      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2b      	ldr	r2, [pc, #172]	; (8004aec <TIM_Base_SetConfig+0x11c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01f      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2a      	ldr	r2, [pc, #168]	; (8004af0 <TIM_Base_SetConfig+0x120>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d01b      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a29      	ldr	r2, [pc, #164]	; (8004af4 <TIM_Base_SetConfig+0x124>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d017      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a28      	ldr	r2, [pc, #160]	; (8004af8 <TIM_Base_SetConfig+0x128>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a27      	ldr	r2, [pc, #156]	; (8004afc <TIM_Base_SetConfig+0x12c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00f      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <TIM_Base_SetConfig+0x130>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <TIM_Base_SetConfig+0x134>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a24      	ldr	r2, [pc, #144]	; (8004b08 <TIM_Base_SetConfig+0x138>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a23      	ldr	r2, [pc, #140]	; (8004b0c <TIM_Base_SetConfig+0x13c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d108      	bne.n	8004a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <TIM_Base_SetConfig+0x114>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_Base_SetConfig+0xf8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a0c      	ldr	r2, [pc, #48]	; (8004af4 <TIM_Base_SetConfig+0x124>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40000800 	.word	0x40000800
 8004af0:	40000c00 	.word	0x40000c00
 8004af4:	40010400 	.word	0x40010400
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40014400 	.word	0x40014400
 8004b00:	40014800 	.word	0x40014800
 8004b04:	40001800 	.word	0x40001800
 8004b08:	40001c00 	.word	0x40001c00
 8004b0c:	40002000 	.word	0x40002000

08004b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0201 	bic.w	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 0302 	bic.w	r3, r3, #2
 8004b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <TIM_OC1_SetConfig+0xd8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_OC1_SetConfig+0x64>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1f      	ldr	r2, [pc, #124]	; (8004bec <TIM_OC1_SetConfig+0xdc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10c      	bne.n	8004b8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0308 	bic.w	r3, r3, #8
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 0304 	bic.w	r3, r3, #4
 8004b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <TIM_OC1_SetConfig+0xd8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_OC1_SetConfig+0x8e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <TIM_OC1_SetConfig+0xdc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d111      	bne.n	8004bc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40010400 	.word	0x40010400

08004bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0210 	bic.w	r2, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0320 	bic.w	r3, r3, #32
 8004c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <TIM_OC2_SetConfig+0xe4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_OC2_SetConfig+0x68>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <TIM_OC2_SetConfig+0xe8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10d      	bne.n	8004c74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <TIM_OC2_SetConfig+0xe4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_OC2_SetConfig+0x94>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <TIM_OC2_SetConfig+0xe8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d113      	bne.n	8004cac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40010400 	.word	0x40010400

08004cdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a21      	ldr	r2, [pc, #132]	; (8004dbc <TIM_OC3_SetConfig+0xe0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_OC3_SetConfig+0x66>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a20      	ldr	r2, [pc, #128]	; (8004dc0 <TIM_OC3_SetConfig+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10d      	bne.n	8004d5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <TIM_OC3_SetConfig+0xe0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_OC3_SetConfig+0x92>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <TIM_OC3_SetConfig+0xe4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d113      	bne.n	8004d96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40010400 	.word	0x40010400

08004dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <TIM_OC4_SetConfig+0xa4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_OC4_SetConfig+0x68>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <TIM_OC4_SetConfig+0xa8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d109      	bne.n	8004e40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40010400 	.word	0x40010400

08004e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 030a 	bic.w	r3, r3, #10
 8004eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b087      	sub	sp, #28
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0210 	bic.w	r2, r3, #16
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	031b      	lsls	r3, r3, #12
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f043 0307 	orr.w	r3, r3, #7
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	021a      	lsls	r2, r3, #8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	609a      	str	r2, [r3, #8]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e05a      	b.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a21      	ldr	r2, [pc, #132]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d022      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d01d      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10c      	bne.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40001800 	.word	0x40001800

080050e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e8:	b084      	sub	sp, #16
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	f107 001c 	add.w	r0, r7, #28
 80050f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d122      	bne.n	8005146 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d105      	bne.n	800513a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 fb1c 	bl	8006778 <USB_CoreReset>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e01a      	b.n	800517c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fb10 	bl	8006778 <USB_CoreReset>
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800515c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
 800516e:	e005      	b.n	800517c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10b      	bne.n	800519a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f043 0206 	orr.w	r2, r3, #6
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a6:	b004      	add	sp, #16
 80051a8:	4770      	bx	lr
	...

080051ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d165      	bne.n	800528c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a41      	ldr	r2, [pc, #260]	; (80052c8 <USB_SetTurnaroundTime+0x11c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d906      	bls.n	80051d6 <USB_SetTurnaroundTime+0x2a>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4a40      	ldr	r2, [pc, #256]	; (80052cc <USB_SetTurnaroundTime+0x120>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d202      	bcs.n	80051d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051d0:	230f      	movs	r3, #15
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e062      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a3c      	ldr	r2, [pc, #240]	; (80052cc <USB_SetTurnaroundTime+0x120>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d306      	bcc.n	80051ec <USB_SetTurnaroundTime+0x40>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a3b      	ldr	r2, [pc, #236]	; (80052d0 <USB_SetTurnaroundTime+0x124>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d202      	bcs.n	80051ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051e6:	230e      	movs	r3, #14
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e057      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <USB_SetTurnaroundTime+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d306      	bcc.n	8005202 <USB_SetTurnaroundTime+0x56>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4a37      	ldr	r2, [pc, #220]	; (80052d4 <USB_SetTurnaroundTime+0x128>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d202      	bcs.n	8005202 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051fc:	230d      	movs	r3, #13
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e04c      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a33      	ldr	r2, [pc, #204]	; (80052d4 <USB_SetTurnaroundTime+0x128>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d306      	bcc.n	8005218 <USB_SetTurnaroundTime+0x6c>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4a32      	ldr	r2, [pc, #200]	; (80052d8 <USB_SetTurnaroundTime+0x12c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d802      	bhi.n	8005218 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005212:	230c      	movs	r3, #12
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e041      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a2f      	ldr	r2, [pc, #188]	; (80052d8 <USB_SetTurnaroundTime+0x12c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d906      	bls.n	800522e <USB_SetTurnaroundTime+0x82>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a2e      	ldr	r2, [pc, #184]	; (80052dc <USB_SetTurnaroundTime+0x130>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d802      	bhi.n	800522e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005228:	230b      	movs	r3, #11
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e036      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <USB_SetTurnaroundTime+0x130>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d906      	bls.n	8005244 <USB_SetTurnaroundTime+0x98>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <USB_SetTurnaroundTime+0x134>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d802      	bhi.n	8005244 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800523e:	230a      	movs	r3, #10
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e02b      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <USB_SetTurnaroundTime+0x134>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d906      	bls.n	800525a <USB_SetTurnaroundTime+0xae>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <USB_SetTurnaroundTime+0x138>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d202      	bcs.n	800525a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005254:	2309      	movs	r3, #9
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e020      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <USB_SetTurnaroundTime+0x138>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d306      	bcc.n	8005270 <USB_SetTurnaroundTime+0xc4>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4a20      	ldr	r2, [pc, #128]	; (80052e8 <USB_SetTurnaroundTime+0x13c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d802      	bhi.n	8005270 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800526a:	2308      	movs	r3, #8
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e015      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <USB_SetTurnaroundTime+0x13c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d906      	bls.n	8005286 <USB_SetTurnaroundTime+0xda>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <USB_SetTurnaroundTime+0x140>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d202      	bcs.n	8005286 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005280:	2307      	movs	r3, #7
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e00a      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005286:	2306      	movs	r3, #6
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e007      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005292:	2309      	movs	r3, #9
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e001      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005298:	2309      	movs	r3, #9
 800529a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	00d8acbf 	.word	0x00d8acbf
 80052cc:	00e4e1c0 	.word	0x00e4e1c0
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	01067380 	.word	0x01067380
 80052d8:	011a499f 	.word	0x011a499f
 80052dc:	01312cff 	.word	0x01312cff
 80052e0:	014ca43f 	.word	0x014ca43f
 80052e4:	016e3600 	.word	0x016e3600
 80052e8:	01a6ab1f 	.word	0x01a6ab1f
 80052ec:	01e84800 	.word	0x01e84800

080052f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d115      	bne.n	8005382 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005362:	2001      	movs	r0, #1
 8005364:	f7fb ff28 	bl	80011b8 <HAL_Delay>
      ms++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f001 f972 	bl	8006658 <USB_GetMode>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d01e      	beq.n	80053b8 <USB_SetCurrentMode+0x84>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b31      	cmp	r3, #49	; 0x31
 800537e:	d9f0      	bls.n	8005362 <USB_SetCurrentMode+0x2e>
 8005380:	e01a      	b.n	80053b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d115      	bne.n	80053b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005394:	2001      	movs	r0, #1
 8005396:	f7fb ff0f 	bl	80011b8 <HAL_Delay>
      ms++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3301      	adds	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 f959 	bl	8006658 <USB_GetMode>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <USB_SetCurrentMode+0x84>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b31      	cmp	r3, #49	; 0x31
 80053b0:	d9f0      	bls.n	8005394 <USB_SetCurrentMode+0x60>
 80053b2:	e001      	b.n	80053b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e005      	b.n	80053c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b32      	cmp	r3, #50	; 0x32
 80053bc:	d101      	bne.n	80053c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053cc:	b084      	sub	sp, #16
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e009      	b.n	8005400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3340      	adds	r3, #64	; 0x40
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3301      	adds	r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b0e      	cmp	r3, #14
 8005404:	d9f2      	bls.n	80053ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d11c      	bne.n	8005446 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
 8005444:	e00b      	b.n	800545e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005464:	461a      	mov	r2, r3
 8005466:	2300      	movs	r3, #0
 8005468:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	4619      	mov	r1, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	461a      	mov	r2, r3
 800547a:	680b      	ldr	r3, [r1, #0]
 800547c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	2b01      	cmp	r3, #1
 8005482:	d10c      	bne.n	800549e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d104      	bne.n	8005494 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800548a:	2100      	movs	r1, #0
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f945 	bl	800571c <USB_SetDevSpeed>
 8005492:	e008      	b.n	80054a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005494:	2101      	movs	r1, #1
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f940 	bl	800571c <USB_SetDevSpeed>
 800549c:	e003      	b.n	80054a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800549e:	2103      	movs	r1, #3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f93b 	bl	800571c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054a6:	2110      	movs	r1, #16
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8f3 	bl	8005694 <USB_FlushTxFifo>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f90f 	bl	80056dc <USB_FlushRxFifo>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	461a      	mov	r2, r3
 80054dc:	2300      	movs	r3, #0
 80054de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e6:	461a      	mov	r2, r3
 80054e8:	2300      	movs	r3, #0
 80054ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	e043      	b.n	800557a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005508:	d118      	bne.n	800553c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	461a      	mov	r2, r3
 800551e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	e013      	b.n	800554e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	461a      	mov	r2, r3
 8005534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e008      	b.n	800554e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	461a      	mov	r2, r3
 800554a:	2300      	movs	r3, #0
 800554c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	461a      	mov	r2, r3
 800556e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005572:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	3301      	adds	r3, #1
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3b7      	bcc.n	80054f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	e043      	b.n	8005610 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559e:	d118      	bne.n	80055d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	461a      	mov	r2, r3
 80055b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e013      	b.n	80055e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	461a      	mov	r2, r3
 80055ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	e008      	b.n	80055e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	461a      	mov	r2, r3
 8005604:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005608:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	3301      	adds	r3, #1
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	429a      	cmp	r2, r3
 8005616:	d3b7      	bcc.n	8005588 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005638:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f043 0210 	orr.w	r2, r3, #16
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <USB_DevInit+0x2c4>)
 8005652:	4313      	orrs	r3, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f043 0208 	orr.w	r2, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800566a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800568c:	b004      	add	sp, #16
 800568e:	4770      	bx	lr
 8005690:	803c3800 	.word	0x803c3800

08005694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	f043 0220 	orr.w	r2, r3, #32
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <USB_FlushTxFifo+0x44>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e006      	b.n	80056cc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d0f1      	beq.n	80056ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	00030d40 	.word	0x00030d40

080056dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2210      	movs	r2, #16
 80056ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	4a08      	ldr	r2, [pc, #32]	; (8005718 <USB_FlushRxFifo+0x3c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e006      	b.n	800570c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b10      	cmp	r3, #16
 8005708:	d0f1      	beq.n	80056ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	00030d40 	.word	0x00030d40

0800571c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	68f9      	ldr	r1, [r7, #12]
 8005738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800573c:	4313      	orrs	r3, r2
 800573e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0306 	and.w	r3, r3, #6
 8005766:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800576e:	2300      	movs	r3, #0
 8005770:	75fb      	strb	r3, [r7, #23]
 8005772:	e00a      	b.n	800578a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d002      	beq.n	8005780 <USB_GetDevSpeed+0x32>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b06      	cmp	r3, #6
 800577e:	d102      	bne.n	8005786 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005780:	2302      	movs	r3, #2
 8005782:	75fb      	strb	r3, [r7, #23]
 8005784:	e001      	b.n	800578a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005786:	230f      	movs	r3, #15
 8005788:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d13a      	bne.n	800582a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	2101      	movs	r1, #1
 80057c6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	68f9      	ldr	r1, [r7, #12]
 80057ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d155      	bne.n	8005898 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	78db      	ldrb	r3, [r3, #3]
 8005806:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005808:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	059b      	lsls	r3, r3, #22
 800580e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005810:	4313      	orrs	r3, r2
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	e036      	b.n	8005898 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005830:	69da      	ldr	r2, [r3, #28]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	2101      	movs	r1, #1
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	041b      	lsls	r3, r3, #16
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005848:	4313      	orrs	r3, r2
 800584a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11a      	bne.n	8005898 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	78db      	ldrb	r3, [r3, #3]
 800587c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800587e:	430b      	orrs	r3, r1
 8005880:	4313      	orrs	r3, r2
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005896:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d161      	bne.n	8005988 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058da:	d11f      	bne.n	800591c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005916:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800591a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	2101      	movs	r1, #1
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	b29b      	uxth	r3, r3
 8005934:	43db      	mvns	r3, r3
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593c:	4013      	ands	r3, r2
 800593e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	2101      	movs	r1, #1
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	b29b      	uxth	r3, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005960:	4013      	ands	r3, r2
 8005962:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	0159      	lsls	r1, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	440b      	add	r3, r1
 800597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597e:	4619      	mov	r1, r3
 8005980:	4b35      	ldr	r3, [pc, #212]	; (8005a58 <USB_DeactivateEndpoint+0x1b0>)
 8005982:	4013      	ands	r3, r2
 8005984:	600b      	str	r3, [r1, #0]
 8005986:	e060      	b.n	8005a4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800599a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599e:	d11f      	bne.n	80059e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	2101      	movs	r1, #1
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	43db      	mvns	r3, r3
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a00:	4013      	ands	r3, r2
 8005a02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	2101      	movs	r1, #1
 8005a16:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a24:	4013      	ands	r3, r2
 8005a26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	0159      	lsls	r1, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	440b      	add	r3, r1
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	4619      	mov	r1, r3
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <USB_DeactivateEndpoint+0x1b4>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	ec337800 	.word	0xec337800
 8005a5c:	eff37800 	.word	0xeff37800

08005a60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	f040 815c 	bne.w	8005d3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d132      	bne.n	8005af0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	0cdb      	lsrs	r3, r3, #19
 8005aea:	04db      	lsls	r3, r3, #19
 8005aec:	6113      	str	r3, [r2, #16]
 8005aee:	e074      	b.n	8005bda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	0cdb      	lsrs	r3, r3, #19
 8005b0c:	04db      	lsls	r3, r3, #19
 8005b0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b40:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6959      	ldr	r1, [r3, #20]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	440b      	add	r3, r1
 8005b4c:	1e59      	subs	r1, r3, #1
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b56:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b58:	4b9d      	ldr	r3, [pc, #628]	; (8005dd0 <USB_EPStartXfer+0x370>)
 8005b5a:	400b      	ands	r3, r1
 8005b5c:	69b9      	ldr	r1, [r7, #24]
 8005b5e:	0148      	lsls	r0, r1, #5
 8005b60:	69f9      	ldr	r1, [r7, #28]
 8005b62:	4401      	add	r1, r0
 8005b64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b82:	69b9      	ldr	r1, [r7, #24]
 8005b84:	0148      	lsls	r0, r1, #5
 8005b86:	69f9      	ldr	r1, [r7, #28]
 8005b88:	4401      	add	r1, r0
 8005b8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	78db      	ldrb	r3, [r3, #3]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d11f      	bne.n	8005bda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005bb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d14b      	bne.n	8005c78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	78db      	ldrb	r3, [r3, #3]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d128      	bne.n	8005c56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d110      	bne.n	8005c36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e00f      	b.n	8005c56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e12f      	b.n	8005ed8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	78db      	ldrb	r3, [r3, #3]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d015      	beq.n	8005ccc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8117 	beq.w	8005ed8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	2101      	movs	r1, #1
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	69f9      	ldr	r1, [r7, #28]
 8005cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	634b      	str	r3, [r1, #52]	; 0x34
 8005cca:	e105      	b.n	8005ed8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d110      	bne.n	8005cfe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e00f      	b.n	8005d1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68d9      	ldr	r1, [r3, #12]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	781a      	ldrb	r2, [r3, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	b298      	uxth	r0, r3
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4603      	mov	r3, r0
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fa2b 	bl	800618e <USB_WritePacket>
 8005d38:	e0ce      	b.n	8005ed8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d54:	0cdb      	lsrs	r3, r3, #19
 8005d56:	04db      	lsls	r3, r3, #19
 8005d58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d126      	bne.n	8005dd4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9c:	69b9      	ldr	r1, [r7, #24]
 8005d9e:	0148      	lsls	r0, r1, #5
 8005da0:	69f9      	ldr	r1, [r7, #28]
 8005da2:	4401      	add	r1, r0
 8005da4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005da8:	4313      	orrs	r3, r2
 8005daa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dca:	6113      	str	r3, [r2, #16]
 8005dcc:	e036      	b.n	8005e3c <USB_EPStartXfer+0x3dc>
 8005dce:	bf00      	nop
 8005dd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	695a      	ldr	r2, [r3, #20]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4413      	add	r3, r2
 8005dde:	1e5a      	subs	r2, r3, #1
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	8afb      	ldrh	r3, [r7, #22]
 8005dfa:	04d9      	lsls	r1, r3, #19
 8005dfc:	4b39      	ldr	r3, [pc, #228]	; (8005ee4 <USB_EPStartXfer+0x484>)
 8005dfe:	400b      	ands	r3, r1
 8005e00:	69b9      	ldr	r1, [r7, #24]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	8af9      	ldrh	r1, [r7, #22]
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e2c:	69b9      	ldr	r1, [r7, #24]
 8005e2e:	0148      	lsls	r0, r1, #5
 8005e30:	69f9      	ldr	r1, [r7, #28]
 8005e32:	4401      	add	r1, r0
 8005e34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d10d      	bne.n	8005e5e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	68d9      	ldr	r1, [r3, #12]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	78db      	ldrb	r3, [r3, #3]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d128      	bne.n	8005eb8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d110      	bne.n	8005e98 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e00f      	b.n	8005eb8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ed6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	1ff80000 	.word	0x1ff80000

08005ee8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	f040 80cd 	bne.w	80060a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d132      	bne.n	8005f78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	0cdb      	lsrs	r3, r3, #19
 8005f72:	04db      	lsls	r3, r3, #19
 8005f74:	6113      	str	r3, [r2, #16]
 8005f76:	e04e      	b.n	8006016 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	0cdb      	lsrs	r3, r3, #19
 8005f94:	04db      	lsls	r3, r3, #19
 8005f96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d903      	bls.n	8005fd0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006006:	6939      	ldr	r1, [r7, #16]
 8006008:	0148      	lsls	r0, r1, #5
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	4401      	add	r1, r0
 800600e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006012:	4313      	orrs	r3, r2
 8006014:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d11e      	bne.n	800605a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	461a      	mov	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006052:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	e092      	b.n	8006180 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006078:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d07e      	beq.n	8006180 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	2101      	movs	r1, #1
 8006094:	fa01 f303 	lsl.w	r3, r1, r3
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800609e:	4313      	orrs	r3, r2
 80060a0:	634b      	str	r3, [r1, #52]	; 0x34
 80060a2:	e06d      	b.n	8006180 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060be:	0cdb      	lsrs	r3, r3, #19
 80060c0:	04db      	lsls	r3, r3, #19
 80060c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006112:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006116:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800612e:	6939      	ldr	r1, [r7, #16]
 8006130:	0148      	lsls	r0, r1, #5
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	4401      	add	r1, r0
 8006136:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800613a:	4313      	orrs	r3, r2
 800613c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d10d      	bne.n	8006160 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	68d9      	ldr	r1, [r3, #12]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615c:	460a      	mov	r2, r1
 800615e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800617e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800618e:	b480      	push	{r7}
 8006190:	b089      	sub	sp, #36	; 0x24
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	4611      	mov	r1, r2
 800619a:	461a      	mov	r2, r3
 800619c:	460b      	mov	r3, r1
 800619e:	71fb      	strb	r3, [r7, #7]
 80061a0:	4613      	mov	r3, r2
 80061a2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d123      	bne.n	80061fc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061b4:	88bb      	ldrh	r3, [r7, #4]
 80061b6:	3303      	adds	r3, #3
 80061b8:	089b      	lsrs	r3, r3, #2
 80061ba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061bc:	2300      	movs	r3, #0
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	e018      	b.n	80061f4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	031a      	lsls	r2, r3, #12
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ce:	461a      	mov	r2, r3
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	3301      	adds	r3, #1
 80061da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3301      	adds	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3301      	adds	r3, #1
 80061e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	3301      	adds	r3, #1
 80061ec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	3301      	adds	r3, #1
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d3e2      	bcc.n	80061c2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3724      	adds	r7, #36	; 0x24
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800620a:	b480      	push	{r7}
 800620c:	b08b      	sub	sp, #44	; 0x2c
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006220:	88fb      	ldrh	r3, [r7, #6]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	b29b      	uxth	r3, r3
 8006226:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006230:	2300      	movs	r3, #0
 8006232:	623b      	str	r3, [r7, #32]
 8006234:	e014      	b.n	8006260 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	601a      	str	r2, [r3, #0]
    pDest++;
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	3301      	adds	r3, #1
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	3301      	adds	r3, #1
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	3301      	adds	r3, #1
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	3301      	adds	r3, #1
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	3301      	adds	r3, #1
 800625e:	623b      	str	r3, [r7, #32]
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	429a      	cmp	r2, r3
 8006266:	d3e6      	bcc.n	8006236 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006268:	8bfb      	ldrh	r3, [r7, #30]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01e      	beq.n	80062ac <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006278:	461a      	mov	r2, r3
 800627a:	f107 0310 	add.w	r3, r7, #16
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	b2da      	uxtb	r2, r3
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	701a      	strb	r2, [r3, #0]
      i++;
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	3301      	adds	r3, #1
 8006298:	623b      	str	r3, [r7, #32]
      pDest++;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	3301      	adds	r3, #1
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062a0:	8bfb      	ldrh	r3, [r7, #30]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062a6:	8bfb      	ldrh	r3, [r7, #30]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1ea      	bne.n	8006282 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	372c      	adds	r7, #44	; 0x2c
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d12c      	bne.n	8006330 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	db12      	blt.n	800630e <USB_EPSetStall+0x54>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00f      	beq.n	800630e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800630c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e02b      	b.n	8006388 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	db12      	blt.n	8006368 <USB_EPSetStall+0xae>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00f      	beq.n	8006368 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006366:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d128      	bne.n	8006404 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	78db      	ldrb	r3, [r3, #3]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d003      	beq.n	80063e2 <USB_EPClearStall+0x4c>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	78db      	ldrb	r3, [r3, #3]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d138      	bne.n	8006454 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e027      	b.n	8006454 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800641e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006422:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	78db      	ldrb	r3, [r3, #3]
 8006428:	2b03      	cmp	r3, #3
 800642a:	d003      	beq.n	8006434 <USB_EPClearStall+0x9e>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	78db      	ldrb	r3, [r3, #3]
 8006430:	2b02      	cmp	r3, #2
 8006432:	d10f      	bne.n	8006454 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006452:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006480:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006484:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006496:	68f9      	ldr	r1, [r7, #12]
 8006498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800649c:	4313      	orrs	r3, r2
 800649e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064c8:	f023 0303 	bic.w	r3, r3, #3
 80064cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064dc:	f023 0302 	bic.w	r3, r3, #2
 80064e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800651e:	f043 0302 	orr.w	r3, r3, #2
 8006522:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4013      	ands	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800654a:	68fb      	ldr	r3, [r7, #12]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	4013      	ands	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	0c1b      	lsrs	r3, r3, #16
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	4013      	ands	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	b29b      	uxth	r3, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065ee:	68bb      	ldr	r3, [r7, #8]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	01db      	lsls	r3, r3, #7
 800662e:	b2db      	uxtb	r3, r3
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4013      	ands	r3, r2
 8006648:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800664a:	68bb      	ldr	r3, [r7, #8]
}
 800664c:	4618      	mov	r0, r3
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0301 	and.w	r3, r3, #1
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	460b      	mov	r3, r1
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	333c      	adds	r3, #60	; 0x3c
 80066d2:	3304      	adds	r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4a26      	ldr	r2, [pc, #152]	; (8006774 <USB_EP0_OutStart+0xb8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d90a      	bls.n	80066f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f0:	d101      	bne.n	80066f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	e037      	b.n	8006766 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	461a      	mov	r2, r3
 80066fe:	2300      	movs	r3, #0
 8006700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006724:	f043 0318 	orr.w	r3, r3, #24
 8006728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006738:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800673c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800673e:	7afb      	ldrb	r3, [r7, #11]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d10f      	bne.n	8006764 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	4f54300a 	.word	0x4f54300a

08006778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <USB_CoreReset+0x60>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d901      	bls.n	8006794 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e01a      	b.n	80067ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	daf3      	bge.n	8006784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f043 0201 	orr.w	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <USB_CoreReset+0x60>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e006      	b.n	80067ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d0f1      	beq.n	80067ac <USB_CoreReset+0x34>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	00030d40 	.word	0x00030d40

080067dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80067ec:	f002 f96a 	bl	8008ac4 <USBD_static_malloc>
 80067f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006800:	2302      	movs	r3, #2
 8006802:	e066      	b.n	80068d2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7c1b      	ldrb	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d119      	bne.n	8006848 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006818:	2202      	movs	r2, #2
 800681a:	2181      	movs	r1, #129	; 0x81
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f002 f82e 	bl	800887e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800682c:	2202      	movs	r2, #2
 800682e:	2101      	movs	r1, #1
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f002 f824 	bl	800887e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2210      	movs	r2, #16
 8006842:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006846:	e016      	b.n	8006876 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	2202      	movs	r2, #2
 800684c:	2181      	movs	r1, #129	; 0x81
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f002 f815 	bl	800887e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800685a:	2340      	movs	r3, #64	; 0x40
 800685c:	2202      	movs	r2, #2
 800685e:	2101      	movs	r1, #1
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f002 f80c 	bl	800887e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2210      	movs	r2, #16
 8006872:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006876:	2308      	movs	r3, #8
 8006878:	2203      	movs	r2, #3
 800687a:	2182      	movs	r1, #130	; 0x82
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 fffe 	bl	800887e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	7c1b      	ldrb	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b6:	2101      	movs	r1, #1
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f002 f8cf 	bl	8008a5c <USBD_LL_PrepareReceive>
 80068be:	e007      	b.n	80068d0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068c6:	2340      	movs	r3, #64	; 0x40
 80068c8:	2101      	movs	r1, #1
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f002 f8c6 	bl	8008a5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	460b      	mov	r3, r1
 80068e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068e6:	2181      	movs	r1, #129	; 0x81
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 ffee 	bl	80088ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068f4:	2101      	movs	r1, #1
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 ffe7 	bl	80088ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006904:	2182      	movs	r1, #130	; 0x82
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 ffdf 	bl	80088ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00e      	beq.n	8006944 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006936:	4618      	mov	r0, r3
 8006938:	f002 f8d2 	bl	8008ae0 <USBD_static_free>
    pdev->pClassData = NULL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006960:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006974:	2303      	movs	r3, #3
 8006976:	e0af      	b.n	8006ad8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006980:	2b00      	cmp	r3, #0
 8006982:	d03f      	beq.n	8006a04 <USBD_CDC_Setup+0xb4>
 8006984:	2b20      	cmp	r3, #32
 8006986:	f040 809f 	bne.w	8006ac8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d02e      	beq.n	80069f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b25b      	sxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	da16      	bge.n	80069ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80069a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	88d2      	ldrh	r2, [r2, #6]
 80069ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	88db      	ldrh	r3, [r3, #6]
 80069b4:	2b07      	cmp	r3, #7
 80069b6:	bf28      	it	cs
 80069b8:	2307      	movcs	r3, #7
 80069ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	89fa      	ldrh	r2, [r7, #14]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fb19 	bl	8007ffa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80069c8:	e085      	b.n	8006ad6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	785a      	ldrb	r2, [r3, #1]
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	88db      	ldrh	r3, [r3, #6]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80069e0:	6939      	ldr	r1, [r7, #16]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	88db      	ldrh	r3, [r3, #6]
 80069e6:	461a      	mov	r2, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fb32 	bl	8008052 <USBD_CtlPrepareRx>
      break;
 80069ee:	e072      	b.n	8006ad6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	7850      	ldrb	r0, [r2, #1]
 80069fc:	2200      	movs	r2, #0
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	4798      	blx	r3
      break;
 8006a02:	e068      	b.n	8006ad6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b0b      	cmp	r3, #11
 8006a0a:	d852      	bhi.n	8006ab2 <USBD_CDC_Setup+0x162>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <USBD_CDC_Setup+0xc4>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a45 	.word	0x08006a45
 8006a18:	08006ac1 	.word	0x08006ac1
 8006a1c:	08006ab3 	.word	0x08006ab3
 8006a20:	08006ab3 	.word	0x08006ab3
 8006a24:	08006ab3 	.word	0x08006ab3
 8006a28:	08006ab3 	.word	0x08006ab3
 8006a2c:	08006ab3 	.word	0x08006ab3
 8006a30:	08006ab3 	.word	0x08006ab3
 8006a34:	08006ab3 	.word	0x08006ab3
 8006a38:	08006ab3 	.word	0x08006ab3
 8006a3c:	08006a6f 	.word	0x08006a6f
 8006a40:	08006a99 	.word	0x08006a99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d107      	bne.n	8006a60 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a50:	f107 030a 	add.w	r3, r7, #10
 8006a54:	2202      	movs	r2, #2
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 face 	bl	8007ffa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a5e:	e032      	b.n	8006ac6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 fa58 	bl	8007f18 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6c:	e02b      	b.n	8006ac6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d107      	bne.n	8006a8a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a7a:	f107 030d 	add.w	r3, r7, #13
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 fab9 	bl	8007ffa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a88:	e01d      	b.n	8006ac6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 fa43 	bl	8007f18 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a92:	2303      	movs	r3, #3
 8006a94:	75fb      	strb	r3, [r7, #23]
          break;
 8006a96:	e016      	b.n	8006ac6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d00f      	beq.n	8006ac4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fa36 	bl	8007f18 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aac:	2303      	movs	r3, #3
 8006aae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ab0:	e008      	b.n	8006ac4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fa2f 	bl	8007f18 <USBD_CtlError>
          ret = USBD_FAIL;
 8006aba:	2303      	movs	r3, #3
 8006abc:	75fb      	strb	r3, [r7, #23]
          break;
 8006abe:	e002      	b.n	8006ac6 <USBD_CDC_Setup+0x176>
          break;
 8006ac0:	bf00      	nop
 8006ac2:	e008      	b.n	8006ad6 <USBD_CDC_Setup+0x186>
          break;
 8006ac4:	bf00      	nop
      }
      break;
 8006ac6:	e006      	b.n	8006ad6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fa24 	bl	8007f18 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006af2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e04f      	b.n	8006ba2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	3318      	adds	r3, #24
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d029      	beq.n	8006b74 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3318      	adds	r3, #24
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	78f9      	ldrb	r1, [r7, #3]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	460b      	mov	r3, r1
 8006b38:	00db      	lsls	r3, r3, #3
 8006b3a:	1a5b      	subs	r3, r3, r1
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4403      	add	r3, r0
 8006b40:	3344      	adds	r3, #68	; 0x44
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d110      	bne.n	8006b74 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006b52:	78fa      	ldrb	r2, [r7, #3]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	3318      	adds	r3, #24
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b66:	78f9      	ldrb	r1, [r7, #3]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 ff54 	bl	8008a1a <USBD_LL_Transmit>
 8006b72:	e015      	b.n	8006ba0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00b      	beq.n	8006ba0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b9c:	78fa      	ldrb	r2, [r7, #3]
 8006b9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e015      	b.n	8006bf8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 ff64 	bl	8008a9e <USBD_LL_GetRxDataSize>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e01b      	b.n	8006c52 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d015      	beq.n	8006c50 <USBD_CDC_EP0_RxReady+0x50>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c2a:	2bff      	cmp	r3, #255	; 0xff
 8006c2c:	d010      	beq.n	8006c50 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c3c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c44:	b292      	uxth	r2, r2
 8006c46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	22ff      	movs	r2, #255	; 0xff
 8006c4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2243      	movs	r2, #67	; 0x43
 8006c68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006c6a:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	200000bc 	.word	0x200000bc

08006c7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2243      	movs	r2, #67	; 0x43
 8006c88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006c8a:	4b03      	ldr	r3, [pc, #12]	; (8006c98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000078 	.word	0x20000078

08006c9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2243      	movs	r2, #67	; 0x43
 8006ca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006caa:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000100 	.word	0x20000100

08006cbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	220a      	movs	r2, #10
 8006cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006cca:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	20000034 	.word	0x20000034

08006cdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e004      	b.n	8006cfa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b087      	sub	sp, #28
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d18:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e008      	b.n	8006d36 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e004      	b.n	8006d68 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e01a      	b.n	8006dcc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d114      	bne.n	8006dca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dbe:	2181      	movs	r1, #129	; 0x81
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fe2a 	bl	8008a1a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e016      	b.n	8006e20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7c1b      	ldrb	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e04:	2101      	movs	r1, #1
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fe28 	bl	8008a5c <USBD_LL_PrepareReceive>
 8006e0c:	e007      	b.n	8006e1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	2101      	movs	r1, #1
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fe1f 	bl	8008a5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e01f      	b.n	8006e80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	79fa      	ldrb	r2, [r7, #7]
 8006e72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f001 fc9b 	bl	80087b0 <USBD_LL_Init>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e016      	b.n	8006ece <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	f107 020e 	add.w	r2, r7, #14
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fcb2 	bl	8008848 <USBD_LL_Start>
 8006ee4:	4603      	mov	r3, r0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d009      	beq.n	8006f32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
  }

  return USBD_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 ff90 	bl	8007ea4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d01a      	beq.n	8006fde <USBD_LL_SetupStage+0x72>
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d822      	bhi.n	8006ff2 <USBD_LL_SetupStage+0x86>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <USBD_LL_SetupStage+0x4a>
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d00a      	beq.n	8006fca <USBD_LL_SetupStage+0x5e>
 8006fb4:	e01d      	b.n	8006ff2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa62 	bl	8007488 <USBD_StdDevReq>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e020      	b.n	800700c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fac6 	bl	8007564 <USBD_StdItfReq>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	e016      	b.n	800700c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fb05 	bl	80075f6 <USBD_StdEPReq>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff0:	e00c      	b.n	800700c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 fc81 	bl	8008908 <USBD_LL_StallEP>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
      break;
 800700a:	bf00      	nop
  }

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	460b      	mov	r3, r1
 8007020:	607a      	str	r2, [r7, #4]
 8007022:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007024:	7afb      	ldrb	r3, [r7, #11]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d138      	bne.n	800709c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007030:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007038:	2b03      	cmp	r3, #3
 800703a:	d14a      	bne.n	80070d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	429a      	cmp	r2, r3
 8007046:	d913      	bls.n	8007070 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	1ad2      	subs	r2, r2, r3
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	4293      	cmp	r3, r2
 8007060:	bf28      	it	cs
 8007062:	4613      	movcs	r3, r2
 8007064:	461a      	mov	r2, r3
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f001 f80f 	bl	800808c <USBD_CtlContinueRx>
 800706e:	e030      	b.n	80070d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b03      	cmp	r3, #3
 800707a:	d10b      	bne.n	8007094 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f001 f80a 	bl	80080ae <USBD_CtlSendStatus>
 800709a:	e01a      	b.n	80070d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d114      	bne.n	80070d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00e      	beq.n	80070d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	7afa      	ldrb	r2, [r7, #11]
 80070be:	4611      	mov	r1, r2
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	4798      	blx	r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	e000      	b.n	80070d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	460b      	mov	r3, r1
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d16b      	bne.n	80071c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3314      	adds	r3, #20
 80070f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d156      	bne.n	80071ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	429a      	cmp	r2, r3
 800710a:	d914      	bls.n	8007136 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	461a      	mov	r2, r3
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 ff84 	bl	8008030 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007128:	2300      	movs	r3, #0
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 fc94 	bl	8008a5c <USBD_LL_PrepareReceive>
 8007134:	e03b      	b.n	80071ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d11c      	bne.n	800717c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800714a:	429a      	cmp	r2, r3
 800714c:	d316      	bcc.n	800717c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007158:	429a      	cmp	r2, r3
 800715a:	d20f      	bcs.n	800717c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800715c:	2200      	movs	r2, #0
 800715e:	2100      	movs	r1, #0
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 ff65 	bl	8008030 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	2100      	movs	r1, #0
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f001 fc71 	bl	8008a5c <USBD_LL_PrepareReceive>
 800717a:	e018      	b.n	80071ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b03      	cmp	r3, #3
 8007186:	d10b      	bne.n	80071a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071a0:	2180      	movs	r1, #128	; 0x80
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f001 fbb0 	bl	8008908 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 ff93 	bl	80080d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d122      	bne.n	80071fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fe98 	bl	8006eee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071c6:	e01a      	b.n	80071fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d114      	bne.n	80071fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00e      	beq.n	80071fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	7afa      	ldrb	r2, [r7, #11]
 80071ea:	4611      	mov	r1, r2
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	4798      	blx	r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	e000      	b.n	8007200 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	e02f      	b.n	800729c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6852      	ldr	r2, [r2, #4]
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	4611      	mov	r1, r2
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007266:	2340      	movs	r3, #64	; 0x40
 8007268:	2200      	movs	r2, #0
 800726a:	2100      	movs	r1, #0
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 fb06 	bl	800887e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2240      	movs	r2, #64	; 0x40
 800727e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007282:	2340      	movs	r3, #64	; 0x40
 8007284:	2200      	movs	r2, #0
 8007286:	2180      	movs	r1, #128	; 0x80
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 faf8 	bl	800887e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2240      	movs	r2, #64	; 0x40
 8007298:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2204      	movs	r2, #4
 80072de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b04      	cmp	r3, #4
 8007302:	d106      	bne.n	8007312 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800730a:	b2da      	uxtb	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007332:	2303      	movs	r3, #3
 8007334:	e012      	b.n	800735c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b03      	cmp	r3, #3
 8007340:	d10b      	bne.n	800735a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800737a:	2303      	movs	r3, #3
 800737c:	e014      	b.n	80073a8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b03      	cmp	r3, #3
 8007388:	d10d      	bne.n	80073a6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	4611      	mov	r1, r2
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e014      	b.n	80073f4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d10d      	bne.n	80073f2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	4611      	mov	r1, r2
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6852      	ldr	r2, [r2, #4]
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	4611      	mov	r1, r2
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4798      	blx	r3
  }

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800744a:	b480      	push	{r7}
 800744c:	b087      	sub	sp, #28
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	3301      	adds	r3, #1
 8007460:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007468:	8a3b      	ldrh	r3, [r7, #16]
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	b21a      	sxth	r2, r3
 800746e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007472:	4313      	orrs	r3, r2
 8007474:	b21b      	sxth	r3, r3
 8007476:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007478:	89fb      	ldrh	r3, [r7, #14]
}
 800747a:	4618      	mov	r0, r3
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d005      	beq.n	80074ae <USBD_StdDevReq+0x26>
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d853      	bhi.n	800754e <USBD_StdDevReq+0xc6>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <USBD_StdDevReq+0x3a>
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d14f      	bne.n	800754e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e04a      	b.n	8007558 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d83b      	bhi.n	8007542 <USBD_StdDevReq+0xba>
 80074ca:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <USBD_StdDevReq+0x48>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	08007525 	.word	0x08007525
 80074d4:	08007539 	.word	0x08007539
 80074d8:	08007543 	.word	0x08007543
 80074dc:	0800752f 	.word	0x0800752f
 80074e0:	08007543 	.word	0x08007543
 80074e4:	08007503 	.word	0x08007503
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	08007543 	.word	0x08007543
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800750d 	.word	0x0800750d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9de 	bl	80078bc <USBD_GetDescriptor>
          break;
 8007500:	e024      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fb43 	bl	8007b90 <USBD_SetAddress>
          break;
 800750a:	e01f      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fb82 	bl	8007c18 <USBD_SetConfig>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
          break;
 8007518:	e018      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc21 	bl	8007d64 <USBD_GetConfig>
          break;
 8007522:	e013      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fc52 	bl	8007dd0 <USBD_GetStatus>
          break;
 800752c:	e00e      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fc81 	bl	8007e38 <USBD_SetFeature>
          break;
 8007536:	e009      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fc90 	bl	8007e60 <USBD_ClrFeature>
          break;
 8007540:	e004      	b.n	800754c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fce7 	bl	8007f18 <USBD_CtlError>
          break;
 800754a:	bf00      	nop
      }
      break;
 800754c:	e004      	b.n	8007558 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fce1 	bl	8007f18 <USBD_CtlError>
      break;
 8007556:	bf00      	nop
  }

  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d005      	beq.n	800758a <USBD_StdItfReq+0x26>
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	d82f      	bhi.n	80075e2 <USBD_StdItfReq+0x7e>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <USBD_StdItfReq+0x26>
 8007586:	2b20      	cmp	r3, #32
 8007588:	d12b      	bne.n	80075e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	2b02      	cmp	r3, #2
 8007596:	d81d      	bhi.n	80075d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	889b      	ldrh	r3, [r3, #4]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d813      	bhi.n	80075ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	88db      	ldrh	r3, [r3, #6]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d110      	bne.n	80075de <USBD_StdItfReq+0x7a>
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10d      	bne.n	80075de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fd73 	bl	80080ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075c8:	e009      	b.n	80075de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fca3 	bl	8007f18 <USBD_CtlError>
          break;
 80075d2:	e004      	b.n	80075de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fc9e 	bl	8007f18 <USBD_CtlError>
          break;
 80075dc:	e000      	b.n	80075e0 <USBD_StdItfReq+0x7c>
          break;
 80075de:	bf00      	nop
      }
      break;
 80075e0:	e004      	b.n	80075ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fc97 	bl	8007f18 <USBD_CtlError>
      break;
 80075ea:	bf00      	nop
  }

  return ret;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	889b      	ldrh	r3, [r3, #4]
 8007608:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007612:	2b40      	cmp	r3, #64	; 0x40
 8007614:	d007      	beq.n	8007626 <USBD_StdEPReq+0x30>
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	f200 8145 	bhi.w	80078a6 <USBD_StdEPReq+0x2b0>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00c      	beq.n	800763a <USBD_StdEPReq+0x44>
 8007620:	2b20      	cmp	r3, #32
 8007622:	f040 8140 	bne.w	80078a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
      break;
 8007638:	e13a      	b.n	80078b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d007      	beq.n	8007652 <USBD_StdEPReq+0x5c>
 8007642:	2b03      	cmp	r3, #3
 8007644:	f300 8129 	bgt.w	800789a <USBD_StdEPReq+0x2a4>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d07f      	beq.n	800774c <USBD_StdEPReq+0x156>
 800764c:	2b01      	cmp	r3, #1
 800764e:	d03c      	beq.n	80076ca <USBD_StdEPReq+0xd4>
 8007650:	e123      	b.n	800789a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d002      	beq.n	8007664 <USBD_StdEPReq+0x6e>
 800765e:	2b03      	cmp	r3, #3
 8007660:	d016      	beq.n	8007690 <USBD_StdEPReq+0x9a>
 8007662:	e02c      	b.n	80076be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00d      	beq.n	8007686 <USBD_StdEPReq+0x90>
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b80      	cmp	r3, #128	; 0x80
 800766e:	d00a      	beq.n	8007686 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 f947 	bl	8008908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800767a:	2180      	movs	r1, #128	; 0x80
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 f943 	bl	8008908 <USBD_LL_StallEP>
 8007682:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007684:	e020      	b.n	80076c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc45 	bl	8007f18 <USBD_CtlError>
              break;
 800768e:	e01b      	b.n	80076c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	885b      	ldrh	r3, [r3, #2]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10e      	bne.n	80076b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <USBD_StdEPReq+0xc0>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d008      	beq.n	80076b6 <USBD_StdEPReq+0xc0>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	88db      	ldrh	r3, [r3, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f929 	bl	8008908 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fcf9 	bl	80080ae <USBD_CtlSendStatus>

              break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fc29 	bl	8007f18 <USBD_CtlError>
              break;
 80076c6:	bf00      	nop
          }
          break;
 80076c8:	e0ec      	b.n	80078a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d002      	beq.n	80076dc <USBD_StdEPReq+0xe6>
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d016      	beq.n	8007708 <USBD_StdEPReq+0x112>
 80076da:	e030      	b.n	800773e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <USBD_StdEPReq+0x108>
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	2b80      	cmp	r3, #128	; 0x80
 80076e6:	d00a      	beq.n	80076fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f90b 	bl	8008908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f2:	2180      	movs	r1, #128	; 0x80
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 f907 	bl	8008908 <USBD_LL_StallEP>
 80076fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076fc:	e025      	b.n	800774a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc09 	bl	8007f18 <USBD_CtlError>
              break;
 8007706:	e020      	b.n	800774a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	885b      	ldrh	r3, [r3, #2]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d11b      	bne.n	8007748 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 f911 	bl	8008946 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fcc2 	bl	80080ae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800773c:	e004      	b.n	8007748 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fbe9 	bl	8007f18 <USBD_CtlError>
              break;
 8007746:	e000      	b.n	800774a <USBD_StdEPReq+0x154>
              break;
 8007748:	bf00      	nop
          }
          break;
 800774a:	e0ab      	b.n	80078a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d002      	beq.n	800775e <USBD_StdEPReq+0x168>
 8007758:	2b03      	cmp	r3, #3
 800775a:	d032      	beq.n	80077c2 <USBD_StdEPReq+0x1cc>
 800775c:	e097      	b.n	800788e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <USBD_StdEPReq+0x17e>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d004      	beq.n	8007774 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fbd3 	bl	8007f18 <USBD_CtlError>
                break;
 8007772:	e091      	b.n	8007898 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	da0b      	bge.n	8007794 <USBD_StdEPReq+0x19e>
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	3310      	adds	r3, #16
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	3304      	adds	r3, #4
 8007792:	e00b      	b.n	80077ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	4413      	add	r3, r2
 80077aa:	3304      	adds	r3, #4
 80077ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2202      	movs	r2, #2
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fc1d 	bl	8007ffa <USBD_CtlSendData>
              break;
 80077c0:	e06a      	b.n	8007898 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da11      	bge.n	80077ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	f003 020f 	and.w	r2, r3, #15
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	3324      	adds	r3, #36	; 0x24
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d117      	bne.n	8007814 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb96 	bl	8007f18 <USBD_CtlError>
                  break;
 80077ec:	e054      	b.n	8007898 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	f003 020f 	and.w	r2, r3, #15
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fb83 	bl	8007f18 <USBD_CtlError>
                  break;
 8007812:	e041      	b.n	8007898 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	da0b      	bge.n	8007834 <USBD_StdEPReq+0x23e>
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	3310      	adds	r3, #16
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	3304      	adds	r3, #4
 8007832:	e00b      	b.n	800784c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	3304      	adds	r3, #4
 800784c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <USBD_StdEPReq+0x264>
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d103      	bne.n	8007862 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e00e      	b.n	8007880 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 f88c 	bl	8008984 <USBD_LL_IsStallEP>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2201      	movs	r2, #1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e002      	b.n	8007880 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2202      	movs	r2, #2
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fbb7 	bl	8007ffa <USBD_CtlSendData>
              break;
 800788c:	e004      	b.n	8007898 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb41 	bl	8007f18 <USBD_CtlError>
              break;
 8007896:	bf00      	nop
          }
          break;
 8007898:	e004      	b.n	80078a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fb3b 	bl	8007f18 <USBD_CtlError>
          break;
 80078a2:	bf00      	nop
      }
      break;
 80078a4:	e004      	b.n	80078b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fb35 	bl	8007f18 <USBD_CtlError>
      break;
 80078ae:	bf00      	nop
  }

  return ret;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	885b      	ldrh	r3, [r3, #2]
 80078d6:	0a1b      	lsrs	r3, r3, #8
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	2b06      	cmp	r3, #6
 80078de:	f200 8128 	bhi.w	8007b32 <USBD_GetDescriptor+0x276>
 80078e2:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <USBD_GetDescriptor+0x2c>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	08007905 	.word	0x08007905
 80078ec:	0800791d 	.word	0x0800791d
 80078f0:	0800795d 	.word	0x0800795d
 80078f4:	08007b33 	.word	0x08007b33
 80078f8:	08007b33 	.word	0x08007b33
 80078fc:	08007ad3 	.word	0x08007ad3
 8007900:	08007aff 	.word	0x08007aff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	7c12      	ldrb	r2, [r2, #16]
 8007910:	f107 0108 	add.w	r1, r7, #8
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	60f8      	str	r0, [r7, #12]
      break;
 800791a:	e112      	b.n	8007b42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7c1b      	ldrb	r3, [r3, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10d      	bne.n	8007940 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792c:	f107 0208 	add.w	r2, r7, #8
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	2202      	movs	r2, #2
 800793c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800793e:	e100      	b.n	8007b42 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	f107 0208 	add.w	r2, r7, #8
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
 8007950:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3301      	adds	r3, #1
 8007956:	2202      	movs	r2, #2
 8007958:	701a      	strb	r2, [r3, #0]
      break;
 800795a:	e0f2      	b.n	8007b42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	885b      	ldrh	r3, [r3, #2]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b05      	cmp	r3, #5
 8007964:	f200 80ac 	bhi.w	8007ac0 <USBD_GetDescriptor+0x204>
 8007968:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <USBD_GetDescriptor+0xb4>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	08007989 	.word	0x08007989
 8007974:	080079bd 	.word	0x080079bd
 8007978:	080079f1 	.word	0x080079f1
 800797c:	08007a25 	.word	0x08007a25
 8007980:	08007a59 	.word	0x08007a59
 8007984:	08007a8d 	.word	0x08007a8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7c12      	ldrb	r2, [r2, #16]
 80079a0:	f107 0108 	add.w	r1, r7, #8
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079aa:	e091      	b.n	8007ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fab2 	bl	8007f18 <USBD_CtlError>
            err++;
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	3301      	adds	r3, #1
 80079b8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ba:	e089      	b.n	8007ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	7c12      	ldrb	r2, [r2, #16]
 80079d4:	f107 0108 	add.w	r1, r7, #8
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079de:	e077      	b.n	8007ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa98 	bl	8007f18 <USBD_CtlError>
            err++;
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	3301      	adds	r3, #1
 80079ec:	72fb      	strb	r3, [r7, #11]
          break;
 80079ee:	e06f      	b.n	8007ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a12:	e05d      	b.n	8007ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa7e 	bl	8007f18 <USBD_CtlError>
            err++;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	72fb      	strb	r3, [r7, #11]
          break;
 8007a22:	e055      	b.n	8007ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	f107 0108 	add.w	r1, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a46:	e043      	b.n	8007ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa64 	bl	8007f18 <USBD_CtlError>
            err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
          break;
 8007a56:	e03b      	b.n	8007ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	7c12      	ldrb	r2, [r2, #16]
 8007a70:	f107 0108 	add.w	r1, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7a:	e029      	b.n	8007ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa4a 	bl	8007f18 <USBD_CtlError>
            err++;
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	3301      	adds	r3, #1
 8007a88:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8a:	e021      	b.n	8007ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aae:	e00f      	b.n	8007ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa30 	bl	8007f18 <USBD_CtlError>
            err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
          break;
 8007abe:	e007      	b.n	8007ad0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa28 	bl	8007f18 <USBD_CtlError>
          err++;
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	3301      	adds	r3, #1
 8007acc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007ace:	bf00      	nop
      }
      break;
 8007ad0:	e037      	b.n	8007b42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7c1b      	ldrb	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae2:	f107 0208 	add.w	r2, r7, #8
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4798      	blx	r3
 8007aea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aec:	e029      	b.n	8007b42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa11 	bl	8007f18 <USBD_CtlError>
        err++;
 8007af6:	7afb      	ldrb	r3, [r7, #11]
 8007af8:	3301      	adds	r3, #1
 8007afa:	72fb      	strb	r3, [r7, #11]
      break;
 8007afc:	e021      	b.n	8007b42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	7c1b      	ldrb	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10d      	bne.n	8007b22 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	f107 0208 	add.w	r2, r7, #8
 8007b12:	4610      	mov	r0, r2
 8007b14:	4798      	blx	r3
 8007b16:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	2207      	movs	r2, #7
 8007b1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b20:	e00f      	b.n	8007b42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9f7 	bl	8007f18 <USBD_CtlError>
        err++;
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b30:	e007      	b.n	8007b42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9ef 	bl	8007f18 <USBD_CtlError>
      err++;
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b40:	bf00      	nop
  }

  if (err != 0U)
 8007b42:	7afb      	ldrb	r3, [r7, #11]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d11e      	bne.n	8007b86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	88db      	ldrh	r3, [r3, #6]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d016      	beq.n	8007b7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b50:	893b      	ldrh	r3, [r7, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00e      	beq.n	8007b74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	88da      	ldrh	r2, [r3, #6]
 8007b5a:	893b      	ldrh	r3, [r7, #8]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bf28      	it	cs
 8007b60:	4613      	movcs	r3, r2
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b66:	893b      	ldrh	r3, [r7, #8]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa44 	bl	8007ffa <USBD_CtlSendData>
 8007b72:	e009      	b.n	8007b88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f9ce 	bl	8007f18 <USBD_CtlError>
 8007b7c:	e004      	b.n	8007b88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa95 	bl	80080ae <USBD_CtlSendStatus>
 8007b84:	e000      	b.n	8007b88 <USBD_GetDescriptor+0x2cc>
    return;
 8007b86:	bf00      	nop
  }
}
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop

08007b90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	889b      	ldrh	r3, [r3, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d131      	bne.n	8007c06 <USBD_SetAddress+0x76>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	88db      	ldrh	r3, [r3, #6]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d12d      	bne.n	8007c06 <USBD_SetAddress+0x76>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	2b7f      	cmp	r3, #127	; 0x7f
 8007bb0:	d829      	bhi.n	8007c06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	885b      	ldrh	r3, [r3, #2]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d104      	bne.n	8007bd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f9a3 	bl	8007f18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd2:	e01d      	b.n	8007c10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7bfa      	ldrb	r2, [r7, #15]
 8007bd8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fefb 	bl	80089dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fa61 	bl	80080ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfa:	e009      	b.n	8007c10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c04:	e004      	b.n	8007c10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f985 	bl	8007f18 <USBD_CtlError>
  }
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	4b4c      	ldr	r3, [pc, #304]	; (8007d60 <USBD_SetConfig+0x148>)
 8007c2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c30:	4b4b      	ldr	r3, [pc, #300]	; (8007d60 <USBD_SetConfig+0x148>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d905      	bls.n	8007c44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f96c 	bl	8007f18 <USBD_CtlError>
    return USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e088      	b.n	8007d56 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d002      	beq.n	8007c56 <USBD_SetConfig+0x3e>
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d025      	beq.n	8007ca0 <USBD_SetConfig+0x88>
 8007c54:	e071      	b.n	8007d3a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c56:	4b42      	ldr	r3, [pc, #264]	; (8007d60 <USBD_SetConfig+0x148>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01c      	beq.n	8007c98 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007c5e:	4b40      	ldr	r3, [pc, #256]	; (8007d60 <USBD_SetConfig+0x148>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c68:	4b3d      	ldr	r3, [pc, #244]	; (8007d60 <USBD_SetConfig+0x148>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff f948 	bl	8006f04 <USBD_SetClassConfig>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f949 	bl	8007f18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c86:	e065      	b.n	8007d54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa10 	bl	80080ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2203      	movs	r2, #3
 8007c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c96:	e05d      	b.n	8007d54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fa08 	bl	80080ae <USBD_CtlSendStatus>
      break;
 8007c9e:	e059      	b.n	8007d54 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ca0:	4b2f      	ldr	r3, [pc, #188]	; (8007d60 <USBD_SetConfig+0x148>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d112      	bne.n	8007cce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007cb0:	4b2b      	ldr	r3, [pc, #172]	; (8007d60 <USBD_SetConfig+0x148>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cba:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <USBD_SetConfig+0x148>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff f93b 	bl	8006f3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f9f1 	bl	80080ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ccc:	e042      	b.n	8007d54 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007cce:	4b24      	ldr	r3, [pc, #144]	; (8007d60 <USBD_SetConfig+0x148>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d02a      	beq.n	8007d32 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff f929 	bl	8006f3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007cea:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <USBD_SetConfig+0x148>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cf4:	4b1a      	ldr	r3, [pc, #104]	; (8007d60 <USBD_SetConfig+0x148>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff f902 	bl	8006f04 <USBD_SetClassConfig>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00f      	beq.n	8007d2a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f903 	bl	8007f18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff f90e 	bl	8006f3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d28:	e014      	b.n	8007d54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9bf 	bl	80080ae <USBD_CtlSendStatus>
      break;
 8007d30:	e010      	b.n	8007d54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f9bb 	bl	80080ae <USBD_CtlSendStatus>
      break;
 8007d38:	e00c      	b.n	8007d54 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f8eb 	bl	8007f18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d42:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <USBD_SetConfig+0x148>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff f8f7 	bl	8006f3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	73fb      	strb	r3, [r7, #15]
      break;
 8007d52:	bf00      	nop
  }

  return ret;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000458 	.word	0x20000458

08007d64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	88db      	ldrh	r3, [r3, #6]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d004      	beq.n	8007d80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8cd 	bl	8007f18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d7e:	e023      	b.n	8007dc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	dc02      	bgt.n	8007d92 <USBD_GetConfig+0x2e>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dc03      	bgt.n	8007d98 <USBD_GetConfig+0x34>
 8007d90:	e015      	b.n	8007dbe <USBD_GetConfig+0x5a>
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d00b      	beq.n	8007dae <USBD_GetConfig+0x4a>
 8007d96:	e012      	b.n	8007dbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3308      	adds	r3, #8
 8007da2:	2201      	movs	r2, #1
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f927 	bl	8007ffa <USBD_CtlSendData>
        break;
 8007dac:	e00c      	b.n	8007dc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	2201      	movs	r2, #1
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f91f 	bl	8007ffa <USBD_CtlSendData>
        break;
 8007dbc:	e004      	b.n	8007dc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f8a9 	bl	8007f18 <USBD_CtlError>
        break;
 8007dc6:	bf00      	nop
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	3b01      	subs	r3, #1
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d81e      	bhi.n	8007e26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	88db      	ldrh	r3, [r3, #6]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d004      	beq.n	8007dfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f890 	bl	8007f18 <USBD_CtlError>
        break;
 8007df8:	e01a      	b.n	8007e30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f043 0202 	orr.w	r2, r3, #2
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	330c      	adds	r3, #12
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f8eb 	bl	8007ffa <USBD_CtlSendData>
      break;
 8007e24:	e004      	b.n	8007e30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f875 	bl	8007f18 <USBD_CtlError>
      break;
 8007e2e:	bf00      	nop
  }
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	885b      	ldrh	r3, [r3, #2]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d106      	bne.n	8007e58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f92b 	bl	80080ae <USBD_CtlSendStatus>
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	3b01      	subs	r3, #1
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d80b      	bhi.n	8007e90 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	885b      	ldrh	r3, [r3, #2]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d10c      	bne.n	8007e9a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f910 	bl	80080ae <USBD_CtlSendStatus>
      }
      break;
 8007e8e:	e004      	b.n	8007e9a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f840 	bl	8007f18 <USBD_CtlError>
      break;
 8007e98:	e000      	b.n	8007e9c <USBD_ClrFeature+0x3c>
      break;
 8007e9a:	bf00      	nop
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	781a      	ldrb	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	781a      	ldrb	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f7ff fabb 	bl	800744a <SWAPBYTE>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff faae 	bl	800744a <SWAPBYTE>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7ff faa1 	bl	800744a <SWAPBYTE>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	80da      	strh	r2, [r3, #6]
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f22:	2180      	movs	r1, #128	; 0x80
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fcef 	bl	8008908 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fceb 	bl	8008908 <USBD_LL_StallEP>
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b086      	sub	sp, #24
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d036      	beq.n	8007fbe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f54:	6938      	ldr	r0, [r7, #16]
 8007f56:	f000 f836 	bl	8007fc6 <USBD_GetLen>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	3301      	adds	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	4413      	add	r3, r2
 8007f80:	2203      	movs	r2, #3
 8007f82:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	3301      	adds	r3, #1
 8007f88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f8a:	e013      	b.n	8007fb4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4413      	add	r3, r2
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	7812      	ldrb	r2, [r2, #0]
 8007f96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	613b      	str	r3, [r7, #16]
    idx++;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	701a      	strb	r2, [r3, #0]
    idx++;
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e7      	bne.n	8007f8c <USBD_GetString+0x52>
 8007fbc:	e000      	b.n	8007fc0 <USBD_GetString+0x86>
    return;
 8007fbe:	bf00      	nop
  }
}
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007fd6:	e005      	b.n	8007fe4 <USBD_GetLen+0x1e>
  {
    len++;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f5      	bne.n	8007fd8 <USBD_GetLen+0x12>
  }

  return len;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2202      	movs	r2, #2
 800800a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	2100      	movs	r1, #0
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fcfa 	bl	8008a1a <USBD_LL_Transmit>

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	2100      	movs	r1, #0
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fce9 	bl	8008a1a <USBD_LL_Transmit>

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2203      	movs	r2, #3
 8008062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	2100      	movs	r1, #0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fced 	bl	8008a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	2100      	movs	r1, #0
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fcdc 	bl	8008a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2204      	movs	r2, #4
 80080ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080be:	2300      	movs	r3, #0
 80080c0:	2200      	movs	r2, #0
 80080c2:	2100      	movs	r1, #0
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fca8 	bl	8008a1a <USBD_LL_Transmit>

  return USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2205      	movs	r2, #5
 80080e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080e4:	2300      	movs	r3, #0
 80080e6:	2200      	movs	r2, #0
 80080e8:	2100      	movs	r1, #0
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fcb6 	bl	8008a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008100:	2200      	movs	r2, #0
 8008102:	4912      	ldr	r1, [pc, #72]	; (800814c <MX_USB_DEVICE_Init+0x50>)
 8008104:	4812      	ldr	r0, [pc, #72]	; (8008150 <MX_USB_DEVICE_Init+0x54>)
 8008106:	f7fe fe8f 	bl	8006e28 <USBD_Init>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008110:	f7f8 fda4 	bl	8000c5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008114:	490f      	ldr	r1, [pc, #60]	; (8008154 <MX_USB_DEVICE_Init+0x58>)
 8008116:	480e      	ldr	r0, [pc, #56]	; (8008150 <MX_USB_DEVICE_Init+0x54>)
 8008118:	f7fe feb6 	bl	8006e88 <USBD_RegisterClass>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008122:	f7f8 fd9b 	bl	8000c5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008126:	490c      	ldr	r1, [pc, #48]	; (8008158 <MX_USB_DEVICE_Init+0x5c>)
 8008128:	4809      	ldr	r0, [pc, #36]	; (8008150 <MX_USB_DEVICE_Init+0x54>)
 800812a:	f7fe fdd7 	bl	8006cdc <USBD_CDC_RegisterInterface>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008134:	f7f8 fd92 	bl	8000c5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008138:	4805      	ldr	r0, [pc, #20]	; (8008150 <MX_USB_DEVICE_Init+0x54>)
 800813a:	f7fe fecc 	bl	8006ed6 <USBD_Start>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008144:	f7f8 fd8a 	bl	8000c5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008148:	bf00      	nop
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20000158 	.word	0x20000158
 8008150:	2000045c 	.word	0x2000045c
 8008154:	20000040 	.word	0x20000040
 8008158:	20000144 	.word	0x20000144

0800815c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008160:	2200      	movs	r2, #0
 8008162:	4905      	ldr	r1, [pc, #20]	; (8008178 <CDC_Init_FS+0x1c>)
 8008164:	4805      	ldr	r0, [pc, #20]	; (800817c <CDC_Init_FS+0x20>)
 8008166:	f7fe fdce 	bl	8006d06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800816a:	4905      	ldr	r1, [pc, #20]	; (8008180 <CDC_Init_FS+0x24>)
 800816c:	4803      	ldr	r0, [pc, #12]	; (800817c <CDC_Init_FS+0x20>)
 800816e:	f7fe fde8 	bl	8006d42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008172:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008174:	4618      	mov	r0, r3
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000f2c 	.word	0x20000f2c
 800817c:	2000045c 	.word	0x2000045c
 8008180:	2000072c 	.word	0x2000072c

08008184 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008188:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800818a:	4618      	mov	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
 80081a0:	4613      	mov	r3, r2
 80081a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b23      	cmp	r3, #35	; 0x23
 80081a8:	d84a      	bhi.n	8008240 <CDC_Control_FS+0xac>
 80081aa:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <CDC_Control_FS+0x1c>)
 80081ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b0:	08008241 	.word	0x08008241
 80081b4:	08008241 	.word	0x08008241
 80081b8:	08008241 	.word	0x08008241
 80081bc:	08008241 	.word	0x08008241
 80081c0:	08008241 	.word	0x08008241
 80081c4:	08008241 	.word	0x08008241
 80081c8:	08008241 	.word	0x08008241
 80081cc:	08008241 	.word	0x08008241
 80081d0:	08008241 	.word	0x08008241
 80081d4:	08008241 	.word	0x08008241
 80081d8:	08008241 	.word	0x08008241
 80081dc:	08008241 	.word	0x08008241
 80081e0:	08008241 	.word	0x08008241
 80081e4:	08008241 	.word	0x08008241
 80081e8:	08008241 	.word	0x08008241
 80081ec:	08008241 	.word	0x08008241
 80081f0:	08008241 	.word	0x08008241
 80081f4:	08008241 	.word	0x08008241
 80081f8:	08008241 	.word	0x08008241
 80081fc:	08008241 	.word	0x08008241
 8008200:	08008241 	.word	0x08008241
 8008204:	08008241 	.word	0x08008241
 8008208:	08008241 	.word	0x08008241
 800820c:	08008241 	.word	0x08008241
 8008210:	08008241 	.word	0x08008241
 8008214:	08008241 	.word	0x08008241
 8008218:	08008241 	.word	0x08008241
 800821c:	08008241 	.word	0x08008241
 8008220:	08008241 	.word	0x08008241
 8008224:	08008241 	.word	0x08008241
 8008228:	08008241 	.word	0x08008241
 800822c:	08008241 	.word	0x08008241
 8008230:	08008241 	.word	0x08008241
 8008234:	08008241 	.word	0x08008241
 8008238:	08008241 	.word	0x08008241
 800823c:	08008241 	.word	0x08008241
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008240:	bf00      	nop
  }

  return (USBD_OK);
 8008242:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	4805      	ldr	r0, [pc, #20]	; (8008274 <CDC_Receive_FS+0x24>)
 800825e:	f7fe fd70 	bl	8006d42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008262:	4804      	ldr	r0, [pc, #16]	; (8008274 <CDC_Receive_FS+0x24>)
 8008264:	f7fe fdb6 	bl	8006dd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008268:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	2000045c 	.word	0x2000045c

08008278 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008288:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <CDC_Transmit_FS+0x48>)
 800828a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800828e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800829a:	2301      	movs	r3, #1
 800829c:	e00b      	b.n	80082b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800829e:	887b      	ldrh	r3, [r7, #2]
 80082a0:	461a      	mov	r2, r3
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4806      	ldr	r0, [pc, #24]	; (80082c0 <CDC_Transmit_FS+0x48>)
 80082a6:	f7fe fd2e 	bl	8006d06 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80082aa:	4805      	ldr	r0, [pc, #20]	; (80082c0 <CDC_Transmit_FS+0x48>)
 80082ac:	f7fe fd62 	bl	8006d74 <USBD_CDC_TransmitPacket>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	2000045c 	.word	0x2000045c

080082c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80082d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2212      	movs	r2, #18
 80082f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082fa:	4b03      	ldr	r3, [pc, #12]	; (8008308 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	20000174 	.word	0x20000174

0800830c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2204      	movs	r2, #4
 800831c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800831e:	4b03      	ldr	r3, [pc, #12]	; (800832c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	20000188 	.word	0x20000188

08008330 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	4907      	ldr	r1, [pc, #28]	; (8008364 <USBD_FS_ProductStrDescriptor+0x34>)
 8008346:	4808      	ldr	r0, [pc, #32]	; (8008368 <USBD_FS_ProductStrDescriptor+0x38>)
 8008348:	f7ff fdf7 	bl	8007f3a <USBD_GetString>
 800834c:	e004      	b.n	8008358 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	4904      	ldr	r1, [pc, #16]	; (8008364 <USBD_FS_ProductStrDescriptor+0x34>)
 8008352:	4805      	ldr	r0, [pc, #20]	; (8008368 <USBD_FS_ProductStrDescriptor+0x38>)
 8008354:	f7ff fdf1 	bl	8007f3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008358:	4b02      	ldr	r3, [pc, #8]	; (8008364 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	2000172c 	.word	0x2000172c
 8008368:	08009550 	.word	0x08009550

0800836c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	6039      	str	r1, [r7, #0]
 8008376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	4904      	ldr	r1, [pc, #16]	; (800838c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800837c:	4804      	ldr	r0, [pc, #16]	; (8008390 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800837e:	f7ff fddc 	bl	8007f3a <USBD_GetString>
  return USBD_StrDesc;
 8008382:	4b02      	ldr	r3, [pc, #8]	; (800838c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	2000172c 	.word	0x2000172c
 8008390:	08009568 	.word	0x08009568

08008394 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	6039      	str	r1, [r7, #0]
 800839e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	221a      	movs	r2, #26
 80083a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083a6:	f000 f843 	bl	8008430 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083aa:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	2000018c 	.word	0x2000018c

080083b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4907      	ldr	r1, [pc, #28]	; (80083ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80083ce:	4808      	ldr	r0, [pc, #32]	; (80083f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083d0:	f7ff fdb3 	bl	8007f3a <USBD_GetString>
 80083d4:	e004      	b.n	80083e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4904      	ldr	r1, [pc, #16]	; (80083ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80083da:	4805      	ldr	r0, [pc, #20]	; (80083f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083dc:	f7ff fdad 	bl	8007f3a <USBD_GetString>
  }
  return USBD_StrDesc;
 80083e0:	4b02      	ldr	r3, [pc, #8]	; (80083ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	2000172c 	.word	0x2000172c
 80083f0:	0800957c 	.word	0x0800957c

080083f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d105      	bne.n	8008412 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	4907      	ldr	r1, [pc, #28]	; (8008428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800840a:	4808      	ldr	r0, [pc, #32]	; (800842c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800840c:	f7ff fd95 	bl	8007f3a <USBD_GetString>
 8008410:	e004      	b.n	800841c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4904      	ldr	r1, [pc, #16]	; (8008428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008416:	4805      	ldr	r0, [pc, #20]	; (800842c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008418:	f7ff fd8f 	bl	8007f3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800841c:	4b02      	ldr	r3, [pc, #8]	; (8008428 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	2000172c 	.word	0x2000172c
 800842c:	08009588 	.word	0x08009588

08008430 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008436:	4b0f      	ldr	r3, [pc, #60]	; (8008474 <Get_SerialNum+0x44>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800843c:	4b0e      	ldr	r3, [pc, #56]	; (8008478 <Get_SerialNum+0x48>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008442:	4b0e      	ldr	r3, [pc, #56]	; (800847c <Get_SerialNum+0x4c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d009      	beq.n	800846a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008456:	2208      	movs	r2, #8
 8008458:	4909      	ldr	r1, [pc, #36]	; (8008480 <Get_SerialNum+0x50>)
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 f814 	bl	8008488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008460:	2204      	movs	r2, #4
 8008462:	4908      	ldr	r1, [pc, #32]	; (8008484 <Get_SerialNum+0x54>)
 8008464:	68b8      	ldr	r0, [r7, #8]
 8008466:	f000 f80f 	bl	8008488 <IntToUnicode>
  }
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	1fff7a10 	.word	0x1fff7a10
 8008478:	1fff7a14 	.word	0x1fff7a14
 800847c:	1fff7a18 	.word	0x1fff7a18
 8008480:	2000018e 	.word	0x2000018e
 8008484:	2000019e 	.word	0x2000019e

08008488 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]
 800849e:	e027      	b.n	80084f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	0f1b      	lsrs	r3, r3, #28
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	d80b      	bhi.n	80084c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	0f1b      	lsrs	r3, r3, #28
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	4619      	mov	r1, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	440b      	add	r3, r1
 80084b8:	3230      	adds	r2, #48	; 0x30
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	e00a      	b.n	80084d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	0f1b      	lsrs	r3, r3, #28
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	4619      	mov	r1, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	440b      	add	r3, r1
 80084d0:	3237      	adds	r2, #55	; 0x37
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	3301      	adds	r3, #1
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	4413      	add	r3, r2
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	3301      	adds	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
 80084f0:	7dfa      	ldrb	r2, [r7, #23]
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d3d3      	bcc.n	80084a0 <IntToUnicode+0x18>
  }
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
	...

08008508 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	; 0x28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	605a      	str	r2, [r3, #4]
 800851a:	609a      	str	r2, [r3, #8]
 800851c:	60da      	str	r2, [r3, #12]
 800851e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008528:	d147      	bne.n	80085ba <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800852a:	2300      	movs	r3, #0
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <HAL_PCD_MspInit+0xbc>)
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	4a24      	ldr	r2, [pc, #144]	; (80085c4 <HAL_PCD_MspInit+0xbc>)
 8008534:	f043 0301 	orr.w	r3, r3, #1
 8008538:	6313      	str	r3, [r2, #48]	; 0x30
 800853a:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <HAL_PCD_MspInit+0xbc>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800854a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008554:	f107 0314 	add.w	r3, r7, #20
 8008558:	4619      	mov	r1, r3
 800855a:	481b      	ldr	r0, [pc, #108]	; (80085c8 <HAL_PCD_MspInit+0xc0>)
 800855c:	f7f8 ff62 	bl	8001424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008560:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008566:	2302      	movs	r3, #2
 8008568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800856a:	2300      	movs	r3, #0
 800856c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800856e:	2300      	movs	r3, #0
 8008570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008572:	230a      	movs	r3, #10
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008576:	f107 0314 	add.w	r3, r7, #20
 800857a:	4619      	mov	r1, r3
 800857c:	4812      	ldr	r0, [pc, #72]	; (80085c8 <HAL_PCD_MspInit+0xc0>)
 800857e:	f7f8 ff51 	bl	8001424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008582:	4b10      	ldr	r3, [pc, #64]	; (80085c4 <HAL_PCD_MspInit+0xbc>)
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	4a0f      	ldr	r2, [pc, #60]	; (80085c4 <HAL_PCD_MspInit+0xbc>)
 8008588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858c:	6353      	str	r3, [r2, #52]	; 0x34
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <HAL_PCD_MspInit+0xbc>)
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	4a0b      	ldr	r2, [pc, #44]	; (80085c4 <HAL_PCD_MspInit+0xbc>)
 8008598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800859c:	6453      	str	r3, [r2, #68]	; 0x44
 800859e:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <HAL_PCD_MspInit+0xbc>)
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085aa:	2200      	movs	r2, #0
 80085ac:	2100      	movs	r1, #0
 80085ae:	2043      	movs	r0, #67	; 0x43
 80085b0:	f7f8 ff01 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085b4:	2043      	movs	r0, #67	; 0x43
 80085b6:	f7f8 ff1a 	bl	80013ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085ba:	bf00      	nop
 80085bc:	3728      	adds	r7, #40	; 0x28
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	40023800 	.word	0x40023800
 80085c8:	40020000 	.word	0x40020000

080085cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f7fe fcc2 	bl	8006f6c <USBD_LL_SetupStage>
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008602:	78fa      	ldrb	r2, [r7, #3]
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	4613      	mov	r3, r2
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	4619      	mov	r1, r3
 800861a:	f7fe fcfc 	bl	8007016 <USBD_LL_DataOutStage>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008638:	78fa      	ldrb	r2, [r7, #3]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	3348      	adds	r3, #72	; 0x48
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	4619      	mov	r1, r3
 800864e:	f7fe fd45 	bl	80070dc <USBD_LL_DataInStage>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fe59 	bl	8007320 <USBD_LL_SOF>
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800867e:	2301      	movs	r3, #1
 8008680:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
 800868e:	e008      	b.n	80086a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d102      	bne.n	800869e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008698:	2301      	movs	r3, #1
 800869a:	73fb      	strb	r3, [r7, #15]
 800869c:	e001      	b.n	80086a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800869e:	f7f8 fadd 	bl	8000c5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086a8:	7bfa      	ldrb	r2, [r7, #15]
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fdf9 	bl	80072a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe fda5 	bl	8007208 <USBD_LL_Reset>
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fdf4 	bl	80072c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6812      	ldr	r2, [r2, #0]
 80086ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <HAL_PCD_SuspendCallback+0x48>)
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	4a03      	ldr	r2, [pc, #12]	; (8008710 <HAL_PCD_SuspendCallback+0x48>)
 8008702:	f043 0306 	orr.w	r3, r3, #6
 8008706:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	e000ed00 	.word	0xe000ed00

08008714 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fde4 	bl	80072f0 <USBD_LL_Resume>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fe32 	bl	80073b0 <USBD_LL_IsoOUTIncomplete>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe fdfa 	bl	8007364 <USBD_LL_IsoINIncomplete>
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fe38 	bl	80073fc <USBD_LL_DevConnected>
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fe35 	bl	8007412 <USBD_LL_DevDisconnected>
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d13c      	bne.n	800883a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80087c0:	4a20      	ldr	r2, [pc, #128]	; (8008844 <USBD_LL_Init+0x94>)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a1e      	ldr	r2, [pc, #120]	; (8008844 <USBD_LL_Init+0x94>)
 80087cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087d0:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <USBD_LL_Init+0x94>)
 80087d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80087d8:	4b1a      	ldr	r3, [pc, #104]	; (8008844 <USBD_LL_Init+0x94>)
 80087da:	2204      	movs	r2, #4
 80087dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80087de:	4b19      	ldr	r3, [pc, #100]	; (8008844 <USBD_LL_Init+0x94>)
 80087e0:	2202      	movs	r2, #2
 80087e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087e4:	4b17      	ldr	r3, [pc, #92]	; (8008844 <USBD_LL_Init+0x94>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087ea:	4b16      	ldr	r3, [pc, #88]	; (8008844 <USBD_LL_Init+0x94>)
 80087ec:	2202      	movs	r2, #2
 80087ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087f0:	4b14      	ldr	r3, [pc, #80]	; (8008844 <USBD_LL_Init+0x94>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087f6:	4b13      	ldr	r3, [pc, #76]	; (8008844 <USBD_LL_Init+0x94>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087fc:	4b11      	ldr	r3, [pc, #68]	; (8008844 <USBD_LL_Init+0x94>)
 80087fe:	2200      	movs	r2, #0
 8008800:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <USBD_LL_Init+0x94>)
 8008804:	2201      	movs	r2, #1
 8008806:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008808:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <USBD_LL_Init+0x94>)
 800880a:	2200      	movs	r2, #0
 800880c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800880e:	480d      	ldr	r0, [pc, #52]	; (8008844 <USBD_LL_Init+0x94>)
 8008810:	f7f9 fda2 	bl	8002358 <HAL_PCD_Init>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800881a:	f7f8 fa1f 	bl	8000c5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800881e:	2180      	movs	r1, #128	; 0x80
 8008820:	4808      	ldr	r0, [pc, #32]	; (8008844 <USBD_LL_Init+0x94>)
 8008822:	f7fa ff00 	bl	8003626 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008826:	2240      	movs	r2, #64	; 0x40
 8008828:	2100      	movs	r1, #0
 800882a:	4806      	ldr	r0, [pc, #24]	; (8008844 <USBD_LL_Init+0x94>)
 800882c:	f7fa feb4 	bl	8003598 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008830:	2280      	movs	r2, #128	; 0x80
 8008832:	2101      	movs	r1, #1
 8008834:	4803      	ldr	r0, [pc, #12]	; (8008844 <USBD_LL_Init+0x94>)
 8008836:	f7fa feaf 	bl	8003598 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	2000192c 	.word	0x2000192c

08008848 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800885e:	4618      	mov	r0, r3
 8008860:	f7f9 fe97 	bl	8002592 <HAL_PCD_Start>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 f942 	bl	8008af4 <USBD_Get_USB_Status>
 8008870:	4603      	mov	r3, r0
 8008872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008874:	7bbb      	ldrb	r3, [r7, #14]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	4608      	mov	r0, r1
 8008888:	4611      	mov	r1, r2
 800888a:	461a      	mov	r2, r3
 800888c:	4603      	mov	r3, r0
 800888e:	70fb      	strb	r3, [r7, #3]
 8008890:	460b      	mov	r3, r1
 8008892:	70bb      	strb	r3, [r7, #2]
 8008894:	4613      	mov	r3, r2
 8008896:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80088a6:	78bb      	ldrb	r3, [r7, #2]
 80088a8:	883a      	ldrh	r2, [r7, #0]
 80088aa:	78f9      	ldrb	r1, [r7, #3]
 80088ac:	f7fa fa7b 	bl	8002da6 <HAL_PCD_EP_Open>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f91c 	bl	8008af4 <USBD_Get_USB_Status>
 80088bc:	4603      	mov	r3, r0
 80088be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fa fac4 	bl	8002e76 <HAL_PCD_EP_Close>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f8fd 	bl	8008af4 <USBD_Get_USB_Status>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	4611      	mov	r1, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f7fa fb9c 	bl	8003064 <HAL_PCD_EP_SetStall>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f8de 	bl	8008af4 <USBD_Get_USB_Status>
 8008938:	4603      	mov	r3, r0
 800893a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800893c:	7bbb      	ldrb	r3, [r7, #14]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f7fa fbe1 	bl	800312c <HAL_PCD_EP_ClrStall>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f8bf 	bl	8008af4 <USBD_Get_USB_Status>
 8008976:	4603      	mov	r3, r0
 8008978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897a:	7bbb      	ldrb	r3, [r7, #14]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008996:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800899c:	2b00      	cmp	r3, #0
 800899e:	da0b      	bge.n	80089b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089a6:	68f9      	ldr	r1, [r7, #12]
 80089a8:	4613      	mov	r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	333e      	adds	r3, #62	; 0x3e
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	e00b      	b.n	80089d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	4613      	mov	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fa f9ae 	bl	8002d5c <HAL_PCD_SetAddress>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f874 	bl	8008af4 <USBD_Get_USB_Status>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b086      	sub	sp, #24
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	603b      	str	r3, [r7, #0]
 8008a26:	460b      	mov	r3, r1
 8008a28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a38:	7af9      	ldrb	r1, [r7, #11]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	f7fa fac7 	bl	8002fd0 <HAL_PCD_EP_Transmit>
 8008a42:	4603      	mov	r3, r0
 8008a44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 f853 	bl	8008af4 <USBD_Get_USB_Status>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a52:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	607a      	str	r2, [r7, #4]
 8008a66:	603b      	str	r3, [r7, #0]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a7a:	7af9      	ldrb	r1, [r7, #11]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	f7fa fa43 	bl	8002f0a <HAL_PCD_EP_Receive>
 8008a84:	4603      	mov	r3, r0
 8008a86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 f832 	bl	8008af4 <USBD_Get_USB_Status>
 8008a90:	4603      	mov	r3, r0
 8008a92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a94:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ab0:	78fa      	ldrb	r2, [r7, #3]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fa fa73 	bl	8002fa0 <HAL_PCD_EP_GetRxCount>
 8008aba:	4603      	mov	r3, r0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008acc:	4b03      	ldr	r3, [pc, #12]	; (8008adc <USBD_static_malloc+0x18>)
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	20001d34 	.word	0x20001d34

08008ae0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]

}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d817      	bhi.n	8008b38 <USBD_Get_USB_Status+0x44>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <USBD_Get_USB_Status+0x1c>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008b27 	.word	0x08008b27
 8008b18:	08008b2d 	.word	0x08008b2d
 8008b1c:	08008b33 	.word	0x08008b33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]
    break;
 8008b24:	e00b      	b.n	8008b3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b26:	2303      	movs	r3, #3
 8008b28:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2a:	e008      	b.n	8008b3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b30:	e005      	b.n	8008b3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b32:	2303      	movs	r3, #3
 8008b34:	73fb      	strb	r3, [r7, #15]
    break;
 8008b36:	e002      	b.n	8008b3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3c:	bf00      	nop
  }
  return usb_status;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <sniprintf>:
 8008b4c:	b40c      	push	{r2, r3}
 8008b4e:	b530      	push	{r4, r5, lr}
 8008b50:	4b17      	ldr	r3, [pc, #92]	; (8008bb0 <sniprintf+0x64>)
 8008b52:	1e0c      	subs	r4, r1, #0
 8008b54:	681d      	ldr	r5, [r3, #0]
 8008b56:	b09d      	sub	sp, #116	; 0x74
 8008b58:	da08      	bge.n	8008b6c <sniprintf+0x20>
 8008b5a:	238b      	movs	r3, #139	; 0x8b
 8008b5c:	602b      	str	r3, [r5, #0]
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b62:	b01d      	add	sp, #116	; 0x74
 8008b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b68:	b002      	add	sp, #8
 8008b6a:	4770      	bx	lr
 8008b6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b74:	bf14      	ite	ne
 8008b76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b7a:	4623      	moveq	r3, r4
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	9307      	str	r3, [sp, #28]
 8008b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b84:	9002      	str	r0, [sp, #8]
 8008b86:	9006      	str	r0, [sp, #24]
 8008b88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b8e:	ab21      	add	r3, sp, #132	; 0x84
 8008b90:	a902      	add	r1, sp, #8
 8008b92:	4628      	mov	r0, r5
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	f000 f993 	bl	8008ec0 <_svfiprintf_r>
 8008b9a:	1c43      	adds	r3, r0, #1
 8008b9c:	bfbc      	itt	lt
 8008b9e:	238b      	movlt	r3, #139	; 0x8b
 8008ba0:	602b      	strlt	r3, [r5, #0]
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d0dd      	beq.n	8008b62 <sniprintf+0x16>
 8008ba6:	9b02      	ldr	r3, [sp, #8]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	e7d9      	b.n	8008b62 <sniprintf+0x16>
 8008bae:	bf00      	nop
 8008bb0:	200001f4 	.word	0x200001f4

08008bb4 <memset>:
 8008bb4:	4402      	add	r2, r0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d100      	bne.n	8008bbe <memset+0xa>
 8008bbc:	4770      	bx	lr
 8008bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc2:	e7f9      	b.n	8008bb8 <memset+0x4>

08008bc4 <__errno>:
 8008bc4:	4b01      	ldr	r3, [pc, #4]	; (8008bcc <__errno+0x8>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	200001f4 	.word	0x200001f4

08008bd0 <__libc_init_array>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4d0d      	ldr	r5, [pc, #52]	; (8008c08 <__libc_init_array+0x38>)
 8008bd4:	4c0d      	ldr	r4, [pc, #52]	; (8008c0c <__libc_init_array+0x3c>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	2600      	movs	r6, #0
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	d109      	bne.n	8008bf4 <__libc_init_array+0x24>
 8008be0:	4d0b      	ldr	r5, [pc, #44]	; (8008c10 <__libc_init_array+0x40>)
 8008be2:	4c0c      	ldr	r4, [pc, #48]	; (8008c14 <__libc_init_array+0x44>)
 8008be4:	f000 fc6a 	bl	80094bc <_init>
 8008be8:	1b64      	subs	r4, r4, r5
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	2600      	movs	r6, #0
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d105      	bne.n	8008bfe <__libc_init_array+0x2e>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf8:	4798      	blx	r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7ee      	b.n	8008bdc <__libc_init_array+0xc>
 8008bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c02:	4798      	blx	r3
 8008c04:	3601      	adds	r6, #1
 8008c06:	e7f2      	b.n	8008bee <__libc_init_array+0x1e>
 8008c08:	0800a1a8 	.word	0x0800a1a8
 8008c0c:	0800a1a8 	.word	0x0800a1a8
 8008c10:	0800a1a8 	.word	0x0800a1a8
 8008c14:	0800a1ac 	.word	0x0800a1ac

08008c18 <__retarget_lock_acquire_recursive>:
 8008c18:	4770      	bx	lr

08008c1a <__retarget_lock_release_recursive>:
 8008c1a:	4770      	bx	lr

08008c1c <_free_r>:
 8008c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c1e:	2900      	cmp	r1, #0
 8008c20:	d044      	beq.n	8008cac <_free_r+0x90>
 8008c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c26:	9001      	str	r0, [sp, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c2e:	bfb8      	it	lt
 8008c30:	18e4      	addlt	r4, r4, r3
 8008c32:	f000 f8df 	bl	8008df4 <__malloc_lock>
 8008c36:	4a1e      	ldr	r2, [pc, #120]	; (8008cb0 <_free_r+0x94>)
 8008c38:	9801      	ldr	r0, [sp, #4]
 8008c3a:	6813      	ldr	r3, [r2, #0]
 8008c3c:	b933      	cbnz	r3, 8008c4c <_free_r+0x30>
 8008c3e:	6063      	str	r3, [r4, #4]
 8008c40:	6014      	str	r4, [r2, #0]
 8008c42:	b003      	add	sp, #12
 8008c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c48:	f000 b8da 	b.w	8008e00 <__malloc_unlock>
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	d908      	bls.n	8008c62 <_free_r+0x46>
 8008c50:	6825      	ldr	r5, [r4, #0]
 8008c52:	1961      	adds	r1, r4, r5
 8008c54:	428b      	cmp	r3, r1
 8008c56:	bf01      	itttt	eq
 8008c58:	6819      	ldreq	r1, [r3, #0]
 8008c5a:	685b      	ldreq	r3, [r3, #4]
 8008c5c:	1949      	addeq	r1, r1, r5
 8008c5e:	6021      	streq	r1, [r4, #0]
 8008c60:	e7ed      	b.n	8008c3e <_free_r+0x22>
 8008c62:	461a      	mov	r2, r3
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	b10b      	cbz	r3, 8008c6c <_free_r+0x50>
 8008c68:	42a3      	cmp	r3, r4
 8008c6a:	d9fa      	bls.n	8008c62 <_free_r+0x46>
 8008c6c:	6811      	ldr	r1, [r2, #0]
 8008c6e:	1855      	adds	r5, r2, r1
 8008c70:	42a5      	cmp	r5, r4
 8008c72:	d10b      	bne.n	8008c8c <_free_r+0x70>
 8008c74:	6824      	ldr	r4, [r4, #0]
 8008c76:	4421      	add	r1, r4
 8008c78:	1854      	adds	r4, r2, r1
 8008c7a:	42a3      	cmp	r3, r4
 8008c7c:	6011      	str	r1, [r2, #0]
 8008c7e:	d1e0      	bne.n	8008c42 <_free_r+0x26>
 8008c80:	681c      	ldr	r4, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	6053      	str	r3, [r2, #4]
 8008c86:	440c      	add	r4, r1
 8008c88:	6014      	str	r4, [r2, #0]
 8008c8a:	e7da      	b.n	8008c42 <_free_r+0x26>
 8008c8c:	d902      	bls.n	8008c94 <_free_r+0x78>
 8008c8e:	230c      	movs	r3, #12
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	e7d6      	b.n	8008c42 <_free_r+0x26>
 8008c94:	6825      	ldr	r5, [r4, #0]
 8008c96:	1961      	adds	r1, r4, r5
 8008c98:	428b      	cmp	r3, r1
 8008c9a:	bf04      	itt	eq
 8008c9c:	6819      	ldreq	r1, [r3, #0]
 8008c9e:	685b      	ldreq	r3, [r3, #4]
 8008ca0:	6063      	str	r3, [r4, #4]
 8008ca2:	bf04      	itt	eq
 8008ca4:	1949      	addeq	r1, r1, r5
 8008ca6:	6021      	streq	r1, [r4, #0]
 8008ca8:	6054      	str	r4, [r2, #4]
 8008caa:	e7ca      	b.n	8008c42 <_free_r+0x26>
 8008cac:	b003      	add	sp, #12
 8008cae:	bd30      	pop	{r4, r5, pc}
 8008cb0:	20002094 	.word	0x20002094

08008cb4 <sbrk_aligned>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	4e0e      	ldr	r6, [pc, #56]	; (8008cf0 <sbrk_aligned+0x3c>)
 8008cb8:	460c      	mov	r4, r1
 8008cba:	6831      	ldr	r1, [r6, #0]
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	b911      	cbnz	r1, 8008cc6 <sbrk_aligned+0x12>
 8008cc0:	f000 fba6 	bl	8009410 <_sbrk_r>
 8008cc4:	6030      	str	r0, [r6, #0]
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f000 fba1 	bl	8009410 <_sbrk_r>
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	d00a      	beq.n	8008ce8 <sbrk_aligned+0x34>
 8008cd2:	1cc4      	adds	r4, r0, #3
 8008cd4:	f024 0403 	bic.w	r4, r4, #3
 8008cd8:	42a0      	cmp	r0, r4
 8008cda:	d007      	beq.n	8008cec <sbrk_aligned+0x38>
 8008cdc:	1a21      	subs	r1, r4, r0
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f000 fb96 	bl	8009410 <_sbrk_r>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d101      	bne.n	8008cec <sbrk_aligned+0x38>
 8008ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8008cec:	4620      	mov	r0, r4
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	20002098 	.word	0x20002098

08008cf4 <_malloc_r>:
 8008cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf8:	1ccd      	adds	r5, r1, #3
 8008cfa:	f025 0503 	bic.w	r5, r5, #3
 8008cfe:	3508      	adds	r5, #8
 8008d00:	2d0c      	cmp	r5, #12
 8008d02:	bf38      	it	cc
 8008d04:	250c      	movcc	r5, #12
 8008d06:	2d00      	cmp	r5, #0
 8008d08:	4607      	mov	r7, r0
 8008d0a:	db01      	blt.n	8008d10 <_malloc_r+0x1c>
 8008d0c:	42a9      	cmp	r1, r5
 8008d0e:	d905      	bls.n	8008d1c <_malloc_r+0x28>
 8008d10:	230c      	movs	r3, #12
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	2600      	movs	r6, #0
 8008d16:	4630      	mov	r0, r6
 8008d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008df0 <_malloc_r+0xfc>
 8008d20:	f000 f868 	bl	8008df4 <__malloc_lock>
 8008d24:	f8d8 3000 	ldr.w	r3, [r8]
 8008d28:	461c      	mov	r4, r3
 8008d2a:	bb5c      	cbnz	r4, 8008d84 <_malloc_r+0x90>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f7ff ffc0 	bl	8008cb4 <sbrk_aligned>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	4604      	mov	r4, r0
 8008d38:	d155      	bne.n	8008de6 <_malloc_r+0xf2>
 8008d3a:	f8d8 4000 	ldr.w	r4, [r8]
 8008d3e:	4626      	mov	r6, r4
 8008d40:	2e00      	cmp	r6, #0
 8008d42:	d145      	bne.n	8008dd0 <_malloc_r+0xdc>
 8008d44:	2c00      	cmp	r4, #0
 8008d46:	d048      	beq.n	8008dda <_malloc_r+0xe6>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	eb04 0903 	add.w	r9, r4, r3
 8008d52:	f000 fb5d 	bl	8009410 <_sbrk_r>
 8008d56:	4581      	cmp	r9, r0
 8008d58:	d13f      	bne.n	8008dda <_malloc_r+0xe6>
 8008d5a:	6821      	ldr	r1, [r4, #0]
 8008d5c:	1a6d      	subs	r5, r5, r1
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4638      	mov	r0, r7
 8008d62:	f7ff ffa7 	bl	8008cb4 <sbrk_aligned>
 8008d66:	3001      	adds	r0, #1
 8008d68:	d037      	beq.n	8008dda <_malloc_r+0xe6>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	442b      	add	r3, r5
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	f8d8 3000 	ldr.w	r3, [r8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d038      	beq.n	8008dea <_malloc_r+0xf6>
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	42a2      	cmp	r2, r4
 8008d7c:	d12b      	bne.n	8008dd6 <_malloc_r+0xe2>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	605a      	str	r2, [r3, #4]
 8008d82:	e00f      	b.n	8008da4 <_malloc_r+0xb0>
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	1b52      	subs	r2, r2, r5
 8008d88:	d41f      	bmi.n	8008dca <_malloc_r+0xd6>
 8008d8a:	2a0b      	cmp	r2, #11
 8008d8c:	d917      	bls.n	8008dbe <_malloc_r+0xca>
 8008d8e:	1961      	adds	r1, r4, r5
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	6025      	str	r5, [r4, #0]
 8008d94:	bf18      	it	ne
 8008d96:	6059      	strne	r1, [r3, #4]
 8008d98:	6863      	ldr	r3, [r4, #4]
 8008d9a:	bf08      	it	eq
 8008d9c:	f8c8 1000 	streq.w	r1, [r8]
 8008da0:	5162      	str	r2, [r4, r5]
 8008da2:	604b      	str	r3, [r1, #4]
 8008da4:	4638      	mov	r0, r7
 8008da6:	f104 060b 	add.w	r6, r4, #11
 8008daa:	f000 f829 	bl	8008e00 <__malloc_unlock>
 8008dae:	f026 0607 	bic.w	r6, r6, #7
 8008db2:	1d23      	adds	r3, r4, #4
 8008db4:	1af2      	subs	r2, r6, r3
 8008db6:	d0ae      	beq.n	8008d16 <_malloc_r+0x22>
 8008db8:	1b9b      	subs	r3, r3, r6
 8008dba:	50a3      	str	r3, [r4, r2]
 8008dbc:	e7ab      	b.n	8008d16 <_malloc_r+0x22>
 8008dbe:	42a3      	cmp	r3, r4
 8008dc0:	6862      	ldr	r2, [r4, #4]
 8008dc2:	d1dd      	bne.n	8008d80 <_malloc_r+0x8c>
 8008dc4:	f8c8 2000 	str.w	r2, [r8]
 8008dc8:	e7ec      	b.n	8008da4 <_malloc_r+0xb0>
 8008dca:	4623      	mov	r3, r4
 8008dcc:	6864      	ldr	r4, [r4, #4]
 8008dce:	e7ac      	b.n	8008d2a <_malloc_r+0x36>
 8008dd0:	4634      	mov	r4, r6
 8008dd2:	6876      	ldr	r6, [r6, #4]
 8008dd4:	e7b4      	b.n	8008d40 <_malloc_r+0x4c>
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	e7cc      	b.n	8008d74 <_malloc_r+0x80>
 8008dda:	230c      	movs	r3, #12
 8008ddc:	603b      	str	r3, [r7, #0]
 8008dde:	4638      	mov	r0, r7
 8008de0:	f000 f80e 	bl	8008e00 <__malloc_unlock>
 8008de4:	e797      	b.n	8008d16 <_malloc_r+0x22>
 8008de6:	6025      	str	r5, [r4, #0]
 8008de8:	e7dc      	b.n	8008da4 <_malloc_r+0xb0>
 8008dea:	605b      	str	r3, [r3, #4]
 8008dec:	deff      	udf	#255	; 0xff
 8008dee:	bf00      	nop
 8008df0:	20002094 	.word	0x20002094

08008df4 <__malloc_lock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__malloc_lock+0x8>)
 8008df6:	f7ff bf0f 	b.w	8008c18 <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20002090 	.word	0x20002090

08008e00 <__malloc_unlock>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__malloc_unlock+0x8>)
 8008e02:	f7ff bf0a 	b.w	8008c1a <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	20002090 	.word	0x20002090

08008e0c <__ssputs_r>:
 8008e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e10:	688e      	ldr	r6, [r1, #8]
 8008e12:	461f      	mov	r7, r3
 8008e14:	42be      	cmp	r6, r7
 8008e16:	680b      	ldr	r3, [r1, #0]
 8008e18:	4682      	mov	sl, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	4690      	mov	r8, r2
 8008e1e:	d82c      	bhi.n	8008e7a <__ssputs_r+0x6e>
 8008e20:	898a      	ldrh	r2, [r1, #12]
 8008e22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e26:	d026      	beq.n	8008e76 <__ssputs_r+0x6a>
 8008e28:	6965      	ldr	r5, [r4, #20]
 8008e2a:	6909      	ldr	r1, [r1, #16]
 8008e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e30:	eba3 0901 	sub.w	r9, r3, r1
 8008e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e38:	1c7b      	adds	r3, r7, #1
 8008e3a:	444b      	add	r3, r9
 8008e3c:	106d      	asrs	r5, r5, #1
 8008e3e:	429d      	cmp	r5, r3
 8008e40:	bf38      	it	cc
 8008e42:	461d      	movcc	r5, r3
 8008e44:	0553      	lsls	r3, r2, #21
 8008e46:	d527      	bpl.n	8008e98 <__ssputs_r+0x8c>
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7ff ff53 	bl	8008cf4 <_malloc_r>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	b360      	cbz	r0, 8008eac <__ssputs_r+0xa0>
 8008e52:	6921      	ldr	r1, [r4, #16]
 8008e54:	464a      	mov	r2, r9
 8008e56:	f000 faeb 	bl	8009430 <memcpy>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	6126      	str	r6, [r4, #16]
 8008e68:	6165      	str	r5, [r4, #20]
 8008e6a:	444e      	add	r6, r9
 8008e6c:	eba5 0509 	sub.w	r5, r5, r9
 8008e70:	6026      	str	r6, [r4, #0]
 8008e72:	60a5      	str	r5, [r4, #8]
 8008e74:	463e      	mov	r6, r7
 8008e76:	42be      	cmp	r6, r7
 8008e78:	d900      	bls.n	8008e7c <__ssputs_r+0x70>
 8008e7a:	463e      	mov	r6, r7
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	4632      	mov	r2, r6
 8008e80:	4641      	mov	r1, r8
 8008e82:	f000 faab 	bl	80093dc <memmove>
 8008e86:	68a3      	ldr	r3, [r4, #8]
 8008e88:	1b9b      	subs	r3, r3, r6
 8008e8a:	60a3      	str	r3, [r4, #8]
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	4433      	add	r3, r6
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	2000      	movs	r0, #0
 8008e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e98:	462a      	mov	r2, r5
 8008e9a:	f000 fad7 	bl	800944c <_realloc_r>
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d1e0      	bne.n	8008e66 <__ssputs_r+0x5a>
 8008ea4:	6921      	ldr	r1, [r4, #16]
 8008ea6:	4650      	mov	r0, sl
 8008ea8:	f7ff feb8 	bl	8008c1c <_free_r>
 8008eac:	230c      	movs	r3, #12
 8008eae:	f8ca 3000 	str.w	r3, [sl]
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	e7e9      	b.n	8008e94 <__ssputs_r+0x88>

08008ec0 <_svfiprintf_r>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	4698      	mov	r8, r3
 8008ec6:	898b      	ldrh	r3, [r1, #12]
 8008ec8:	061b      	lsls	r3, r3, #24
 8008eca:	b09d      	sub	sp, #116	; 0x74
 8008ecc:	4607      	mov	r7, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	d50e      	bpl.n	8008ef2 <_svfiprintf_r+0x32>
 8008ed4:	690b      	ldr	r3, [r1, #16]
 8008ed6:	b963      	cbnz	r3, 8008ef2 <_svfiprintf_r+0x32>
 8008ed8:	2140      	movs	r1, #64	; 0x40
 8008eda:	f7ff ff0b 	bl	8008cf4 <_malloc_r>
 8008ede:	6028      	str	r0, [r5, #0]
 8008ee0:	6128      	str	r0, [r5, #16]
 8008ee2:	b920      	cbnz	r0, 8008eee <_svfiprintf_r+0x2e>
 8008ee4:	230c      	movs	r3, #12
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eec:	e0d0      	b.n	8009090 <_svfiprintf_r+0x1d0>
 8008eee:	2340      	movs	r3, #64	; 0x40
 8008ef0:	616b      	str	r3, [r5, #20]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef6:	2320      	movs	r3, #32
 8008ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f00:	2330      	movs	r3, #48	; 0x30
 8008f02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090a8 <_svfiprintf_r+0x1e8>
 8008f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f0a:	f04f 0901 	mov.w	r9, #1
 8008f0e:	4623      	mov	r3, r4
 8008f10:	469a      	mov	sl, r3
 8008f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f16:	b10a      	cbz	r2, 8008f1c <_svfiprintf_r+0x5c>
 8008f18:	2a25      	cmp	r2, #37	; 0x25
 8008f1a:	d1f9      	bne.n	8008f10 <_svfiprintf_r+0x50>
 8008f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f20:	d00b      	beq.n	8008f3a <_svfiprintf_r+0x7a>
 8008f22:	465b      	mov	r3, fp
 8008f24:	4622      	mov	r2, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ff6f 	bl	8008e0c <__ssputs_r>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f000 80a9 	beq.w	8009086 <_svfiprintf_r+0x1c6>
 8008f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f36:	445a      	add	r2, fp
 8008f38:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 80a1 	beq.w	8009086 <_svfiprintf_r+0x1c6>
 8008f44:	2300      	movs	r3, #0
 8008f46:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f4e:	f10a 0a01 	add.w	sl, sl, #1
 8008f52:	9304      	str	r3, [sp, #16]
 8008f54:	9307      	str	r3, [sp, #28]
 8008f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f5c:	4654      	mov	r4, sl
 8008f5e:	2205      	movs	r2, #5
 8008f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f64:	4850      	ldr	r0, [pc, #320]	; (80090a8 <_svfiprintf_r+0x1e8>)
 8008f66:	f7f7 f93b 	bl	80001e0 <memchr>
 8008f6a:	9a04      	ldr	r2, [sp, #16]
 8008f6c:	b9d8      	cbnz	r0, 8008fa6 <_svfiprintf_r+0xe6>
 8008f6e:	06d0      	lsls	r0, r2, #27
 8008f70:	bf44      	itt	mi
 8008f72:	2320      	movmi	r3, #32
 8008f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f78:	0711      	lsls	r1, r2, #28
 8008f7a:	bf44      	itt	mi
 8008f7c:	232b      	movmi	r3, #43	; 0x2b
 8008f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f82:	f89a 3000 	ldrb.w	r3, [sl]
 8008f86:	2b2a      	cmp	r3, #42	; 0x2a
 8008f88:	d015      	beq.n	8008fb6 <_svfiprintf_r+0xf6>
 8008f8a:	9a07      	ldr	r2, [sp, #28]
 8008f8c:	4654      	mov	r4, sl
 8008f8e:	2000      	movs	r0, #0
 8008f90:	f04f 0c0a 	mov.w	ip, #10
 8008f94:	4621      	mov	r1, r4
 8008f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f9a:	3b30      	subs	r3, #48	; 0x30
 8008f9c:	2b09      	cmp	r3, #9
 8008f9e:	d94d      	bls.n	800903c <_svfiprintf_r+0x17c>
 8008fa0:	b1b0      	cbz	r0, 8008fd0 <_svfiprintf_r+0x110>
 8008fa2:	9207      	str	r2, [sp, #28]
 8008fa4:	e014      	b.n	8008fd0 <_svfiprintf_r+0x110>
 8008fa6:	eba0 0308 	sub.w	r3, r0, r8
 8008faa:	fa09 f303 	lsl.w	r3, r9, r3
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	46a2      	mov	sl, r4
 8008fb4:	e7d2      	b.n	8008f5c <_svfiprintf_r+0x9c>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	1d19      	adds	r1, r3, #4
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	9103      	str	r1, [sp, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfbb      	ittet	lt
 8008fc2:	425b      	neglt	r3, r3
 8008fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fc8:	9307      	strge	r3, [sp, #28]
 8008fca:	9307      	strlt	r3, [sp, #28]
 8008fcc:	bfb8      	it	lt
 8008fce:	9204      	strlt	r2, [sp, #16]
 8008fd0:	7823      	ldrb	r3, [r4, #0]
 8008fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fd4:	d10c      	bne.n	8008ff0 <_svfiprintf_r+0x130>
 8008fd6:	7863      	ldrb	r3, [r4, #1]
 8008fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fda:	d134      	bne.n	8009046 <_svfiprintf_r+0x186>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	1d1a      	adds	r2, r3, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	9203      	str	r2, [sp, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfb8      	it	lt
 8008fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fec:	3402      	adds	r4, #2
 8008fee:	9305      	str	r3, [sp, #20]
 8008ff0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80090b8 <_svfiprintf_r+0x1f8>
 8008ff4:	7821      	ldrb	r1, [r4, #0]
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	f7f7 f8f1 	bl	80001e0 <memchr>
 8008ffe:	b138      	cbz	r0, 8009010 <_svfiprintf_r+0x150>
 8009000:	9b04      	ldr	r3, [sp, #16]
 8009002:	eba0 000a 	sub.w	r0, r0, sl
 8009006:	2240      	movs	r2, #64	; 0x40
 8009008:	4082      	lsls	r2, r0
 800900a:	4313      	orrs	r3, r2
 800900c:	3401      	adds	r4, #1
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009014:	4825      	ldr	r0, [pc, #148]	; (80090ac <_svfiprintf_r+0x1ec>)
 8009016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800901a:	2206      	movs	r2, #6
 800901c:	f7f7 f8e0 	bl	80001e0 <memchr>
 8009020:	2800      	cmp	r0, #0
 8009022:	d038      	beq.n	8009096 <_svfiprintf_r+0x1d6>
 8009024:	4b22      	ldr	r3, [pc, #136]	; (80090b0 <_svfiprintf_r+0x1f0>)
 8009026:	bb1b      	cbnz	r3, 8009070 <_svfiprintf_r+0x1b0>
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	3307      	adds	r3, #7
 800902c:	f023 0307 	bic.w	r3, r3, #7
 8009030:	3308      	adds	r3, #8
 8009032:	9303      	str	r3, [sp, #12]
 8009034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009036:	4433      	add	r3, r6
 8009038:	9309      	str	r3, [sp, #36]	; 0x24
 800903a:	e768      	b.n	8008f0e <_svfiprintf_r+0x4e>
 800903c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009040:	460c      	mov	r4, r1
 8009042:	2001      	movs	r0, #1
 8009044:	e7a6      	b.n	8008f94 <_svfiprintf_r+0xd4>
 8009046:	2300      	movs	r3, #0
 8009048:	3401      	adds	r4, #1
 800904a:	9305      	str	r3, [sp, #20]
 800904c:	4619      	mov	r1, r3
 800904e:	f04f 0c0a 	mov.w	ip, #10
 8009052:	4620      	mov	r0, r4
 8009054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009058:	3a30      	subs	r2, #48	; 0x30
 800905a:	2a09      	cmp	r2, #9
 800905c:	d903      	bls.n	8009066 <_svfiprintf_r+0x1a6>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0c6      	beq.n	8008ff0 <_svfiprintf_r+0x130>
 8009062:	9105      	str	r1, [sp, #20]
 8009064:	e7c4      	b.n	8008ff0 <_svfiprintf_r+0x130>
 8009066:	fb0c 2101 	mla	r1, ip, r1, r2
 800906a:	4604      	mov	r4, r0
 800906c:	2301      	movs	r3, #1
 800906e:	e7f0      	b.n	8009052 <_svfiprintf_r+0x192>
 8009070:	ab03      	add	r3, sp, #12
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	462a      	mov	r2, r5
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <_svfiprintf_r+0x1f4>)
 8009078:	a904      	add	r1, sp, #16
 800907a:	4638      	mov	r0, r7
 800907c:	f3af 8000 	nop.w
 8009080:	1c42      	adds	r2, r0, #1
 8009082:	4606      	mov	r6, r0
 8009084:	d1d6      	bne.n	8009034 <_svfiprintf_r+0x174>
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	065b      	lsls	r3, r3, #25
 800908a:	f53f af2d 	bmi.w	8008ee8 <_svfiprintf_r+0x28>
 800908e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009090:	b01d      	add	sp, #116	; 0x74
 8009092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009096:	ab03      	add	r3, sp, #12
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	462a      	mov	r2, r5
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <_svfiprintf_r+0x1f4>)
 800909e:	a904      	add	r1, sp, #16
 80090a0:	4638      	mov	r0, r7
 80090a2:	f000 f879 	bl	8009198 <_printf_i>
 80090a6:	e7eb      	b.n	8009080 <_svfiprintf_r+0x1c0>
 80090a8:	0800a16c 	.word	0x0800a16c
 80090ac:	0800a176 	.word	0x0800a176
 80090b0:	00000000 	.word	0x00000000
 80090b4:	08008e0d 	.word	0x08008e0d
 80090b8:	0800a172 	.word	0x0800a172

080090bc <_printf_common>:
 80090bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c0:	4616      	mov	r6, r2
 80090c2:	4699      	mov	r9, r3
 80090c4:	688a      	ldr	r2, [r1, #8]
 80090c6:	690b      	ldr	r3, [r1, #16]
 80090c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090cc:	4293      	cmp	r3, r2
 80090ce:	bfb8      	it	lt
 80090d0:	4613      	movlt	r3, r2
 80090d2:	6033      	str	r3, [r6, #0]
 80090d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090d8:	4607      	mov	r7, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	b10a      	cbz	r2, 80090e2 <_printf_common+0x26>
 80090de:	3301      	adds	r3, #1
 80090e0:	6033      	str	r3, [r6, #0]
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	0699      	lsls	r1, r3, #26
 80090e6:	bf42      	ittt	mi
 80090e8:	6833      	ldrmi	r3, [r6, #0]
 80090ea:	3302      	addmi	r3, #2
 80090ec:	6033      	strmi	r3, [r6, #0]
 80090ee:	6825      	ldr	r5, [r4, #0]
 80090f0:	f015 0506 	ands.w	r5, r5, #6
 80090f4:	d106      	bne.n	8009104 <_printf_common+0x48>
 80090f6:	f104 0a19 	add.w	sl, r4, #25
 80090fa:	68e3      	ldr	r3, [r4, #12]
 80090fc:	6832      	ldr	r2, [r6, #0]
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	42ab      	cmp	r3, r5
 8009102:	dc26      	bgt.n	8009152 <_printf_common+0x96>
 8009104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009108:	1e13      	subs	r3, r2, #0
 800910a:	6822      	ldr	r2, [r4, #0]
 800910c:	bf18      	it	ne
 800910e:	2301      	movne	r3, #1
 8009110:	0692      	lsls	r2, r2, #26
 8009112:	d42b      	bmi.n	800916c <_printf_common+0xb0>
 8009114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009118:	4649      	mov	r1, r9
 800911a:	4638      	mov	r0, r7
 800911c:	47c0      	blx	r8
 800911e:	3001      	adds	r0, #1
 8009120:	d01e      	beq.n	8009160 <_printf_common+0xa4>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	6922      	ldr	r2, [r4, #16]
 8009126:	f003 0306 	and.w	r3, r3, #6
 800912a:	2b04      	cmp	r3, #4
 800912c:	bf02      	ittt	eq
 800912e:	68e5      	ldreq	r5, [r4, #12]
 8009130:	6833      	ldreq	r3, [r6, #0]
 8009132:	1aed      	subeq	r5, r5, r3
 8009134:	68a3      	ldr	r3, [r4, #8]
 8009136:	bf0c      	ite	eq
 8009138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800913c:	2500      	movne	r5, #0
 800913e:	4293      	cmp	r3, r2
 8009140:	bfc4      	itt	gt
 8009142:	1a9b      	subgt	r3, r3, r2
 8009144:	18ed      	addgt	r5, r5, r3
 8009146:	2600      	movs	r6, #0
 8009148:	341a      	adds	r4, #26
 800914a:	42b5      	cmp	r5, r6
 800914c:	d11a      	bne.n	8009184 <_printf_common+0xc8>
 800914e:	2000      	movs	r0, #0
 8009150:	e008      	b.n	8009164 <_printf_common+0xa8>
 8009152:	2301      	movs	r3, #1
 8009154:	4652      	mov	r2, sl
 8009156:	4649      	mov	r1, r9
 8009158:	4638      	mov	r0, r7
 800915a:	47c0      	blx	r8
 800915c:	3001      	adds	r0, #1
 800915e:	d103      	bne.n	8009168 <_printf_common+0xac>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009168:	3501      	adds	r5, #1
 800916a:	e7c6      	b.n	80090fa <_printf_common+0x3e>
 800916c:	18e1      	adds	r1, r4, r3
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	2030      	movs	r0, #48	; 0x30
 8009172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009176:	4422      	add	r2, r4
 8009178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800917c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009180:	3302      	adds	r3, #2
 8009182:	e7c7      	b.n	8009114 <_printf_common+0x58>
 8009184:	2301      	movs	r3, #1
 8009186:	4622      	mov	r2, r4
 8009188:	4649      	mov	r1, r9
 800918a:	4638      	mov	r0, r7
 800918c:	47c0      	blx	r8
 800918e:	3001      	adds	r0, #1
 8009190:	d0e6      	beq.n	8009160 <_printf_common+0xa4>
 8009192:	3601      	adds	r6, #1
 8009194:	e7d9      	b.n	800914a <_printf_common+0x8e>
	...

08009198 <_printf_i>:
 8009198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	7e0f      	ldrb	r7, [r1, #24]
 800919e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091a0:	2f78      	cmp	r7, #120	; 0x78
 80091a2:	4691      	mov	r9, r2
 80091a4:	4680      	mov	r8, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	469a      	mov	sl, r3
 80091aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091ae:	d807      	bhi.n	80091c0 <_printf_i+0x28>
 80091b0:	2f62      	cmp	r7, #98	; 0x62
 80091b2:	d80a      	bhi.n	80091ca <_printf_i+0x32>
 80091b4:	2f00      	cmp	r7, #0
 80091b6:	f000 80d4 	beq.w	8009362 <_printf_i+0x1ca>
 80091ba:	2f58      	cmp	r7, #88	; 0x58
 80091bc:	f000 80c0 	beq.w	8009340 <_printf_i+0x1a8>
 80091c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091c8:	e03a      	b.n	8009240 <_printf_i+0xa8>
 80091ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091ce:	2b15      	cmp	r3, #21
 80091d0:	d8f6      	bhi.n	80091c0 <_printf_i+0x28>
 80091d2:	a101      	add	r1, pc, #4	; (adr r1, 80091d8 <_printf_i+0x40>)
 80091d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091d8:	08009231 	.word	0x08009231
 80091dc:	08009245 	.word	0x08009245
 80091e0:	080091c1 	.word	0x080091c1
 80091e4:	080091c1 	.word	0x080091c1
 80091e8:	080091c1 	.word	0x080091c1
 80091ec:	080091c1 	.word	0x080091c1
 80091f0:	08009245 	.word	0x08009245
 80091f4:	080091c1 	.word	0x080091c1
 80091f8:	080091c1 	.word	0x080091c1
 80091fc:	080091c1 	.word	0x080091c1
 8009200:	080091c1 	.word	0x080091c1
 8009204:	08009349 	.word	0x08009349
 8009208:	08009271 	.word	0x08009271
 800920c:	08009303 	.word	0x08009303
 8009210:	080091c1 	.word	0x080091c1
 8009214:	080091c1 	.word	0x080091c1
 8009218:	0800936b 	.word	0x0800936b
 800921c:	080091c1 	.word	0x080091c1
 8009220:	08009271 	.word	0x08009271
 8009224:	080091c1 	.word	0x080091c1
 8009228:	080091c1 	.word	0x080091c1
 800922c:	0800930b 	.word	0x0800930b
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	1d1a      	adds	r2, r3, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	602a      	str	r2, [r5, #0]
 8009238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800923c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009240:	2301      	movs	r3, #1
 8009242:	e09f      	b.n	8009384 <_printf_i+0x1ec>
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	0607      	lsls	r7, r0, #24
 800924a:	f103 0104 	add.w	r1, r3, #4
 800924e:	6029      	str	r1, [r5, #0]
 8009250:	d501      	bpl.n	8009256 <_printf_i+0xbe>
 8009252:	681e      	ldr	r6, [r3, #0]
 8009254:	e003      	b.n	800925e <_printf_i+0xc6>
 8009256:	0646      	lsls	r6, r0, #25
 8009258:	d5fb      	bpl.n	8009252 <_printf_i+0xba>
 800925a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800925e:	2e00      	cmp	r6, #0
 8009260:	da03      	bge.n	800926a <_printf_i+0xd2>
 8009262:	232d      	movs	r3, #45	; 0x2d
 8009264:	4276      	negs	r6, r6
 8009266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800926a:	485a      	ldr	r0, [pc, #360]	; (80093d4 <_printf_i+0x23c>)
 800926c:	230a      	movs	r3, #10
 800926e:	e012      	b.n	8009296 <_printf_i+0xfe>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	6820      	ldr	r0, [r4, #0]
 8009274:	1d19      	adds	r1, r3, #4
 8009276:	6029      	str	r1, [r5, #0]
 8009278:	0605      	lsls	r5, r0, #24
 800927a:	d501      	bpl.n	8009280 <_printf_i+0xe8>
 800927c:	681e      	ldr	r6, [r3, #0]
 800927e:	e002      	b.n	8009286 <_printf_i+0xee>
 8009280:	0641      	lsls	r1, r0, #25
 8009282:	d5fb      	bpl.n	800927c <_printf_i+0xe4>
 8009284:	881e      	ldrh	r6, [r3, #0]
 8009286:	4853      	ldr	r0, [pc, #332]	; (80093d4 <_printf_i+0x23c>)
 8009288:	2f6f      	cmp	r7, #111	; 0x6f
 800928a:	bf0c      	ite	eq
 800928c:	2308      	moveq	r3, #8
 800928e:	230a      	movne	r3, #10
 8009290:	2100      	movs	r1, #0
 8009292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009296:	6865      	ldr	r5, [r4, #4]
 8009298:	60a5      	str	r5, [r4, #8]
 800929a:	2d00      	cmp	r5, #0
 800929c:	bfa2      	ittt	ge
 800929e:	6821      	ldrge	r1, [r4, #0]
 80092a0:	f021 0104 	bicge.w	r1, r1, #4
 80092a4:	6021      	strge	r1, [r4, #0]
 80092a6:	b90e      	cbnz	r6, 80092ac <_printf_i+0x114>
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	d04b      	beq.n	8009344 <_printf_i+0x1ac>
 80092ac:	4615      	mov	r5, r2
 80092ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80092b2:	fb03 6711 	mls	r7, r3, r1, r6
 80092b6:	5dc7      	ldrb	r7, [r0, r7]
 80092b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092bc:	4637      	mov	r7, r6
 80092be:	42bb      	cmp	r3, r7
 80092c0:	460e      	mov	r6, r1
 80092c2:	d9f4      	bls.n	80092ae <_printf_i+0x116>
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d10b      	bne.n	80092e0 <_printf_i+0x148>
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	07de      	lsls	r6, r3, #31
 80092cc:	d508      	bpl.n	80092e0 <_printf_i+0x148>
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	6861      	ldr	r1, [r4, #4]
 80092d2:	4299      	cmp	r1, r3
 80092d4:	bfde      	ittt	le
 80092d6:	2330      	movle	r3, #48	; 0x30
 80092d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092e0:	1b52      	subs	r2, r2, r5
 80092e2:	6122      	str	r2, [r4, #16]
 80092e4:	f8cd a000 	str.w	sl, [sp]
 80092e8:	464b      	mov	r3, r9
 80092ea:	aa03      	add	r2, sp, #12
 80092ec:	4621      	mov	r1, r4
 80092ee:	4640      	mov	r0, r8
 80092f0:	f7ff fee4 	bl	80090bc <_printf_common>
 80092f4:	3001      	adds	r0, #1
 80092f6:	d14a      	bne.n	800938e <_printf_i+0x1f6>
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	b004      	add	sp, #16
 80092fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	f043 0320 	orr.w	r3, r3, #32
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	4833      	ldr	r0, [pc, #204]	; (80093d8 <_printf_i+0x240>)
 800930c:	2778      	movs	r7, #120	; 0x78
 800930e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	6829      	ldr	r1, [r5, #0]
 8009316:	061f      	lsls	r7, r3, #24
 8009318:	f851 6b04 	ldr.w	r6, [r1], #4
 800931c:	d402      	bmi.n	8009324 <_printf_i+0x18c>
 800931e:	065f      	lsls	r7, r3, #25
 8009320:	bf48      	it	mi
 8009322:	b2b6      	uxthmi	r6, r6
 8009324:	07df      	lsls	r7, r3, #31
 8009326:	bf48      	it	mi
 8009328:	f043 0320 	orrmi.w	r3, r3, #32
 800932c:	6029      	str	r1, [r5, #0]
 800932e:	bf48      	it	mi
 8009330:	6023      	strmi	r3, [r4, #0]
 8009332:	b91e      	cbnz	r6, 800933c <_printf_i+0x1a4>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	f023 0320 	bic.w	r3, r3, #32
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	2310      	movs	r3, #16
 800933e:	e7a7      	b.n	8009290 <_printf_i+0xf8>
 8009340:	4824      	ldr	r0, [pc, #144]	; (80093d4 <_printf_i+0x23c>)
 8009342:	e7e4      	b.n	800930e <_printf_i+0x176>
 8009344:	4615      	mov	r5, r2
 8009346:	e7bd      	b.n	80092c4 <_printf_i+0x12c>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	6826      	ldr	r6, [r4, #0]
 800934c:	6961      	ldr	r1, [r4, #20]
 800934e:	1d18      	adds	r0, r3, #4
 8009350:	6028      	str	r0, [r5, #0]
 8009352:	0635      	lsls	r5, r6, #24
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	d501      	bpl.n	800935c <_printf_i+0x1c4>
 8009358:	6019      	str	r1, [r3, #0]
 800935a:	e002      	b.n	8009362 <_printf_i+0x1ca>
 800935c:	0670      	lsls	r0, r6, #25
 800935e:	d5fb      	bpl.n	8009358 <_printf_i+0x1c0>
 8009360:	8019      	strh	r1, [r3, #0]
 8009362:	2300      	movs	r3, #0
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	4615      	mov	r5, r2
 8009368:	e7bc      	b.n	80092e4 <_printf_i+0x14c>
 800936a:	682b      	ldr	r3, [r5, #0]
 800936c:	1d1a      	adds	r2, r3, #4
 800936e:	602a      	str	r2, [r5, #0]
 8009370:	681d      	ldr	r5, [r3, #0]
 8009372:	6862      	ldr	r2, [r4, #4]
 8009374:	2100      	movs	r1, #0
 8009376:	4628      	mov	r0, r5
 8009378:	f7f6 ff32 	bl	80001e0 <memchr>
 800937c:	b108      	cbz	r0, 8009382 <_printf_i+0x1ea>
 800937e:	1b40      	subs	r0, r0, r5
 8009380:	6060      	str	r0, [r4, #4]
 8009382:	6863      	ldr	r3, [r4, #4]
 8009384:	6123      	str	r3, [r4, #16]
 8009386:	2300      	movs	r3, #0
 8009388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800938c:	e7aa      	b.n	80092e4 <_printf_i+0x14c>
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	462a      	mov	r2, r5
 8009392:	4649      	mov	r1, r9
 8009394:	4640      	mov	r0, r8
 8009396:	47d0      	blx	sl
 8009398:	3001      	adds	r0, #1
 800939a:	d0ad      	beq.n	80092f8 <_printf_i+0x160>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	079b      	lsls	r3, r3, #30
 80093a0:	d413      	bmi.n	80093ca <_printf_i+0x232>
 80093a2:	68e0      	ldr	r0, [r4, #12]
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	4298      	cmp	r0, r3
 80093a8:	bfb8      	it	lt
 80093aa:	4618      	movlt	r0, r3
 80093ac:	e7a6      	b.n	80092fc <_printf_i+0x164>
 80093ae:	2301      	movs	r3, #1
 80093b0:	4632      	mov	r2, r6
 80093b2:	4649      	mov	r1, r9
 80093b4:	4640      	mov	r0, r8
 80093b6:	47d0      	blx	sl
 80093b8:	3001      	adds	r0, #1
 80093ba:	d09d      	beq.n	80092f8 <_printf_i+0x160>
 80093bc:	3501      	adds	r5, #1
 80093be:	68e3      	ldr	r3, [r4, #12]
 80093c0:	9903      	ldr	r1, [sp, #12]
 80093c2:	1a5b      	subs	r3, r3, r1
 80093c4:	42ab      	cmp	r3, r5
 80093c6:	dcf2      	bgt.n	80093ae <_printf_i+0x216>
 80093c8:	e7eb      	b.n	80093a2 <_printf_i+0x20a>
 80093ca:	2500      	movs	r5, #0
 80093cc:	f104 0619 	add.w	r6, r4, #25
 80093d0:	e7f5      	b.n	80093be <_printf_i+0x226>
 80093d2:	bf00      	nop
 80093d4:	0800a17d 	.word	0x0800a17d
 80093d8:	0800a18e 	.word	0x0800a18e

080093dc <memmove>:
 80093dc:	4288      	cmp	r0, r1
 80093de:	b510      	push	{r4, lr}
 80093e0:	eb01 0402 	add.w	r4, r1, r2
 80093e4:	d902      	bls.n	80093ec <memmove+0x10>
 80093e6:	4284      	cmp	r4, r0
 80093e8:	4623      	mov	r3, r4
 80093ea:	d807      	bhi.n	80093fc <memmove+0x20>
 80093ec:	1e43      	subs	r3, r0, #1
 80093ee:	42a1      	cmp	r1, r4
 80093f0:	d008      	beq.n	8009404 <memmove+0x28>
 80093f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093fa:	e7f8      	b.n	80093ee <memmove+0x12>
 80093fc:	4402      	add	r2, r0
 80093fe:	4601      	mov	r1, r0
 8009400:	428a      	cmp	r2, r1
 8009402:	d100      	bne.n	8009406 <memmove+0x2a>
 8009404:	bd10      	pop	{r4, pc}
 8009406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800940a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800940e:	e7f7      	b.n	8009400 <memmove+0x24>

08009410 <_sbrk_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	; (800942c <_sbrk_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f7 fde8 	bl	8000ff0 <_sbrk>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_sbrk_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_sbrk_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	2000208c 	.word	0x2000208c

08009430 <memcpy>:
 8009430:	440a      	add	r2, r1
 8009432:	4291      	cmp	r1, r2
 8009434:	f100 33ff 	add.w	r3, r0, #4294967295
 8009438:	d100      	bne.n	800943c <memcpy+0xc>
 800943a:	4770      	bx	lr
 800943c:	b510      	push	{r4, lr}
 800943e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009446:	4291      	cmp	r1, r2
 8009448:	d1f9      	bne.n	800943e <memcpy+0xe>
 800944a:	bd10      	pop	{r4, pc}

0800944c <_realloc_r>:
 800944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009450:	4680      	mov	r8, r0
 8009452:	4614      	mov	r4, r2
 8009454:	460e      	mov	r6, r1
 8009456:	b921      	cbnz	r1, 8009462 <_realloc_r+0x16>
 8009458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800945c:	4611      	mov	r1, r2
 800945e:	f7ff bc49 	b.w	8008cf4 <_malloc_r>
 8009462:	b92a      	cbnz	r2, 8009470 <_realloc_r+0x24>
 8009464:	f7ff fbda 	bl	8008c1c <_free_r>
 8009468:	4625      	mov	r5, r4
 800946a:	4628      	mov	r0, r5
 800946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009470:	f000 f81b 	bl	80094aa <_malloc_usable_size_r>
 8009474:	4284      	cmp	r4, r0
 8009476:	4607      	mov	r7, r0
 8009478:	d802      	bhi.n	8009480 <_realloc_r+0x34>
 800947a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800947e:	d812      	bhi.n	80094a6 <_realloc_r+0x5a>
 8009480:	4621      	mov	r1, r4
 8009482:	4640      	mov	r0, r8
 8009484:	f7ff fc36 	bl	8008cf4 <_malloc_r>
 8009488:	4605      	mov	r5, r0
 800948a:	2800      	cmp	r0, #0
 800948c:	d0ed      	beq.n	800946a <_realloc_r+0x1e>
 800948e:	42bc      	cmp	r4, r7
 8009490:	4622      	mov	r2, r4
 8009492:	4631      	mov	r1, r6
 8009494:	bf28      	it	cs
 8009496:	463a      	movcs	r2, r7
 8009498:	f7ff ffca 	bl	8009430 <memcpy>
 800949c:	4631      	mov	r1, r6
 800949e:	4640      	mov	r0, r8
 80094a0:	f7ff fbbc 	bl	8008c1c <_free_r>
 80094a4:	e7e1      	b.n	800946a <_realloc_r+0x1e>
 80094a6:	4635      	mov	r5, r6
 80094a8:	e7df      	b.n	800946a <_realloc_r+0x1e>

080094aa <_malloc_usable_size_r>:
 80094aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ae:	1f18      	subs	r0, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bfbc      	itt	lt
 80094b4:	580b      	ldrlt	r3, [r1, r0]
 80094b6:	18c0      	addlt	r0, r0, r3
 80094b8:	4770      	bx	lr
	...

080094bc <_init>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	bf00      	nop
 80094c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c2:	bc08      	pop	{r3}
 80094c4:	469e      	mov	lr, r3
 80094c6:	4770      	bx	lr

080094c8 <_fini>:
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	bf00      	nop
 80094cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ce:	bc08      	pop	{r3}
 80094d0:	469e      	mov	lr, r3
 80094d2:	4770      	bx	lr
