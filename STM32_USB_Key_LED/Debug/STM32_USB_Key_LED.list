
STM32_USB_Key_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008514  08008514  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800851c  0800851c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00001d2c  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f10  20001f10  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015695  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bd7  00000000  00000000  000358a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  00039480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  0003a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025036  00000000  00000000  0003b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b23  00000000  00000000  00060726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca84b  00000000  00000000  0007a249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144a94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d38  00000000  00000000  00144ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008448 	.word	0x08008448

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008448 	.word	0x08008448

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	4b72      	ldr	r3, [pc, #456]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a71      	ldr	r2, [pc, #452]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b6f      	ldr	r3, [pc, #444]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	4b6b      	ldr	r3, [pc, #428]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a6a      	ldr	r2, [pc, #424]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b68      	ldr	r3, [pc, #416]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b64      	ldr	r3, [pc, #400]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a63      	ldr	r2, [pc, #396]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b61      	ldr	r3, [pc, #388]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a5c      	ldr	r2, [pc, #368]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a55      	ldr	r2, [pc, #340]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b53      	ldr	r3, [pc, #332]	; (8000768 <MX_GPIO_Init+0x1e4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <MX_GPIO_Init+0x1e4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a4e      	ldr	r2, [pc, #312]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4849      	ldr	r0, [pc, #292]	; (800076c <MX_GPIO_Init+0x1e8>)
 8000648:	f000 ff30 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2101      	movs	r1, #1
 8000650:	4847      	ldr	r0, [pc, #284]	; (8000770 <MX_GPIO_Init+0x1ec>)
 8000652:	f000 ff2b 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000656:	2200      	movs	r2, #0
 8000658:	f24f 0110 	movw	r1, #61456	; 0xf010
 800065c:	4845      	ldr	r0, [pc, #276]	; (8000774 <MX_GPIO_Init+0x1f0>)
 800065e:	f000 ff25 	bl	80014ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000662:	2308      	movs	r3, #8
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	483c      	ldr	r0, [pc, #240]	; (800076c <MX_GPIO_Init+0x1e8>)
 800067a:	f000 fd63 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800067e:	2301      	movs	r3, #1
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <MX_GPIO_Init+0x1ec>)
 8000696:	f000 fd55 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800069a:	2308      	movs	r3, #8
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006aa:	2305      	movs	r3, #5
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <MX_GPIO_Init+0x1ec>)
 80006b6:	f000 fd45 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	482a      	ldr	r0, [pc, #168]	; (8000778 <MX_GPIO_Init+0x1f4>)
 80006d0:	f000 fd38 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006d4:	2304      	movs	r3, #4
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4825      	ldr	r0, [pc, #148]	; (800077c <MX_GPIO_Init+0x1f8>)
 80006e8:	f000 fd2c 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006fe:	2305      	movs	r3, #5
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	481c      	ldr	r0, [pc, #112]	; (800077c <MX_GPIO_Init+0x1f8>)
 800070a:	f000 fd1b 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000712:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000728:	f000 fd0c 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800072c:	2320      	movs	r3, #32
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000740:	f000 fd00 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000748:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0x1e8>)
 800075a:	f000 fcf3 	bl	8001144 <HAL_GPIO_Init>

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	; 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40021000 	.word	0x40021000
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40020000 	.word	0x40020000
 800077c:	40020400 	.word	0x40020400

08000780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_I2C1_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C1_Init+0x50>)
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x58>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_I2C1_Init+0x50>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007be:	f000 fea9 	bl	8001514 <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 f9c2 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000200 	.word	0x20000200
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_I2C_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800081a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <HAL_I2C_MspInit+0x8c>)
 8000838:	f000 fc84 	bl	8001144 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_I2C_MspInit+0x88>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <MX_I2S3_Init+0x58>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000894:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <MX_I2S3_Init+0x5c>)
 8000896:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008ac:	f000 ff76 	bl	800179c <HAL_I2S_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008b6:	f000 f94b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000254 	.word	0x20000254
 80008c4:	40003c00 	.word	0x40003c00
 80008c8:	00017700 	.word	0x00017700

080008cc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a31      	ldr	r2, [pc, #196]	; (80009bc <HAL_I2S_MspInit+0xf0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d15a      	bne.n	80009b2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008fc:	2301      	movs	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000900:	23c0      	movs	r3, #192	; 0xc0
 8000902:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4618      	mov	r0, r3
 800090e:	f003 f9ed 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000918:	f000 f91a 	bl	8000b50 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6313      	str	r3, [r2, #48]	; 0x30
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000970:	2310      	movs	r3, #16
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000980:	2306      	movs	r3, #6
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <HAL_I2S_MspInit+0xf8>)
 800098c:	f000 fbda 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000990:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a2:	2306      	movs	r3, #6
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <HAL_I2S_MspInit+0xfc>)
 80009ae:	f000 fbc9 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3738      	adds	r7, #56	; 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40003c00 	.word	0x40003c00
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020800 	.word	0x40020800

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fa0f 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f851 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f7ff fdd3 	bl	8000584 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009de:	f7ff fecf 	bl	8000780 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009e2:	f7ff ff43 	bl	800086c <MX_I2S3_Init>
  MX_SPI1_Init();
 80009e6:	f000 f8b9 	bl	8000b5c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009ea:	f006 fb51 	bl	8007090 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	481c      	ldr	r0, [pc, #112]	; (8000a64 <main+0x98>)
 80009f4:	f000 fd73 	bl	80014de <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4819      	ldr	r0, [pc, #100]	; (8000a64 <main+0x98>)
 80009fe:	f000 fd6e 	bl	80014de <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a06:	4817      	ldr	r0, [pc, #92]	; (8000a64 <main+0x98>)
 8000a08:	f000 fd69 	bl	80014de <HAL_GPIO_TogglePin>

	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4816      	ldr	r0, [pc, #88]	; (8000a68 <main+0x9c>)
 8000a10:	f000 fd34 	bl	800147c <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <main+0xa0>)
 8000a1a:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <main+0xa0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a28:	480e      	ldr	r0, [pc, #56]	; (8000a64 <main+0x98>)
 8000a2a:	f000 fd3f 	bl	80014ac <HAL_GPIO_WritePin>


	  snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d\r\n",Counter++,KeyState);
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <main+0xa4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	490e      	ldr	r1, [pc, #56]	; (8000a70 <main+0xa4>)
 8000a36:	600a      	str	r2, [r1, #0]
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <main+0xa0>)
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <main+0xa8>)
 8000a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <main+0xac>)
 8000a46:	f007 f87d 	bl	8007b44 <sniprintf>
	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000a4a:	480b      	ldr	r0, [pc, #44]	; (8000a78 <main+0xac>)
 8000a4c:	f7ff fbc0 	bl	80001d0 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4619      	mov	r1, r3
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <main+0xac>)
 8000a56:	f006 fbd9 	bl	800720c <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5e:	f000 fa3b 	bl	8000ed8 <HAL_Delay>
  {
 8000a62:	e7c4      	b.n	80009ee <main+0x22>
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	200003a0 	.word	0x200003a0
 8000a70:	2000039c 	.word	0x2000039c
 8000a74:	08008460 	.word	0x08008460
 8000a78:	2000029c 	.word	0x2000029c

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2230      	movs	r2, #48	; 0x30
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f007 f852 	bl	8007b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a27      	ldr	r2, [pc, #156]	; (8000b48 <SystemClock_Config+0xcc>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <SystemClock_Config+0xcc>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <SystemClock_Config+0xd0>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <SystemClock_Config+0xd0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aec:	2308      	movs	r3, #8
 8000aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000afa:	2307      	movs	r3, #7
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fc6e 	bl	80033e4 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b0e:	f000 f81f 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	230f      	movs	r3, #15
 8000b14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2302      	movs	r3, #2
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2105      	movs	r1, #5
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 fecf 	bl	80038d4 <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b3c:	f000 f808 	bl	8000b50 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3750      	adds	r7, #80	; 0x50
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b62:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000ba8:	220a      	movs	r2, #10
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_SPI1_Init+0x64>)
 8000bae:	f003 f9dd 	bl	8003f6c <HAL_SPI_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bb8:	f7ff ffca 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200003a4 	.word	0x200003a4
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <HAL_SPI_MspInit+0x84>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12b      	bne.n	8000c42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c22:	23e0      	movs	r3, #224	; 0xe0
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c32:	2305      	movs	r3, #5
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000c3e:	f000 fa81 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40013000 	.word	0x40013000
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c96:	2007      	movs	r0, #7
 8000c98:	f000 fa12 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8d0 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <OTG_FS_IRQHandler+0x10>)
 8000d02:	f001 fb3b 	bl	800237c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200018d8 	.word	0x200018d8

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f006 fece 	bl	8007ae0 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20020000 	.word	0x20020000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	200003fc 	.word	0x200003fc
 8000d78:	20001f10 	.word	0x20001f10

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da6:	490e      	ldr	r1, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dbc:	4c0b      	ldr	r4, [pc, #44]	; (8000dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd7 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f006 fe8d 	bl	8007aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fdfb 	bl	80009cc <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000de4:	08008524 	.word	0x08008524
  ldr r2, =_sbss
 8000de8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000dec:	20001f10 	.word	0x20001f10

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f94f 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff ff16 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f967 	bl	800112a <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f92f 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000400 	.word	0x20000400

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000400 	.word	0x20000400

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e16b      	b.n	8001438 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 815a 	bne.w	8001432 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d005      	beq.n	8001196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	2b02      	cmp	r3, #2
 8001194:	d130      	bne.n	80011f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 0201 	and.w	r2, r3, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b03      	cmp	r3, #3
 8001202:	d017      	beq.n	8001234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d123      	bne.n	8001288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	08da      	lsrs	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3208      	adds	r2, #8
 8001248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	69b9      	ldr	r1, [r7, #24]
 8001284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0203 	and.w	r2, r3, #3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80b4 	beq.w	8001432 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b60      	ldr	r3, [pc, #384]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a5f      	ldr	r2, [pc, #380]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e6:	4a5b      	ldr	r2, [pc, #364]	; (8001454 <HAL_GPIO_Init+0x310>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x314>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02b      	beq.n	800136a <HAL_GPIO_Init+0x226>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x318>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x222>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <HAL_GPIO_Init+0x31c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x21e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_GPIO_Init+0x320>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x21a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_GPIO_Init+0x324>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x216>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4d      	ldr	r2, [pc, #308]	; (800146c <HAL_GPIO_Init+0x328>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x212>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <HAL_GPIO_Init+0x32c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x20e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_GPIO_Init+0x330>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x20a>
 800134a:	2307      	movs	r3, #7
 800134c:	e00e      	b.n	800136c <HAL_GPIO_Init+0x228>
 800134e:	2308      	movs	r3, #8
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001352:	2306      	movs	r3, #6
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x228>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x228>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x228>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_GPIO_Init+0x310>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_GPIO_Init+0x334>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_GPIO_Init+0x334>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_GPIO_Init+0x334>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_GPIO_Init+0x334>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f ae90 	bls.w	8001160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40021c00 	.word	0x40021c00
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014de:	b480      	push	{r7}
 80014e0:	b085      	sub	sp, #20
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f0:	887a      	ldrh	r2, [r7, #2]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4013      	ands	r3, r2
 80014f6:	041a      	lsls	r2, r3, #16
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	400b      	ands	r3, r1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e12b      	b.n	800177e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff f94e 	bl	80007dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001578:	f002 fba4 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a81      	ldr	r2, [pc, #516]	; (8001788 <HAL_I2C_Init+0x274>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d807      	bhi.n	8001598 <HAL_I2C_Init+0x84>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a80      	ldr	r2, [pc, #512]	; (800178c <HAL_I2C_Init+0x278>)
 800158c:	4293      	cmp	r3, r2
 800158e:	bf94      	ite	ls
 8001590:	2301      	movls	r3, #1
 8001592:	2300      	movhi	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	e006      	b.n	80015a6 <HAL_I2C_Init+0x92>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a7d      	ldr	r2, [pc, #500]	; (8001790 <HAL_I2C_Init+0x27c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	bf94      	ite	ls
 80015a0:	2301      	movls	r3, #1
 80015a2:	2300      	movhi	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0e7      	b.n	800177e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a78      	ldr	r2, [pc, #480]	; (8001794 <HAL_I2C_Init+0x280>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0c9b      	lsrs	r3, r3, #18
 80015b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a6a      	ldr	r2, [pc, #424]	; (8001788 <HAL_I2C_Init+0x274>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d802      	bhi.n	80015e8 <HAL_I2C_Init+0xd4>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3301      	adds	r3, #1
 80015e6:	e009      	b.n	80015fc <HAL_I2C_Init+0xe8>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4a69      	ldr	r2, [pc, #420]	; (8001798 <HAL_I2C_Init+0x284>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800160e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	495c      	ldr	r1, [pc, #368]	; (8001788 <HAL_I2C_Init+0x274>)
 8001618:	428b      	cmp	r3, r1
 800161a:	d819      	bhi.n	8001650 <HAL_I2C_Init+0x13c>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e59      	subs	r1, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fbb1 f3f3 	udiv	r3, r1, r3
 800162a:	1c59      	adds	r1, r3, #1
 800162c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001630:	400b      	ands	r3, r1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00a      	beq.n	800164c <HAL_I2C_Init+0x138>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fbb1 f3f3 	udiv	r3, r1, r3
 8001644:	3301      	adds	r3, #1
 8001646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164a:	e051      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 800164c:	2304      	movs	r3, #4
 800164e:	e04f      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <HAL_I2C_Init+0x168>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	440b      	add	r3, r1
 8001666:	fbb0 f3f3 	udiv	r3, r0, r3
 800166a:	3301      	adds	r3, #1
 800166c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	e012      	b.n	80016a2 <HAL_I2C_Init+0x18e>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	0099      	lsls	r1, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001692:	3301      	adds	r3, #1
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Init+0x196>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e022      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10e      	bne.n	80016d0 <HAL_I2C_Init+0x1bc>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1e58      	subs	r0, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6859      	ldr	r1, [r3, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	440b      	add	r3, r1
 80016c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ce:	e00f      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1e58      	subs	r0, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	0099      	lsls	r1, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	6809      	ldr	r1, [r1, #0]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69da      	ldr	r2, [r3, #28]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800171e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6911      	ldr	r1, [r2, #16]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68d2      	ldr	r2, [r2, #12]
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	430b      	orrs	r3, r1
 8001732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2220      	movs	r2, #32
 800176a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	000186a0 	.word	0x000186a0
 800178c:	001e847f 	.word	0x001e847f
 8001790:	003d08ff 	.word	0x003d08ff
 8001794:	431bde83 	.word	0x431bde83
 8001798:	10624dd3 	.word	0x10624dd3

0800179c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e128      	b.n	8001a00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a90      	ldr	r2, [pc, #576]	; (8001a08 <HAL_I2S_Init+0x26c>)
 80017c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff f87f 	bl	80008cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2202      	movs	r2, #2
 80017d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017e4:	f023 030f 	bic.w	r3, r3, #15
 80017e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2202      	movs	r2, #2
 80017f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d060      	beq.n	80018bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001802:	2310      	movs	r3, #16
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e001      	b.n	800180c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001808:	2320      	movs	r3, #32
 800180a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b20      	cmp	r3, #32
 8001812:	d802      	bhi.n	800181a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800181a:	2001      	movs	r0, #1
 800181c:	f002 fb48 	bl	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001820:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182a:	d125      	bne.n	8001878 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d010      	beq.n	8001856 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	fbb2 f2f3 	udiv	r2, r2, r3
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	3305      	adds	r3, #5
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e01f      	b.n	8001896 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	3305      	adds	r3, #5
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	e00e      	b.n	8001896 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	3305      	adds	r3, #5
 8001894:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_I2S_Init+0x270>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	e003      	b.n	80018c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d902      	bls.n	80018d0 <HAL_I2S_Init+0x134>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d907      	bls.n	80018e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0210 	orr.w	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e08f      	b.n	8001a00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	ea42 0103 	orr.w	r1, r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018fe:	f023 030f 	bic.w	r3, r3, #15
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6851      	ldr	r1, [r2, #4]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6892      	ldr	r2, [r2, #8]
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	68d2      	ldr	r2, [r2, #12]
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6992      	ldr	r2, [r2, #24]
 8001916:	430a      	orrs	r2, r1
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001922:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d161      	bne.n	80019f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_I2S_Init+0x274>)
 8001930:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a37      	ldr	r2, [pc, #220]	; (8001a14 <HAL_I2S_Init+0x278>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_I2S_Init+0x1a4>
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_I2S_Init+0x27c>)
 800193e:	e001      	b.n	8001944 <HAL_I2S_Init+0x1a8>
 8001940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	4932      	ldr	r1, [pc, #200]	; (8001a14 <HAL_I2S_Init+0x278>)
 800194c:	428a      	cmp	r2, r1
 800194e:	d101      	bne.n	8001954 <HAL_I2S_Init+0x1b8>
 8001950:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <HAL_I2S_Init+0x27c>)
 8001952:	e001      	b.n	8001958 <HAL_I2S_Init+0x1bc>
 8001954:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001958:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <HAL_I2S_Init+0x278>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_I2S_Init+0x1d4>
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_I2S_Init+0x27c>)
 800196e:	e001      	b.n	8001974 <HAL_I2S_Init+0x1d8>
 8001970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001974:	2202      	movs	r2, #2
 8001976:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_I2S_Init+0x278>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_I2S_Init+0x1ea>
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_I2S_Init+0x27c>)
 8001984:	e001      	b.n	800198a <HAL_I2S_Init+0x1ee>
 8001986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001996:	d003      	beq.n	80019a0 <HAL_I2S_Init+0x204>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e001      	b.n	80019ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_I2S_Init+0x278>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_I2S_Init+0x24c>
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_I2S_Init+0x27c>)
 80019e6:	e001      	b.n	80019ec <HAL_I2S_Init+0x250>
 80019e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019ec:	897a      	ldrh	r2, [r7, #10]
 80019ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	08001b13 	.word	0x08001b13
 8001a0c:	cccccccd 	.word	0xcccccccd
 8001a10:	08001c29 	.word	0x08001c29
 8001a14:	40003800 	.word	0x40003800
 8001a18:	40003400 	.word	0x40003400

08001a1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	881a      	ldrh	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	1c9a      	adds	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10e      	bne.n	8001aac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffb8 	bl	8001a1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	b292      	uxth	r2, r2
 8001ac8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	1c9a      	adds	r2, r3, #2
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10e      	bne.n	8001b0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001afa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff93 	bl	8001a30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d13a      	bne.n	8001ba4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d109      	bne.n	8001b4c <I2S_IRQHandler+0x3a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d102      	bne.n	8001b4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffb4 	bl	8001ab4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	d126      	bne.n	8001ba4 <I2S_IRQHandler+0x92>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d11f      	bne.n	8001ba4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff50 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d136      	bne.n	8001c1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d109      	bne.n	8001bce <I2S_IRQHandler+0xbc>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc4:	2b80      	cmp	r3, #128	; 0x80
 8001bc6:	d102      	bne.n	8001bce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff45 	bl	8001a58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d122      	bne.n	8001c1e <I2S_IRQHandler+0x10c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d11b      	bne.n	8001c1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bf4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0204 	orr.w	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff13 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a92      	ldr	r2, [pc, #584]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c42:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c44:	e001      	b.n	8001c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a8b      	ldr	r2, [pc, #556]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c60:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c62:	e001      	b.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c74:	d004      	beq.n	8001c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 8099 	bne.w	8001db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f925 	bl	8001ee4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f9c8 	bl	8002044 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d13a      	bne.n	8001d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d035      	beq.n	8001d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cd2:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cd4:	e001      	b.n	8001cda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4969      	ldr	r1, [pc, #420]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ce2:	428b      	cmp	r3, r1
 8001ce4:	d101      	bne.n	8001cea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001ce6:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ce8:	e001      	b.n	8001cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cf2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fe88 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	f040 80c3 	bne.w	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80bd 	beq.w	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a49      	ldr	r2, [pc, #292]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d68:	e001      	b.n	8001d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4944      	ldr	r1, [pc, #272]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d76:	428b      	cmp	r3, r1
 8001d78:	d101      	bne.n	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d7a:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d7c:	e001      	b.n	8001d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f043 0204 	orr.w	r2, r3, #4
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fe4a 	bl	8001a44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001db0:	e089      	b.n	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d107      	bne.n	8001dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8be 	bl	8001f48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8fd 	bl	8001fe0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d12f      	bne.n	8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02a      	beq.n	8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e16:	e001      	b.n	8001e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4919      	ldr	r1, [pc, #100]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e24:	428b      	cmp	r3, r1
 8001e26:	d101      	bne.n	8001e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e2a:	e001      	b.n	8001e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f043 0202 	orr.w	r2, r3, #2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fdfa 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d136      	bne.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d031      	beq.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e70:	e001      	b.n	8001e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4902      	ldr	r1, [pc, #8]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e7e:	428b      	cmp	r3, r1
 8001e80:	d106      	bne.n	8001e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001e82:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e84:	e006      	b.n	8001e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001e86:	bf00      	nop
 8001e88:	40003800 	.word	0x40003800
 8001e8c:	40003400 	.word	0x40003400
 8001e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e98:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ea8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f043 0204 	orr.w	r2, r3, #4
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fdc0 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ec4:	e000      	b.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ec6:	bf00      	nop
}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c99      	adds	r1, r3, #2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6251      	str	r1, [r2, #36]	; 0x24
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d113      	bne.n	8001f3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffc9 	bl	8001ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	1c99      	adds	r1, r3, #2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6251      	str	r1, [r2, #36]	; 0x24
 8001f5a:	8819      	ldrh	r1, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <I2SEx_TxISR_I2SExt+0x22>
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <I2SEx_TxISR_I2SExt+0x94>)
 8001f68:	e001      	b.n	8001f6e <I2SEx_TxISR_I2SExt+0x26>
 8001f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6e:	460a      	mov	r2, r1
 8001f70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d121      	bne.n	8001fce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <I2SEx_TxISR_I2SExt+0x50>
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <I2SEx_TxISR_I2SExt+0x94>)
 8001f96:	e001      	b.n	8001f9c <I2SEx_TxISR_I2SExt+0x54>
 8001f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	490d      	ldr	r1, [pc, #52]	; (8001fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d101      	bne.n	8001fac <I2SEx_TxISR_I2SExt+0x64>
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <I2SEx_TxISR_I2SExt+0x94>)
 8001faa:	e001      	b.n	8001fb0 <I2SEx_TxISR_I2SExt+0x68>
 8001fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff81 	bl	8001ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40003800 	.word	0x40003800
 8001fdc:	40003400 	.word	0x40003400

08001fe0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68d8      	ldr	r0, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	1c99      	adds	r1, r3, #2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001ff8:	b282      	uxth	r2, r0
 8001ffa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d113      	bne.n	800203c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002022:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ff4a 	bl	8001ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <I2SEx_RxISR_I2SExt+0x90>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <I2SEx_RxISR_I2SExt+0x16>
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <I2SEx_RxISR_I2SExt+0x94>)
 8002058:	e001      	b.n	800205e <I2SEx_RxISR_I2SExt+0x1a>
 800205a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800205e:	68d8      	ldr	r0, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	1c99      	adds	r1, r3, #2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	62d1      	str	r1, [r2, #44]	; 0x2c
 800206a:	b282      	uxth	r2, r0
 800206c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d121      	bne.n	80020ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <I2SEx_RxISR_I2SExt+0x90>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <I2SEx_RxISR_I2SExt+0x50>
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <I2SEx_RxISR_I2SExt+0x94>)
 8002092:	e001      	b.n	8002098 <I2SEx_RxISR_I2SExt+0x54>
 8002094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	490d      	ldr	r1, [pc, #52]	; (80020d4 <I2SEx_RxISR_I2SExt+0x90>)
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d101      	bne.n	80020a8 <I2SEx_RxISR_I2SExt+0x64>
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <I2SEx_RxISR_I2SExt+0x94>)
 80020a6:	e001      	b.n	80020ac <I2SEx_RxISR_I2SExt+0x68>
 80020a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff03 	bl	8001ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40003800 	.word	0x40003800
 80020d8:	40003400 	.word	0x40003400

080020dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020de:	b08f      	sub	sp, #60	; 0x3c
 80020e0:	af0a      	add	r7, sp, #40	; 0x28
 80020e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e10f      	b.n	800230e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f005 f9c7 	bl	800749c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 f8ba 	bl	80042a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	687e      	ldr	r6, [r7, #4]
 800213a:	466d      	mov	r5, sp
 800213c:	f106 0410 	add.w	r4, r6, #16
 8002140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002150:	1d33      	adds	r3, r6, #4
 8002152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002154:	6838      	ldr	r0, [r7, #0]
 8002156:	f001 ff92 	bl	800407e <USB_CoreInit>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0d0      	b.n	800230e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f002 f8a8 	bl	80042c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e04a      	b.n	8002214 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	333d      	adds	r3, #61	; 0x3d
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	333c      	adds	r3, #60	; 0x3c
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b298      	uxth	r0, r3
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	3342      	adds	r3, #66	; 0x42
 80021ba:	4602      	mov	r2, r0
 80021bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	333f      	adds	r3, #63	; 0x3f
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3344      	adds	r3, #68	; 0x44
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3348      	adds	r3, #72	; 0x48
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3350      	adds	r3, #80	; 0x50
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	3301      	adds	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3af      	bcc.n	800217e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e044      	b.n	80022ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3301      	adds	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d3b5      	bcc.n	8002224 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	687e      	ldr	r6, [r7, #4]
 80022c0:	466d      	mov	r5, sp
 80022c2:	f106 0410 	add.w	r4, r6, #16
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d6:	1d33      	adds	r3, r6, #4
 80022d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	f002 f840 	bl	8004360 <USB_DevInit>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00d      	b.n	800230e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f003 f8bc 	bl	8005484 <USB_DevDisconnect>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002316 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_PCD_Start+0x1c>
 800232e:	2302      	movs	r3, #2
 8002330:	e020      	b.n	8002374 <HAL_PCD_Start+0x5e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	2b01      	cmp	r3, #1
 8002340:	d109      	bne.n	8002356 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002346:	2b01      	cmp	r3, #1
 8002348:	d005      	beq.n	8002356 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f001 ff92 	bl	8004284 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f003 f86c 	bl	8005442 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b08d      	sub	sp, #52	; 0x34
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f003 f92a 	bl	80055ec <USB_GetMode>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 839d 	bne.w	8002ada <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 f88e 	bl	80054c6 <USB_ReadInterrupts>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8393 	beq.w	8002ad8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 f885 	bl	80054c6 <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d107      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f002 0202 	and.w	r2, r2, #2
 80023d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 f873 	bl	80054c6 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d161      	bne.n	80024ae <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0210 	bic.w	r2, r2, #16
 80023f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	f003 020f 	and.w	r2, r3, #15
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	0c5b      	lsrs	r3, r3, #17
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	2b02      	cmp	r3, #2
 8002424:	d124      	bne.n	8002470 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d035      	beq.n	800249e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800243c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	6a38      	ldr	r0, [r7, #32]
 8002446:	f002 feaa 	bl	800519e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002456:	441a      	add	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002468:	441a      	add	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	619a      	str	r2, [r3, #24]
 800246e:	e016      	b.n	800249e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	0c5b      	lsrs	r3, r3, #17
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	2b06      	cmp	r3, #6
 800247a:	d110      	bne.n	800249e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002482:	2208      	movs	r2, #8
 8002484:	4619      	mov	r1, r3
 8002486:	6a38      	ldr	r0, [r7, #32]
 8002488:	f002 fe89 	bl	800519e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002498:	441a      	add	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0210 	orr.w	r2, r2, #16
 80024ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 f807 	bl	80054c6 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024c2:	d16e      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 f80d 	bl	80054ec <USB_ReadDevAllOutEpInterrupt>
 80024d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024d4:	e062      	b.n	800259c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d057      	beq.n	8002590 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f832 	bl	8005554 <USB_ReadDevOutEPInterrupt>
 80024f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00c      	beq.n	8002516 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002508:	461a      	mov	r2, r3
 800250a:	2301      	movs	r3, #1
 800250c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800250e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fdb1 	bl	8003078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00c      	beq.n	800253a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252c:	461a      	mov	r2, r3
 800252e:	2308      	movs	r3, #8
 8002530:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 feab 	bl	8003290 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002550:	461a      	mov	r2, r3
 8002552:	2310      	movs	r3, #16
 8002554:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256c:	461a      	mov	r2, r3
 800256e:	2320      	movs	r3, #32
 8002570:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002588:	461a      	mov	r2, r3
 800258a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	3301      	adds	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d199      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 ff8d 	bl	80054c6 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025b6:	f040 80c0 	bne.w	800273a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 ffae 	bl	8005520 <USB_ReadDevAllInEpInterrupt>
 80025c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025ca:	e0b2      	b.n	8002732 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80a7 	beq.w	8002726 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 ffd4 	bl	8005590 <USB_ReadDevInEPInterrupt>
 80025e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d057      	beq.n	80026a4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	2201      	movs	r2, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43db      	mvns	r3, r3
 800260e:	69f9      	ldr	r1, [r7, #28]
 8002610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002614:	4013      	ands	r3, r2
 8002616:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002624:	461a      	mov	r2, r3
 8002626:	2301      	movs	r3, #1
 8002628:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d132      	bne.n	8002698 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3348      	adds	r3, #72	; 0x48
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4403      	add	r3, r0
 8002652:	3344      	adds	r3, #68	; 0x44
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4419      	add	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4403      	add	r3, r0
 8002666:	3348      	adds	r3, #72	; 0x48
 8002668:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d113      	bne.n	8002698 <HAL_PCD_IRQHandler+0x31c>
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3350      	adds	r3, #80	; 0x50
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d108      	bne.n	8002698 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002690:	461a      	mov	r2, r3
 8002692:	2101      	movs	r1, #1
 8002694:	f002 ffdc 	bl	8005650 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f004 ff8b 	bl	80075ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ba:	461a      	mov	r2, r3
 80026bc:	2308      	movs	r3, #8
 80026be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d6:	461a      	mov	r2, r3
 80026d8:	2310      	movs	r3, #16
 80026da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f2:	461a      	mov	r2, r3
 80026f4:	2340      	movs	r3, #64	; 0x40
 80026f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270e:	461a      	mov	r2, r3
 8002710:	2302      	movs	r3, #2
 8002712:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800271e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fc1b 	bl	8002f5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f af49 	bne.w	80025cc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f002 fec1 	bl	80054c6 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800274a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800274e:	d122      	bne.n	8002796 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800276a:	2b01      	cmp	r3, #1
 800276c:	d108      	bne.n	8002780 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002776:	2100      	movs	r1, #0
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fe27 	bl	80033cc <HAL_PCDEx_LPM_Callback>
 800277e:	e002      	b.n	8002786 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f004 ff91 	bl	80076a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fe93 	bl	80054c6 <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027aa:	d112      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f004 ff4d 	bl	800765c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027d0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 fe75 	bl	80054c6 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	f040 80c7 	bne.w	8002978 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2110      	movs	r1, #16
 8002804:	4618      	mov	r0, r3
 8002806:	f001 ff0f 	bl	8004628 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800280e:	e056      	b.n	80028be <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281c:	461a      	mov	r2, r3
 800281e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002822:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	440a      	add	r2, r1
 800283a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800283e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002842:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002854:	0151      	lsls	r1, r2, #5
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	440a      	add	r2, r1
 800285a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800285e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002862:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002876:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002888:	0151      	lsls	r1, r2, #5
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	440a      	add	r2, r1
 800288e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002892:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002896:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a8:	0151      	lsls	r1, r2, #5
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	440a      	add	r2, r1
 80028ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	3301      	adds	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d3a3      	bcc.n	8002810 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d016      	beq.n	8002912 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f4:	f043 030b 	orr.w	r3, r3, #11
 80028f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800290a:	f043 030b 	orr.w	r3, r3, #11
 800290e:	6453      	str	r3, [r2, #68]	; 0x44
 8002910:	e015      	b.n	800293e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002924:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002928:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002938:	f043 030b 	orr.w	r3, r3, #11
 800293c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002950:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002962:	461a      	mov	r2, r3
 8002964:	f002 fe74 	bl	8005650 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f002 fda2 	bl	80054c6 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298c:	d124      	bne.n	80029d8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f002 fe38 	bl	8005608 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f001 fea0 	bl	80046e2 <USB_GetDevSpeed>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681c      	ldr	r4, [r3, #0]
 80029ae:	f001 f97d 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 80029b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	4620      	mov	r0, r4
 80029be:	f001 fbbf 	bl	8004140 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f004 fe21 	bl	800760a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 fd72 	bl	80054c6 <USB_ReadInterrupts>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d10a      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f004 fdfe 	bl	80075ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 0208 	and.w	r2, r2, #8
 8002a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fd5d 	bl	80054c6 <USB_ReadInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a16:	d10f      	bne.n	8002a38 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f004 fe60 	bl	80076e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f002 fd42 	bl	80054c6 <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a4c:	d10f      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f004 fe33 	bl	80076c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fd27 	bl	80054c6 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a82:	d10a      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f004 fe41 	bl	800770c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fd11 	bl	80054c6 <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d115      	bne.n	8002ada <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f004 fe31 	bl	8007728 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	e000      	b.n	8002ada <HAL_PCD_IRQHandler+0x75e>
      return;
 8002ad8:	bf00      	nop
    }
  }
}
 8002ada:	3734      	adds	r7, #52	; 0x34
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}

08002ae0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_PCD_SetAddress+0x1a>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e013      	b.n	8002b22 <HAL_PCD_SetAddress+0x42>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fc6f 	bl	80053f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	4608      	mov	r0, r1
 8002b34:	4611      	mov	r1, r2
 8002b36:	461a      	mov	r2, r3
 8002b38:	4603      	mov	r3, r0
 8002b3a:	70fb      	strb	r3, [r7, #3]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	803b      	strh	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da0f      	bge.n	8002b70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3338      	adds	r3, #56	; 0x38
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	705a      	strb	r2, [r3, #1]
 8002b6e:	e00f      	b.n	8002b90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b9c:	883a      	ldrh	r2, [r7, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	78ba      	ldrb	r2, [r7, #2]
 8002ba6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bba:	78bb      	ldrb	r3, [r7, #2]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_EP_Open+0xaa>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e00e      	b.n	8002bf2 <HAL_PCD_EP_Open+0xc8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 fda2 	bl	800472c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da0f      	bge.n	8002c2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	3338      	adds	r3, #56	; 0x38
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	705a      	strb	r2, [r3, #1]
 8002c2c:	e00f      	b.n	8002c4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	3304      	adds	r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_PCD_EP_Close+0x6e>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e00e      	b.n	8002c86 <HAL_PCD_EP_Close+0x8c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fde0 	bl	800483c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d102      	bne.n	8002cea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cea:	7afb      	ldrb	r3, [r7, #11]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6979      	ldr	r1, [r7, #20]
 8002d02:	f002 f8bb 	bl	8004e7c <USB_EP0StartXfer>
 8002d06:	e008      	b.n	8002d1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	6979      	ldr	r1, [r7, #20]
 8002d16:	f001 fe6d 	bl	80049f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	460b      	mov	r3, r1
 8002d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	f003 020f 	and.w	r2, r3, #15
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	3338      	adds	r3, #56	; 0x38
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	3304      	adds	r3, #4
 8002d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2201      	movs	r2, #1
 8002d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d94:	7afb      	ldrb	r3, [r7, #11]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dae:	7afb      	ldrb	r3, [r7, #11]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	6979      	ldr	r1, [r7, #20]
 8002dc6:	f002 f859 	bl	8004e7c <USB_EP0StartXfer>
 8002dca:	e008      	b.n	8002dde <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	f001 fe0b 	bl	80049f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d901      	bls.n	8002e06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e050      	b.n	8002ea8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da0f      	bge.n	8002e2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	f003 020f 	and.w	r2, r3, #15
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	3338      	adds	r3, #56	; 0x38
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	3304      	adds	r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	705a      	strb	r2, [r3, #1]
 8002e2c:	e00d      	b.n	8002e4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_PCD_EP_SetStall+0x82>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e01e      	b.n	8002ea8 <HAL_PCD_EP_SetStall+0xc0>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f002 f9e8 	bl	800524e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	b2d9      	uxtb	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f002 fbd9 	bl	8005650 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d901      	bls.n	8002ece <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e042      	b.n	8002f54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	da0f      	bge.n	8002ef6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 020f 	and.w	r2, r3, #15
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	3338      	adds	r3, #56	; 0x38
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	3304      	adds	r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	705a      	strb	r2, [r3, #1]
 8002ef4:	e00f      	b.n	8002f16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_PCD_EP_ClrStall+0x86>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e00e      	b.n	8002f54 <HAL_PCD_EP_ClrStall+0xa4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 f9f0 	bl	800532a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	3338      	adds	r3, #56	; 0x38
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d901      	bls.n	8002f94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e06c      	b.n	800306e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d902      	bls.n	8002fb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3303      	adds	r3, #3
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fb8:	e02b      	b.n	8003012 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d902      	bls.n	8002fd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3303      	adds	r3, #3
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68d9      	ldr	r1, [r3, #12]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6978      	ldr	r0, [r7, #20]
 8002ff6:	f002 f894 	bl	8005122 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	441a      	add	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	b29b      	uxth	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	429a      	cmp	r2, r3
 8003026:	d809      	bhi.n	800303c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003030:	429a      	cmp	r2, r3
 8003032:	d203      	bcs.n	800303c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1be      	bne.n	8002fba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	429a      	cmp	r2, r3
 8003046:	d811      	bhi.n	800306c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	43db      	mvns	r3, r3
 8003062:	6939      	ldr	r1, [r7, #16]
 8003064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003068:	4013      	ands	r3, r2
 800306a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	333c      	adds	r3, #60	; 0x3c
 8003090:	3304      	adds	r3, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	f040 80a0 	bne.w	80031f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a72      	ldr	r2, [pc, #456]	; (8003288 <PCD_EP_OutXfrComplete_int+0x210>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	f240 80dd 	bls.w	800327e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80d7 	beq.w	800327e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030dc:	461a      	mov	r2, r3
 80030de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e2:	6093      	str	r3, [r2, #8]
 80030e4:	e0cb      	b.n	800327e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fc:	461a      	mov	r2, r3
 80030fe:	2320      	movs	r3, #32
 8003100:	6093      	str	r3, [r2, #8]
 8003102:	e0bc      	b.n	800327e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 80b7 	bne.w	800327e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a5d      	ldr	r2, [pc, #372]	; (8003288 <PCD_EP_OutXfrComplete_int+0x210>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d90f      	bls.n	8003138 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312e:	461a      	mov	r2, r3
 8003130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003134:	6093      	str	r3, [r2, #8]
 8003136:	e0a2      	b.n	800327e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800314a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	0159      	lsls	r1, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	440b      	add	r3, r1
 8003154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800315e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4403      	add	r3, r0
 800316e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003172:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4403      	add	r3, r0
 8003196:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4419      	add	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4403      	add	r3, r0
 80031ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d114      	bne.n	80031e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031da:	461a      	mov	r2, r3
 80031dc:	2101      	movs	r1, #1
 80031de:	f002 fa37 	bl	8005650 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f004 f9cb 	bl	8007584 <HAL_PCD_DataOutStageCallback>
 80031ee:	e046      	b.n	800327e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a26      	ldr	r2, [pc, #152]	; (800328c <PCD_EP_OutXfrComplete_int+0x214>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d124      	bne.n	8003242 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320e:	461a      	mov	r2, r3
 8003210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003214:	6093      	str	r3, [r2, #8]
 8003216:	e032      	b.n	800327e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	2320      	movs	r3, #32
 8003232:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f004 f9a2 	bl	8007584 <HAL_PCD_DataOutStageCallback>
 8003240:	e01d      	b.n	800327e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d114      	bne.n	8003272 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d108      	bne.n	8003272 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800326a:	461a      	mov	r2, r3
 800326c:	2100      	movs	r1, #0
 800326e:	f002 f9ef 	bl	8005650 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f004 f983 	bl	8007584 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	4f54300a 	.word	0x4f54300a
 800328c:	4f54310a 	.word	0x4f54310a

08003290 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	333c      	adds	r3, #60	; 0x3c
 80032a8:	3304      	adds	r3, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <PCD_EP_OutSetupPacket_int+0x88>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d90e      	bls.n	80032e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	461a      	mov	r2, r3
 80032de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f004 f93b 	bl	8007560 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <PCD_EP_OutSetupPacket_int+0x88>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d90c      	bls.n	800330c <PCD_EP_OutSetupPacket_int+0x7c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003304:	461a      	mov	r2, r3
 8003306:	2101      	movs	r1, #1
 8003308:	f002 f9a2 	bl	8005650 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	4f54300a 	.word	0x4f54300a

0800331c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
 8003328:	4613      	mov	r3, r2
 800332a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800333a:	883b      	ldrh	r3, [r7, #0]
 800333c:	0419      	lsls	r1, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	430a      	orrs	r2, r1
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
 8003348:	e028      	b.n	800339c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4413      	add	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e00d      	b.n	800337a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	3340      	adds	r3, #64	; 0x40
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	3301      	adds	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	3b01      	subs	r3, #1
 8003380:	429a      	cmp	r2, r3
 8003382:	d3ec      	bcc.n	800335e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003384:	883b      	ldrh	r3, [r7, #0]
 8003386:	0418      	lsls	r0, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	3b01      	subs	r3, #1
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4302      	orrs	r2, r0
 8003394:	3340      	adds	r3, #64	; 0x40
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e267      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d075      	beq.n	80034ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d00c      	beq.n	8003428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b85      	ldr	r3, [pc, #532]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	2b08      	cmp	r3, #8
 8003418:	d112      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	4b82      	ldr	r3, [pc, #520]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d10b      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05b      	beq.n	80034ec <HAL_RCC_OscConfig+0x108>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d157      	bne.n	80034ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e242      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d106      	bne.n	8003458 <HAL_RCC_OscConfig+0x74>
 800344a:	4b76      	ldr	r3, [pc, #472]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a75      	ldr	r2, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x98>
 8003462:	4b70      	ldr	r3, [pc, #448]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6f      	ldr	r2, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6c      	ldr	r2, [pc, #432]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a65      	ldr	r2, [pc, #404]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fd fd10 	bl	8000ec0 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fd fd0c 	bl	8000ec0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e207      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b5b      	ldr	r3, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xc0>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd fcfc 	bl	8000ec0 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd fcf8 	bl	8000ec0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1f3      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0xe8>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d063      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d11c      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b44      	ldr	r3, [pc, #272]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1c7      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e03a      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	4b34      	ldr	r3, [pc, #208]	; (8003628 <HAL_RCC_OscConfig+0x244>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fcb1 	bl	8000ec0 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd fcad 	bl	8000ec0 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1a8      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4925      	ldr	r1, [pc, #148]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_OscConfig+0x244>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fc90 	bl	8000ec0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fd fc8c 	bl	8000ec0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e187      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d036      	beq.n	800363c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_RCC_OscConfig+0x248>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fd fc70 	bl	8000ec0 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fd fc6c 	bl	8000ec0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e167      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80035f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x200>
 8003602:	e01b      	b.n	800363c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_OscConfig+0x248>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7fd fc59 	bl	8000ec0 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	e00e      	b.n	8003630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003612:	f7fd fc55 	bl	8000ec0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d907      	bls.n	8003630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e150      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	42470000 	.word	0x42470000
 800362c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ea      	bne.n	8003612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8097 	beq.w	8003778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364e:	4b81      	ldr	r3, [pc, #516]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a7c      	ldr	r2, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367a:	4b77      	ldr	r3, [pc, #476]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003686:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a73      	ldr	r2, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fd fc15 	bl	8000ec0 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fd fc11 	bl	8000ec0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e10c      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x2ea>
 80036c0:	4b64      	ldr	r3, [pc, #400]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a63      	ldr	r2, [pc, #396]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e01c      	b.n	8003708 <HAL_RCC_OscConfig+0x324>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x30c>
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e00b      	b.n	8003708 <HAL_RCC_OscConfig+0x324>
 80036f0:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a57      	ldr	r2, [pc, #348]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
 80036fc:	4b55      	ldr	r3, [pc, #340]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a54      	ldr	r2, [pc, #336]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 0304 	bic.w	r3, r3, #4
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d015      	beq.n	800373c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fd fbd6 	bl	8000ec0 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003718:	f7fd fbd2 	bl	8000ec0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0cb      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ee      	beq.n	8003718 <HAL_RCC_OscConfig+0x334>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7fd fbc0 	bl	8000ec0 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fd fbbc 	bl	8000ec0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0b5      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ee      	bne.n	8003744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a1 	beq.w	80038c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003782:	4b34      	ldr	r3, [pc, #208]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d05c      	beq.n	8003848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d141      	bne.n	800381a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCC_OscConfig+0x478>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fd fb90 	bl	8000ec0 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fd fb8c 	bl	8000ec0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e087      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	491b      	ldr	r1, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x478>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd fb65 	bl	8000ec0 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fd fb61 	bl	8000ec0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e05c      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x416>
 8003818:	e054      	b.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_OscConfig+0x478>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fb4e 	bl	8000ec0 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003828:	f7fd fb4a 	bl	8000ec0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e045      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x444>
 8003846:	e03d      	b.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e038      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000
 800385c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4ec>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d028      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d11a      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003898:	4293      	cmp	r3, r2
 800389a:	d111      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	3b01      	subs	r3, #1
 80038aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0cc      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d90c      	bls.n	8003910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b8      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	494d      	ldr	r1, [pc, #308]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d044      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d119      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d003      	beq.n	8003992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398e:	2b03      	cmp	r3, #3
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e06f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e067      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4934      	ldr	r1, [pc, #208]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c4:	f7fd fa7c 	bl	8000ec0 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fd fa78 	bl	8000ec0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e04f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d20c      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e032      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4916      	ldr	r1, [pc, #88]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	490e      	ldr	r1, [pc, #56]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5a:	f000 f821 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	490a      	ldr	r1, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd f9dc 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	080084c8 	.word	0x080084c8
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa4:	b094      	sub	sp, #80	; 0x50
 8003aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8003aac:	2300      	movs	r3, #0
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab8:	4b79      	ldr	r3, [pc, #484]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	f200 80e1 	bhi.w	8003c8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad2:	e0db      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b73      	ldr	r3, [pc, #460]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ad8:	e0db      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ada:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ade:	e0d8      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae0:	4b6f      	ldr	r3, [pc, #444]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aea:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d063      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b6a      	ldr	r3, [pc, #424]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	2200      	movs	r2, #0
 8003afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b08:	633b      	str	r3, [r7, #48]	; 0x30
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b12:	4622      	mov	r2, r4
 8003b14:	462b      	mov	r3, r5
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	0159      	lsls	r1, r3, #5
 8003b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b24:	0150      	lsls	r0, r2, #5
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	1a51      	subs	r1, r2, r1
 8003b2e:	6139      	str	r1, [r7, #16]
 8003b30:	4629      	mov	r1, r5
 8003b32:	eb63 0301 	sbc.w	r3, r3, r1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b44:	4659      	mov	r1, fp
 8003b46:	018b      	lsls	r3, r1, #6
 8003b48:	4651      	mov	r1, sl
 8003b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b4e:	4651      	mov	r1, sl
 8003b50:	018a      	lsls	r2, r1, #6
 8003b52:	4651      	mov	r1, sl
 8003b54:	ebb2 0801 	subs.w	r8, r2, r1
 8003b58:	4659      	mov	r1, fp
 8003b5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b72:	4690      	mov	r8, r2
 8003b74:	4699      	mov	r9, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	eb18 0303 	adds.w	r3, r8, r3
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	462b      	mov	r3, r5
 8003b80:	eb49 0303 	adc.w	r3, r9, r3
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b92:	4629      	mov	r1, r5
 8003b94:	024b      	lsls	r3, r1, #9
 8003b96:	4621      	mov	r1, r4
 8003b98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	024a      	lsls	r2, r1, #9
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb0:	f7fc fb66 	bl	8000280 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbc:	e058      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bbe:	4b38      	ldr	r3, [pc, #224]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	4611      	mov	r1, r2
 8003bca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bd8:	4642      	mov	r2, r8
 8003bda:	464b      	mov	r3, r9
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0159      	lsls	r1, r3, #5
 8003be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bea:	0150      	lsls	r0, r2, #5
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c10:	ebb2 040a 	subs.w	r4, r2, sl
 8003c14:	eb63 050b 	sbc.w	r5, r3, fp
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	00eb      	lsls	r3, r5, #3
 8003c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c26:	00e2      	lsls	r2, r4, #3
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	4643      	mov	r3, r8
 8003c2e:	18e3      	adds	r3, r4, r3
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	464b      	mov	r3, r9
 8003c34:	eb45 0303 	adc.w	r3, r5, r3
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c46:	4629      	mov	r1, r5
 8003c48:	028b      	lsls	r3, r1, #10
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c50:	4621      	mov	r1, r4
 8003c52:	028a      	lsls	r2, r1, #10
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	61fa      	str	r2, [r7, #28]
 8003c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c64:	f7fc fb0c 	bl	8000280 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c8a:	e002      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3750      	adds	r7, #80	; 0x50
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	007a1200 	.word	0x007a1200

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	080084d8 	.word	0x080084d8

08003cec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d035      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d14:	4b62      	ldr	r3, [pc, #392]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1a:	f7fd f8d1 	bl	8000ec0 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d22:	f7fd f8cd 	bl	8000ec0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0b0      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d34:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	019a      	lsls	r2, r3, #6
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	071b      	lsls	r3, r3, #28
 8003d4c:	4955      	ldr	r1, [pc, #340]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d54:	4b52      	ldr	r3, [pc, #328]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5a:	f7fd f8b1 	bl	8000ec0 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d62:	f7fd f8ad 	bl	8000ec0 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e090      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d74:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8083 	beq.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b44      	ldr	r3, [pc, #272]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	4a43      	ldr	r2, [pc, #268]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9e:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a3e      	ldr	r2, [pc, #248]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003db6:	f7fd f883 	bl	8000ec0 <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dbe:	f7fd f87f 	bl	8000ec0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e062      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ddc:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d028      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e04:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e10:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e16:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d114      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e22:	f7fd f84d 	bl	8000ec0 <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fd f849 	bl	8000ec0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e02a      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e58:	d10d      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	490d      	ldr	r1, [pc, #52]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
 8003e74:	e005      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e80:	6093      	str	r3, [r2, #8]
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8e:	4905      	ldr	r1, [pc, #20]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	42470068 	.word	0x42470068
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42470e40 	.word	0x42470e40

08003eb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d13e      	bne.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d12f      	bne.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ee6:	617b      	str	r3, [r7, #20]
          break;
 8003ee8:	e02f      	b.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003eea:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef6:	d108      	bne.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ef8:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e007      	b.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f0a:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f12:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f34:	0f1b      	lsrs	r3, r3, #28
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
          break;
 8003f42:	e002      	b.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
          break;
 8003f48:	bf00      	nop
        }
      }
      break;
 8003f4a:	bf00      	nop
    }
  }
  return frequency;
 8003f4c:	697b      	ldr	r3, [r7, #20]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	00bb8000 	.word	0x00bb8000
 8003f64:	007a1200 	.word	0x007a1200
 8003f68:	00f42400 	.word	0x00f42400

08003f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e07b      	b.n	8004076 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d009      	beq.n	8003fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	61da      	str	r2, [r3, #28]
 8003f96:	e005      	b.n	8003fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc fe02 	bl	8000bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	ea42 0103 	orr.w	r1, r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	f003 0104 	and.w	r1, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f003 0210 	and.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004064:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800407e:	b084      	sub	sp, #16
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	f107 001c 	add.w	r0, r7, #28
 800408c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	2b01      	cmp	r3, #1
 8004094:	d122      	bne.n	80040dc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f001 fb1b 	bl	800570c <USB_CoreReset>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73fb      	strb	r3, [r7, #15]
 80040da:	e01a      	b.n	8004112 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f001 fb0f 	bl	800570c <USB_CoreReset>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
 8004104:	e005      	b.n	8004112 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10b      	bne.n	8004130 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f043 0206 	orr.w	r2, r3, #6
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800413c:	b004      	add	sp, #16
 800413e:	4770      	bx	lr

08004140 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d165      	bne.n	8004220 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a41      	ldr	r2, [pc, #260]	; (800425c <USB_SetTurnaroundTime+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d906      	bls.n	800416a <USB_SetTurnaroundTime+0x2a>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4a40      	ldr	r2, [pc, #256]	; (8004260 <USB_SetTurnaroundTime+0x120>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d202      	bcs.n	800416a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004164:	230f      	movs	r3, #15
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e062      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <USB_SetTurnaroundTime+0x120>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d306      	bcc.n	8004180 <USB_SetTurnaroundTime+0x40>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <USB_SetTurnaroundTime+0x124>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d202      	bcs.n	8004180 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800417a:	230e      	movs	r3, #14
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e057      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a38      	ldr	r2, [pc, #224]	; (8004264 <USB_SetTurnaroundTime+0x124>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d306      	bcc.n	8004196 <USB_SetTurnaroundTime+0x56>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a37      	ldr	r2, [pc, #220]	; (8004268 <USB_SetTurnaroundTime+0x128>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d202      	bcs.n	8004196 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004190:	230d      	movs	r3, #13
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e04c      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a33      	ldr	r2, [pc, #204]	; (8004268 <USB_SetTurnaroundTime+0x128>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d306      	bcc.n	80041ac <USB_SetTurnaroundTime+0x6c>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4a32      	ldr	r2, [pc, #200]	; (800426c <USB_SetTurnaroundTime+0x12c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d802      	bhi.n	80041ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041a6:	230c      	movs	r3, #12
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e041      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a2f      	ldr	r2, [pc, #188]	; (800426c <USB_SetTurnaroundTime+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d906      	bls.n	80041c2 <USB_SetTurnaroundTime+0x82>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a2e      	ldr	r2, [pc, #184]	; (8004270 <USB_SetTurnaroundTime+0x130>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d802      	bhi.n	80041c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041bc:	230b      	movs	r3, #11
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e036      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4a2a      	ldr	r2, [pc, #168]	; (8004270 <USB_SetTurnaroundTime+0x130>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d906      	bls.n	80041d8 <USB_SetTurnaroundTime+0x98>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4a29      	ldr	r2, [pc, #164]	; (8004274 <USB_SetTurnaroundTime+0x134>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d802      	bhi.n	80041d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041d2:	230a      	movs	r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e02b      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4a26      	ldr	r2, [pc, #152]	; (8004274 <USB_SetTurnaroundTime+0x134>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d906      	bls.n	80041ee <USB_SetTurnaroundTime+0xae>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4a25      	ldr	r2, [pc, #148]	; (8004278 <USB_SetTurnaroundTime+0x138>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d202      	bcs.n	80041ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041e8:	2309      	movs	r3, #9
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e020      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <USB_SetTurnaroundTime+0x138>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d306      	bcc.n	8004204 <USB_SetTurnaroundTime+0xc4>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4a20      	ldr	r2, [pc, #128]	; (800427c <USB_SetTurnaroundTime+0x13c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d802      	bhi.n	8004204 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041fe:	2308      	movs	r3, #8
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e015      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4a1d      	ldr	r2, [pc, #116]	; (800427c <USB_SetTurnaroundTime+0x13c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d906      	bls.n	800421a <USB_SetTurnaroundTime+0xda>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <USB_SetTurnaroundTime+0x140>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d202      	bcs.n	800421a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004214:	2307      	movs	r3, #7
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e00a      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800421a:	2306      	movs	r3, #6
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e007      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004226:	2309      	movs	r3, #9
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e001      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800422c:	2309      	movs	r3, #9
 800422e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	00d8acbf 	.word	0x00d8acbf
 8004260:	00e4e1c0 	.word	0x00e4e1c0
 8004264:	00f42400 	.word	0x00f42400
 8004268:	01067380 	.word	0x01067380
 800426c:	011a499f 	.word	0x011a499f
 8004270:	01312cff 	.word	0x01312cff
 8004274:	014ca43f 	.word	0x014ca43f
 8004278:	016e3600 	.word	0x016e3600
 800427c:	01a6ab1f 	.word	0x01a6ab1f
 8004280:	01e84800 	.word	0x01e84800

08004284 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 0201 	bic.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d115      	bne.n	8004316 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042f6:	2001      	movs	r0, #1
 80042f8:	f7fc fdee 	bl	8000ed8 <HAL_Delay>
      ms++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 f972 	bl	80055ec <USB_GetMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d01e      	beq.n	800434c <USB_SetCurrentMode+0x84>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b31      	cmp	r3, #49	; 0x31
 8004312:	d9f0      	bls.n	80042f6 <USB_SetCurrentMode+0x2e>
 8004314:	e01a      	b.n	800434c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d115      	bne.n	8004348 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004328:	2001      	movs	r0, #1
 800432a:	f7fc fdd5 	bl	8000ed8 <HAL_Delay>
      ms++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 f959 	bl	80055ec <USB_GetMode>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <USB_SetCurrentMode+0x84>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b31      	cmp	r3, #49	; 0x31
 8004344:	d9f0      	bls.n	8004328 <USB_SetCurrentMode+0x60>
 8004346:	e001      	b.n	800434c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e005      	b.n	8004358 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b32      	cmp	r3, #50	; 0x32
 8004350:	d101      	bne.n	8004356 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004360:	b084      	sub	sp, #16
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800436e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e009      	b.n	8004394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3340      	adds	r3, #64	; 0x40
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3301      	adds	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0e      	cmp	r3, #14
 8004398:	d9f2      	bls.n	8004380 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11c      	bne.n	80043da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
 80043d8:	e00b      	b.n	80043f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004404:	4619      	mov	r1, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	461a      	mov	r2, r3
 800440e:	680b      	ldr	r3, [r1, #0]
 8004410:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10c      	bne.n	8004432 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f945 	bl	80046b0 <USB_SetDevSpeed>
 8004426:	e008      	b.n	800443a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004428:	2101      	movs	r1, #1
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f940 	bl	80046b0 <USB_SetDevSpeed>
 8004430:	e003      	b.n	800443a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004432:	2103      	movs	r1, #3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f93b 	bl	80046b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800443a:	2110      	movs	r1, #16
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8f3 	bl	8004628 <USB_FlushTxFifo>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f90f 	bl	8004670 <USB_FlushRxFifo>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	461a      	mov	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e043      	b.n	800450e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449c:	d118      	bne.n	80044d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	461a      	mov	r2, r3
 80044b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e013      	b.n	80044e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e008      	b.n	80044e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	461a      	mov	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	461a      	mov	r2, r3
 80044f0:	2300      	movs	r3, #0
 80044f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	461a      	mov	r2, r3
 8004502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004506:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3b7      	bcc.n	8004486 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e043      	b.n	80045a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800452e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004532:	d118      	bne.n	8004566 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	461a      	mov	r2, r3
 8004548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e013      	b.n	8004578 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	461a      	mov	r2, r3
 800455e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	e008      	b.n	8004578 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	461a      	mov	r2, r3
 8004586:	2300      	movs	r3, #0
 8004588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	461a      	mov	r2, r3
 8004598:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800459c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3301      	adds	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3b7      	bcc.n	800451c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f043 0210 	orr.w	r2, r3, #16
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <USB_DevInit+0x2c4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f043 0208 	orr.w	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004620:	b004      	add	sp, #16
 8004622:	4770      	bx	lr
 8004624:	803c3800 	.word	0x803c3800

08004628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3301      	adds	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	4a08      	ldr	r2, [pc, #32]	; (800466c <USB_FlushTxFifo+0x44>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e006      	b.n	8004660 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	d0f1      	beq.n	8004642 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	00030d40 	.word	0x00030d40

08004670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2210      	movs	r2, #16
 8004680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3301      	adds	r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	4a08      	ldr	r2, [pc, #32]	; (80046ac <USB_FlushRxFifo+0x3c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e006      	b.n	80046a0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d0f1      	beq.n	8004682 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	00030d40 	.word	0x00030d40

080046b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b087      	sub	sp, #28
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0306 	and.w	r3, r3, #6
 80046fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]
 8004706:	e00a      	b.n	800471e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d002      	beq.n	8004714 <USB_GetDevSpeed+0x32>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b06      	cmp	r3, #6
 8004712:	d102      	bne.n	800471a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004714:	2302      	movs	r3, #2
 8004716:	75fb      	strb	r3, [r7, #23]
 8004718:	e001      	b.n	800471e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800471a:	230f      	movs	r3, #15
 800471c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800471e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004720:	4618      	mov	r0, r3
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d13a      	bne.n	80047be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	2101      	movs	r1, #1
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	68f9      	ldr	r1, [r7, #12]
 8004762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004766:	4313      	orrs	r3, r2
 8004768:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d155      	bne.n	800482c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	78db      	ldrb	r3, [r3, #3]
 800479a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800479c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	059b      	lsls	r3, r3, #22
 80047a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047a4:	4313      	orrs	r3, r2
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e036      	b.n	800482c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	041b      	lsls	r3, r3, #16
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047dc:	4313      	orrs	r3, r2
 80047de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11a      	bne.n	800482c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	78db      	ldrb	r3, [r3, #3]
 8004810:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004812:	430b      	orrs	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d161      	bne.n	800491c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800486a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800486e:	d11f      	bne.n	80048b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800488e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	2101      	movs	r1, #1
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d0:	4013      	ands	r3, r2
 80048d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	2101      	movs	r1, #1
 80048e6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f4:	4013      	ands	r3, r2
 80048f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	0159      	lsls	r1, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	440b      	add	r3, r1
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	4619      	mov	r1, r3
 8004914:	4b35      	ldr	r3, [pc, #212]	; (80049ec <USB_DeactivateEndpoint+0x1b0>)
 8004916:	4013      	ands	r3, r2
 8004918:	600b      	str	r3, [r1, #0]
 800491a:	e060      	b.n	80049de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800492e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004932:	d11f      	bne.n	8004974 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004952:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004972:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	43db      	mvns	r3, r3
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004994:	4013      	ands	r3, r2
 8004996:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	2101      	movs	r1, #1
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	43db      	mvns	r3, r3
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049b8:	4013      	ands	r3, r2
 80049ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	0159      	lsls	r1, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	440b      	add	r3, r1
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	4619      	mov	r1, r3
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <USB_DeactivateEndpoint+0x1b4>)
 80049da:	4013      	ands	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	ec337800 	.word	0xec337800
 80049f0:	eff37800 	.word	0xeff37800

080049f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 815c 	bne.w	8004cce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d132      	bne.n	8004a84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	0151      	lsls	r1, r2, #5
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	440a      	add	r2, r1
 8004a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7c:	0cdb      	lsrs	r3, r3, #19
 8004a7e:	04db      	lsls	r3, r3, #19
 8004a80:	6113      	str	r3, [r2, #16]
 8004a82:	e074      	b.n	8004b6e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9e:	0cdb      	lsrs	r3, r3, #19
 8004aa0:	04db      	lsls	r3, r3, #19
 8004aa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ac2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6959      	ldr	r1, [r3, #20]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	440b      	add	r3, r1
 8004ae0:	1e59      	subs	r1, r3, #1
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004aec:	4b9d      	ldr	r3, [pc, #628]	; (8004d64 <USB_EPStartXfer+0x370>)
 8004aee:	400b      	ands	r3, r1
 8004af0:	69b9      	ldr	r1, [r7, #24]
 8004af2:	0148      	lsls	r0, r1, #5
 8004af4:	69f9      	ldr	r1, [r7, #28]
 8004af6:	4401      	add	r1, r0
 8004af8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	0148      	lsls	r0, r1, #5
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	78db      	ldrb	r3, [r3, #3]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d11f      	bne.n	8004b6e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d14b      	bne.n	8004c0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	78db      	ldrb	r3, [r3, #3]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d128      	bne.n	8004bea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d110      	bne.n	8004bca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e00f      	b.n	8004bea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e12f      	b.n	8004e6c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	78db      	ldrb	r3, [r3, #3]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d015      	beq.n	8004c60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8117 	beq.w	8004e6c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	2101      	movs	r1, #1
 8004c50:	fa01 f303 	lsl.w	r3, r1, r3
 8004c54:	69f9      	ldr	r1, [r7, #28]
 8004c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c5e:	e105      	b.n	8004e6c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d110      	bne.n	8004c92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e00f      	b.n	8004cb2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	68d9      	ldr	r1, [r3, #12]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	b298      	uxth	r0, r3
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa2b 	bl	8005122 <USB_WritePacket>
 8004ccc:	e0ce      	b.n	8004e6c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce8:	0cdb      	lsrs	r3, r3, #19
 8004cea:	04db      	lsls	r3, r3, #19
 8004cec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d126      	bne.n	8004d68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	0148      	lsls	r0, r1, #5
 8004d34:	69f9      	ldr	r1, [r7, #28]
 8004d36:	4401      	add	r1, r0
 8004d38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d5e:	6113      	str	r3, [r2, #16]
 8004d60:	e036      	b.n	8004dd0 <USB_EPStartXfer+0x3dc>
 8004d62:	bf00      	nop
 8004d64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	1e5a      	subs	r2, r3, #1
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	8afb      	ldrh	r3, [r7, #22]
 8004d8e:	04d9      	lsls	r1, r3, #19
 8004d90:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <USB_EPStartXfer+0x484>)
 8004d92:	400b      	ands	r3, r1
 8004d94:	69b9      	ldr	r1, [r7, #24]
 8004d96:	0148      	lsls	r0, r1, #5
 8004d98:	69f9      	ldr	r1, [r7, #28]
 8004d9a:	4401      	add	r1, r0
 8004d9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004da0:	4313      	orrs	r3, r2
 8004da2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	8af9      	ldrh	r1, [r7, #22]
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc0:	69b9      	ldr	r1, [r7, #24]
 8004dc2:	0148      	lsls	r0, r1, #5
 8004dc4:	69f9      	ldr	r1, [r7, #28]
 8004dc6:	4401      	add	r1, r0
 8004dc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10d      	bne.n	8004df2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68d9      	ldr	r1, [r3, #12]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dee:	460a      	mov	r2, r1
 8004df0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	78db      	ldrb	r3, [r3, #3]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d128      	bne.n	8004e4c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d110      	bne.n	8004e2c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	0151      	lsls	r1, r2, #5
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	440a      	add	r2, r1
 8004e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e00f      	b.n	8004e4c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	1ff80000 	.word	0x1ff80000

08004e7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	4613      	mov	r3, r2
 8004e88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	f040 80cd 	bne.w	8005038 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d132      	bne.n	8004f0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ec4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f04:	0cdb      	lsrs	r3, r3, #19
 8004f06:	04db      	lsls	r3, r3, #19
 8004f08:	6113      	str	r3, [r2, #16]
 8004f0a:	e04e      	b.n	8004faa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f26:	0cdb      	lsrs	r3, r3, #19
 8004f28:	04db      	lsls	r3, r3, #19
 8004f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d903      	bls.n	8004f64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9a:	6939      	ldr	r1, [r7, #16]
 8004f9c:	0148      	lsls	r0, r1, #5
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	4401      	add	r1, r0
 8004fa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d11e      	bne.n	8004fee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	e092      	b.n	8005114 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005008:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800500c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d07e      	beq.n	8005114 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	2101      	movs	r1, #1
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	6979      	ldr	r1, [r7, #20]
 800502e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005032:	4313      	orrs	r3, r2
 8005034:	634b      	str	r3, [r1, #52]	; 0x34
 8005036:	e06d      	b.n	8005114 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005052:	0cdb      	lsrs	r3, r3, #19
 8005054:	04db      	lsls	r3, r3, #19
 8005056:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800507a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c2:	6939      	ldr	r1, [r7, #16]
 80050c4:	0148      	lsls	r0, r1, #5
 80050c6:	6979      	ldr	r1, [r7, #20]
 80050c8:	4401      	add	r1, r0
 80050ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050ce:	4313      	orrs	r3, r2
 80050d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d10d      	bne.n	80050f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	68d9      	ldr	r1, [r3, #12]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	460a      	mov	r2, r1
 80050f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005122:	b480      	push	{r7}
 8005124:	b089      	sub	sp, #36	; 0x24
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	4611      	mov	r1, r2
 800512e:	461a      	mov	r2, r3
 8005130:	460b      	mov	r3, r1
 8005132:	71fb      	strb	r3, [r7, #7]
 8005134:	4613      	mov	r3, r2
 8005136:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005140:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	d123      	bne.n	8005190 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005148:	88bb      	ldrh	r3, [r7, #4]
 800514a:	3303      	adds	r3, #3
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	e018      	b.n	8005188 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	031a      	lsls	r2, r3, #12
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005162:	461a      	mov	r2, r3
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6013      	str	r3, [r2, #0]
      pSrc++;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	3301      	adds	r3, #1
 800516e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	3301      	adds	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3301      	adds	r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	3301      	adds	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	3301      	adds	r3, #1
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	429a      	cmp	r2, r3
 800518e:	d3e2      	bcc.n	8005156 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3724      	adds	r7, #36	; 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800519e:	b480      	push	{r7}
 80051a0:	b08b      	sub	sp, #44	; 0x2c
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	4613      	mov	r3, r2
 80051aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051c4:	2300      	movs	r3, #0
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	e014      	b.n	80051f4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	3301      	adds	r3, #1
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	3301      	adds	r3, #1
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	3301      	adds	r3, #1
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	3301      	adds	r3, #1
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	3301      	adds	r3, #1
 80051f2:	623b      	str	r3, [r7, #32]
 80051f4:	6a3a      	ldr	r2, [r7, #32]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d3e6      	bcc.n	80051ca <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051fc:	8bfb      	ldrh	r3, [r7, #30]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01e      	beq.n	8005240 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520c:	461a      	mov	r2, r3
 800520e:	f107 0310 	add.w	r3, r7, #16
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	b2da      	uxtb	r2, r3
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	701a      	strb	r2, [r3, #0]
      i++;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	3301      	adds	r3, #1
 800522c:	623b      	str	r3, [r7, #32]
      pDest++;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	3301      	adds	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005234:	8bfb      	ldrh	r3, [r7, #30]
 8005236:	3b01      	subs	r3, #1
 8005238:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800523a:	8bfb      	ldrh	r3, [r7, #30]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ea      	bne.n	8005216 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005242:	4618      	mov	r0, r3
 8005244:	372c      	adds	r7, #44	; 0x2c
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d12c      	bne.n	80052c4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	db12      	blt.n	80052a2 <USB_EPSetStall+0x54>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00f      	beq.n	80052a2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	440a      	add	r2, r1
 8005298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e02b      	b.n	800531c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	db12      	blt.n	80052fc <USB_EPSetStall+0xae>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00f      	beq.n	80052fc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052fa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800531a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d128      	bne.n	8005398 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005364:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	78db      	ldrb	r3, [r3, #3]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d003      	beq.n	8005376 <USB_EPClearStall+0x4c>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	78db      	ldrb	r3, [r3, #3]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d138      	bne.n	80053e8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e027      	b.n	80053e8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	78db      	ldrb	r3, [r3, #3]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d003      	beq.n	80053c8 <USB_EPClearStall+0x9e>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	78db      	ldrb	r3, [r3, #3]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d10f      	bne.n	80053e8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005414:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005418:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800542a:	68f9      	ldr	r1, [r7, #12]
 800542c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800545c:	f023 0303 	bic.w	r3, r3, #3
 8005460:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005470:	f023 0302 	bic.w	r3, r3, #2
 8005474:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b2:	f043 0302 	orr.w	r3, r3, #2
 80054b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4013      	ands	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	0c1b      	lsrs	r3, r3, #16
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	4013      	ands	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	b29b      	uxth	r3, r3
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005582:	68bb      	ldr	r3, [r7, #8]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
 80055c0:	01db      	lsls	r3, r3, #7
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055de:	68bb      	ldr	r3, [r7, #8]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f003 0301 	and.w	r3, r3, #1
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005622:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	460b      	mov	r3, r1
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	333c      	adds	r3, #60	; 0x3c
 8005666:	3304      	adds	r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4a26      	ldr	r2, [pc, #152]	; (8005708 <USB_EP0_OutStart+0xb8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d90a      	bls.n	800568a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005684:	d101      	bne.n	800568a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e037      	b.n	80056fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	461a      	mov	r2, r3
 8005692:	2300      	movs	r3, #0
 8005694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b8:	f043 0318 	orr.w	r3, r3, #24
 80056bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056d2:	7afb      	ldrb	r3, [r7, #11]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10f      	bne.n	80056f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	4f54300a 	.word	0x4f54300a

0800570c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	4a13      	ldr	r2, [pc, #76]	; (800576c <USB_CoreReset+0x60>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d901      	bls.n	8005728 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e01a      	b.n	800575e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	daf3      	bge.n	8005718 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f043 0201 	orr.w	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	4a09      	ldr	r2, [pc, #36]	; (800576c <USB_CoreReset+0x60>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d901      	bls.n	8005750 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e006      	b.n	800575e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d0f1      	beq.n	8005740 <USB_CoreReset+0x34>

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	00030d40 	.word	0x00030d40

08005770 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800577c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005780:	f002 f96a 	bl	8007a58 <USBD_static_malloc>
 8005784:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005794:	2302      	movs	r3, #2
 8005796:	e066      	b.n	8005866 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	7c1b      	ldrb	r3, [r3, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d119      	bne.n	80057dc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ac:	2202      	movs	r2, #2
 80057ae:	2181      	movs	r1, #129	; 0x81
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f002 f82e 	bl	8007812 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057c0:	2202      	movs	r2, #2
 80057c2:	2101      	movs	r1, #1
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f002 f824 	bl	8007812 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2210      	movs	r2, #16
 80057d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80057da:	e016      	b.n	800580a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057dc:	2340      	movs	r3, #64	; 0x40
 80057de:	2202      	movs	r2, #2
 80057e0:	2181      	movs	r1, #129	; 0x81
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f002 f815 	bl	8007812 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057ee:	2340      	movs	r3, #64	; 0x40
 80057f0:	2202      	movs	r2, #2
 80057f2:	2101      	movs	r1, #1
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f002 f80c 	bl	8007812 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2210      	movs	r2, #16
 8005806:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800580a:	2308      	movs	r3, #8
 800580c:	2203      	movs	r2, #3
 800580e:	2182      	movs	r1, #130	; 0x82
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fffe 	bl	8007812 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	7c1b      	ldrb	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d109      	bne.n	8005854 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800584a:	2101      	movs	r1, #1
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f002 f8cf 	bl	80079f0 <USBD_LL_PrepareReceive>
 8005852:	e007      	b.n	8005864 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800585a:	2340      	movs	r3, #64	; 0x40
 800585c:	2101      	movs	r1, #1
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f002 f8c6 	bl	80079f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800587a:	2181      	movs	r1, #129	; 0x81
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 ffee 	bl	800785e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005888:	2101      	movs	r1, #1
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f001 ffe7 	bl	800785e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005898:	2182      	movs	r1, #130	; 0x82
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 ffdf 	bl	800785e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00e      	beq.n	80058d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058ca:	4618      	mov	r0, r3
 80058cc:	f002 f8d2 	bl	8007a74 <USBD_static_free>
    pdev->pClassData = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005908:	2303      	movs	r3, #3
 800590a:	e0af      	b.n	8005a6c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005914:	2b00      	cmp	r3, #0
 8005916:	d03f      	beq.n	8005998 <USBD_CDC_Setup+0xb4>
 8005918:	2b20      	cmp	r3, #32
 800591a:	f040 809f 	bne.w	8005a5c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	88db      	ldrh	r3, [r3, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02e      	beq.n	8005984 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	b25b      	sxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	da16      	bge.n	800595e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800593c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	88d2      	ldrh	r2, [r2, #6]
 8005942:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	88db      	ldrh	r3, [r3, #6]
 8005948:	2b07      	cmp	r3, #7
 800594a:	bf28      	it	cs
 800594c:	2307      	movcs	r3, #7
 800594e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	89fa      	ldrh	r2, [r7, #14]
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 fb19 	bl	8006f8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800595c:	e085      	b.n	8005a6a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	785a      	ldrb	r2, [r3, #1]
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	88db      	ldrh	r3, [r3, #6]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005974:	6939      	ldr	r1, [r7, #16]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	461a      	mov	r2, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 fb32 	bl	8006fe6 <USBD_CtlPrepareRx>
      break;
 8005982:	e072      	b.n	8005a6a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	7850      	ldrb	r0, [r2, #1]
 8005990:	2200      	movs	r2, #0
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	4798      	blx	r3
      break;
 8005996:	e068      	b.n	8005a6a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b0b      	cmp	r3, #11
 800599e:	d852      	bhi.n	8005a46 <USBD_CDC_Setup+0x162>
 80059a0:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <USBD_CDC_Setup+0xc4>)
 80059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a6:	bf00      	nop
 80059a8:	080059d9 	.word	0x080059d9
 80059ac:	08005a55 	.word	0x08005a55
 80059b0:	08005a47 	.word	0x08005a47
 80059b4:	08005a47 	.word	0x08005a47
 80059b8:	08005a47 	.word	0x08005a47
 80059bc:	08005a47 	.word	0x08005a47
 80059c0:	08005a47 	.word	0x08005a47
 80059c4:	08005a47 	.word	0x08005a47
 80059c8:	08005a47 	.word	0x08005a47
 80059cc:	08005a47 	.word	0x08005a47
 80059d0:	08005a03 	.word	0x08005a03
 80059d4:	08005a2d 	.word	0x08005a2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d107      	bne.n	80059f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80059e4:	f107 030a 	add.w	r3, r7, #10
 80059e8:	2202      	movs	r2, #2
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 face 	bl	8006f8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059f2:	e032      	b.n	8005a5a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fa58 	bl	8006eac <USBD_CtlError>
            ret = USBD_FAIL;
 80059fc:	2303      	movs	r3, #3
 80059fe:	75fb      	strb	r3, [r7, #23]
          break;
 8005a00:	e02b      	b.n	8005a5a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d107      	bne.n	8005a1e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a0e:	f107 030d 	add.w	r3, r7, #13
 8005a12:	2201      	movs	r2, #1
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 fab9 	bl	8006f8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a1c:	e01d      	b.n	8005a5a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fa43 	bl	8006eac <USBD_CtlError>
            ret = USBD_FAIL;
 8005a26:	2303      	movs	r3, #3
 8005a28:	75fb      	strb	r3, [r7, #23]
          break;
 8005a2a:	e016      	b.n	8005a5a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d00f      	beq.n	8005a58 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 fa36 	bl	8006eac <USBD_CtlError>
            ret = USBD_FAIL;
 8005a40:	2303      	movs	r3, #3
 8005a42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a44:	e008      	b.n	8005a58 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fa2f 	bl	8006eac <USBD_CtlError>
          ret = USBD_FAIL;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	75fb      	strb	r3, [r7, #23]
          break;
 8005a52:	e002      	b.n	8005a5a <USBD_CDC_Setup+0x176>
          break;
 8005a54:	bf00      	nop
 8005a56:	e008      	b.n	8005a6a <USBD_CDC_Setup+0x186>
          break;
 8005a58:	bf00      	nop
      }
      break;
 8005a5a:	e006      	b.n	8005a6a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fa24 	bl	8006eac <USBD_CtlError>
      ret = USBD_FAIL;
 8005a64:	2303      	movs	r3, #3
 8005a66:	75fb      	strb	r3, [r7, #23]
      break;
 8005a68:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005a86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e04f      	b.n	8005b36 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	3318      	adds	r3, #24
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d029      	beq.n	8005b08 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3318      	adds	r3, #24
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	78f9      	ldrb	r1, [r7, #3]
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	460b      	mov	r3, r1
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	1a5b      	subs	r3, r3, r1
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4403      	add	r3, r0
 8005ad4:	3344      	adds	r3, #68	; 0x44
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d110      	bne.n	8005b08 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	3318      	adds	r3, #24
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005afa:	78f9      	ldrb	r1, [r7, #3]
 8005afc:	2300      	movs	r3, #0
 8005afe:	2200      	movs	r2, #0
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 ff54 	bl	80079ae <USBD_LL_Transmit>
 8005b06:	e015      	b.n	8005b34 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005b30:	78fa      	ldrb	r2, [r7, #3]
 8005b32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e015      	b.n	8005b8c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 ff64 	bl	8007a32 <USBD_LL_GetRxDataSize>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b86:	4611      	mov	r1, r2
 8005b88:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e01b      	b.n	8005be6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d015      	beq.n	8005be4 <USBD_CDC_EP0_RxReady+0x50>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bbe:	2bff      	cmp	r3, #255	; 0xff
 8005bc0:	d010      	beq.n	8005be4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005bd0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bd8:	b292      	uxth	r2, r2
 8005bda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2243      	movs	r2, #67	; 0x43
 8005bfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005bfe:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	20000094 	.word	0x20000094

08005c10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2243      	movs	r2, #67	; 0x43
 8005c1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005c1e:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	20000050 	.word	0x20000050

08005c30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2243      	movs	r2, #67	; 0x43
 8005c3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005c3e:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	200000d8 	.word	0x200000d8

08005c50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	220a      	movs	r2, #10
 8005c5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c5e:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	2000000c 	.word	0x2000000c

08005c70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e004      	b.n	8005c8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e008      	b.n	8005cca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ce6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e004      	b.n	8005cfc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e01a      	b.n	8005d60 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d114      	bne.n	8005d5e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d52:	2181      	movs	r1, #129	; 0x81
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 fe2a 	bl	80079ae <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e016      	b.n	8005db4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	7c1b      	ldrb	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d98:	2101      	movs	r1, #1
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fe28 	bl	80079f0 <USBD_LL_PrepareReceive>
 8005da0:	e007      	b.n	8005db2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005da8:	2340      	movs	r3, #64	; 0x40
 8005daa:	2101      	movs	r1, #1
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 fe1f 	bl	80079f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e01f      	b.n	8005e14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	79fa      	ldrb	r2, [r7, #7]
 8005e06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f001 fc9b 	bl	8007744 <USBD_LL_Init>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e016      	b.n	8005e62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	f107 020e 	add.w	r2, r7, #14
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
 8005e58:	4602      	mov	r2, r0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 fcb2 	bl	80077dc <USBD_LL_Start>
 8005e78:	4603      	mov	r3, r0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	78fa      	ldrb	r2, [r7, #3]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
  }

  return USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 ff90 	bl	8006e38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d01a      	beq.n	8005f72 <USBD_LL_SetupStage+0x72>
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d822      	bhi.n	8005f86 <USBD_LL_SetupStage+0x86>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <USBD_LL_SetupStage+0x4a>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d00a      	beq.n	8005f5e <USBD_LL_SetupStage+0x5e>
 8005f48:	e01d      	b.n	8005f86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa62 	bl	800641c <USBD_StdDevReq>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f5c:	e020      	b.n	8005fa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fac6 	bl	80064f8 <USBD_StdItfReq>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f70:	e016      	b.n	8005fa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fb05 	bl	800658a <USBD_StdEPReq>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]
      break;
 8005f84:	e00c      	b.n	8005fa0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fc81 	bl	800789c <USBD_LL_StallEP>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9e:	bf00      	nop
  }

  return ret;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d138      	bne.n	8006030 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005fc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d14a      	bne.n	8006066 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d913      	bls.n	8006004 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	1ad2      	subs	r2, r2, r3
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	bf28      	it	cs
 8005ff6:	4613      	movcs	r3, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f001 f80f 	bl	8007020 <USBD_CtlContinueRx>
 8006002:	e030      	b.n	8006066 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b03      	cmp	r3, #3
 800600e:	d10b      	bne.n	8006028 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f001 f80a 	bl	8007042 <USBD_CtlSendStatus>
 800602e:	e01a      	b.n	8006066 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b03      	cmp	r3, #3
 800603a:	d114      	bne.n	8006066 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	7afa      	ldrb	r2, [r7, #11]
 8006052:	4611      	mov	r1, r2
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	4798      	blx	r3
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	e000      	b.n	8006068 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	460b      	mov	r3, r1
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d16b      	bne.n	800615c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3314      	adds	r3, #20
 8006088:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006090:	2b02      	cmp	r3, #2
 8006092:	d156      	bne.n	8006142 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	429a      	cmp	r2, r3
 800609e:	d914      	bls.n	80060ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	1ad2      	subs	r2, r2, r3
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 ff84 	bl	8006fc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060bc:	2300      	movs	r3, #0
 80060be:	2200      	movs	r2, #0
 80060c0:	2100      	movs	r1, #0
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f001 fc94 	bl	80079f0 <USBD_LL_PrepareReceive>
 80060c8:	e03b      	b.n	8006142 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d11c      	bne.n	8006110 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060de:	429a      	cmp	r2, r3
 80060e0:	d316      	bcc.n	8006110 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d20f      	bcs.n	8006110 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060f0:	2200      	movs	r2, #0
 80060f2:	2100      	movs	r1, #0
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 ff65 	bl	8006fc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006102:	2300      	movs	r3, #0
 8006104:	2200      	movs	r2, #0
 8006106:	2100      	movs	r1, #0
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f001 fc71 	bl	80079f0 <USBD_LL_PrepareReceive>
 800610e:	e018      	b.n	8006142 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b03      	cmp	r3, #3
 800611a:	d10b      	bne.n	8006134 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006134:	2180      	movs	r1, #128	; 0x80
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f001 fbb0 	bl	800789c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 ff93 	bl	8007068 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006148:	2b01      	cmp	r3, #1
 800614a:	d122      	bne.n	8006192 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff fe98 	bl	8005e82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800615a:	e01a      	b.n	8006192 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b03      	cmp	r3, #3
 8006166:	d114      	bne.n	8006192 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00e      	beq.n	8006192 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	7afa      	ldrb	r2, [r7, #11]
 800617e:	4611      	mov	r1, r2
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	4798      	blx	r3
 8006184:	4603      	mov	r3, r0
 8006186:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	e000      	b.n	8006194 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e02f      	b.n	8006230 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00f      	beq.n	80061fa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6852      	ldr	r2, [r2, #4]
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	4611      	mov	r1, r2
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061fa:	2340      	movs	r3, #64	; 0x40
 80061fc:	2200      	movs	r2, #0
 80061fe:	2100      	movs	r1, #0
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 fb06 	bl	8007812 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2240      	movs	r2, #64	; 0x40
 8006212:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006216:	2340      	movs	r3, #64	; 0x40
 8006218:	2200      	movs	r2, #0
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 faf8 	bl	8007812 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2240      	movs	r2, #64	; 0x40
 800622c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006266:	b2da      	uxtb	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2204      	movs	r2, #4
 8006272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b04      	cmp	r3, #4
 8006296:	d106      	bne.n	80062a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e012      	b.n	80062f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d10b      	bne.n	80062ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800630e:	2303      	movs	r3, #3
 8006310:	e014      	b.n	800633c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d10d      	bne.n	800633a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	4611      	mov	r1, r2
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800635a:	2303      	movs	r3, #3
 800635c:	e014      	b.n	8006388 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b03      	cmp	r3, #3
 8006368:	d10d      	bne.n	8006386 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	78fa      	ldrb	r2, [r7, #3]
 8006380:	4611      	mov	r1, r2
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6852      	ldr	r2, [r2, #4]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	4611      	mov	r1, r2
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
  }

  return USBD_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063de:	b480      	push	{r7}
 80063e0:	b087      	sub	sp, #28
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	3301      	adds	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063fc:	8a3b      	ldrh	r3, [r7, #16]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	b21a      	sxth	r2, r3
 8006402:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006406:	4313      	orrs	r3, r2
 8006408:	b21b      	sxth	r3, r3
 800640a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800640c:	89fb      	ldrh	r3, [r7, #14]
}
 800640e:	4618      	mov	r0, r3
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d005      	beq.n	8006442 <USBD_StdDevReq+0x26>
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d853      	bhi.n	80064e2 <USBD_StdDevReq+0xc6>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <USBD_StdDevReq+0x3a>
 800643e:	2b20      	cmp	r3, #32
 8006440:	d14f      	bne.n	80064e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
      break;
 8006454:	e04a      	b.n	80064ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b09      	cmp	r3, #9
 800645c:	d83b      	bhi.n	80064d6 <USBD_StdDevReq+0xba>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <USBD_StdDevReq+0x48>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	080064b9 	.word	0x080064b9
 8006468:	080064cd 	.word	0x080064cd
 800646c:	080064d7 	.word	0x080064d7
 8006470:	080064c3 	.word	0x080064c3
 8006474:	080064d7 	.word	0x080064d7
 8006478:	08006497 	.word	0x08006497
 800647c:	0800648d 	.word	0x0800648d
 8006480:	080064d7 	.word	0x080064d7
 8006484:	080064af 	.word	0x080064af
 8006488:	080064a1 	.word	0x080064a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f9de 	bl	8006850 <USBD_GetDescriptor>
          break;
 8006494:	e024      	b.n	80064e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fb43 	bl	8006b24 <USBD_SetAddress>
          break;
 800649e:	e01f      	b.n	80064e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb82 	bl	8006bac <USBD_SetConfig>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
          break;
 80064ac:	e018      	b.n	80064e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc21 	bl	8006cf8 <USBD_GetConfig>
          break;
 80064b6:	e013      	b.n	80064e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fc52 	bl	8006d64 <USBD_GetStatus>
          break;
 80064c0:	e00e      	b.n	80064e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fc81 	bl	8006dcc <USBD_SetFeature>
          break;
 80064ca:	e009      	b.n	80064e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fc90 	bl	8006df4 <USBD_ClrFeature>
          break;
 80064d4:	e004      	b.n	80064e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fce7 	bl	8006eac <USBD_CtlError>
          break;
 80064de:	bf00      	nop
      }
      break;
 80064e0:	e004      	b.n	80064ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fce1 	bl	8006eac <USBD_CtlError>
      break;
 80064ea:	bf00      	nop
  }

  return ret;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop

080064f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d005      	beq.n	800651e <USBD_StdItfReq+0x26>
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d82f      	bhi.n	8006576 <USBD_StdItfReq+0x7e>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <USBD_StdItfReq+0x26>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d12b      	bne.n	8006576 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006524:	b2db      	uxtb	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	2b02      	cmp	r3, #2
 800652a:	d81d      	bhi.n	8006568 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	889b      	ldrh	r3, [r3, #4]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d813      	bhi.n	800655e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	88db      	ldrh	r3, [r3, #6]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d110      	bne.n	8006572 <USBD_StdItfReq+0x7a>
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10d      	bne.n	8006572 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fd73 	bl	8007042 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800655c:	e009      	b.n	8006572 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fca3 	bl	8006eac <USBD_CtlError>
          break;
 8006566:	e004      	b.n	8006572 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fc9e 	bl	8006eac <USBD_CtlError>
          break;
 8006570:	e000      	b.n	8006574 <USBD_StdItfReq+0x7c>
          break;
 8006572:	bf00      	nop
      }
      break;
 8006574:	e004      	b.n	8006580 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fc97 	bl	8006eac <USBD_CtlError>
      break;
 800657e:	bf00      	nop
  }

  return ret;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	889b      	ldrh	r3, [r3, #4]
 800659c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d007      	beq.n	80065ba <USBD_StdEPReq+0x30>
 80065aa:	2b40      	cmp	r3, #64	; 0x40
 80065ac:	f200 8145 	bhi.w	800683a <USBD_StdEPReq+0x2b0>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <USBD_StdEPReq+0x44>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	f040 8140 	bne.w	800683a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
 80065c8:	4603      	mov	r3, r0
 80065ca:	73fb      	strb	r3, [r7, #15]
      break;
 80065cc:	e13a      	b.n	8006844 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d007      	beq.n	80065e6 <USBD_StdEPReq+0x5c>
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	f300 8129 	bgt.w	800682e <USBD_StdEPReq+0x2a4>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d07f      	beq.n	80066e0 <USBD_StdEPReq+0x156>
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d03c      	beq.n	800665e <USBD_StdEPReq+0xd4>
 80065e4:	e123      	b.n	800682e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d002      	beq.n	80065f8 <USBD_StdEPReq+0x6e>
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d016      	beq.n	8006624 <USBD_StdEPReq+0x9a>
 80065f6:	e02c      	b.n	8006652 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00d      	beq.n	800661a <USBD_StdEPReq+0x90>
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	2b80      	cmp	r3, #128	; 0x80
 8006602:	d00a      	beq.n	800661a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 f947 	bl	800789c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 f943 	bl	800789c <USBD_LL_StallEP>
 8006616:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006618:	e020      	b.n	800665c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fc45 	bl	8006eac <USBD_CtlError>
              break;
 8006622:	e01b      	b.n	800665c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	885b      	ldrh	r3, [r3, #2]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10e      	bne.n	800664a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <USBD_StdEPReq+0xc0>
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	2b80      	cmp	r3, #128	; 0x80
 8006636:	d008      	beq.n	800664a <USBD_StdEPReq+0xc0>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	88db      	ldrh	r3, [r3, #6]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 f929 	bl	800789c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fcf9 	bl	8007042 <USBD_CtlSendStatus>

              break;
 8006650:	e004      	b.n	800665c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fc29 	bl	8006eac <USBD_CtlError>
              break;
 800665a:	bf00      	nop
          }
          break;
 800665c:	e0ec      	b.n	8006838 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d002      	beq.n	8006670 <USBD_StdEPReq+0xe6>
 800666a:	2b03      	cmp	r3, #3
 800666c:	d016      	beq.n	800669c <USBD_StdEPReq+0x112>
 800666e:	e030      	b.n	80066d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00d      	beq.n	8006692 <USBD_StdEPReq+0x108>
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	2b80      	cmp	r3, #128	; 0x80
 800667a:	d00a      	beq.n	8006692 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 f90b 	bl	800789c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006686:	2180      	movs	r1, #128	; 0x80
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f907 	bl	800789c <USBD_LL_StallEP>
 800668e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006690:	e025      	b.n	80066de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fc09 	bl	8006eac <USBD_CtlError>
              break;
 800669a:	e020      	b.n	80066de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	885b      	ldrh	r3, [r3, #2]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11b      	bne.n	80066dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 f911 	bl	80078da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fcc2 	bl	8007042 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	4798      	blx	r3
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80066d0:	e004      	b.n	80066dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fbe9 	bl	8006eac <USBD_CtlError>
              break;
 80066da:	e000      	b.n	80066de <USBD_StdEPReq+0x154>
              break;
 80066dc:	bf00      	nop
          }
          break;
 80066de:	e0ab      	b.n	8006838 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d002      	beq.n	80066f2 <USBD_StdEPReq+0x168>
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d032      	beq.n	8006756 <USBD_StdEPReq+0x1cc>
 80066f0:	e097      	b.n	8006822 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <USBD_StdEPReq+0x17e>
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b80      	cmp	r3, #128	; 0x80
 80066fc:	d004      	beq.n	8006708 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fbd3 	bl	8006eac <USBD_CtlError>
                break;
 8006706:	e091      	b.n	800682c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800670c:	2b00      	cmp	r3, #0
 800670e:	da0b      	bge.n	8006728 <USBD_StdEPReq+0x19e>
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	3310      	adds	r3, #16
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4413      	add	r3, r2
 8006724:	3304      	adds	r3, #4
 8006726:	e00b      	b.n	8006740 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4413      	add	r3, r2
 800673e:	3304      	adds	r3, #4
 8006740:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2202      	movs	r2, #2
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fc1d 	bl	8006f8e <USBD_CtlSendData>
              break;
 8006754:	e06a      	b.n	800682c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006756:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800675a:	2b00      	cmp	r3, #0
 800675c:	da11      	bge.n	8006782 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	f003 020f 	and.w	r2, r3, #15
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	3324      	adds	r3, #36	; 0x24
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d117      	bne.n	80067a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fb96 	bl	8006eac <USBD_CtlError>
                  break;
 8006780:	e054      	b.n	800682c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	f003 020f 	and.w	r2, r3, #15
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	440b      	add	r3, r1
 8006794:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fb83 	bl	8006eac <USBD_CtlError>
                  break;
 80067a6:	e041      	b.n	800682c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da0b      	bge.n	80067c8 <USBD_StdEPReq+0x23e>
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	3310      	adds	r3, #16
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	3304      	adds	r3, #4
 80067c6:	e00b      	b.n	80067e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	3304      	adds	r3, #4
 80067e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <USBD_StdEPReq+0x264>
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	2b80      	cmp	r3, #128	; 0x80
 80067ec:	d103      	bne.n	80067f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e00e      	b.n	8006814 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 f88c 	bl	8007918 <USBD_LL_IsStallEP>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2201      	movs	r2, #1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e002      	b.n	8006814 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2202      	movs	r2, #2
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fbb7 	bl	8006f8e <USBD_CtlSendData>
              break;
 8006820:	e004      	b.n	800682c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb41 	bl	8006eac <USBD_CtlError>
              break;
 800682a:	bf00      	nop
          }
          break;
 800682c:	e004      	b.n	8006838 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fb3b 	bl	8006eac <USBD_CtlError>
          break;
 8006836:	bf00      	nop
      }
      break;
 8006838:	e004      	b.n	8006844 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fb35 	bl	8006eac <USBD_CtlError>
      break;
 8006842:	bf00      	nop
  }

  return ret;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	0a1b      	lsrs	r3, r3, #8
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	2b06      	cmp	r3, #6
 8006872:	f200 8128 	bhi.w	8006ac6 <USBD_GetDescriptor+0x276>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <USBD_GetDescriptor+0x2c>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006899 	.word	0x08006899
 8006880:	080068b1 	.word	0x080068b1
 8006884:	080068f1 	.word	0x080068f1
 8006888:	08006ac7 	.word	0x08006ac7
 800688c:	08006ac7 	.word	0x08006ac7
 8006890:	08006a67 	.word	0x08006a67
 8006894:	08006a93 	.word	0x08006a93
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	7c12      	ldrb	r2, [r2, #16]
 80068a4:	f107 0108 	add.w	r1, r7, #8
 80068a8:	4610      	mov	r0, r2
 80068aa:	4798      	blx	r3
 80068ac:	60f8      	str	r0, [r7, #12]
      break;
 80068ae:	e112      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	7c1b      	ldrb	r3, [r3, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10d      	bne.n	80068d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	f107 0208 	add.w	r2, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	2202      	movs	r2, #2
 80068d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068d2:	e100      	b.n	8006ad6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	f107 0208 	add.w	r2, r7, #8
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
 80068e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	2202      	movs	r2, #2
 80068ec:	701a      	strb	r2, [r3, #0]
      break;
 80068ee:	e0f2      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	885b      	ldrh	r3, [r3, #2]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b05      	cmp	r3, #5
 80068f8:	f200 80ac 	bhi.w	8006a54 <USBD_GetDescriptor+0x204>
 80068fc:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <USBD_GetDescriptor+0xb4>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	0800691d 	.word	0x0800691d
 8006908:	08006951 	.word	0x08006951
 800690c:	08006985 	.word	0x08006985
 8006910:	080069b9 	.word	0x080069b9
 8006914:	080069ed 	.word	0x080069ed
 8006918:	08006a21 	.word	0x08006a21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	7c12      	ldrb	r2, [r2, #16]
 8006934:	f107 0108 	add.w	r1, r7, #8
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800693e:	e091      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fab2 	bl	8006eac <USBD_CtlError>
            err++;
 8006948:	7afb      	ldrb	r3, [r7, #11]
 800694a:	3301      	adds	r3, #1
 800694c:	72fb      	strb	r3, [r7, #11]
          break;
 800694e:	e089      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00b      	beq.n	8006974 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	7c12      	ldrb	r2, [r2, #16]
 8006968:	f107 0108 	add.w	r1, r7, #8
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006972:	e077      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa98 	bl	8006eac <USBD_CtlError>
            err++;
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	3301      	adds	r3, #1
 8006980:	72fb      	strb	r3, [r7, #11]
          break;
 8006982:	e06f      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	7c12      	ldrb	r2, [r2, #16]
 800699c:	f107 0108 	add.w	r1, r7, #8
 80069a0:	4610      	mov	r0, r2
 80069a2:	4798      	blx	r3
 80069a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069a6:	e05d      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa7e 	bl	8006eac <USBD_CtlError>
            err++;
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	3301      	adds	r3, #1
 80069b4:	72fb      	strb	r3, [r7, #11]
          break;
 80069b6:	e055      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00b      	beq.n	80069dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	7c12      	ldrb	r2, [r2, #16]
 80069d0:	f107 0108 	add.w	r1, r7, #8
 80069d4:	4610      	mov	r0, r2
 80069d6:	4798      	blx	r3
 80069d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069da:	e043      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa64 	bl	8006eac <USBD_CtlError>
            err++;
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	3301      	adds	r3, #1
 80069e8:	72fb      	strb	r3, [r7, #11]
          break;
 80069ea:	e03b      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00b      	beq.n	8006a10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	7c12      	ldrb	r2, [r2, #16]
 8006a04:	f107 0108 	add.w	r1, r7, #8
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4798      	blx	r3
 8006a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a0e:	e029      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa4a 	bl	8006eac <USBD_CtlError>
            err++;
 8006a18:	7afb      	ldrb	r3, [r7, #11]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a1e:	e021      	b.n	8006a64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	7c12      	ldrb	r2, [r2, #16]
 8006a38:	f107 0108 	add.w	r1, r7, #8
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
 8006a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a42:	e00f      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa30 	bl	8006eac <USBD_CtlError>
            err++;
 8006a4c:	7afb      	ldrb	r3, [r7, #11]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	72fb      	strb	r3, [r7, #11]
          break;
 8006a52:	e007      	b.n	8006a64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa28 	bl	8006eac <USBD_CtlError>
          err++;
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006a62:	bf00      	nop
      }
      break;
 8006a64:	e037      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7c1b      	ldrb	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a76:	f107 0208 	add.w	r2, r7, #8
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4798      	blx	r3
 8006a7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a80:	e029      	b.n	8006ad6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa11 	bl	8006eac <USBD_CtlError>
        err++;
 8006a8a:	7afb      	ldrb	r3, [r7, #11]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a90:	e021      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	7c1b      	ldrb	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f107 0208 	add.w	r2, r7, #8
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4798      	blx	r3
 8006aaa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ab4:	e00f      	b.n	8006ad6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9f7 	bl	8006eac <USBD_CtlError>
        err++;
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ac4:	e007      	b.n	8006ad6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f9ef 	bl	8006eac <USBD_CtlError>
      err++;
 8006ace:	7afb      	ldrb	r3, [r7, #11]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad4:	bf00      	nop
  }

  if (err != 0U)
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11e      	bne.n	8006b1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	88db      	ldrh	r3, [r3, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d016      	beq.n	8006b12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00e      	beq.n	8006b08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	88da      	ldrh	r2, [r3, #6]
 8006aee:	893b      	ldrh	r3, [r7, #8]
 8006af0:	4293      	cmp	r3, r2
 8006af2:	bf28      	it	cs
 8006af4:	4613      	movcs	r3, r2
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006afa:	893b      	ldrh	r3, [r7, #8]
 8006afc:	461a      	mov	r2, r3
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa44 	bl	8006f8e <USBD_CtlSendData>
 8006b06:	e009      	b.n	8006b1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f9ce 	bl	8006eac <USBD_CtlError>
 8006b10:	e004      	b.n	8006b1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa95 	bl	8007042 <USBD_CtlSendStatus>
 8006b18:	e000      	b.n	8006b1c <USBD_GetDescriptor+0x2cc>
    return;
 8006b1a:	bf00      	nop
  }
}
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop

08006b24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	889b      	ldrh	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d131      	bne.n	8006b9a <USBD_SetAddress+0x76>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	88db      	ldrh	r3, [r3, #6]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d12d      	bne.n	8006b9a <USBD_SetAddress+0x76>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	885b      	ldrh	r3, [r3, #2]
 8006b42:	2b7f      	cmp	r3, #127	; 0x7f
 8006b44:	d829      	bhi.n	8006b9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d104      	bne.n	8006b68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f9a3 	bl	8006eac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b66:	e01d      	b.n	8006ba4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	7bfa      	ldrb	r2, [r7, #15]
 8006b6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fefb 	bl	8007970 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa61 	bl	8007042 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8e:	e009      	b.n	8006ba4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b98:	e004      	b.n	8006ba4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f985 	bl	8006eac <USBD_CtlError>
  }
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	4b4c      	ldr	r3, [pc, #304]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006bc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bc4:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d905      	bls.n	8006bd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f96c 	bl	8006eac <USBD_CtlError>
    return USBD_FAIL;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e088      	b.n	8006cea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d002      	beq.n	8006bea <USBD_SetConfig+0x3e>
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d025      	beq.n	8006c34 <USBD_SetConfig+0x88>
 8006be8:	e071      	b.n	8006cce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bea:	4b42      	ldr	r3, [pc, #264]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d01c      	beq.n	8006c2c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006bf2:	4b40      	ldr	r3, [pc, #256]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bfc:	4b3d      	ldr	r3, [pc, #244]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff f948 	bl	8005e98 <USBD_SetClassConfig>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f949 	bl	8006eac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c1a:	e065      	b.n	8006ce8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa10 	bl	8007042 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2203      	movs	r2, #3
 8006c26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c2a:	e05d      	b.n	8006ce8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fa08 	bl	8007042 <USBD_CtlSendStatus>
      break;
 8006c32:	e059      	b.n	8006ce8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c34:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d112      	bne.n	8006c62 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c4e:	4b29      	ldr	r3, [pc, #164]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff f93b 	bl	8005ed0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9f1 	bl	8007042 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c60:	e042      	b.n	8006ce8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006c62:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d02a      	beq.n	8006cc6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff f929 	bl	8005ed0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c7e:	4b1d      	ldr	r3, [pc, #116]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c88:	4b1a      	ldr	r3, [pc, #104]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff f902 	bl	8005e98 <USBD_SetClassConfig>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00f      	beq.n	8006cbe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f903 	bl	8006eac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff f90e 	bl	8005ed0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cbc:	e014      	b.n	8006ce8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9bf 	bl	8007042 <USBD_CtlSendStatus>
      break;
 8006cc4:	e010      	b.n	8006ce8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9bb 	bl	8007042 <USBD_CtlSendStatus>
      break;
 8006ccc:	e00c      	b.n	8006ce8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f8eb 	bl	8006eac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cd6:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <USBD_SetConfig+0x148>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff f8f7 	bl	8005ed0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce6:	bf00      	nop
  }

  return ret;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000404 	.word	0x20000404

08006cf8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	88db      	ldrh	r3, [r3, #6]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d004      	beq.n	8006d14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8cd 	bl	8006eac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d12:	e023      	b.n	8006d5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	dc02      	bgt.n	8006d26 <USBD_GetConfig+0x2e>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dc03      	bgt.n	8006d2c <USBD_GetConfig+0x34>
 8006d24:	e015      	b.n	8006d52 <USBD_GetConfig+0x5a>
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d00b      	beq.n	8006d42 <USBD_GetConfig+0x4a>
 8006d2a:	e012      	b.n	8006d52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3308      	adds	r3, #8
 8006d36:	2201      	movs	r2, #1
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f927 	bl	8006f8e <USBD_CtlSendData>
        break;
 8006d40:	e00c      	b.n	8006d5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3304      	adds	r3, #4
 8006d46:	2201      	movs	r2, #1
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f91f 	bl	8006f8e <USBD_CtlSendData>
        break;
 8006d50:	e004      	b.n	8006d5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f8a9 	bl	8006eac <USBD_CtlError>
        break;
 8006d5a:	bf00      	nop
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d81e      	bhi.n	8006dba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	88db      	ldrh	r3, [r3, #6]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d004      	beq.n	8006d8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f890 	bl	8006eac <USBD_CtlError>
        break;
 8006d8c:	e01a      	b.n	8006dc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f043 0202 	orr.w	r2, r3, #2
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	330c      	adds	r3, #12
 8006dae:	2202      	movs	r2, #2
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8eb 	bl	8006f8e <USBD_CtlSendData>
      break;
 8006db8:	e004      	b.n	8006dc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f875 	bl	8006eac <USBD_CtlError>
      break;
 8006dc2:	bf00      	nop
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	885b      	ldrh	r3, [r3, #2]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d106      	bne.n	8006dec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f92b 	bl	8007042 <USBD_CtlSendStatus>
  }
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d80b      	bhi.n	8006e24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	885b      	ldrh	r3, [r3, #2]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d10c      	bne.n	8006e2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f910 	bl	8007042 <USBD_CtlSendStatus>
      }
      break;
 8006e22:	e004      	b.n	8006e2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f840 	bl	8006eac <USBD_CtlError>
      break;
 8006e2c:	e000      	b.n	8006e30 <USBD_ClrFeature+0x3c>
      break;
 8006e2e:	bf00      	nop
  }
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3301      	adds	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff fabb 	bl	80063de <SWAPBYTE>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7ff faae 	bl	80063de <SWAPBYTE>
 8006e82:	4603      	mov	r3, r0
 8006e84:	461a      	mov	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff faa1 	bl	80063de <SWAPBYTE>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	80da      	strh	r2, [r3, #6]
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eb6:	2180      	movs	r1, #128	; 0x80
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fcef 	bl	800789c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fceb 	bl	800789c <USBD_LL_StallEP>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d036      	beq.n	8006f52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ee8:	6938      	ldr	r0, [r7, #16]
 8006eea:	f000 f836 	bl	8006f5a <USBD_GetLen>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	7812      	ldrb	r2, [r2, #0]
 8006f06:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	4413      	add	r3, r2
 8006f14:	2203      	movs	r2, #3
 8006f16:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f1e:	e013      	b.n	8006f48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	4413      	add	r3, r2
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	7812      	ldrb	r2, [r2, #0]
 8006f2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	613b      	str	r3, [r7, #16]
    idx++;
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	3301      	adds	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	3301      	adds	r3, #1
 8006f46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e7      	bne.n	8006f20 <USBD_GetString+0x52>
 8006f50:	e000      	b.n	8006f54 <USBD_GetString+0x86>
    return;
 8006f52:	bf00      	nop
  }
}
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f6a:	e005      	b.n	8006f78 <USBD_GetLen+0x1e>
  {
    len++;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	3301      	adds	r3, #1
 8006f76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f5      	bne.n	8006f6c <USBD_GetLen+0x12>
  }

  return len;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 fcfa 	bl	80079ae <USBD_LL_Transmit>

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fce9 	bl	80079ae <USBD_LL_Transmit>

  return USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	2100      	movs	r1, #0
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fced 	bl	80079f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	2100      	movs	r1, #0
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fcdc 	bl	80079f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2204      	movs	r2, #4
 800704e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007052:	2300      	movs	r3, #0
 8007054:	2200      	movs	r2, #0
 8007056:	2100      	movs	r1, #0
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fca8 	bl	80079ae <USBD_LL_Transmit>

  return USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2205      	movs	r2, #5
 8007074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007078:	2300      	movs	r3, #0
 800707a:	2200      	movs	r2, #0
 800707c:	2100      	movs	r1, #0
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fcb6 	bl	80079f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007094:	2200      	movs	r2, #0
 8007096:	4912      	ldr	r1, [pc, #72]	; (80070e0 <MX_USB_DEVICE_Init+0x50>)
 8007098:	4812      	ldr	r0, [pc, #72]	; (80070e4 <MX_USB_DEVICE_Init+0x54>)
 800709a:	f7fe fe8f 	bl	8005dbc <USBD_Init>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070a4:	f7f9 fd54 	bl	8000b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070a8:	490f      	ldr	r1, [pc, #60]	; (80070e8 <MX_USB_DEVICE_Init+0x58>)
 80070aa:	480e      	ldr	r0, [pc, #56]	; (80070e4 <MX_USB_DEVICE_Init+0x54>)
 80070ac:	f7fe feb6 	bl	8005e1c <USBD_RegisterClass>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070b6:	f7f9 fd4b 	bl	8000b50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80070ba:	490c      	ldr	r1, [pc, #48]	; (80070ec <MX_USB_DEVICE_Init+0x5c>)
 80070bc:	4809      	ldr	r0, [pc, #36]	; (80070e4 <MX_USB_DEVICE_Init+0x54>)
 80070be:	f7fe fdd7 	bl	8005c70 <USBD_CDC_RegisterInterface>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070c8:	f7f9 fd42 	bl	8000b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070cc:	4805      	ldr	r0, [pc, #20]	; (80070e4 <MX_USB_DEVICE_Init+0x54>)
 80070ce:	f7fe fecc 	bl	8005e6a <USBD_Start>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070d8:	f7f9 fd3a 	bl	8000b50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000130 	.word	0x20000130
 80070e4:	20000408 	.word	0x20000408
 80070e8:	20000018 	.word	0x20000018
 80070ec:	2000011c 	.word	0x2000011c

080070f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070f4:	2200      	movs	r2, #0
 80070f6:	4905      	ldr	r1, [pc, #20]	; (800710c <CDC_Init_FS+0x1c>)
 80070f8:	4805      	ldr	r0, [pc, #20]	; (8007110 <CDC_Init_FS+0x20>)
 80070fa:	f7fe fdce 	bl	8005c9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070fe:	4905      	ldr	r1, [pc, #20]	; (8007114 <CDC_Init_FS+0x24>)
 8007100:	4803      	ldr	r0, [pc, #12]	; (8007110 <CDC_Init_FS+0x20>)
 8007102:	f7fe fde8 	bl	8005cd6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007106:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000ed8 	.word	0x20000ed8
 8007110:	20000408 	.word	0x20000408
 8007114:	200006d8 	.word	0x200006d8

08007118 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800711c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800711e:	4618      	mov	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	6039      	str	r1, [r7, #0]
 8007132:	71fb      	strb	r3, [r7, #7]
 8007134:	4613      	mov	r3, r2
 8007136:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	2b23      	cmp	r3, #35	; 0x23
 800713c:	d84a      	bhi.n	80071d4 <CDC_Control_FS+0xac>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <CDC_Control_FS+0x1c>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	080071d5 	.word	0x080071d5
 8007148:	080071d5 	.word	0x080071d5
 800714c:	080071d5 	.word	0x080071d5
 8007150:	080071d5 	.word	0x080071d5
 8007154:	080071d5 	.word	0x080071d5
 8007158:	080071d5 	.word	0x080071d5
 800715c:	080071d5 	.word	0x080071d5
 8007160:	080071d5 	.word	0x080071d5
 8007164:	080071d5 	.word	0x080071d5
 8007168:	080071d5 	.word	0x080071d5
 800716c:	080071d5 	.word	0x080071d5
 8007170:	080071d5 	.word	0x080071d5
 8007174:	080071d5 	.word	0x080071d5
 8007178:	080071d5 	.word	0x080071d5
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071d5 	.word	0x080071d5
 8007184:	080071d5 	.word	0x080071d5
 8007188:	080071d5 	.word	0x080071d5
 800718c:	080071d5 	.word	0x080071d5
 8007190:	080071d5 	.word	0x080071d5
 8007194:	080071d5 	.word	0x080071d5
 8007198:	080071d5 	.word	0x080071d5
 800719c:	080071d5 	.word	0x080071d5
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071d5 	.word	0x080071d5
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	080071d5 	.word	0x080071d5
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071d5 	.word	0x080071d5
 80071b8:	080071d5 	.word	0x080071d5
 80071bc:	080071d5 	.word	0x080071d5
 80071c0:	080071d5 	.word	0x080071d5
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	080071d5 	.word	0x080071d5
 80071cc:	080071d5 	.word	0x080071d5
 80071d0:	080071d5 	.word	0x080071d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071d4:	bf00      	nop
  }

  return (USBD_OK);
 80071d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4805      	ldr	r0, [pc, #20]	; (8007208 <CDC_Receive_FS+0x24>)
 80071f2:	f7fe fd70 	bl	8005cd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071f6:	4804      	ldr	r0, [pc, #16]	; (8007208 <CDC_Receive_FS+0x24>)
 80071f8:	f7fe fdb6 	bl	8005d68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000408 	.word	0x20000408

0800720c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <CDC_Transmit_FS+0x48>)
 800721e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007222:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800722e:	2301      	movs	r3, #1
 8007230:	e00b      	b.n	800724a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007232:	887b      	ldrh	r3, [r7, #2]
 8007234:	461a      	mov	r2, r3
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4806      	ldr	r0, [pc, #24]	; (8007254 <CDC_Transmit_FS+0x48>)
 800723a:	f7fe fd2e 	bl	8005c9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800723e:	4805      	ldr	r0, [pc, #20]	; (8007254 <CDC_Transmit_FS+0x48>)
 8007240:	f7fe fd62 	bl	8005d08 <USBD_CDC_TransmitPacket>
 8007244:	4603      	mov	r3, r0
 8007246:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000408 	.word	0x20000408

08007258 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800726a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800726e:	4618      	mov	r0, r3
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2212      	movs	r2, #18
 800728c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800728e:	4b03      	ldr	r3, [pc, #12]	; (800729c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	2000014c 	.word	0x2000014c

080072a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	6039      	str	r1, [r7, #0]
 80072aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2204      	movs	r2, #4
 80072b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072b2:	4b03      	ldr	r3, [pc, #12]	; (80072c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	20000160 	.word	0x20000160

080072c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	6039      	str	r1, [r7, #0]
 80072ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d105      	bne.n	80072e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4907      	ldr	r1, [pc, #28]	; (80072f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80072da:	4808      	ldr	r0, [pc, #32]	; (80072fc <USBD_FS_ProductStrDescriptor+0x38>)
 80072dc:	f7ff fdf7 	bl	8006ece <USBD_GetString>
 80072e0:	e004      	b.n	80072ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	4904      	ldr	r1, [pc, #16]	; (80072f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80072e6:	4805      	ldr	r0, [pc, #20]	; (80072fc <USBD_FS_ProductStrDescriptor+0x38>)
 80072e8:	f7ff fdf1 	bl	8006ece <USBD_GetString>
  }
  return USBD_StrDesc;
 80072ec:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	200016d8 	.word	0x200016d8
 80072fc:	0800847c 	.word	0x0800847c

08007300 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	6039      	str	r1, [r7, #0]
 800730a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	4904      	ldr	r1, [pc, #16]	; (8007320 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007310:	4804      	ldr	r0, [pc, #16]	; (8007324 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007312:	f7ff fddc 	bl	8006ece <USBD_GetString>
  return USBD_StrDesc;
 8007316:	4b02      	ldr	r3, [pc, #8]	; (8007320 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200016d8 	.word	0x200016d8
 8007324:	08008498 	.word	0x08008498

08007328 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	6039      	str	r1, [r7, #0]
 8007332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	221a      	movs	r2, #26
 8007338:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800733a:	f000 f843 	bl	80073c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800733e:	4b02      	ldr	r3, [pc, #8]	; (8007348 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	20000164 	.word	0x20000164

0800734c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d105      	bne.n	800736a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4907      	ldr	r1, [pc, #28]	; (8007380 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007362:	4808      	ldr	r0, [pc, #32]	; (8007384 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007364:	f7ff fdb3 	bl	8006ece <USBD_GetString>
 8007368:	e004      	b.n	8007374 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	4904      	ldr	r1, [pc, #16]	; (8007380 <USBD_FS_ConfigStrDescriptor+0x34>)
 800736e:	4805      	ldr	r0, [pc, #20]	; (8007384 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007370:	f7ff fdad 	bl	8006ece <USBD_GetString>
  }
  return USBD_StrDesc;
 8007374:	4b02      	ldr	r3, [pc, #8]	; (8007380 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	200016d8 	.word	0x200016d8
 8007384:	080084ac 	.word	0x080084ac

08007388 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	4907      	ldr	r1, [pc, #28]	; (80073bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800739e:	4808      	ldr	r0, [pc, #32]	; (80073c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073a0:	f7ff fd95 	bl	8006ece <USBD_GetString>
 80073a4:	e004      	b.n	80073b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4904      	ldr	r1, [pc, #16]	; (80073bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073aa:	4805      	ldr	r0, [pc, #20]	; (80073c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073ac:	f7ff fd8f 	bl	8006ece <USBD_GetString>
  }
  return USBD_StrDesc;
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	200016d8 	.word	0x200016d8
 80073c0:	080084b8 	.word	0x080084b8

080073c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073ca:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <Get_SerialNum+0x44>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073d0:	4b0e      	ldr	r3, [pc, #56]	; (800740c <Get_SerialNum+0x48>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073d6:	4b0e      	ldr	r3, [pc, #56]	; (8007410 <Get_SerialNum+0x4c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4413      	add	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073ea:	2208      	movs	r2, #8
 80073ec:	4909      	ldr	r1, [pc, #36]	; (8007414 <Get_SerialNum+0x50>)
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f814 	bl	800741c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073f4:	2204      	movs	r2, #4
 80073f6:	4908      	ldr	r1, [pc, #32]	; (8007418 <Get_SerialNum+0x54>)
 80073f8:	68b8      	ldr	r0, [r7, #8]
 80073fa:	f000 f80f 	bl	800741c <IntToUnicode>
  }
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	1fff7a10 	.word	0x1fff7a10
 800740c:	1fff7a14 	.word	0x1fff7a14
 8007410:	1fff7a18 	.word	0x1fff7a18
 8007414:	20000166 	.word	0x20000166
 8007418:	20000176 	.word	0x20000176

0800741c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]
 8007432:	e027      	b.n	8007484 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	0f1b      	lsrs	r3, r3, #28
 8007438:	2b09      	cmp	r3, #9
 800743a:	d80b      	bhi.n	8007454 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	0f1b      	lsrs	r3, r3, #28
 8007440:	b2da      	uxtb	r2, r3
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	4619      	mov	r1, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	440b      	add	r3, r1
 800744c:	3230      	adds	r2, #48	; 0x30
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	e00a      	b.n	800746a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	0f1b      	lsrs	r3, r3, #28
 8007458:	b2da      	uxtb	r2, r3
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4619      	mov	r1, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	440b      	add	r3, r1
 8007464:	3237      	adds	r2, #55	; 0x37
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	011b      	lsls	r3, r3, #4
 800746e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	3301      	adds	r3, #1
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	4413      	add	r3, r2
 800747a:	2200      	movs	r2, #0
 800747c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	3301      	adds	r3, #1
 8007482:	75fb      	strb	r3, [r7, #23]
 8007484:	7dfa      	ldrb	r2, [r7, #23]
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	429a      	cmp	r2, r3
 800748a:	d3d3      	bcc.n	8007434 <IntToUnicode+0x18>
  }
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
	...

0800749c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074a4:	f107 0314 	add.w	r3, r7, #20
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	60da      	str	r2, [r3, #12]
 80074b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074bc:	d147      	bne.n	800754e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074be:	2300      	movs	r3, #0
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	4b25      	ldr	r3, [pc, #148]	; (8007558 <HAL_PCD_MspInit+0xbc>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	4a24      	ldr	r2, [pc, #144]	; (8007558 <HAL_PCD_MspInit+0xbc>)
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	6313      	str	r3, [r2, #48]	; 0x30
 80074ce:	4b22      	ldr	r3, [pc, #136]	; (8007558 <HAL_PCD_MspInit+0xbc>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80074da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	4619      	mov	r1, r3
 80074ee:	481b      	ldr	r0, [pc, #108]	; (800755c <HAL_PCD_MspInit+0xc0>)
 80074f0:	f7f9 fe28 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80074f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074fa:	2302      	movs	r3, #2
 80074fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007502:	2300      	movs	r3, #0
 8007504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007506:	230a      	movs	r3, #10
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800750a:	f107 0314 	add.w	r3, r7, #20
 800750e:	4619      	mov	r1, r3
 8007510:	4812      	ldr	r0, [pc, #72]	; (800755c <HAL_PCD_MspInit+0xc0>)
 8007512:	f7f9 fe17 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <HAL_PCD_MspInit+0xbc>)
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <HAL_PCD_MspInit+0xbc>)
 800751c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007520:	6353      	str	r3, [r2, #52]	; 0x34
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <HAL_PCD_MspInit+0xbc>)
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	4a0b      	ldr	r2, [pc, #44]	; (8007558 <HAL_PCD_MspInit+0xbc>)
 800752c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007530:	6453      	str	r3, [r2, #68]	; 0x44
 8007532:	4b09      	ldr	r3, [pc, #36]	; (8007558 <HAL_PCD_MspInit+0xbc>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	2043      	movs	r0, #67	; 0x43
 8007544:	f7f9 fdc7 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007548:	2043      	movs	r0, #67	; 0x43
 800754a:	f7f9 fde0 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800754e:	bf00      	nop
 8007550:	3728      	adds	r7, #40	; 0x28
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	40023800 	.word	0x40023800
 800755c:	40020000 	.word	0x40020000

08007560 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007574:	4619      	mov	r1, r3
 8007576:	4610      	mov	r0, r2
 8007578:	f7fe fcc2 	bl	8005f00 <USBD_LL_SetupStage>
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007596:	78fa      	ldrb	r2, [r7, #3]
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	4619      	mov	r1, r3
 80075ae:	f7fe fcfc 	bl	8005faa <USBD_LL_DataOutStage>
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	1a9b      	subs	r3, r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	3348      	adds	r3, #72	; 0x48
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	4619      	mov	r1, r3
 80075e2:	f7fe fd45 	bl	8006070 <USBD_LL_DataInStage>
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fe59 	bl	80062b4 <USBD_LL_SOF>
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007612:	2301      	movs	r3, #1
 8007614:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d102      	bne.n	8007624 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
 8007622:	e008      	b.n	8007636 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d102      	bne.n	8007632 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
 8007630:	e001      	b.n	8007636 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007632:	f7f9 fa8d 	bl	8000b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800763c:	7bfa      	ldrb	r2, [r7, #15]
 800763e:	4611      	mov	r1, r2
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fdf9 	bl	8006238 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe fda5 	bl	800619c <USBD_LL_Reset>
}
 8007652:	bf00      	nop
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fdf4 	bl	8006258 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <HAL_PCD_SuspendCallback+0x48>)
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	4a03      	ldr	r2, [pc, #12]	; (80076a4 <HAL_PCD_SuspendCallback+0x48>)
 8007696:	f043 0306 	orr.w	r3, r3, #6
 800769a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	e000ed00 	.word	0xe000ed00

080076a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fde4 	bl	8006284 <USBD_LL_Resume>
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	4611      	mov	r1, r2
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fe fe32 	bl	8006344 <USBD_LL_IsoOUTIncomplete>
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076fa:	78fa      	ldrb	r2, [r7, #3]
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fdfa 	bl	80062f8 <USBD_LL_IsoINIncomplete>
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fe38 	bl	8006390 <USBD_LL_DevConnected>
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fe35 	bl	80063a6 <USBD_LL_DevDisconnected>
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d13c      	bne.n	80077ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007754:	4a20      	ldr	r2, [pc, #128]	; (80077d8 <USBD_LL_Init+0x94>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a1e      	ldr	r2, [pc, #120]	; (80077d8 <USBD_LL_Init+0x94>)
 8007760:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007764:	4b1c      	ldr	r3, [pc, #112]	; (80077d8 <USBD_LL_Init+0x94>)
 8007766:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800776a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800776c:	4b1a      	ldr	r3, [pc, #104]	; (80077d8 <USBD_LL_Init+0x94>)
 800776e:	2204      	movs	r2, #4
 8007770:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007772:	4b19      	ldr	r3, [pc, #100]	; (80077d8 <USBD_LL_Init+0x94>)
 8007774:	2202      	movs	r2, #2
 8007776:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007778:	4b17      	ldr	r3, [pc, #92]	; (80077d8 <USBD_LL_Init+0x94>)
 800777a:	2200      	movs	r2, #0
 800777c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800777e:	4b16      	ldr	r3, [pc, #88]	; (80077d8 <USBD_LL_Init+0x94>)
 8007780:	2202      	movs	r2, #2
 8007782:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007784:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <USBD_LL_Init+0x94>)
 8007786:	2200      	movs	r2, #0
 8007788:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <USBD_LL_Init+0x94>)
 800778c:	2200      	movs	r2, #0
 800778e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007790:	4b11      	ldr	r3, [pc, #68]	; (80077d8 <USBD_LL_Init+0x94>)
 8007792:	2200      	movs	r2, #0
 8007794:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007796:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <USBD_LL_Init+0x94>)
 8007798:	2200      	movs	r2, #0
 800779a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <USBD_LL_Init+0x94>)
 800779e:	2200      	movs	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077a2:	480d      	ldr	r0, [pc, #52]	; (80077d8 <USBD_LL_Init+0x94>)
 80077a4:	f7fa fc9a 	bl	80020dc <HAL_PCD_Init>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077ae:	f7f9 f9cf 	bl	8000b50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077b2:	2180      	movs	r1, #128	; 0x80
 80077b4:	4808      	ldr	r0, [pc, #32]	; (80077d8 <USBD_LL_Init+0x94>)
 80077b6:	f7fb fdf8 	bl	80033aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	2100      	movs	r1, #0
 80077be:	4806      	ldr	r0, [pc, #24]	; (80077d8 <USBD_LL_Init+0x94>)
 80077c0:	f7fb fdac 	bl	800331c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077c4:	2280      	movs	r2, #128	; 0x80
 80077c6:	2101      	movs	r1, #1
 80077c8:	4803      	ldr	r0, [pc, #12]	; (80077d8 <USBD_LL_Init+0x94>)
 80077ca:	f7fb fda7 	bl	800331c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200018d8 	.word	0x200018d8

080077dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fa fd8f 	bl	8002316 <HAL_PCD_Start>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f942 	bl	8007a88 <USBD_Get_USB_Status>
 8007804:	4603      	mov	r3, r0
 8007806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007808:	7bbb      	ldrb	r3, [r7, #14]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	4608      	mov	r0, r1
 800781c:	4611      	mov	r1, r2
 800781e:	461a      	mov	r2, r3
 8007820:	4603      	mov	r3, r0
 8007822:	70fb      	strb	r3, [r7, #3]
 8007824:	460b      	mov	r3, r1
 8007826:	70bb      	strb	r3, [r7, #2]
 8007828:	4613      	mov	r3, r2
 800782a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800783a:	78bb      	ldrb	r3, [r7, #2]
 800783c:	883a      	ldrh	r2, [r7, #0]
 800783e:	78f9      	ldrb	r1, [r7, #3]
 8007840:	f7fb f973 	bl	8002b2a <HAL_PCD_EP_Open>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 f91c 	bl	8007a88 <USBD_Get_USB_Status>
 8007850:	4603      	mov	r3, r0
 8007852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007854:	7bbb      	ldrb	r3, [r7, #14]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007878:	78fa      	ldrb	r2, [r7, #3]
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f7fb f9bc 	bl	8002bfa <HAL_PCD_EP_Close>
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f8fd 	bl	8007a88 <USBD_Get_USB_Status>
 800788e:	4603      	mov	r3, r0
 8007890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007892:	7bbb      	ldrb	r3, [r7, #14]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fb fa94 	bl	8002de8 <HAL_PCD_EP_SetStall>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f8de 	bl	8007a88 <USBD_Get_USB_Status>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078f4:	78fa      	ldrb	r2, [r7, #3]
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fb fad9 	bl	8002eb0 <HAL_PCD_EP_ClrStall>
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f8bf 	bl	8007a88 <USBD_Get_USB_Status>
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800790e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800792a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800792c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007930:	2b00      	cmp	r3, #0
 8007932:	da0b      	bge.n	800794c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800793a:	68f9      	ldr	r1, [r7, #12]
 800793c:	4613      	mov	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	333e      	adds	r3, #62	; 0x3e
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	e00b      	b.n	8007964 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	4613      	mov	r3, r2
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	440b      	add	r3, r1
 800795e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007962:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	4611      	mov	r1, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f7fb f8a6 	bl	8002ae0 <HAL_PCD_SetAddress>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f874 	bl	8007a88 <USBD_Get_USB_Status>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
 80079ba:	460b      	mov	r3, r1
 80079bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079cc:	7af9      	ldrb	r1, [r7, #11]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	f7fb f9bf 	bl	8002d54 <HAL_PCD_EP_Transmit>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f853 	bl	8007a88 <USBD_Get_USB_Status>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	607a      	str	r2, [r7, #4]
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	460b      	mov	r3, r1
 80079fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a0e:	7af9      	ldrb	r1, [r7, #11]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	f7fb f93b 	bl	8002c8e <HAL_PCD_EP_Receive>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 f832 	bl	8007a88 <USBD_Get_USB_Status>
 8007a24:	4603      	mov	r3, r0
 8007a26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a28:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a44:	78fa      	ldrb	r2, [r7, #3]
 8007a46:	4611      	mov	r1, r2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fb f96b 	bl	8002d24 <HAL_PCD_EP_GetRxCount>
 8007a4e:	4603      	mov	r3, r0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a60:	4b03      	ldr	r3, [pc, #12]	; (8007a70 <USBD_static_malloc+0x18>)
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	20001ce0 	.word	0x20001ce0

08007a74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d817      	bhi.n	8007acc <USBD_Get_USB_Status+0x44>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <USBD_Get_USB_Status+0x1c>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007abb 	.word	0x08007abb
 8007aac:	08007ac1 	.word	0x08007ac1
 8007ab0:	08007ac7 	.word	0x08007ac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab8:	e00b      	b.n	8007ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	73fb      	strb	r3, [r7, #15]
    break;
 8007abe:	e008      	b.n	8007ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac4:	e005      	b.n	8007ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aca:	e002      	b.n	8007ad2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad0:	bf00      	nop
  }
  return usb_status;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <__errno>:
 8007ae0:	4b01      	ldr	r3, [pc, #4]	; (8007ae8 <__errno+0x8>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	20000180 	.word	0x20000180

08007aec <__libc_init_array>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	4d0d      	ldr	r5, [pc, #52]	; (8007b24 <__libc_init_array+0x38>)
 8007af0:	4c0d      	ldr	r4, [pc, #52]	; (8007b28 <__libc_init_array+0x3c>)
 8007af2:	1b64      	subs	r4, r4, r5
 8007af4:	10a4      	asrs	r4, r4, #2
 8007af6:	2600      	movs	r6, #0
 8007af8:	42a6      	cmp	r6, r4
 8007afa:	d109      	bne.n	8007b10 <__libc_init_array+0x24>
 8007afc:	4d0b      	ldr	r5, [pc, #44]	; (8007b2c <__libc_init_array+0x40>)
 8007afe:	4c0c      	ldr	r4, [pc, #48]	; (8007b30 <__libc_init_array+0x44>)
 8007b00:	f000 fca2 	bl	8008448 <_init>
 8007b04:	1b64      	subs	r4, r4, r5
 8007b06:	10a4      	asrs	r4, r4, #2
 8007b08:	2600      	movs	r6, #0
 8007b0a:	42a6      	cmp	r6, r4
 8007b0c:	d105      	bne.n	8007b1a <__libc_init_array+0x2e>
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b14:	4798      	blx	r3
 8007b16:	3601      	adds	r6, #1
 8007b18:	e7ee      	b.n	8007af8 <__libc_init_array+0xc>
 8007b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1e:	4798      	blx	r3
 8007b20:	3601      	adds	r6, #1
 8007b22:	e7f2      	b.n	8007b0a <__libc_init_array+0x1e>
 8007b24:	0800851c 	.word	0x0800851c
 8007b28:	0800851c 	.word	0x0800851c
 8007b2c:	0800851c 	.word	0x0800851c
 8007b30:	08008520 	.word	0x08008520

08007b34 <memset>:
 8007b34:	4402      	add	r2, r0
 8007b36:	4603      	mov	r3, r0
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d100      	bne.n	8007b3e <memset+0xa>
 8007b3c:	4770      	bx	lr
 8007b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b42:	e7f9      	b.n	8007b38 <memset+0x4>

08007b44 <sniprintf>:
 8007b44:	b40c      	push	{r2, r3}
 8007b46:	b530      	push	{r4, r5, lr}
 8007b48:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <sniprintf+0x64>)
 8007b4a:	1e0c      	subs	r4, r1, #0
 8007b4c:	681d      	ldr	r5, [r3, #0]
 8007b4e:	b09d      	sub	sp, #116	; 0x74
 8007b50:	da08      	bge.n	8007b64 <sniprintf+0x20>
 8007b52:	238b      	movs	r3, #139	; 0x8b
 8007b54:	602b      	str	r3, [r5, #0]
 8007b56:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5a:	b01d      	add	sp, #116	; 0x74
 8007b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b60:	b002      	add	sp, #8
 8007b62:	4770      	bx	lr
 8007b64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b6c:	bf14      	ite	ne
 8007b6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b72:	4623      	moveq	r3, r4
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	9307      	str	r3, [sp, #28]
 8007b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b7c:	9002      	str	r0, [sp, #8]
 8007b7e:	9006      	str	r0, [sp, #24]
 8007b80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b86:	ab21      	add	r3, sp, #132	; 0x84
 8007b88:	a902      	add	r1, sp, #8
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	f000 f869 	bl	8007c64 <_svfiprintf_r>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	bfbc      	itt	lt
 8007b96:	238b      	movlt	r3, #139	; 0x8b
 8007b98:	602b      	strlt	r3, [r5, #0]
 8007b9a:	2c00      	cmp	r4, #0
 8007b9c:	d0dd      	beq.n	8007b5a <sniprintf+0x16>
 8007b9e:	9b02      	ldr	r3, [sp, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
 8007ba4:	e7d9      	b.n	8007b5a <sniprintf+0x16>
 8007ba6:	bf00      	nop
 8007ba8:	20000180 	.word	0x20000180

08007bac <__ssputs_r>:
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	688e      	ldr	r6, [r1, #8]
 8007bb2:	429e      	cmp	r6, r3
 8007bb4:	4682      	mov	sl, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	4690      	mov	r8, r2
 8007bba:	461f      	mov	r7, r3
 8007bbc:	d838      	bhi.n	8007c30 <__ssputs_r+0x84>
 8007bbe:	898a      	ldrh	r2, [r1, #12]
 8007bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bc4:	d032      	beq.n	8007c2c <__ssputs_r+0x80>
 8007bc6:	6825      	ldr	r5, [r4, #0]
 8007bc8:	6909      	ldr	r1, [r1, #16]
 8007bca:	eba5 0901 	sub.w	r9, r5, r1
 8007bce:	6965      	ldr	r5, [r4, #20]
 8007bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bd8:	3301      	adds	r3, #1
 8007bda:	444b      	add	r3, r9
 8007bdc:	106d      	asrs	r5, r5, #1
 8007bde:	429d      	cmp	r5, r3
 8007be0:	bf38      	it	cc
 8007be2:	461d      	movcc	r5, r3
 8007be4:	0553      	lsls	r3, r2, #21
 8007be6:	d531      	bpl.n	8007c4c <__ssputs_r+0xa0>
 8007be8:	4629      	mov	r1, r5
 8007bea:	f000 fb63 	bl	80082b4 <_malloc_r>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	b950      	cbnz	r0, 8007c08 <__ssputs_r+0x5c>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	f8ca 3000 	str.w	r3, [sl]
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	6921      	ldr	r1, [r4, #16]
 8007c0a:	464a      	mov	r2, r9
 8007c0c:	f000 fabe 	bl	800818c <memcpy>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	6126      	str	r6, [r4, #16]
 8007c1e:	6165      	str	r5, [r4, #20]
 8007c20:	444e      	add	r6, r9
 8007c22:	eba5 0509 	sub.w	r5, r5, r9
 8007c26:	6026      	str	r6, [r4, #0]
 8007c28:	60a5      	str	r5, [r4, #8]
 8007c2a:	463e      	mov	r6, r7
 8007c2c:	42be      	cmp	r6, r7
 8007c2e:	d900      	bls.n	8007c32 <__ssputs_r+0x86>
 8007c30:	463e      	mov	r6, r7
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	4632      	mov	r2, r6
 8007c36:	4641      	mov	r1, r8
 8007c38:	f000 fab6 	bl	80081a8 <memmove>
 8007c3c:	68a3      	ldr	r3, [r4, #8]
 8007c3e:	1b9b      	subs	r3, r3, r6
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	4433      	add	r3, r6
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e7db      	b.n	8007c04 <__ssputs_r+0x58>
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	f000 fba5 	bl	800839c <_realloc_r>
 8007c52:	4606      	mov	r6, r0
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1e1      	bne.n	8007c1c <__ssputs_r+0x70>
 8007c58:	6921      	ldr	r1, [r4, #16]
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f000 fabe 	bl	80081dc <_free_r>
 8007c60:	e7c7      	b.n	8007bf2 <__ssputs_r+0x46>
	...

08007c64 <_svfiprintf_r>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	4698      	mov	r8, r3
 8007c6a:	898b      	ldrh	r3, [r1, #12]
 8007c6c:	061b      	lsls	r3, r3, #24
 8007c6e:	b09d      	sub	sp, #116	; 0x74
 8007c70:	4607      	mov	r7, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	4614      	mov	r4, r2
 8007c76:	d50e      	bpl.n	8007c96 <_svfiprintf_r+0x32>
 8007c78:	690b      	ldr	r3, [r1, #16]
 8007c7a:	b963      	cbnz	r3, 8007c96 <_svfiprintf_r+0x32>
 8007c7c:	2140      	movs	r1, #64	; 0x40
 8007c7e:	f000 fb19 	bl	80082b4 <_malloc_r>
 8007c82:	6028      	str	r0, [r5, #0]
 8007c84:	6128      	str	r0, [r5, #16]
 8007c86:	b920      	cbnz	r0, 8007c92 <_svfiprintf_r+0x2e>
 8007c88:	230c      	movs	r3, #12
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c90:	e0d1      	b.n	8007e36 <_svfiprintf_r+0x1d2>
 8007c92:	2340      	movs	r3, #64	; 0x40
 8007c94:	616b      	str	r3, [r5, #20]
 8007c96:	2300      	movs	r3, #0
 8007c98:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9a:	2320      	movs	r3, #32
 8007c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ca4:	2330      	movs	r3, #48	; 0x30
 8007ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e50 <_svfiprintf_r+0x1ec>
 8007caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cae:	f04f 0901 	mov.w	r9, #1
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	469a      	mov	sl, r3
 8007cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cba:	b10a      	cbz	r2, 8007cc0 <_svfiprintf_r+0x5c>
 8007cbc:	2a25      	cmp	r2, #37	; 0x25
 8007cbe:	d1f9      	bne.n	8007cb4 <_svfiprintf_r+0x50>
 8007cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8007cc4:	d00b      	beq.n	8007cde <_svfiprintf_r+0x7a>
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	4622      	mov	r2, r4
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff ff6d 	bl	8007bac <__ssputs_r>
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	f000 80aa 	beq.w	8007e2c <_svfiprintf_r+0x1c8>
 8007cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cda:	445a      	add	r2, fp
 8007cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cde:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80a2 	beq.w	8007e2c <_svfiprintf_r+0x1c8>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f04f 32ff 	mov.w	r2, #4294967295
 8007cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cf2:	f10a 0a01 	add.w	sl, sl, #1
 8007cf6:	9304      	str	r3, [sp, #16]
 8007cf8:	9307      	str	r3, [sp, #28]
 8007cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8007d00:	4654      	mov	r4, sl
 8007d02:	2205      	movs	r2, #5
 8007d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d08:	4851      	ldr	r0, [pc, #324]	; (8007e50 <_svfiprintf_r+0x1ec>)
 8007d0a:	f7f8 fa69 	bl	80001e0 <memchr>
 8007d0e:	9a04      	ldr	r2, [sp, #16]
 8007d10:	b9d8      	cbnz	r0, 8007d4a <_svfiprintf_r+0xe6>
 8007d12:	06d0      	lsls	r0, r2, #27
 8007d14:	bf44      	itt	mi
 8007d16:	2320      	movmi	r3, #32
 8007d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d1c:	0711      	lsls	r1, r2, #28
 8007d1e:	bf44      	itt	mi
 8007d20:	232b      	movmi	r3, #43	; 0x2b
 8007d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d26:	f89a 3000 	ldrb.w	r3, [sl]
 8007d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d2c:	d015      	beq.n	8007d5a <_svfiprintf_r+0xf6>
 8007d2e:	9a07      	ldr	r2, [sp, #28]
 8007d30:	4654      	mov	r4, sl
 8007d32:	2000      	movs	r0, #0
 8007d34:	f04f 0c0a 	mov.w	ip, #10
 8007d38:	4621      	mov	r1, r4
 8007d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d3e:	3b30      	subs	r3, #48	; 0x30
 8007d40:	2b09      	cmp	r3, #9
 8007d42:	d94e      	bls.n	8007de2 <_svfiprintf_r+0x17e>
 8007d44:	b1b0      	cbz	r0, 8007d74 <_svfiprintf_r+0x110>
 8007d46:	9207      	str	r2, [sp, #28]
 8007d48:	e014      	b.n	8007d74 <_svfiprintf_r+0x110>
 8007d4a:	eba0 0308 	sub.w	r3, r0, r8
 8007d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d52:	4313      	orrs	r3, r2
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	46a2      	mov	sl, r4
 8007d58:	e7d2      	b.n	8007d00 <_svfiprintf_r+0x9c>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	1d19      	adds	r1, r3, #4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	9103      	str	r1, [sp, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfbb      	ittet	lt
 8007d66:	425b      	neglt	r3, r3
 8007d68:	f042 0202 	orrlt.w	r2, r2, #2
 8007d6c:	9307      	strge	r3, [sp, #28]
 8007d6e:	9307      	strlt	r3, [sp, #28]
 8007d70:	bfb8      	it	lt
 8007d72:	9204      	strlt	r2, [sp, #16]
 8007d74:	7823      	ldrb	r3, [r4, #0]
 8007d76:	2b2e      	cmp	r3, #46	; 0x2e
 8007d78:	d10c      	bne.n	8007d94 <_svfiprintf_r+0x130>
 8007d7a:	7863      	ldrb	r3, [r4, #1]
 8007d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d7e:	d135      	bne.n	8007dec <_svfiprintf_r+0x188>
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	1d1a      	adds	r2, r3, #4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	9203      	str	r2, [sp, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bfb8      	it	lt
 8007d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d90:	3402      	adds	r4, #2
 8007d92:	9305      	str	r3, [sp, #20]
 8007d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e60 <_svfiprintf_r+0x1fc>
 8007d98:	7821      	ldrb	r1, [r4, #0]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	f7f8 fa1f 	bl	80001e0 <memchr>
 8007da2:	b140      	cbz	r0, 8007db6 <_svfiprintf_r+0x152>
 8007da4:	2340      	movs	r3, #64	; 0x40
 8007da6:	eba0 000a 	sub.w	r0, r0, sl
 8007daa:	fa03 f000 	lsl.w	r0, r3, r0
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	4303      	orrs	r3, r0
 8007db2:	3401      	adds	r4, #1
 8007db4:	9304      	str	r3, [sp, #16]
 8007db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dba:	4826      	ldr	r0, [pc, #152]	; (8007e54 <_svfiprintf_r+0x1f0>)
 8007dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dc0:	2206      	movs	r2, #6
 8007dc2:	f7f8 fa0d 	bl	80001e0 <memchr>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d038      	beq.n	8007e3c <_svfiprintf_r+0x1d8>
 8007dca:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <_svfiprintf_r+0x1f4>)
 8007dcc:	bb1b      	cbnz	r3, 8007e16 <_svfiprintf_r+0x1b2>
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	3307      	adds	r3, #7
 8007dd2:	f023 0307 	bic.w	r3, r3, #7
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	9303      	str	r3, [sp, #12]
 8007dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ddc:	4433      	add	r3, r6
 8007dde:	9309      	str	r3, [sp, #36]	; 0x24
 8007de0:	e767      	b.n	8007cb2 <_svfiprintf_r+0x4e>
 8007de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007de6:	460c      	mov	r4, r1
 8007de8:	2001      	movs	r0, #1
 8007dea:	e7a5      	b.n	8007d38 <_svfiprintf_r+0xd4>
 8007dec:	2300      	movs	r3, #0
 8007dee:	3401      	adds	r4, #1
 8007df0:	9305      	str	r3, [sp, #20]
 8007df2:	4619      	mov	r1, r3
 8007df4:	f04f 0c0a 	mov.w	ip, #10
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dfe:	3a30      	subs	r2, #48	; 0x30
 8007e00:	2a09      	cmp	r2, #9
 8007e02:	d903      	bls.n	8007e0c <_svfiprintf_r+0x1a8>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0c5      	beq.n	8007d94 <_svfiprintf_r+0x130>
 8007e08:	9105      	str	r1, [sp, #20]
 8007e0a:	e7c3      	b.n	8007d94 <_svfiprintf_r+0x130>
 8007e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e10:	4604      	mov	r4, r0
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7f0      	b.n	8007df8 <_svfiprintf_r+0x194>
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <_svfiprintf_r+0x1f8>)
 8007e1e:	a904      	add	r1, sp, #16
 8007e20:	4638      	mov	r0, r7
 8007e22:	f3af 8000 	nop.w
 8007e26:	1c42      	adds	r2, r0, #1
 8007e28:	4606      	mov	r6, r0
 8007e2a:	d1d6      	bne.n	8007dda <_svfiprintf_r+0x176>
 8007e2c:	89ab      	ldrh	r3, [r5, #12]
 8007e2e:	065b      	lsls	r3, r3, #25
 8007e30:	f53f af2c 	bmi.w	8007c8c <_svfiprintf_r+0x28>
 8007e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e36:	b01d      	add	sp, #116	; 0x74
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	ab03      	add	r3, sp, #12
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	462a      	mov	r2, r5
 8007e42:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <_svfiprintf_r+0x1f8>)
 8007e44:	a904      	add	r1, sp, #16
 8007e46:	4638      	mov	r0, r7
 8007e48:	f000 f87a 	bl	8007f40 <_printf_i>
 8007e4c:	e7eb      	b.n	8007e26 <_svfiprintf_r+0x1c2>
 8007e4e:	bf00      	nop
 8007e50:	080084e0 	.word	0x080084e0
 8007e54:	080084ea 	.word	0x080084ea
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	08007bad 	.word	0x08007bad
 8007e60:	080084e6 	.word	0x080084e6

08007e64 <_printf_common>:
 8007e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	4616      	mov	r6, r2
 8007e6a:	4699      	mov	r9, r3
 8007e6c:	688a      	ldr	r2, [r1, #8]
 8007e6e:	690b      	ldr	r3, [r1, #16]
 8007e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	bfb8      	it	lt
 8007e78:	4613      	movlt	r3, r2
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e80:	4607      	mov	r7, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	b10a      	cbz	r2, 8007e8a <_printf_common+0x26>
 8007e86:	3301      	adds	r3, #1
 8007e88:	6033      	str	r3, [r6, #0]
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	0699      	lsls	r1, r3, #26
 8007e8e:	bf42      	ittt	mi
 8007e90:	6833      	ldrmi	r3, [r6, #0]
 8007e92:	3302      	addmi	r3, #2
 8007e94:	6033      	strmi	r3, [r6, #0]
 8007e96:	6825      	ldr	r5, [r4, #0]
 8007e98:	f015 0506 	ands.w	r5, r5, #6
 8007e9c:	d106      	bne.n	8007eac <_printf_common+0x48>
 8007e9e:	f104 0a19 	add.w	sl, r4, #25
 8007ea2:	68e3      	ldr	r3, [r4, #12]
 8007ea4:	6832      	ldr	r2, [r6, #0]
 8007ea6:	1a9b      	subs	r3, r3, r2
 8007ea8:	42ab      	cmp	r3, r5
 8007eaa:	dc26      	bgt.n	8007efa <_printf_common+0x96>
 8007eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eb0:	1e13      	subs	r3, r2, #0
 8007eb2:	6822      	ldr	r2, [r4, #0]
 8007eb4:	bf18      	it	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	0692      	lsls	r2, r2, #26
 8007eba:	d42b      	bmi.n	8007f14 <_printf_common+0xb0>
 8007ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	47c0      	blx	r8
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d01e      	beq.n	8007f08 <_printf_common+0xa4>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	68e5      	ldr	r5, [r4, #12]
 8007ece:	6832      	ldr	r2, [r6, #0]
 8007ed0:	f003 0306 	and.w	r3, r3, #6
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	bf08      	it	eq
 8007ed8:	1aad      	subeq	r5, r5, r2
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	6922      	ldr	r2, [r4, #16]
 8007ede:	bf0c      	ite	eq
 8007ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee4:	2500      	movne	r5, #0
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	bfc4      	itt	gt
 8007eea:	1a9b      	subgt	r3, r3, r2
 8007eec:	18ed      	addgt	r5, r5, r3
 8007eee:	2600      	movs	r6, #0
 8007ef0:	341a      	adds	r4, #26
 8007ef2:	42b5      	cmp	r5, r6
 8007ef4:	d11a      	bne.n	8007f2c <_printf_common+0xc8>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	e008      	b.n	8007f0c <_printf_common+0xa8>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4652      	mov	r2, sl
 8007efe:	4649      	mov	r1, r9
 8007f00:	4638      	mov	r0, r7
 8007f02:	47c0      	blx	r8
 8007f04:	3001      	adds	r0, #1
 8007f06:	d103      	bne.n	8007f10 <_printf_common+0xac>
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f10:	3501      	adds	r5, #1
 8007f12:	e7c6      	b.n	8007ea2 <_printf_common+0x3e>
 8007f14:	18e1      	adds	r1, r4, r3
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	2030      	movs	r0, #48	; 0x30
 8007f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f1e:	4422      	add	r2, r4
 8007f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f28:	3302      	adds	r3, #2
 8007f2a:	e7c7      	b.n	8007ebc <_printf_common+0x58>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	4622      	mov	r2, r4
 8007f30:	4649      	mov	r1, r9
 8007f32:	4638      	mov	r0, r7
 8007f34:	47c0      	blx	r8
 8007f36:	3001      	adds	r0, #1
 8007f38:	d0e6      	beq.n	8007f08 <_printf_common+0xa4>
 8007f3a:	3601      	adds	r6, #1
 8007f3c:	e7d9      	b.n	8007ef2 <_printf_common+0x8e>
	...

08007f40 <_printf_i>:
 8007f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f44:	7e0f      	ldrb	r7, [r1, #24]
 8007f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f48:	2f78      	cmp	r7, #120	; 0x78
 8007f4a:	4691      	mov	r9, r2
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	469a      	mov	sl, r3
 8007f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f56:	d807      	bhi.n	8007f68 <_printf_i+0x28>
 8007f58:	2f62      	cmp	r7, #98	; 0x62
 8007f5a:	d80a      	bhi.n	8007f72 <_printf_i+0x32>
 8007f5c:	2f00      	cmp	r7, #0
 8007f5e:	f000 80d8 	beq.w	8008112 <_printf_i+0x1d2>
 8007f62:	2f58      	cmp	r7, #88	; 0x58
 8007f64:	f000 80a3 	beq.w	80080ae <_printf_i+0x16e>
 8007f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f70:	e03a      	b.n	8007fe8 <_printf_i+0xa8>
 8007f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f76:	2b15      	cmp	r3, #21
 8007f78:	d8f6      	bhi.n	8007f68 <_printf_i+0x28>
 8007f7a:	a101      	add	r1, pc, #4	; (adr r1, 8007f80 <_printf_i+0x40>)
 8007f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f80:	08007fd9 	.word	0x08007fd9
 8007f84:	08007fed 	.word	0x08007fed
 8007f88:	08007f69 	.word	0x08007f69
 8007f8c:	08007f69 	.word	0x08007f69
 8007f90:	08007f69 	.word	0x08007f69
 8007f94:	08007f69 	.word	0x08007f69
 8007f98:	08007fed 	.word	0x08007fed
 8007f9c:	08007f69 	.word	0x08007f69
 8007fa0:	08007f69 	.word	0x08007f69
 8007fa4:	08007f69 	.word	0x08007f69
 8007fa8:	08007f69 	.word	0x08007f69
 8007fac:	080080f9 	.word	0x080080f9
 8007fb0:	0800801d 	.word	0x0800801d
 8007fb4:	080080db 	.word	0x080080db
 8007fb8:	08007f69 	.word	0x08007f69
 8007fbc:	08007f69 	.word	0x08007f69
 8007fc0:	0800811b 	.word	0x0800811b
 8007fc4:	08007f69 	.word	0x08007f69
 8007fc8:	0800801d 	.word	0x0800801d
 8007fcc:	08007f69 	.word	0x08007f69
 8007fd0:	08007f69 	.word	0x08007f69
 8007fd4:	080080e3 	.word	0x080080e3
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	1d1a      	adds	r2, r3, #4
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	602a      	str	r2, [r5, #0]
 8007fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e0a3      	b.n	8008134 <_printf_i+0x1f4>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	6829      	ldr	r1, [r5, #0]
 8007ff0:	0606      	lsls	r6, r0, #24
 8007ff2:	f101 0304 	add.w	r3, r1, #4
 8007ff6:	d50a      	bpl.n	800800e <_printf_i+0xce>
 8007ff8:	680e      	ldr	r6, [r1, #0]
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	2e00      	cmp	r6, #0
 8007ffe:	da03      	bge.n	8008008 <_printf_i+0xc8>
 8008000:	232d      	movs	r3, #45	; 0x2d
 8008002:	4276      	negs	r6, r6
 8008004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008008:	485e      	ldr	r0, [pc, #376]	; (8008184 <_printf_i+0x244>)
 800800a:	230a      	movs	r3, #10
 800800c:	e019      	b.n	8008042 <_printf_i+0x102>
 800800e:	680e      	ldr	r6, [r1, #0]
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008016:	bf18      	it	ne
 8008018:	b236      	sxthne	r6, r6
 800801a:	e7ef      	b.n	8007ffc <_printf_i+0xbc>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	6820      	ldr	r0, [r4, #0]
 8008020:	1d19      	adds	r1, r3, #4
 8008022:	6029      	str	r1, [r5, #0]
 8008024:	0601      	lsls	r1, r0, #24
 8008026:	d501      	bpl.n	800802c <_printf_i+0xec>
 8008028:	681e      	ldr	r6, [r3, #0]
 800802a:	e002      	b.n	8008032 <_printf_i+0xf2>
 800802c:	0646      	lsls	r6, r0, #25
 800802e:	d5fb      	bpl.n	8008028 <_printf_i+0xe8>
 8008030:	881e      	ldrh	r6, [r3, #0]
 8008032:	4854      	ldr	r0, [pc, #336]	; (8008184 <_printf_i+0x244>)
 8008034:	2f6f      	cmp	r7, #111	; 0x6f
 8008036:	bf0c      	ite	eq
 8008038:	2308      	moveq	r3, #8
 800803a:	230a      	movne	r3, #10
 800803c:	2100      	movs	r1, #0
 800803e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008042:	6865      	ldr	r5, [r4, #4]
 8008044:	60a5      	str	r5, [r4, #8]
 8008046:	2d00      	cmp	r5, #0
 8008048:	bfa2      	ittt	ge
 800804a:	6821      	ldrge	r1, [r4, #0]
 800804c:	f021 0104 	bicge.w	r1, r1, #4
 8008050:	6021      	strge	r1, [r4, #0]
 8008052:	b90e      	cbnz	r6, 8008058 <_printf_i+0x118>
 8008054:	2d00      	cmp	r5, #0
 8008056:	d04d      	beq.n	80080f4 <_printf_i+0x1b4>
 8008058:	4615      	mov	r5, r2
 800805a:	fbb6 f1f3 	udiv	r1, r6, r3
 800805e:	fb03 6711 	mls	r7, r3, r1, r6
 8008062:	5dc7      	ldrb	r7, [r0, r7]
 8008064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008068:	4637      	mov	r7, r6
 800806a:	42bb      	cmp	r3, r7
 800806c:	460e      	mov	r6, r1
 800806e:	d9f4      	bls.n	800805a <_printf_i+0x11a>
 8008070:	2b08      	cmp	r3, #8
 8008072:	d10b      	bne.n	800808c <_printf_i+0x14c>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	07de      	lsls	r6, r3, #31
 8008078:	d508      	bpl.n	800808c <_printf_i+0x14c>
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	6861      	ldr	r1, [r4, #4]
 800807e:	4299      	cmp	r1, r3
 8008080:	bfde      	ittt	le
 8008082:	2330      	movle	r3, #48	; 0x30
 8008084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800808c:	1b52      	subs	r2, r2, r5
 800808e:	6122      	str	r2, [r4, #16]
 8008090:	f8cd a000 	str.w	sl, [sp]
 8008094:	464b      	mov	r3, r9
 8008096:	aa03      	add	r2, sp, #12
 8008098:	4621      	mov	r1, r4
 800809a:	4640      	mov	r0, r8
 800809c:	f7ff fee2 	bl	8007e64 <_printf_common>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d14c      	bne.n	800813e <_printf_i+0x1fe>
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	b004      	add	sp, #16
 80080aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ae:	4835      	ldr	r0, [pc, #212]	; (8008184 <_printf_i+0x244>)
 80080b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80080bc:	6029      	str	r1, [r5, #0]
 80080be:	061d      	lsls	r5, r3, #24
 80080c0:	d514      	bpl.n	80080ec <_printf_i+0x1ac>
 80080c2:	07df      	lsls	r7, r3, #31
 80080c4:	bf44      	itt	mi
 80080c6:	f043 0320 	orrmi.w	r3, r3, #32
 80080ca:	6023      	strmi	r3, [r4, #0]
 80080cc:	b91e      	cbnz	r6, 80080d6 <_printf_i+0x196>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	f023 0320 	bic.w	r3, r3, #32
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	2310      	movs	r3, #16
 80080d8:	e7b0      	b.n	800803c <_printf_i+0xfc>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f043 0320 	orr.w	r3, r3, #32
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	2378      	movs	r3, #120	; 0x78
 80080e4:	4828      	ldr	r0, [pc, #160]	; (8008188 <_printf_i+0x248>)
 80080e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080ea:	e7e3      	b.n	80080b4 <_printf_i+0x174>
 80080ec:	0659      	lsls	r1, r3, #25
 80080ee:	bf48      	it	mi
 80080f0:	b2b6      	uxthmi	r6, r6
 80080f2:	e7e6      	b.n	80080c2 <_printf_i+0x182>
 80080f4:	4615      	mov	r5, r2
 80080f6:	e7bb      	b.n	8008070 <_printf_i+0x130>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	6826      	ldr	r6, [r4, #0]
 80080fc:	6961      	ldr	r1, [r4, #20]
 80080fe:	1d18      	adds	r0, r3, #4
 8008100:	6028      	str	r0, [r5, #0]
 8008102:	0635      	lsls	r5, r6, #24
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	d501      	bpl.n	800810c <_printf_i+0x1cc>
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	e002      	b.n	8008112 <_printf_i+0x1d2>
 800810c:	0670      	lsls	r0, r6, #25
 800810e:	d5fb      	bpl.n	8008108 <_printf_i+0x1c8>
 8008110:	8019      	strh	r1, [r3, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	4615      	mov	r5, r2
 8008118:	e7ba      	b.n	8008090 <_printf_i+0x150>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	1d1a      	adds	r2, r3, #4
 800811e:	602a      	str	r2, [r5, #0]
 8008120:	681d      	ldr	r5, [r3, #0]
 8008122:	6862      	ldr	r2, [r4, #4]
 8008124:	2100      	movs	r1, #0
 8008126:	4628      	mov	r0, r5
 8008128:	f7f8 f85a 	bl	80001e0 <memchr>
 800812c:	b108      	cbz	r0, 8008132 <_printf_i+0x1f2>
 800812e:	1b40      	subs	r0, r0, r5
 8008130:	6060      	str	r0, [r4, #4]
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	2300      	movs	r3, #0
 8008138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813c:	e7a8      	b.n	8008090 <_printf_i+0x150>
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	462a      	mov	r2, r5
 8008142:	4649      	mov	r1, r9
 8008144:	4640      	mov	r0, r8
 8008146:	47d0      	blx	sl
 8008148:	3001      	adds	r0, #1
 800814a:	d0ab      	beq.n	80080a4 <_printf_i+0x164>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	079b      	lsls	r3, r3, #30
 8008150:	d413      	bmi.n	800817a <_printf_i+0x23a>
 8008152:	68e0      	ldr	r0, [r4, #12]
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	4298      	cmp	r0, r3
 8008158:	bfb8      	it	lt
 800815a:	4618      	movlt	r0, r3
 800815c:	e7a4      	b.n	80080a8 <_printf_i+0x168>
 800815e:	2301      	movs	r3, #1
 8008160:	4632      	mov	r2, r6
 8008162:	4649      	mov	r1, r9
 8008164:	4640      	mov	r0, r8
 8008166:	47d0      	blx	sl
 8008168:	3001      	adds	r0, #1
 800816a:	d09b      	beq.n	80080a4 <_printf_i+0x164>
 800816c:	3501      	adds	r5, #1
 800816e:	68e3      	ldr	r3, [r4, #12]
 8008170:	9903      	ldr	r1, [sp, #12]
 8008172:	1a5b      	subs	r3, r3, r1
 8008174:	42ab      	cmp	r3, r5
 8008176:	dcf2      	bgt.n	800815e <_printf_i+0x21e>
 8008178:	e7eb      	b.n	8008152 <_printf_i+0x212>
 800817a:	2500      	movs	r5, #0
 800817c:	f104 0619 	add.w	r6, r4, #25
 8008180:	e7f5      	b.n	800816e <_printf_i+0x22e>
 8008182:	bf00      	nop
 8008184:	080084f1 	.word	0x080084f1
 8008188:	08008502 	.word	0x08008502

0800818c <memcpy>:
 800818c:	440a      	add	r2, r1
 800818e:	4291      	cmp	r1, r2
 8008190:	f100 33ff 	add.w	r3, r0, #4294967295
 8008194:	d100      	bne.n	8008198 <memcpy+0xc>
 8008196:	4770      	bx	lr
 8008198:	b510      	push	{r4, lr}
 800819a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800819e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a2:	4291      	cmp	r1, r2
 80081a4:	d1f9      	bne.n	800819a <memcpy+0xe>
 80081a6:	bd10      	pop	{r4, pc}

080081a8 <memmove>:
 80081a8:	4288      	cmp	r0, r1
 80081aa:	b510      	push	{r4, lr}
 80081ac:	eb01 0402 	add.w	r4, r1, r2
 80081b0:	d902      	bls.n	80081b8 <memmove+0x10>
 80081b2:	4284      	cmp	r4, r0
 80081b4:	4623      	mov	r3, r4
 80081b6:	d807      	bhi.n	80081c8 <memmove+0x20>
 80081b8:	1e43      	subs	r3, r0, #1
 80081ba:	42a1      	cmp	r1, r4
 80081bc:	d008      	beq.n	80081d0 <memmove+0x28>
 80081be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081c6:	e7f8      	b.n	80081ba <memmove+0x12>
 80081c8:	4402      	add	r2, r0
 80081ca:	4601      	mov	r1, r0
 80081cc:	428a      	cmp	r2, r1
 80081ce:	d100      	bne.n	80081d2 <memmove+0x2a>
 80081d0:	bd10      	pop	{r4, pc}
 80081d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081da:	e7f7      	b.n	80081cc <memmove+0x24>

080081dc <_free_r>:
 80081dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081de:	2900      	cmp	r1, #0
 80081e0:	d044      	beq.n	800826c <_free_r+0x90>
 80081e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e6:	9001      	str	r0, [sp, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f1a1 0404 	sub.w	r4, r1, #4
 80081ee:	bfb8      	it	lt
 80081f0:	18e4      	addlt	r4, r4, r3
 80081f2:	f000 f913 	bl	800841c <__malloc_lock>
 80081f6:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <_free_r+0x94>)
 80081f8:	9801      	ldr	r0, [sp, #4]
 80081fa:	6813      	ldr	r3, [r2, #0]
 80081fc:	b933      	cbnz	r3, 800820c <_free_r+0x30>
 80081fe:	6063      	str	r3, [r4, #4]
 8008200:	6014      	str	r4, [r2, #0]
 8008202:	b003      	add	sp, #12
 8008204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008208:	f000 b90e 	b.w	8008428 <__malloc_unlock>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d908      	bls.n	8008222 <_free_r+0x46>
 8008210:	6825      	ldr	r5, [r4, #0]
 8008212:	1961      	adds	r1, r4, r5
 8008214:	428b      	cmp	r3, r1
 8008216:	bf01      	itttt	eq
 8008218:	6819      	ldreq	r1, [r3, #0]
 800821a:	685b      	ldreq	r3, [r3, #4]
 800821c:	1949      	addeq	r1, r1, r5
 800821e:	6021      	streq	r1, [r4, #0]
 8008220:	e7ed      	b.n	80081fe <_free_r+0x22>
 8008222:	461a      	mov	r2, r3
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	b10b      	cbz	r3, 800822c <_free_r+0x50>
 8008228:	42a3      	cmp	r3, r4
 800822a:	d9fa      	bls.n	8008222 <_free_r+0x46>
 800822c:	6811      	ldr	r1, [r2, #0]
 800822e:	1855      	adds	r5, r2, r1
 8008230:	42a5      	cmp	r5, r4
 8008232:	d10b      	bne.n	800824c <_free_r+0x70>
 8008234:	6824      	ldr	r4, [r4, #0]
 8008236:	4421      	add	r1, r4
 8008238:	1854      	adds	r4, r2, r1
 800823a:	42a3      	cmp	r3, r4
 800823c:	6011      	str	r1, [r2, #0]
 800823e:	d1e0      	bne.n	8008202 <_free_r+0x26>
 8008240:	681c      	ldr	r4, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	6053      	str	r3, [r2, #4]
 8008246:	4421      	add	r1, r4
 8008248:	6011      	str	r1, [r2, #0]
 800824a:	e7da      	b.n	8008202 <_free_r+0x26>
 800824c:	d902      	bls.n	8008254 <_free_r+0x78>
 800824e:	230c      	movs	r3, #12
 8008250:	6003      	str	r3, [r0, #0]
 8008252:	e7d6      	b.n	8008202 <_free_r+0x26>
 8008254:	6825      	ldr	r5, [r4, #0]
 8008256:	1961      	adds	r1, r4, r5
 8008258:	428b      	cmp	r3, r1
 800825a:	bf04      	itt	eq
 800825c:	6819      	ldreq	r1, [r3, #0]
 800825e:	685b      	ldreq	r3, [r3, #4]
 8008260:	6063      	str	r3, [r4, #4]
 8008262:	bf04      	itt	eq
 8008264:	1949      	addeq	r1, r1, r5
 8008266:	6021      	streq	r1, [r4, #0]
 8008268:	6054      	str	r4, [r2, #4]
 800826a:	e7ca      	b.n	8008202 <_free_r+0x26>
 800826c:	b003      	add	sp, #12
 800826e:	bd30      	pop	{r4, r5, pc}
 8008270:	20001f00 	.word	0x20001f00

08008274 <sbrk_aligned>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	4e0e      	ldr	r6, [pc, #56]	; (80082b0 <sbrk_aligned+0x3c>)
 8008278:	460c      	mov	r4, r1
 800827a:	6831      	ldr	r1, [r6, #0]
 800827c:	4605      	mov	r5, r0
 800827e:	b911      	cbnz	r1, 8008286 <sbrk_aligned+0x12>
 8008280:	f000 f8bc 	bl	80083fc <_sbrk_r>
 8008284:	6030      	str	r0, [r6, #0]
 8008286:	4621      	mov	r1, r4
 8008288:	4628      	mov	r0, r5
 800828a:	f000 f8b7 	bl	80083fc <_sbrk_r>
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	d00a      	beq.n	80082a8 <sbrk_aligned+0x34>
 8008292:	1cc4      	adds	r4, r0, #3
 8008294:	f024 0403 	bic.w	r4, r4, #3
 8008298:	42a0      	cmp	r0, r4
 800829a:	d007      	beq.n	80082ac <sbrk_aligned+0x38>
 800829c:	1a21      	subs	r1, r4, r0
 800829e:	4628      	mov	r0, r5
 80082a0:	f000 f8ac 	bl	80083fc <_sbrk_r>
 80082a4:	3001      	adds	r0, #1
 80082a6:	d101      	bne.n	80082ac <sbrk_aligned+0x38>
 80082a8:	f04f 34ff 	mov.w	r4, #4294967295
 80082ac:	4620      	mov	r0, r4
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	20001f04 	.word	0x20001f04

080082b4 <_malloc_r>:
 80082b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	1ccd      	adds	r5, r1, #3
 80082ba:	f025 0503 	bic.w	r5, r5, #3
 80082be:	3508      	adds	r5, #8
 80082c0:	2d0c      	cmp	r5, #12
 80082c2:	bf38      	it	cc
 80082c4:	250c      	movcc	r5, #12
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	4607      	mov	r7, r0
 80082ca:	db01      	blt.n	80082d0 <_malloc_r+0x1c>
 80082cc:	42a9      	cmp	r1, r5
 80082ce:	d905      	bls.n	80082dc <_malloc_r+0x28>
 80082d0:	230c      	movs	r3, #12
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	2600      	movs	r6, #0
 80082d6:	4630      	mov	r0, r6
 80082d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082dc:	4e2e      	ldr	r6, [pc, #184]	; (8008398 <_malloc_r+0xe4>)
 80082de:	f000 f89d 	bl	800841c <__malloc_lock>
 80082e2:	6833      	ldr	r3, [r6, #0]
 80082e4:	461c      	mov	r4, r3
 80082e6:	bb34      	cbnz	r4, 8008336 <_malloc_r+0x82>
 80082e8:	4629      	mov	r1, r5
 80082ea:	4638      	mov	r0, r7
 80082ec:	f7ff ffc2 	bl	8008274 <sbrk_aligned>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	4604      	mov	r4, r0
 80082f4:	d14d      	bne.n	8008392 <_malloc_r+0xde>
 80082f6:	6834      	ldr	r4, [r6, #0]
 80082f8:	4626      	mov	r6, r4
 80082fa:	2e00      	cmp	r6, #0
 80082fc:	d140      	bne.n	8008380 <_malloc_r+0xcc>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	4631      	mov	r1, r6
 8008302:	4638      	mov	r0, r7
 8008304:	eb04 0803 	add.w	r8, r4, r3
 8008308:	f000 f878 	bl	80083fc <_sbrk_r>
 800830c:	4580      	cmp	r8, r0
 800830e:	d13a      	bne.n	8008386 <_malloc_r+0xd2>
 8008310:	6821      	ldr	r1, [r4, #0]
 8008312:	3503      	adds	r5, #3
 8008314:	1a6d      	subs	r5, r5, r1
 8008316:	f025 0503 	bic.w	r5, r5, #3
 800831a:	3508      	adds	r5, #8
 800831c:	2d0c      	cmp	r5, #12
 800831e:	bf38      	it	cc
 8008320:	250c      	movcc	r5, #12
 8008322:	4629      	mov	r1, r5
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff ffa5 	bl	8008274 <sbrk_aligned>
 800832a:	3001      	adds	r0, #1
 800832c:	d02b      	beq.n	8008386 <_malloc_r+0xd2>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	442b      	add	r3, r5
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	e00e      	b.n	8008354 <_malloc_r+0xa0>
 8008336:	6822      	ldr	r2, [r4, #0]
 8008338:	1b52      	subs	r2, r2, r5
 800833a:	d41e      	bmi.n	800837a <_malloc_r+0xc6>
 800833c:	2a0b      	cmp	r2, #11
 800833e:	d916      	bls.n	800836e <_malloc_r+0xba>
 8008340:	1961      	adds	r1, r4, r5
 8008342:	42a3      	cmp	r3, r4
 8008344:	6025      	str	r5, [r4, #0]
 8008346:	bf18      	it	ne
 8008348:	6059      	strne	r1, [r3, #4]
 800834a:	6863      	ldr	r3, [r4, #4]
 800834c:	bf08      	it	eq
 800834e:	6031      	streq	r1, [r6, #0]
 8008350:	5162      	str	r2, [r4, r5]
 8008352:	604b      	str	r3, [r1, #4]
 8008354:	4638      	mov	r0, r7
 8008356:	f104 060b 	add.w	r6, r4, #11
 800835a:	f000 f865 	bl	8008428 <__malloc_unlock>
 800835e:	f026 0607 	bic.w	r6, r6, #7
 8008362:	1d23      	adds	r3, r4, #4
 8008364:	1af2      	subs	r2, r6, r3
 8008366:	d0b6      	beq.n	80082d6 <_malloc_r+0x22>
 8008368:	1b9b      	subs	r3, r3, r6
 800836a:	50a3      	str	r3, [r4, r2]
 800836c:	e7b3      	b.n	80082d6 <_malloc_r+0x22>
 800836e:	6862      	ldr	r2, [r4, #4]
 8008370:	42a3      	cmp	r3, r4
 8008372:	bf0c      	ite	eq
 8008374:	6032      	streq	r2, [r6, #0]
 8008376:	605a      	strne	r2, [r3, #4]
 8008378:	e7ec      	b.n	8008354 <_malloc_r+0xa0>
 800837a:	4623      	mov	r3, r4
 800837c:	6864      	ldr	r4, [r4, #4]
 800837e:	e7b2      	b.n	80082e6 <_malloc_r+0x32>
 8008380:	4634      	mov	r4, r6
 8008382:	6876      	ldr	r6, [r6, #4]
 8008384:	e7b9      	b.n	80082fa <_malloc_r+0x46>
 8008386:	230c      	movs	r3, #12
 8008388:	603b      	str	r3, [r7, #0]
 800838a:	4638      	mov	r0, r7
 800838c:	f000 f84c 	bl	8008428 <__malloc_unlock>
 8008390:	e7a1      	b.n	80082d6 <_malloc_r+0x22>
 8008392:	6025      	str	r5, [r4, #0]
 8008394:	e7de      	b.n	8008354 <_malloc_r+0xa0>
 8008396:	bf00      	nop
 8008398:	20001f00 	.word	0x20001f00

0800839c <_realloc_r>:
 800839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a0:	4680      	mov	r8, r0
 80083a2:	4614      	mov	r4, r2
 80083a4:	460e      	mov	r6, r1
 80083a6:	b921      	cbnz	r1, 80083b2 <_realloc_r+0x16>
 80083a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	4611      	mov	r1, r2
 80083ae:	f7ff bf81 	b.w	80082b4 <_malloc_r>
 80083b2:	b92a      	cbnz	r2, 80083c0 <_realloc_r+0x24>
 80083b4:	f7ff ff12 	bl	80081dc <_free_r>
 80083b8:	4625      	mov	r5, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c0:	f000 f838 	bl	8008434 <_malloc_usable_size_r>
 80083c4:	4284      	cmp	r4, r0
 80083c6:	4607      	mov	r7, r0
 80083c8:	d802      	bhi.n	80083d0 <_realloc_r+0x34>
 80083ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083ce:	d812      	bhi.n	80083f6 <_realloc_r+0x5a>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff ff6e 	bl	80082b4 <_malloc_r>
 80083d8:	4605      	mov	r5, r0
 80083da:	2800      	cmp	r0, #0
 80083dc:	d0ed      	beq.n	80083ba <_realloc_r+0x1e>
 80083de:	42bc      	cmp	r4, r7
 80083e0:	4622      	mov	r2, r4
 80083e2:	4631      	mov	r1, r6
 80083e4:	bf28      	it	cs
 80083e6:	463a      	movcs	r2, r7
 80083e8:	f7ff fed0 	bl	800818c <memcpy>
 80083ec:	4631      	mov	r1, r6
 80083ee:	4640      	mov	r0, r8
 80083f0:	f7ff fef4 	bl	80081dc <_free_r>
 80083f4:	e7e1      	b.n	80083ba <_realloc_r+0x1e>
 80083f6:	4635      	mov	r5, r6
 80083f8:	e7df      	b.n	80083ba <_realloc_r+0x1e>
	...

080083fc <_sbrk_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d06      	ldr	r5, [pc, #24]	; (8008418 <_sbrk_r+0x1c>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7f8 fc82 	bl	8000d10 <_sbrk>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_sbrk_r+0x1a>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_sbrk_r+0x1a>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20001f08 	.word	0x20001f08

0800841c <__malloc_lock>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__malloc_lock+0x8>)
 800841e:	f000 b811 	b.w	8008444 <__retarget_lock_acquire_recursive>
 8008422:	bf00      	nop
 8008424:	20001f0c 	.word	0x20001f0c

08008428 <__malloc_unlock>:
 8008428:	4801      	ldr	r0, [pc, #4]	; (8008430 <__malloc_unlock+0x8>)
 800842a:	f000 b80c 	b.w	8008446 <__retarget_lock_release_recursive>
 800842e:	bf00      	nop
 8008430:	20001f0c 	.word	0x20001f0c

08008434 <_malloc_usable_size_r>:
 8008434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008438:	1f18      	subs	r0, r3, #4
 800843a:	2b00      	cmp	r3, #0
 800843c:	bfbc      	itt	lt
 800843e:	580b      	ldrlt	r3, [r1, r0]
 8008440:	18c0      	addlt	r0, r0, r3
 8008442:	4770      	bx	lr

08008444 <__retarget_lock_acquire_recursive>:
 8008444:	4770      	bx	lr

08008446 <__retarget_lock_release_recursive>:
 8008446:	4770      	bx	lr

08008448 <_init>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	bf00      	nop
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr

08008454 <_fini>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	bf00      	nop
 8008458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845a:	bc08      	pop	{r3}
 800845c:	469e      	mov	lr, r3
 800845e:	4770      	bx	lr
