
LED_PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008044  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800827c  0800827c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008284  08008284  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800828c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd0  200001e4  08008470  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eb4  08008470  00021eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143b0  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322e  00000000  00000000  000345c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  000377f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00038a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243c3  00000000  00000000  00039b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d9e  00000000  00000000  0005df03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce287  00000000  00000000  00073ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141f28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d0  00000000  00000000  00141f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081bc 	.word	0x080081bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080081bc 	.word	0x080081bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int duty = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc2b 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f84d 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f981 	bl	800089c <MX_GPIO_Init>
  MX_SPI1_Init();
 800059a:	f000 f8b3 	bl	8000704 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800059e:	f006 fc31 	bl	8006e04 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80005a2:	f000 f8e5 	bl	8000770 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005a6:	2100      	movs	r1, #0
 80005a8:	481e      	ldr	r0, [pc, #120]	; (8000624 <main+0xa0>)
 80005aa:	f002 fe9f 	bl	80032ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005ae:	2104      	movs	r1, #4
 80005b0:	481c      	ldr	r0, [pc, #112]	; (8000624 <main+0xa0>)
 80005b2:	f002 fe9b 	bl	80032ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80005b6:	2108      	movs	r1, #8
 80005b8:	481a      	ldr	r0, [pc, #104]	; (8000624 <main+0xa0>)
 80005ba:	f002 fe97 	bl	80032ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80005be:	210c      	movs	r1, #12
 80005c0:	4818      	ldr	r0, [pc, #96]	; (8000624 <main+0xa0>)
 80005c2:	f002 fe93 	bl	80032ec <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim4.Instance->CCR1 = duty;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <main+0xa0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	635a      	str	r2, [r3, #52]	; 0x34
	  htim4.Instance->CCR2 = 100-duty;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <main+0xa0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	639a      	str	r2, [r3, #56]	; 0x38
	  htim4.Instance->CCR3 = duty;
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <main+0xa0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim4.Instance->CCR4 = 100-duty;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <main+0xa0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    snprintf (SendBuffer,BUFSIZE,"USB:0.1 secs. Duty=%d%%\r\n",duty);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <main+0xa4>)
 80005f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <main+0xa8>)
 80005f8:	f007 f95e 	bl	80078b8 <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <main+0xa8>)
 80005fe:	f7ff fde7 	bl	80001d0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	4619      	mov	r1, r3
 8000606:	4809      	ldr	r0, [pc, #36]	; (800062c <main+0xa8>)
 8000608:	f006 fcba 	bl	8006f80 <CDC_Transmit_FS>

	      duty = (duty + 1) ;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
	      if (duty > 100 )
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b64      	cmp	r3, #100	; 0x64
 8000616:	dd01      	ble.n	800061c <main+0x98>
	        duty = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]


	    HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f000 fc55 	bl	8000ecc <HAL_Delay>
  {
 8000622:	e7d0      	b.n	80005c6 <main+0x42>
 8000624:	20000258 	.word	0x20000258
 8000628:	080081d4 	.word	0x080081d4
 800062c:	200002a0 	.word	0x200002a0

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f007 f932 	bl	80078a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 f877 	bl	80027a8 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 fa1a 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fad8 	bl	8002c98 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 fa03 	bl	8000af8 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_SPI1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_SPI1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_SPI1_Init+0x64>)
 8000710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_SPI1_Init+0x64>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_SPI1_Init+0x64>)
 8000750:	220a      	movs	r2, #10
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_SPI1_Init+0x64>)
 8000756:	f002 fc97 	bl	8003088 <HAL_SPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f9ca 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000200 	.word	0x20000200
 800076c:	40013000 	.word	0x40013000

08000770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08e      	sub	sp, #56	; 0x38
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007a0:	4b3c      	ldr	r3, [pc, #240]	; (8000894 <MX_TIM4_Init+0x124>)
 80007a2:	4a3d      	ldr	r2, [pc, #244]	; (8000898 <MX_TIM4_Init+0x128>)
 80007a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_TIM4_Init+0x124>)
 80007a8:	2253      	movs	r2, #83	; 0x53
 80007aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b39      	ldr	r3, [pc, #228]	; (8000894 <MX_TIM4_Init+0x124>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80007b2:	4b38      	ldr	r3, [pc, #224]	; (8000894 <MX_TIM4_Init+0x124>)
 80007b4:	2263      	movs	r2, #99	; 0x63
 80007b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b8:	4b36      	ldr	r3, [pc, #216]	; (8000894 <MX_TIM4_Init+0x124>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <MX_TIM4_Init+0x124>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007c4:	4833      	ldr	r0, [pc, #204]	; (8000894 <MX_TIM4_Init+0x124>)
 80007c6:	f002 fce8 	bl	800319a <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80007d0:	f000 f992 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007de:	4619      	mov	r1, r3
 80007e0:	482c      	ldr	r0, [pc, #176]	; (8000894 <MX_TIM4_Init+0x124>)
 80007e2:	f002 ff09 	bl	80035f8 <HAL_TIM_ConfigClockSource>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80007ec:	f000 f984 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007f0:	4828      	ldr	r0, [pc, #160]	; (8000894 <MX_TIM4_Init+0x124>)
 80007f2:	f002 fd21 	bl	8003238 <HAL_TIM_PWM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80007fc:	f000 f97c 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4619      	mov	r1, r3
 800080e:	4821      	ldr	r0, [pc, #132]	; (8000894 <MX_TIM4_Init+0x124>)
 8000810:	f003 fac6 	bl	8003da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800081a:	f000 f96d 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081e:	2360      	movs	r3, #96	; 0x60
 8000820:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4817      	ldr	r0, [pc, #92]	; (8000894 <MX_TIM4_Init+0x124>)
 8000836:	f002 fe21 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000840:	f000 f95a 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2204      	movs	r2, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <MX_TIM4_Init+0x124>)
 800084c:	f002 fe16 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000856:	f000 f94f 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2208      	movs	r2, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_TIM4_Init+0x124>)
 8000862:	f002 fe0b 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 800086c:	f000 f944 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	220c      	movs	r2, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <MX_TIM4_Init+0x124>)
 8000878:	f002 fe00 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8000882:	f000 f939 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000886:	4803      	ldr	r0, [pc, #12]	; (8000894 <MX_TIM4_Init+0x124>)
 8000888:	f000 f9ce 	bl	8000c28 <HAL_TIM_MspPostInit>

}
 800088c:	bf00      	nop
 800088e:	3738      	adds	r7, #56	; 0x38
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000258 	.word	0x20000258
 8000898:	40000800 	.word	0x40000800

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	4b89      	ldr	r3, [pc, #548]	; (8000adc <MX_GPIO_Init+0x240>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a88      	ldr	r2, [pc, #544]	; (8000adc <MX_GPIO_Init+0x240>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b86      	ldr	r3, [pc, #536]	; (8000adc <MX_GPIO_Init+0x240>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	4b82      	ldr	r3, [pc, #520]	; (8000adc <MX_GPIO_Init+0x240>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a81      	ldr	r2, [pc, #516]	; (8000adc <MX_GPIO_Init+0x240>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b7f      	ldr	r3, [pc, #508]	; (8000adc <MX_GPIO_Init+0x240>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b7b      	ldr	r3, [pc, #492]	; (8000adc <MX_GPIO_Init+0x240>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a7a      	ldr	r2, [pc, #488]	; (8000adc <MX_GPIO_Init+0x240>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b78      	ldr	r3, [pc, #480]	; (8000adc <MX_GPIO_Init+0x240>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b74      	ldr	r3, [pc, #464]	; (8000adc <MX_GPIO_Init+0x240>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a73      	ldr	r2, [pc, #460]	; (8000adc <MX_GPIO_Init+0x240>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b71      	ldr	r3, [pc, #452]	; (8000adc <MX_GPIO_Init+0x240>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b6d      	ldr	r3, [pc, #436]	; (8000adc <MX_GPIO_Init+0x240>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a6c      	ldr	r2, [pc, #432]	; (8000adc <MX_GPIO_Init+0x240>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b6a      	ldr	r3, [pc, #424]	; (8000adc <MX_GPIO_Init+0x240>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b66      	ldr	r3, [pc, #408]	; (8000adc <MX_GPIO_Init+0x240>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a65      	ldr	r2, [pc, #404]	; (8000adc <MX_GPIO_Init+0x240>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b63      	ldr	r3, [pc, #396]	; (8000adc <MX_GPIO_Init+0x240>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2108      	movs	r1, #8
 800095e:	4860      	ldr	r0, [pc, #384]	; (8000ae0 <MX_GPIO_Init+0x244>)
 8000960:	f000 fd86 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2101      	movs	r1, #1
 8000968:	485e      	ldr	r0, [pc, #376]	; (8000ae4 <MX_GPIO_Init+0x248>)
 800096a:	f000 fd81 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2110      	movs	r1, #16
 8000972:	485d      	ldr	r0, [pc, #372]	; (8000ae8 <MX_GPIO_Init+0x24c>)
 8000974:	f000 fd7c 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000978:	2308      	movs	r3, #8
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4854      	ldr	r0, [pc, #336]	; (8000ae0 <MX_GPIO_Init+0x244>)
 8000990:	f000 fbd2 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	484e      	ldr	r0, [pc, #312]	; (8000ae4 <MX_GPIO_Init+0x248>)
 80009ac:	f000 fbc4 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009b0:	2308      	movs	r3, #8
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c0:	2305      	movs	r3, #5
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4846      	ldr	r0, [pc, #280]	; (8000ae4 <MX_GPIO_Init+0x248>)
 80009cc:	f000 fbb4 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	4b45      	ldr	r3, [pc, #276]	; (8000aec <MX_GPIO_Init+0x250>)
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4843      	ldr	r0, [pc, #268]	; (8000af0 <MX_GPIO_Init+0x254>)
 80009e4:	f000 fba8 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009e8:	2310      	movs	r3, #16
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f8:	2306      	movs	r3, #6
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	483b      	ldr	r0, [pc, #236]	; (8000af0 <MX_GPIO_Init+0x254>)
 8000a04:	f000 fb98 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4836      	ldr	r0, [pc, #216]	; (8000af4 <MX_GPIO_Init+0x258>)
 8000a1c:	f000 fb8c 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a32:	2305      	movs	r3, #5
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482d      	ldr	r0, [pc, #180]	; (8000af4 <MX_GPIO_Init+0x258>)
 8000a3e:	f000 fb7b 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a42:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a54:	2306      	movs	r3, #6
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <MX_GPIO_Init+0x248>)
 8000a60:	f000 fb6a 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000a64:	2310      	movs	r3, #16
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_GPIO_Init+0x24c>)
 8000a7c:	f000 fb5c 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a80:	2320      	movs	r3, #32
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <MX_GPIO_Init+0x24c>)
 8000a94:	f000 fb50 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a98:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480f      	ldr	r0, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x258>)
 8000ab6:	f000 fb3f 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_GPIO_Init+0x250>)
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_GPIO_Init+0x244>)
 8000ace:	f000 fb33 	bl	8001138 <HAL_GPIO_Init>

}
 8000ad2:	bf00      	nop
 8000ad4:	3730      	adds	r7, #48	; 0x30
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	10120000 	.word	0x10120000
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40020400 	.word	0x40020400

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f000 fab6 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_SPI_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bae:	23e0      	movs	r3, #224	; 0xe0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f000 fab5 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10d      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_TIM_Base_MspInit+0x40>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <HAL_TIM_Base_MspInit+0x40>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_TIM_Base_MspInit+0x40>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40000800 	.word	0x40000800
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <HAL_TIM_MspPostInit+0x68>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d11e      	bne.n	8000c88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c66:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_TIM_MspPostInit+0x70>)
 8000c84:	f000 fa58 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40000800 	.word	0x40000800
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8d0 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <OTG_FS_IRQHandler+0x10>)
 8000cf6:	f000 fd24 	bl	8001742 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000187c 	.word	0x2000187c

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f006 fd8e 	bl	8007854 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20020000 	.word	0x20020000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	200003a0 	.word	0x200003a0
 8000d6c:	20001eb8 	.word	0x20001eb8

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f006 fd4d 	bl	8007860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbdd 	bl	8000584 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000dd8:	0800828c 	.word	0x0800828c
  ldr r2, =_sbss
 8000ddc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000de0:	20001eb4 	.word	0x20001eb4

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe72 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200003a4 	.word	0x200003a4

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200003a4 	.word	0x200003a4

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e16b      	b.n	800142c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 815a 	bne.w	8001426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80b4 	beq.w	8001426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <HAL_GPIO_Init+0x310>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x314>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x318>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_GPIO_Init+0x31c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x320>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x21a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_GPIO_Init+0x324>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x216>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x328>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x212>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x20e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x20a>
 800133e:	2307      	movs	r3, #7
 8001340:	e00e      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001342:	2308      	movs	r3, #8
 8001344:	e00c      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001346:	2306      	movs	r3, #6
 8001348:	e00a      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134a:	2305      	movs	r3, #5
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134e:	2304      	movs	r3, #4
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x310>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_GPIO_Init+0x334>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a2:	4a32      	ldr	r2, [pc, #200]	; (800146c <HAL_GPIO_Init+0x334>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_GPIO_Init+0x334>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_GPIO_Init+0x334>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_GPIO_Init+0x334>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_GPIO_Init+0x334>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_GPIO_Init+0x334>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_GPIO_Init+0x334>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f ae90 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40021400 	.word	0x40021400
 8001464:	40021800 	.word	0x40021800
 8001468:	40021c00 	.word	0x40021c00
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a4:	b08f      	sub	sp, #60	; 0x3c
 80014a6:	af0a      	add	r7, sp, #40	; 0x28
 80014a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e10f      	b.n	80016d4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f005 fe9e 	bl	8007210 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fde5 	bl	80040c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	687e      	ldr	r6, [r7, #4]
 8001500:	466d      	mov	r5, sp
 8001502:	f106 0410 	add.w	r4, r6, #16
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001512:	e885 0003 	stmia.w	r5, {r0, r1}
 8001516:	1d33      	adds	r3, r6, #4
 8001518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f002 fcbc 	bl	8003e98 <USB_CoreInit>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0d0      	b.n	80016d4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fdd3 	bl	80040e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	e04a      	b.n	80015da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	333d      	adds	r3, #61	; 0x3d
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	333c      	adds	r3, #60	; 0x3c
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	b298      	uxth	r0, r3
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3342      	adds	r3, #66	; 0x42
 8001580:	4602      	mov	r2, r0
 8001582:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	333f      	adds	r3, #63	; 0x3f
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3344      	adds	r3, #68	; 0x44
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	3348      	adds	r3, #72	; 0x48
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3350      	adds	r3, #80	; 0x50
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	3301      	adds	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3af      	bcc.n	8001544 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e044      	b.n	8001674 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	1a9b      	subs	r3, r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	3301      	adds	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	d3b5      	bcc.n	80015ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	687e      	ldr	r6, [r7, #4]
 8001686:	466d      	mov	r5, sp
 8001688:	f106 0410 	add.w	r4, r6, #16
 800168c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001698:	e885 0003 	stmia.w	r5, {r0, r1}
 800169c:	1d33      	adds	r3, r6, #4
 800169e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f002 fd49 	bl	8004138 <USB_DevInit>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e00d      	b.n	80016d4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fd91 	bl	80051f4 <USB_DevDisconnect>

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_PCD_Start+0x1c>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e020      	b.n	800173a <HAL_PCD_Start+0x5e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	2b01      	cmp	r3, #1
 8001706:	d109      	bne.n	800171c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800170c:	2b01      	cmp	r3, #1
 800170e:	d005      	beq.n	800171c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fcbd 	bl	80040a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fd41 	bl	80051b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b08d      	sub	sp, #52	; 0x34
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fdff 	bl	800535c <USB_GetMode>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 839d 	bne.w	8001ea0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fd63 	bl	8005236 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8393 	beq.w	8001e9e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f003 fd5a 	bl	8005236 <USB_ReadInterrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b02      	cmp	r3, #2
 800178a:	d107      	bne.n	800179c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f002 0202 	and.w	r2, r2, #2
 800179a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fd48 	bl	8005236 <USB_ReadInterrupts>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d161      	bne.n	8001874 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0210 	bic.w	r2, r2, #16
 80017be:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f003 020f 	and.w	r2, r3, #15
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	3304      	adds	r3, #4
 80017de:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	0c5b      	lsrs	r3, r3, #17
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d124      	bne.n	8001836 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d035      	beq.n	8001864 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001806:	b29b      	uxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	6a38      	ldr	r0, [r7, #32]
 800180c:	f003 fbae 	bl	8004f6c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800181c:	441a      	add	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800182e:	441a      	add	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	619a      	str	r2, [r3, #24]
 8001834:	e016      	b.n	8001864 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	0c5b      	lsrs	r3, r3, #17
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	2b06      	cmp	r3, #6
 8001840:	d110      	bne.n	8001864 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001848:	2208      	movs	r2, #8
 800184a:	4619      	mov	r1, r3
 800184c:	6a38      	ldr	r0, [r7, #32]
 800184e:	f003 fb8d 	bl	8004f6c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800185e:	441a      	add	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0210 	orr.w	r2, r2, #16
 8001872:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fcdc 	bl	8005236 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001884:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001888:	d16e      	bne.n	8001968 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fce2 	bl	800525c <USB_ReadDevAllOutEpInterrupt>
 8001898:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800189a:	e062      	b.n	8001962 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d057      	beq.n	8001956 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fd07 	bl	80052c4 <USB_ReadDevOutEPInterrupt>
 80018b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00c      	beq.n	80018dc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ce:	461a      	mov	r2, r3
 80018d0:	2301      	movs	r3, #1
 80018d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fdb0 	bl	800243c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f2:	461a      	mov	r2, r3
 80018f4:	2308      	movs	r3, #8
 80018f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 feaa 	bl	8002654 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001916:	461a      	mov	r2, r3
 8001918:	2310      	movs	r3, #16
 800191a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	015a      	lsls	r2, r3, #5
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4413      	add	r3, r2
 800192e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001932:	461a      	mov	r2, r3
 8001934:	2320      	movs	r3, #32
 8001936:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	015a      	lsls	r2, r3, #5
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194e:	461a      	mov	r2, r3
 8001950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001954:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	d199      	bne.n	800189c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f003 fc62 	bl	8005236 <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800197c:	f040 80c0 	bne.w	8001b00 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fc83 	bl	8005290 <USB_ReadDevAllInEpInterrupt>
 800198a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001990:	e0b2      	b.n	8001af8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80a7 	beq.w	8001aec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 fca9 	bl	8005300 <USB_ReadDevInEPInterrupt>
 80019ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d057      	beq.n	8001a6a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	2201      	movs	r2, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69f9      	ldr	r1, [r7, #28]
 80019d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019da:	4013      	ands	r3, r2
 80019dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ea:	461a      	mov	r2, r3
 80019ec:	2301      	movs	r3, #1
 80019ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d132      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3348      	adds	r3, #72	; 0x48
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4403      	add	r3, r0
 8001a18:	3344      	adds	r3, #68	; 0x44
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4419      	add	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4403      	add	r3, r0
 8001a2c:	3348      	adds	r3, #72	; 0x48
 8001a2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d113      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x31c>
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	3350      	adds	r3, #80	; 0x50
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d108      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a56:	461a      	mov	r2, r3
 8001a58:	2101      	movs	r1, #1
 8001a5a:	f003 fcb1 	bl	80053c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4619      	mov	r1, r3
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f005 fc62 	bl	800732e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a80:	461a      	mov	r2, r3
 8001a82:	2308      	movs	r3, #8
 8001a84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	015a      	lsls	r2, r3, #5
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2340      	movs	r3, #64	; 0x40
 8001abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fc1b 	bl	8002322 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	3301      	adds	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f af49 	bne.w	8001992 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 fb96 	bl	8005236 <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b14:	d122      	bne.n	8001b5c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fe26 	bl	8002790 <HAL_PCDEx_LPM_Callback>
 8001b44:	e002      	b.n	8001b4c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f005 fc68 	bl	800741c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fb68 	bl	8005236 <USB_ReadInterrupts>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b70:	d112      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f005 fc24 	bl	80073d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b96:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fb4a 	bl	8005236 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bac:	f040 80c7 	bne.w	8001d3e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2110      	movs	r1, #16
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fc18 	bl	8004400 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd4:	e056      	b.n	8001c84 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be2:	461a      	mov	r2, r3
 8001be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001be8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfa:	0151      	lsls	r1, r2, #5
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	440a      	add	r2, r1
 8001c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c08:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c1a:	0151      	lsls	r1, r2, #5
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	440a      	add	r2, r1
 8001c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c36:	461a      	mov	r2, r3
 8001c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4e:	0151      	lsls	r1, r2, #5
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	440a      	add	r2, r1
 8001c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6e:	0151      	lsls	r1, r2, #5
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	440a      	add	r2, r1
 8001c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	3301      	adds	r3, #1
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3a3      	bcc.n	8001bd6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ca0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d016      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cba:	f043 030b 	orr.w	r3, r3, #11
 8001cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cd0:	f043 030b 	orr.w	r3, r3, #11
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	e015      	b.n	8001d04 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cfe:	f043 030b 	orr.w	r3, r3, #11
 8001d02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f003 fb49 	bl	80053c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fa77 	bl	8005236 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d52:	d124      	bne.n	8001d9e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fb0d 	bl	8005378 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fbad 	bl	80044c2 <USB_GetDevSpeed>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681c      	ldr	r4, [r3, #0]
 8001d74:	f001 f97c 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8001d78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f002 f8ea 	bl	8003f5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f005 faf8 	bl	800737e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fa47 	bl	8005236 <USB_ReadInterrupts>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d10a      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f005 fad5 	bl	8007362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f002 0208 	and.w	r2, r2, #8
 8001dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fa32 	bl	8005236 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ddc:	d10f      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f005 fb37 	bl	800745c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fa17 	bl	8005236 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e12:	d10f      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f005 fb0a 	bl	8007438 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 f9fc 	bl	8005236 <USB_ReadInterrupts>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d10a      	bne.n	8001e60 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f005 fb18 	bl	8007480 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 f9e6 	bl	8005236 <USB_ReadInterrupts>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d115      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f005 fb08 	bl	800749c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	e000      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e9e:	bf00      	nop
    }
  }
}
 8001ea0:	3734      	adds	r7, #52	; 0x34
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}

08001ea6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_PCD_SetAddress+0x1a>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e013      	b.n	8001ee8 <HAL_PCD_SetAddress+0x42>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 f944 	bl	8005166 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	70fb      	strb	r3, [r7, #3]
 8001f02:	460b      	mov	r3, r1
 8001f04:	803b      	strh	r3, [r7, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	da0f      	bge.n	8001f36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3338      	adds	r3, #56	; 0x38
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
 8001f34:	e00f      	b.n	8001f56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 020f 	and.w	r2, r3, #15
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f62:	883a      	ldrh	r2, [r7, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	78ba      	ldrb	r2, [r7, #2]
 8001f6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	785b      	ldrb	r3, [r3, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f80:	78bb      	ldrb	r3, [r7, #2]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d102      	bne.n	8001f8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_PCD_EP_Open+0xaa>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e00e      	b.n	8001fb8 <HAL_PCD_EP_Open+0xc8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68f9      	ldr	r1, [r7, #12]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 faaf 	bl	800450c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da0f      	bge.n	8001ff4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 020f 	and.w	r2, r3, #15
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	3338      	adds	r3, #56	; 0x38
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	705a      	strb	r2, [r3, #1]
 8001ff2:	e00f      	b.n	8002014 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	f003 020f 	and.w	r2, r3, #15
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_PCD_EP_Close+0x6e>
 800202a:	2302      	movs	r3, #2
 800202c:	e00e      	b.n	800204c <HAL_PCD_EP_Close+0x8c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f002 faed 	bl	800461c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	460b      	mov	r3, r1
 8002062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002064:	7afb      	ldrb	r3, [r7, #11]
 8002066:	f003 020f 	and.w	r2, r3, #15
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	3304      	adds	r3, #4
 800207c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2200      	movs	r2, #0
 8002094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	b2da      	uxtb	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d102      	bne.n	80020b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	6979      	ldr	r1, [r7, #20]
 80020c8:	f002 fdc8 	bl	8004c5c <USB_EP0StartXfer>
 80020cc:	e008      	b.n	80020e0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	6979      	ldr	r1, [r7, #20]
 80020dc:	f002 fb7a 	bl	80047d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 020f 	and.w	r2, r3, #15
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800210c:	681b      	ldr	r3, [r3, #0]
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	460b      	mov	r3, r1
 8002128:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212a:	7afb      	ldrb	r3, [r7, #11]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	3338      	adds	r3, #56	; 0x38
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2201      	movs	r2, #1
 8002158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	b2da      	uxtb	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d102      	bne.n	8002174 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	6979      	ldr	r1, [r7, #20]
 800218c:	f002 fd66 	bl	8004c5c <USB_EP0StartXfer>
 8002190:	e008      	b.n	80021a4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	6979      	ldr	r1, [r7, #20]
 80021a0:	f002 fb18 	bl	80047d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d901      	bls.n	80021cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e050      	b.n	800226e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da0f      	bge.n	80021f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	3338      	adds	r3, #56	; 0x38
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	705a      	strb	r2, [r3, #1]
 80021f2:	e00d      	b.n	8002210 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_PCD_EP_SetStall+0x82>
 800222c:	2302      	movs	r3, #2
 800222e:	e01e      	b.n	800226e <HAL_PCD_EP_SetStall+0xc0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68f9      	ldr	r1, [r7, #12]
 800223e:	4618      	mov	r0, r3
 8002240:	f002 febd 	bl	8004fbe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	b2d9      	uxtb	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800225e:	461a      	mov	r2, r3
 8002260:	f003 f8ae 	bl	80053c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	d901      	bls.n	8002294 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e042      	b.n	800231a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002298:	2b00      	cmp	r3, #0
 800229a:	da0f      	bge.n	80022bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f003 020f 	and.w	r2, r3, #15
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	3338      	adds	r3, #56	; 0x38
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	705a      	strb	r2, [r3, #1]
 80022ba:	e00f      	b.n	80022dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 020f 	and.w	r2, r3, #15
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	3304      	adds	r3, #4
 80022d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_PCD_EP_ClrStall+0x86>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e00e      	b.n	800231a <HAL_PCD_EP_ClrStall+0xa4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fec5 	bl	800509a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b08a      	sub	sp, #40	; 0x28
 8002326:	af02      	add	r7, sp, #8
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3338      	adds	r3, #56	; 0x38
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	429a      	cmp	r2, r3
 8002354:	d901      	bls.n	800235a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06c      	b.n	8002434 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	429a      	cmp	r2, r3
 800236e:	d902      	bls.n	8002376 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3303      	adds	r3, #3
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800237e:	e02b      	b.n	80023d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	429a      	cmp	r2, r3
 8002394:	d902      	bls.n	800239c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3303      	adds	r3, #3
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	68d9      	ldr	r1, [r3, #12]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4603      	mov	r3, r0
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f002 fda1 	bl	8004f02 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	441a      	add	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	441a      	add	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d809      	bhi.n	8002402 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d203      	bcs.n	8002402 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1be      	bne.n	8002380 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	429a      	cmp	r2, r3
 800240c:	d811      	bhi.n	8002432 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	2201      	movs	r2, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	43db      	mvns	r3, r3
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800242e:	4013      	ands	r3, r2
 8002430:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	333c      	adds	r3, #60	; 0x3c
 8002454:	3304      	adds	r3, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	f040 80a0 	bne.w	80025b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d015      	beq.n	80024aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a72      	ldr	r2, [pc, #456]	; (800264c <PCD_EP_OutXfrComplete_int+0x210>)
 8002482:	4293      	cmp	r3, r2
 8002484:	f240 80dd 	bls.w	8002642 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80d7 	beq.w	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	6093      	str	r3, [r2, #8]
 80024a8:	e0cb      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c0:	461a      	mov	r2, r3
 80024c2:	2320      	movs	r3, #32
 80024c4:	6093      	str	r3, [r2, #8]
 80024c6:	e0bc      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80b7 	bne.w	8002642 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a5d      	ldr	r2, [pc, #372]	; (800264c <PCD_EP_OutXfrComplete_int+0x210>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d90f      	bls.n	80024fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	461a      	mov	r2, r3
 80024f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f8:	6093      	str	r3, [r2, #8]
 80024fa:	e0a2      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800250e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	0159      	lsls	r1, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	440b      	add	r3, r1
 8002518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002522:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4403      	add	r3, r0
 8002532:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002536:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4403      	add	r3, r0
 800255a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4419      	add	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4403      	add	r3, r0
 8002570:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002574:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d114      	bne.n	80025a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d108      	bne.n	80025a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800259e:	461a      	mov	r2, r3
 80025a0:	2101      	movs	r1, #1
 80025a2:	f002 ff0d 	bl	80053c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f004 fea3 	bl	80072f8 <HAL_PCD_DataOutStageCallback>
 80025b2:	e046      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a26      	ldr	r2, [pc, #152]	; (8002650 <PCD_EP_OutXfrComplete_int+0x214>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d124      	bne.n	8002606 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d2:	461a      	mov	r2, r3
 80025d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d8:	6093      	str	r3, [r2, #8]
 80025da:	e032      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	461a      	mov	r2, r3
 80025f4:	2320      	movs	r3, #32
 80025f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f004 fe7a 	bl	80072f8 <HAL_PCD_DataOutStageCallback>
 8002604:	e01d      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d114      	bne.n	8002636 <PCD_EP_OutXfrComplete_int+0x1fa>
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d108      	bne.n	8002636 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800262e:	461a      	mov	r2, r3
 8002630:	2100      	movs	r1, #0
 8002632:	f002 fec5 	bl	80053c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f004 fe5b 	bl	80072f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	4f54300a 	.word	0x4f54300a
 8002650:	4f54310a 	.word	0x4f54310a

08002654 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	333c      	adds	r3, #60	; 0x3c
 800266c:	3304      	adds	r3, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a15      	ldr	r2, [pc, #84]	; (80026dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d90e      	bls.n	80026a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a0:	461a      	mov	r2, r3
 80026a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f004 fe13 	bl	80072d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <PCD_EP_OutSetupPacket_int+0x88>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d90c      	bls.n	80026d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026c8:	461a      	mov	r2, r3
 80026ca:	2101      	movs	r1, #1
 80026cc:	f002 fe78 	bl	80053c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	4f54300a 	.word	0x4f54300a

080026e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
 80026ec:	4613      	mov	r3, r2
 80026ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d107      	bne.n	800270e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026fe:	883b      	ldrh	r3, [r7, #0]
 8002700:	0419      	lsls	r1, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	430a      	orrs	r2, r1
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
 800270c:	e028      	b.n	8002760 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	4413      	add	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e00d      	b.n	800273e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	3340      	adds	r3, #64	; 0x40
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4413      	add	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	3301      	adds	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	3b01      	subs	r3, #1
 8002744:	429a      	cmp	r2, r3
 8002746:	d3ec      	bcc.n	8002722 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002748:	883b      	ldrh	r3, [r7, #0]
 800274a:	0418      	lsls	r0, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	3b01      	subs	r3, #1
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	4302      	orrs	r2, r0
 8002758:	3340      	adds	r3, #64	; 0x40
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e267      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d075      	beq.n	80028b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c6:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d00c      	beq.n	80027ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b82      	ldr	r3, [pc, #520]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ea:	d10b      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	4b7e      	ldr	r3, [pc, #504]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05b      	beq.n	80028b0 <HAL_RCC_OscConfig+0x108>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d157      	bne.n	80028b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e242      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x74>
 800280e:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a75      	ldr	r2, [pc, #468]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x98>
 8002826:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6f      	ldr	r2, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6c      	ldr	r2, [pc, #432]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 8002840:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a68      	ldr	r2, [pc, #416]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b66      	ldr	r3, [pc, #408]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a65      	ldr	r2, [pc, #404]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fb28 	bl	8000eb4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fb24 	bl	8000eb4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e207      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xc0>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fb14 	bl	8000eb4 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fb10 	bl	8000eb4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1f3      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b51      	ldr	r3, [pc, #324]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0xe8>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028be:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c7      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4937      	ldr	r1, [pc, #220]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b34      	ldr	r3, [pc, #208]	; (80029ec <HAL_RCC_OscConfig+0x244>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fac9 	bl	8000eb4 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe fac5 	bl	8000eb4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a8      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4925      	ldr	r1, [pc, #148]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <HAL_RCC_OscConfig+0x244>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe faa8 	bl	8000eb4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe faa4 	bl	8000eb4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e187      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d036      	beq.n	8002a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCC_OscConfig+0x248>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe fa88 	bl	8000eb4 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fa84 	bl	8000eb4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e167      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x200>
 80029c6:	e01b      	b.n	8002a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_OscConfig+0x248>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fa71 	bl	8000eb4 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	e00e      	b.n	80029f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe fa6d 	bl	8000eb4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d907      	bls.n	80029f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e150      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
 80029e8:	40023800 	.word	0x40023800
 80029ec:	42470000 	.word	0x42470000
 80029f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	4b88      	ldr	r3, [pc, #544]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ea      	bne.n	80029d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8097 	beq.w	8002b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a12:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a7c      	ldr	r2, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	4b7a      	ldr	r3, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b77      	ldr	r3, [pc, #476]	; (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4a:	4b74      	ldr	r3, [pc, #464]	; (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	; (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fa2d 	bl	8000eb4 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe fa29 	bl	8000eb4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e10c      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x2ea>
 8002a84:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a63      	ldr	r2, [pc, #396]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	e01c      	b.n	8002acc <HAL_RCC_OscConfig+0x324>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x30c>
 8002a9a:	4b5f      	ldr	r3, [pc, #380]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	4a5e      	ldr	r2, [pc, #376]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a5b      	ldr	r2, [pc, #364]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0x324>
 8002ab4:	4b58      	ldr	r3, [pc, #352]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a57      	ldr	r2, [pc, #348]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac0:	4b55      	ldr	r3, [pc, #340]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d015      	beq.n	8002b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe f9ee 	bl	8000eb4 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe f9ea 	bl	8000eb4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0cb      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ee      	beq.n	8002adc <HAL_RCC_OscConfig+0x334>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fe f9d8 	bl	8000eb4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe f9d4 	bl	8000eb4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0b5      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1ee      	bne.n	8002b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80a1 	beq.w	8002c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d05c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d141      	bne.n	8002bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe f9a8 	bl	8000eb4 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe f9a4 	bl	8000eb4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e087      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	491b      	ldr	r1, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7fe f97d 	bl	8000eb4 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe f979 	bl	8000eb4 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e05c      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bdc:	e054      	b.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe f966 	bl	8000eb4 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe f962 	bl	8000eb4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e045      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x444>
 8002c0a:	e03d      	b.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e038      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d028      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d121      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d11a      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0cc      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d044      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d119      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e067      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4934      	ldr	r1, [pc, #208]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7fe f894 	bl	8000eb4 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe f890 	bl	8000eb4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d20c      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f821 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	490a      	ldr	r1, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	5ccb      	ldrb	r3, [r1, r3]
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fff4 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08008238 	.word	0x08008238
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b094      	sub	sp, #80	; 0x50
 8002e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e70:	2300      	movs	r3, #0
 8002e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e74:	2300      	movs	r3, #0
 8002e76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7c:	4b79      	ldr	r3, [pc, #484]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d00d      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	f200 80e1 	bhi.w	8003050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e96:	e0db      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e9c:	e0db      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9e:	4b73      	ldr	r3, [pc, #460]	; (800306c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea2:	e0d8      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	0159      	lsls	r1, r3, #5
 8002ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee8:	0150      	lsls	r0, r2, #5
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4621      	mov	r1, r4
 8002ef0:	1a51      	subs	r1, r2, r1
 8002ef2:	6139      	str	r1, [r7, #16]
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f08:	4659      	mov	r1, fp
 8002f0a:	018b      	lsls	r3, r1, #6
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f12:	4651      	mov	r1, sl
 8002f14:	018a      	lsls	r2, r1, #6
 8002f16:	4651      	mov	r1, sl
 8002f18:	ebb2 0801 	subs.w	r8, r2, r1
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f36:	4690      	mov	r8, r2
 8002f38:	4699      	mov	r9, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	eb18 0303 	adds.w	r3, r8, r3
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	462b      	mov	r3, r5
 8002f44:	eb49 0303 	adc.w	r3, r9, r3
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f56:	4629      	mov	r1, r5
 8002f58:	024b      	lsls	r3, r1, #9
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f60:	4621      	mov	r1, r4
 8002f62:	024a      	lsls	r2, r1, #9
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f74:	f7fd f984 	bl	8000280 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f80:	e058      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f82:	4b38      	ldr	r3, [pc, #224]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	f04f 0000 	mov.w	r0, #0
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	0159      	lsls	r1, r3, #5
 8002faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fae:	0150      	lsls	r0, r2, #5
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fba:	4649      	mov	r1, r9
 8002fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	00eb      	lsls	r3, r5, #3
 8002fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fea:	00e2      	lsls	r2, r4, #3
 8002fec:	4614      	mov	r4, r2
 8002fee:	461d      	mov	r5, r3
 8002ff0:	4643      	mov	r3, r8
 8002ff2:	18e3      	adds	r3, r4, r3
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	eb45 0303 	adc.w	r3, r5, r3
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800300a:	4629      	mov	r1, r5
 800300c:	028b      	lsls	r3, r1, #10
 800300e:	4621      	mov	r1, r4
 8003010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003014:	4621      	mov	r1, r4
 8003016:	028a      	lsls	r2, r1, #10
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301e:	2200      	movs	r2, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	61fa      	str	r2, [r7, #28]
 8003024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003028:	f7fd f92a 	bl	8000280 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800304e:	e002      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetSysClockFreq+0x204>)
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003058:	4618      	mov	r0, r3
 800305a:	3750      	adds	r7, #80	; 0x50
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e07b      	b.n	8003192 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030aa:	d009      	beq.n	80030c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
 80030b2:	e005      	b.n	80030c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fd3a 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	ea42 0103 	orr.w	r1, r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0104 	and.w	r1, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	f003 0210 	and.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e041      	b.n	8003230 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fd fd0f 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f000 fad1 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e041      	b.n	80032ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f839 	bl	80032d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 fa82 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_TIM_PWM_Start+0x24>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e022      	b.n	8003356 <HAL_TIM_PWM_Start+0x6a>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b04      	cmp	r3, #4
 8003314:	d109      	bne.n	800332a <HAL_TIM_PWM_Start+0x3e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e015      	b.n	8003356 <HAL_TIM_PWM_Start+0x6a>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d109      	bne.n	8003344 <HAL_TIM_PWM_Start+0x58>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e008      	b.n	8003356 <HAL_TIM_PWM_Start+0x6a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07c      	b.n	8003458 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0x82>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	e013      	b.n	8003396 <HAL_TIM_PWM_Start+0xaa>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0x92>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337c:	e00b      	b.n	8003396 <HAL_TIM_PWM_Start+0xaa>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0xa2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338c:	e003      	b.n	8003396 <HAL_TIM_PWM_Start+0xaa>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fcd8 	bl	8003d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2d      	ldr	r2, [pc, #180]	; (8003460 <HAL_TIM_PWM_Start+0x174>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_PWM_Start+0xcc>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2c      	ldr	r2, [pc, #176]	; (8003464 <HAL_TIM_PWM_Start+0x178>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_PWM_Start+0xd0>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_TIM_PWM_Start+0xd2>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_TIM_PWM_Start+0x174>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_TIM_PWM_Start+0x136>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d01d      	beq.n	8003422 <HAL_TIM_PWM_Start+0x136>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_TIM_PWM_Start+0x17c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_TIM_PWM_Start+0x136>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_TIM_PWM_Start+0x180>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_TIM_PWM_Start+0x136>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_TIM_PWM_Start+0x184>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_TIM_PWM_Start+0x136>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_TIM_PWM_Start+0x178>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_TIM_PWM_Start+0x136>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_TIM_PWM_Start+0x188>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_TIM_PWM_Start+0x136>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_TIM_PWM_Start+0x18c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d111      	bne.n	8003446 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b06      	cmp	r3, #6
 8003432:	d010      	beq.n	8003456 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	e007      	b.n	8003456 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40010000 	.word	0x40010000
 8003464:	40010400 	.word	0x40010400
 8003468:	40000400 	.word	0x40000400
 800346c:	40000800 	.word	0x40000800
 8003470:	40000c00 	.word	0x40000c00
 8003474:	40014000 	.word	0x40014000
 8003478:	40001800 	.word	0x40001800

0800347c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003492:	2302      	movs	r3, #2
 8003494:	e0ac      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	f200 809f 	bhi.w	80035e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80034a6:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	080034e1 	.word	0x080034e1
 80034b0:	080035e5 	.word	0x080035e5
 80034b4:	080035e5 	.word	0x080035e5
 80034b8:	080035e5 	.word	0x080035e5
 80034bc:	08003521 	.word	0x08003521
 80034c0:	080035e5 	.word	0x080035e5
 80034c4:	080035e5 	.word	0x080035e5
 80034c8:	080035e5 	.word	0x080035e5
 80034cc:	08003563 	.word	0x08003563
 80034d0:	080035e5 	.word	0x080035e5
 80034d4:	080035e5 	.word	0x080035e5
 80034d8:	080035e5 	.word	0x080035e5
 80034dc:	080035a3 	.word	0x080035a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f9ea 	bl	80038c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0208 	orr.w	r2, r2, #8
 80034fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6999      	ldr	r1, [r3, #24]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	619a      	str	r2, [r3, #24]
      break;
 800351e:	e062      	b.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa3a 	bl	80039a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800353a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6999      	ldr	r1, [r3, #24]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	021a      	lsls	r2, r3, #8
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	619a      	str	r2, [r3, #24]
      break;
 8003560:	e041      	b.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fa8f 	bl	8003a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0208 	orr.w	r2, r2, #8
 800357c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0204 	bic.w	r2, r2, #4
 800358c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69d9      	ldr	r1, [r3, #28]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	61da      	str	r2, [r3, #28]
      break;
 80035a0:	e021      	b.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fae3 	bl	8003b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69d9      	ldr	r1, [r3, #28]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	021a      	lsls	r2, r3, #8
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	61da      	str	r2, [r3, #28]
      break;
 80035e2:	e000      	b.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80035e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_TIM_ConfigClockSource+0x18>
 800360c:	2302      	movs	r3, #2
 800360e:	e0b3      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x180>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800362e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003636:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003648:	d03e      	beq.n	80036c8 <HAL_TIM_ConfigClockSource+0xd0>
 800364a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364e:	f200 8087 	bhi.w	8003760 <HAL_TIM_ConfigClockSource+0x168>
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003656:	f000 8085 	beq.w	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 800365a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365e:	d87f      	bhi.n	8003760 <HAL_TIM_ConfigClockSource+0x168>
 8003660:	2b70      	cmp	r3, #112	; 0x70
 8003662:	d01a      	beq.n	800369a <HAL_TIM_ConfigClockSource+0xa2>
 8003664:	2b70      	cmp	r3, #112	; 0x70
 8003666:	d87b      	bhi.n	8003760 <HAL_TIM_ConfigClockSource+0x168>
 8003668:	2b60      	cmp	r3, #96	; 0x60
 800366a:	d050      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x116>
 800366c:	2b60      	cmp	r3, #96	; 0x60
 800366e:	d877      	bhi.n	8003760 <HAL_TIM_ConfigClockSource+0x168>
 8003670:	2b50      	cmp	r3, #80	; 0x50
 8003672:	d03c      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0xf6>
 8003674:	2b50      	cmp	r3, #80	; 0x50
 8003676:	d873      	bhi.n	8003760 <HAL_TIM_ConfigClockSource+0x168>
 8003678:	2b40      	cmp	r3, #64	; 0x40
 800367a:	d058      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x136>
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d86f      	bhi.n	8003760 <HAL_TIM_ConfigClockSource+0x168>
 8003680:	2b30      	cmp	r3, #48	; 0x30
 8003682:	d064      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x156>
 8003684:	2b30      	cmp	r3, #48	; 0x30
 8003686:	d86b      	bhi.n	8003760 <HAL_TIM_ConfigClockSource+0x168>
 8003688:	2b20      	cmp	r3, #32
 800368a:	d060      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x156>
 800368c:	2b20      	cmp	r3, #32
 800368e:	d867      	bhi.n	8003760 <HAL_TIM_ConfigClockSource+0x168>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05c      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x156>
 8003694:	2b10      	cmp	r3, #16
 8003696:	d05a      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003698:	e062      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f000 fb33 	bl	8003d14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	609a      	str	r2, [r3, #8]
      break;
 80036c6:	e04e      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6899      	ldr	r1, [r3, #8]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f000 fb1c 	bl	8003d14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ea:	609a      	str	r2, [r3, #8]
      break;
 80036ec:	e03b      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f000 fa90 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2150      	movs	r1, #80	; 0x50
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fae9 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 800370c:	e02b      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	461a      	mov	r2, r3
 800371c:	f000 faaf 	bl	8003c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2160      	movs	r1, #96	; 0x60
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fad9 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 800372c:	e01b      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	461a      	mov	r2, r3
 800373c:	f000 fa70 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2140      	movs	r1, #64	; 0x40
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fac9 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 800374c:	e00b      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f000 fac0 	bl	8003cde <TIM_ITRx_SetConfig>
        break;
 800375e:	e002      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003764:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a40      	ldr	r2, [pc, #256]	; (8003894 <TIM_Base_SetConfig+0x114>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379e:	d00f      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a3d      	ldr	r2, [pc, #244]	; (8003898 <TIM_Base_SetConfig+0x118>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3c      	ldr	r2, [pc, #240]	; (800389c <TIM_Base_SetConfig+0x11c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <TIM_Base_SetConfig+0x120>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3a      	ldr	r2, [pc, #232]	; (80038a4 <TIM_Base_SetConfig+0x124>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2f      	ldr	r2, [pc, #188]	; (8003894 <TIM_Base_SetConfig+0x114>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02b      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d027      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2c      	ldr	r2, [pc, #176]	; (8003898 <TIM_Base_SetConfig+0x118>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d023      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2b      	ldr	r2, [pc, #172]	; (800389c <TIM_Base_SetConfig+0x11c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01f      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a2a      	ldr	r2, [pc, #168]	; (80038a0 <TIM_Base_SetConfig+0x120>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01b      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a29      	ldr	r2, [pc, #164]	; (80038a4 <TIM_Base_SetConfig+0x124>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d017      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a28      	ldr	r2, [pc, #160]	; (80038a8 <TIM_Base_SetConfig+0x128>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a27      	ldr	r2, [pc, #156]	; (80038ac <TIM_Base_SetConfig+0x12c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00f      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a26      	ldr	r2, [pc, #152]	; (80038b0 <TIM_Base_SetConfig+0x130>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00b      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a25      	ldr	r2, [pc, #148]	; (80038b4 <TIM_Base_SetConfig+0x134>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a24      	ldr	r2, [pc, #144]	; (80038b8 <TIM_Base_SetConfig+0x138>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a23      	ldr	r2, [pc, #140]	; (80038bc <TIM_Base_SetConfig+0x13c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d108      	bne.n	8003844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <TIM_Base_SetConfig+0x114>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_Base_SetConfig+0xf8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <TIM_Base_SetConfig+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d103      	bne.n	8003880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	615a      	str	r2, [r3, #20]
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800
 80038a0:	40000c00 	.word	0x40000c00
 80038a4:	40010400 	.word	0x40010400
 80038a8:	40014000 	.word	0x40014000
 80038ac:	40014400 	.word	0x40014400
 80038b0:	40014800 	.word	0x40014800
 80038b4:	40001800 	.word	0x40001800
 80038b8:	40001c00 	.word	0x40001c00
 80038bc:	40002000 	.word	0x40002000

080038c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0201 	bic.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 0302 	bic.w	r3, r3, #2
 8003908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a20      	ldr	r2, [pc, #128]	; (8003998 <TIM_OC1_SetConfig+0xd8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_OC1_SetConfig+0x64>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a1f      	ldr	r2, [pc, #124]	; (800399c <TIM_OC1_SetConfig+0xdc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10c      	bne.n	800393e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f023 0308 	bic.w	r3, r3, #8
 800392a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f023 0304 	bic.w	r3, r3, #4
 800393c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a15      	ldr	r2, [pc, #84]	; (8003998 <TIM_OC1_SetConfig+0xd8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC1_SetConfig+0x8e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <TIM_OC1_SetConfig+0xdc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d111      	bne.n	8003972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	621a      	str	r2, [r3, #32]
}
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	40010000 	.word	0x40010000
 800399c:	40010400 	.word	0x40010400

080039a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0210 	bic.w	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0320 	bic.w	r3, r3, #32
 80039ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <TIM_OC2_SetConfig+0xe4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_OC2_SetConfig+0x68>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <TIM_OC2_SetConfig+0xe8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10d      	bne.n	8003a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <TIM_OC2_SetConfig+0xe4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC2_SetConfig+0x94>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <TIM_OC2_SetConfig+0xe8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d113      	bne.n	8003a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40010400 	.word	0x40010400

08003a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <TIM_OC3_SetConfig+0xe0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_OC3_SetConfig+0x66>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <TIM_OC3_SetConfig+0xe4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10d      	bne.n	8003b0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <TIM_OC3_SetConfig+0xe0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_OC3_SetConfig+0x92>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <TIM_OC3_SetConfig+0xe4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d113      	bne.n	8003b46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	621a      	str	r2, [r3, #32]
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40010400 	.word	0x40010400

08003b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <TIM_OC4_SetConfig+0xa4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC4_SetConfig+0x68>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a11      	ldr	r2, [pc, #68]	; (8003c1c <TIM_OC4_SetConfig+0xa8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d109      	bne.n	8003bf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40010400 	.word	0x40010400

08003c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 030a 	bic.w	r3, r3, #10
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b087      	sub	sp, #28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0210 	bic.w	r2, r3, #16
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	031b      	lsls	r3, r3, #12
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f043 0307 	orr.w	r3, r3, #7
 8003d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	021a      	lsls	r2, r3, #8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2201      	movs	r2, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1a      	ldr	r2, [r3, #32]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	401a      	ands	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e05a      	b.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e04:	d01d      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10c      	bne.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40000400 	.word	0x40000400
 8003e84:	40000800 	.word	0x40000800
 8003e88:	40000c00 	.word	0x40000c00
 8003e8c:	40010400 	.word	0x40010400
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40001800 	.word	0x40001800

08003e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e98:	b084      	sub	sp, #16
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	f107 001c 	add.w	r0, r7, #28
 8003ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d122      	bne.n	8003ef6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f001 fac6 	bl	800547c <USB_CoreReset>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	e01a      	b.n	8003f2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f001 faba 	bl	800547c <USB_CoreReset>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8003f1e:	e005      	b.n	8003f2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d10b      	bne.n	8003f4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f043 0206 	orr.w	r2, r3, #6
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f56:	b004      	add	sp, #16
 8003f58:	4770      	bx	lr
	...

08003f5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	4613      	mov	r3, r2
 8003f68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d165      	bne.n	800403c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4a41      	ldr	r2, [pc, #260]	; (8004078 <USB_SetTurnaroundTime+0x11c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d906      	bls.n	8003f86 <USB_SetTurnaroundTime+0x2a>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4a40      	ldr	r2, [pc, #256]	; (800407c <USB_SetTurnaroundTime+0x120>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d202      	bcs.n	8003f86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f80:	230f      	movs	r3, #15
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e062      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	; (800407c <USB_SetTurnaroundTime+0x120>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d306      	bcc.n	8003f9c <USB_SetTurnaroundTime+0x40>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4a3b      	ldr	r2, [pc, #236]	; (8004080 <USB_SetTurnaroundTime+0x124>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d202      	bcs.n	8003f9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f96:	230e      	movs	r3, #14
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e057      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4a38      	ldr	r2, [pc, #224]	; (8004080 <USB_SetTurnaroundTime+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d306      	bcc.n	8003fb2 <USB_SetTurnaroundTime+0x56>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4a37      	ldr	r2, [pc, #220]	; (8004084 <USB_SetTurnaroundTime+0x128>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d202      	bcs.n	8003fb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fac:	230d      	movs	r3, #13
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e04c      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4a33      	ldr	r2, [pc, #204]	; (8004084 <USB_SetTurnaroundTime+0x128>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d306      	bcc.n	8003fc8 <USB_SetTurnaroundTime+0x6c>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4a32      	ldr	r2, [pc, #200]	; (8004088 <USB_SetTurnaroundTime+0x12c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d802      	bhi.n	8003fc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e041      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4a2f      	ldr	r2, [pc, #188]	; (8004088 <USB_SetTurnaroundTime+0x12c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d906      	bls.n	8003fde <USB_SetTurnaroundTime+0x82>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4a2e      	ldr	r2, [pc, #184]	; (800408c <USB_SetTurnaroundTime+0x130>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d802      	bhi.n	8003fde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003fd8:	230b      	movs	r3, #11
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e036      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	; (800408c <USB_SetTurnaroundTime+0x130>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d906      	bls.n	8003ff4 <USB_SetTurnaroundTime+0x98>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <USB_SetTurnaroundTime+0x134>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d802      	bhi.n	8003ff4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003fee:	230a      	movs	r3, #10
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e02b      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4a26      	ldr	r2, [pc, #152]	; (8004090 <USB_SetTurnaroundTime+0x134>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d906      	bls.n	800400a <USB_SetTurnaroundTime+0xae>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4a25      	ldr	r2, [pc, #148]	; (8004094 <USB_SetTurnaroundTime+0x138>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d202      	bcs.n	800400a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004004:	2309      	movs	r3, #9
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e020      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4a21      	ldr	r2, [pc, #132]	; (8004094 <USB_SetTurnaroundTime+0x138>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d306      	bcc.n	8004020 <USB_SetTurnaroundTime+0xc4>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <USB_SetTurnaroundTime+0x13c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d802      	bhi.n	8004020 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800401a:	2308      	movs	r3, #8
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e015      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <USB_SetTurnaroundTime+0x13c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d906      	bls.n	8004036 <USB_SetTurnaroundTime+0xda>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a1c      	ldr	r2, [pc, #112]	; (800409c <USB_SetTurnaroundTime+0x140>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d202      	bcs.n	8004036 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004030:	2307      	movs	r3, #7
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e00a      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004036:	2306      	movs	r3, #6
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e007      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004042:	2309      	movs	r3, #9
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e001      	b.n	800404c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004048:	2309      	movs	r3, #9
 800404a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	029b      	lsls	r3, r3, #10
 8004060:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004064:	431a      	orrs	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	00d8acbf 	.word	0x00d8acbf
 800407c:	00e4e1c0 	.word	0x00e4e1c0
 8004080:	00f42400 	.word	0x00f42400
 8004084:	01067380 	.word	0x01067380
 8004088:	011a499f 	.word	0x011a499f
 800408c:	01312cff 	.word	0x01312cff
 8004090:	014ca43f 	.word	0x014ca43f
 8004094:	016e3600 	.word	0x016e3600
 8004098:	01a6ab1f 	.word	0x01a6ab1f
 800409c:	01e84800 	.word	0x01e84800

080040a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0201 	bic.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d106      	bne.n	8004110 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	e00b      	b.n	8004128 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	e001      	b.n	8004128 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e003      	b.n	8004130 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004128:	2032      	movs	r0, #50	; 0x32
 800412a:	f7fc fecf 	bl	8000ecc <HAL_Delay>

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004138:	b084      	sub	sp, #16
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	e009      	b.n	800416c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	3340      	adds	r3, #64	; 0x40
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	2200      	movs	r2, #0
 8004164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3301      	adds	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b0e      	cmp	r3, #14
 8004170:	d9f2      	bls.n	8004158 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11c      	bne.n	80041b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
 80041b0:	e00b      	b.n	80041ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041d0:	461a      	mov	r2, r3
 80041d2:	2300      	movs	r3, #0
 80041d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041dc:	4619      	mov	r1, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e4:	461a      	mov	r2, r3
 80041e6:	680b      	ldr	r3, [r1, #0]
 80041e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10c      	bne.n	800420a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d104      	bne.n	8004200 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041f6:	2100      	movs	r1, #0
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f949 	bl	8004490 <USB_SetDevSpeed>
 80041fe:	e008      	b.n	8004212 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004200:	2101      	movs	r1, #1
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f944 	bl	8004490 <USB_SetDevSpeed>
 8004208:	e003      	b.n	8004212 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800420a:	2103      	movs	r1, #3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f93f 	bl	8004490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004212:	2110      	movs	r1, #16
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8f3 	bl	8004400 <USB_FlushTxFifo>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f911 	bl	800444c <USB_FlushRxFifo>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	461a      	mov	r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	461a      	mov	r2, r3
 8004254:	2300      	movs	r3, #0
 8004256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	e043      	b.n	80042e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004274:	d118      	bne.n	80042a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	461a      	mov	r2, r3
 800428a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e013      	b.n	80042ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	461a      	mov	r2, r3
 80042a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e008      	b.n	80042ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	461a      	mov	r2, r3
 80042c8:	2300      	movs	r3, #0
 80042ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	461a      	mov	r2, r3
 80042da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	3301      	adds	r3, #1
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d3b7      	bcc.n	800425e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e043      	b.n	800437c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800430a:	d118      	bne.n	800433e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	461a      	mov	r2, r3
 8004320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e013      	b.n	8004350 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	461a      	mov	r2, r3
 8004336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e008      	b.n	8004350 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	2300      	movs	r3, #0
 800434e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	461a      	mov	r2, r3
 8004370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3301      	adds	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d3b7      	bcc.n	80042f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f043 0210 	orr.w	r2, r3, #16
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <USB_DevInit+0x2c4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f043 0208 	orr.w	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e4:	f043 0304 	orr.w	r3, r3, #4
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f8:	b004      	add	sp, #16
 80043fa:	4770      	bx	lr
 80043fc:	803c3800 	.word	0x803c3800

08004400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	019b      	lsls	r3, r3, #6
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <USB_FlushTxFifo+0x48>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e006      	b.n	800443a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b20      	cmp	r3, #32
 8004436:	d0f0      	beq.n	800441a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	00030d40 	.word	0x00030d40

0800444c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2210      	movs	r2, #16
 800445c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <USB_FlushRxFifo+0x40>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e006      	b.n	800447e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b10      	cmp	r3, #16
 800447a:	d0f0      	beq.n	800445e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	00030d40 	.word	0x00030d40

08004490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	68f9      	ldr	r1, [r7, #12]
 80044ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b087      	sub	sp, #28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0306 	and.w	r3, r3, #6
 80044da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
 80044e6:	e00a      	b.n	80044fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d002      	beq.n	80044f4 <USB_GetDevSpeed+0x32>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d102      	bne.n	80044fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044f4:	2302      	movs	r3, #2
 80044f6:	75fb      	strb	r3, [r7, #23]
 80044f8:	e001      	b.n	80044fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044fa:	230f      	movs	r3, #15
 80044fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004500:	4618      	mov	r0, r3
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d13a      	bne.n	800459e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f303 	lsl.w	r3, r1, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004546:	4313      	orrs	r3, r2
 8004548:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d155      	bne.n	800460c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	78db      	ldrb	r3, [r3, #3]
 800457a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800457c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	059b      	lsls	r3, r3, #22
 8004582:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004584:	4313      	orrs	r3, r2
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	0151      	lsls	r1, r2, #5
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	440a      	add	r2, r1
 800458e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	e036      	b.n	800460c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	2101      	movs	r1, #1
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045bc:	4313      	orrs	r3, r2
 80045be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11a      	bne.n	800460c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	78db      	ldrb	r3, [r3, #3]
 80045f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045f2:	430b      	orrs	r3, r1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d161      	bne.n	80046fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464e:	d11f      	bne.n	8004690 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800466e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800468e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2101      	movs	r1, #1
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b0:	4013      	ands	r3, r2
 80046b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	2101      	movs	r1, #1
 80046c6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d4:	4013      	ands	r3, r2
 80046d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	0159      	lsls	r1, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	440b      	add	r3, r1
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	4619      	mov	r1, r3
 80046f4:	4b35      	ldr	r3, [pc, #212]	; (80047cc <USB_DeactivateEndpoint+0x1b0>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
 80046fa:	e060      	b.n	80047be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800470e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004712:	d11f      	bne.n	8004754 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004732:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004752:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f303 	lsl.w	r3, r1, r3
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	43db      	mvns	r3, r3
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004774:	4013      	ands	r3, r2
 8004776:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	2101      	movs	r1, #1
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	43db      	mvns	r3, r3
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004798:	4013      	ands	r3, r2
 800479a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0159      	lsls	r1, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b6:	4619      	mov	r1, r3
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <USB_DeactivateEndpoint+0x1b4>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	ec337800 	.word	0xec337800
 80047d0:	eff37800 	.word	0xeff37800

080047d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f040 815c 	bne.w	8004aae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d132      	bne.n	8004864 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800481c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	0151      	lsls	r1, r2, #5
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	440a      	add	r2, r1
 8004838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	0cdb      	lsrs	r3, r3, #19
 800485e:	04db      	lsls	r3, r3, #19
 8004860:	6113      	str	r3, [r2, #16]
 8004862:	e074      	b.n	800494e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487e:	0cdb      	lsrs	r3, r3, #19
 8004880:	04db      	lsls	r3, r3, #19
 8004882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6959      	ldr	r1, [r3, #20]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	440b      	add	r3, r1
 80048c0:	1e59      	subs	r1, r3, #1
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ca:	04d9      	lsls	r1, r3, #19
 80048cc:	4b9d      	ldr	r3, [pc, #628]	; (8004b44 <USB_EPStartXfer+0x370>)
 80048ce:	400b      	ands	r3, r1
 80048d0:	69b9      	ldr	r1, [r7, #24]
 80048d2:	0148      	lsls	r0, r1, #5
 80048d4:	69f9      	ldr	r1, [r7, #28]
 80048d6:	4401      	add	r1, r0
 80048d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048dc:	4313      	orrs	r3, r2
 80048de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	0148      	lsls	r0, r1, #5
 80048fa:	69f9      	ldr	r1, [r7, #28]
 80048fc:	4401      	add	r1, r0
 80048fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004902:	4313      	orrs	r3, r2
 8004904:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	78db      	ldrb	r3, [r3, #3]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d11f      	bne.n	800494e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	440a      	add	r2, r1
 8004924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004928:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800492c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800494c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d14b      	bne.n	80049ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004968:	461a      	mov	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	78db      	ldrb	r3, [r3, #3]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d128      	bne.n	80049ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d110      	bne.n	80049aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e00f      	b.n	80049ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e12f      	b.n	8004c4c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	78db      	ldrb	r3, [r3, #3]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d015      	beq.n	8004a40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8117 	beq.w	8004c4c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	2101      	movs	r1, #1
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	634b      	str	r3, [r1, #52]	; 0x34
 8004a3e:	e105      	b.n	8004c4c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d110      	bne.n	8004a72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e00f      	b.n	8004a92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	68d9      	ldr	r1, [r3, #12]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	b298      	uxth	r0, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fa2b 	bl	8004f02 <USB_WritePacket>
 8004aac:	e0ce      	b.n	8004c4c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac8:	0cdb      	lsrs	r3, r3, #19
 8004aca:	04db      	lsls	r3, r3, #19
 8004acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004af0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d126      	bne.n	8004b48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b10:	69b9      	ldr	r1, [r7, #24]
 8004b12:	0148      	lsls	r0, r1, #5
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	4401      	add	r1, r0
 8004b18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b3e:	6113      	str	r3, [r2, #16]
 8004b40:	e036      	b.n	8004bb0 <USB_EPStartXfer+0x3dc>
 8004b42:	bf00      	nop
 8004b44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	1e5a      	subs	r2, r3, #1
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	8afb      	ldrh	r3, [r7, #22]
 8004b6e:	04d9      	lsls	r1, r3, #19
 8004b70:	4b39      	ldr	r3, [pc, #228]	; (8004c58 <USB_EPStartXfer+0x484>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	69b9      	ldr	r1, [r7, #24]
 8004b76:	0148      	lsls	r0, r1, #5
 8004b78:	69f9      	ldr	r1, [r7, #28]
 8004b7a:	4401      	add	r1, r0
 8004b7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b80:	4313      	orrs	r3, r2
 8004b82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	8af9      	ldrh	r1, [r7, #22]
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba0:	69b9      	ldr	r1, [r7, #24]
 8004ba2:	0148      	lsls	r0, r1, #5
 8004ba4:	69f9      	ldr	r1, [r7, #28]
 8004ba6:	4401      	add	r1, r0
 8004ba8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bac:	4313      	orrs	r3, r2
 8004bae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10d      	bne.n	8004bd2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	68d9      	ldr	r1, [r3, #12]
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bce:	460a      	mov	r2, r1
 8004bd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	78db      	ldrb	r3, [r3, #3]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d128      	bne.n	8004c2c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d110      	bne.n	8004c0c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e00f      	b.n	8004c2c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	1ff80000 	.word	0x1ff80000

08004c5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 80cd 	bne.w	8004e18 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d132      	bne.n	8004cec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ca4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ca8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce4:	0cdb      	lsrs	r3, r3, #19
 8004ce6:	04db      	lsls	r3, r3, #19
 8004ce8:	6113      	str	r3, [r2, #16]
 8004cea:	e04e      	b.n	8004d8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d06:	0cdb      	lsrs	r3, r3, #19
 8004d08:	04db      	lsls	r3, r3, #19
 8004d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d903      	bls.n	8004d44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7a:	6939      	ldr	r1, [r7, #16]
 8004d7c:	0148      	lsls	r0, r1, #5
 8004d7e:	6979      	ldr	r1, [r7, #20]
 8004d80:	4401      	add	r1, r0
 8004d82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d86:	4313      	orrs	r3, r2
 8004d88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d11e      	bne.n	8004dce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	461a      	mov	r2, r3
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	e092      	b.n	8004ef4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d07e      	beq.n	8004ef4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	6979      	ldr	r1, [r7, #20]
 8004e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e12:	4313      	orrs	r3, r2
 8004e14:	634b      	str	r3, [r1, #52]	; 0x34
 8004e16:	e06d      	b.n	8004ef4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e32:	0cdb      	lsrs	r3, r3, #19
 8004e34:	04db      	lsls	r3, r3, #19
 8004e36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e5a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea2:	6939      	ldr	r1, [r7, #16]
 8004ea4:	0148      	lsls	r0, r1, #5
 8004ea6:	6979      	ldr	r1, [r7, #20]
 8004ea8:	4401      	add	r1, r0
 8004eaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d10d      	bne.n	8004ed4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d009      	beq.n	8004ed4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	68d9      	ldr	r1, [r3, #12]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b089      	sub	sp, #36	; 0x24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	461a      	mov	r2, r3
 8004f10:	460b      	mov	r3, r1
 8004f12:	71fb      	strb	r3, [r7, #7]
 8004f14:	4613      	mov	r3, r2
 8004f16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004f20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d11a      	bne.n	8004f5e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f28:	88bb      	ldrh	r3, [r7, #4]
 8004f2a:	3303      	adds	r3, #3
 8004f2c:	089b      	lsrs	r3, r3, #2
 8004f2e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f30:	2300      	movs	r3, #0
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e00f      	b.n	8004f56 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	031a      	lsls	r2, r3, #12
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f42:	461a      	mov	r2, r3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	3301      	adds	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3eb      	bcc.n	8004f36 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3724      	adds	r7, #36	; 0x24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b089      	sub	sp, #36	; 0x24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	3303      	adds	r3, #3
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e00b      	b.n	8004fa8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d3ef      	bcc.n	8004f90 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3724      	adds	r7, #36	; 0x24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d12c      	bne.n	8005034 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db12      	blt.n	8005012 <USB_EPSetStall+0x54>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00f      	beq.n	8005012 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005010:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e02b      	b.n	800508c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	db12      	blt.n	800506c <USB_EPSetStall+0xae>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00f      	beq.n	800506c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005066:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800506a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800508a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d128      	bne.n	8005108 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	78db      	ldrb	r3, [r3, #3]
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d003      	beq.n	80050e6 <USB_EPClearStall+0x4c>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	78db      	ldrb	r3, [r3, #3]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d138      	bne.n	8005158 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e027      	b.n	8005158 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005126:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	78db      	ldrb	r3, [r3, #3]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d003      	beq.n	8005138 <USB_EPClearStall+0x9e>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	78db      	ldrb	r3, [r3, #3]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d10f      	bne.n	8005158 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005156:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005184:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005188:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a0:	4313      	orrs	r3, r2
 80051a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051cc:	f023 0303 	bic.w	r3, r3, #3
 80051d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e0:	f023 0302 	bic.w	r3, r3, #2
 80051e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005222:	f043 0302 	orr.w	r3, r3, #2
 8005226:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4013      	ands	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800524e:	68fb      	ldr	r3, [r7, #12]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4013      	ands	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	0c1b      	lsrs	r3, r3, #16
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4013      	ands	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	b29b      	uxth	r3, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052f2:	68bb      	ldr	r3, [r7, #8]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
 8005330:	01db      	lsls	r3, r3, #7
 8005332:	b2db      	uxtb	r3, r3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800534e:	68bb      	ldr	r3, [r7, #8]
}
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0301 	and.w	r3, r3, #1
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005392:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	460b      	mov	r3, r1
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	333c      	adds	r3, #60	; 0x3c
 80053d6:	3304      	adds	r3, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4a26      	ldr	r2, [pc, #152]	; (8005478 <USB_EP0_OutStart+0xb8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d90a      	bls.n	80053fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f4:	d101      	bne.n	80053fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e037      	b.n	800546a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005400:	461a      	mov	r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005428:	f043 0318 	orr.w	r3, r3, #24
 800542c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005440:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d10f      	bne.n	8005468 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005462:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	4f54300a 	.word	0x4f54300a

0800547c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <USB_CoreReset+0x64>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e01b      	b.n	80054d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	daf2      	bge.n	8005488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f043 0201 	orr.w	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3301      	adds	r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <USB_CoreReset+0x64>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e006      	b.n	80054d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d0f0      	beq.n	80054b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	00030d40 	.word	0x00030d40

080054e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054f4:	f002 f96a 	bl	80077cc <USBD_static_malloc>
 80054f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d105      	bne.n	800550c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005508:	2302      	movs	r3, #2
 800550a:	e066      	b.n	80055da <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	7c1b      	ldrb	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d119      	bne.n	8005550 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800551c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005520:	2202      	movs	r2, #2
 8005522:	2181      	movs	r1, #129	; 0x81
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f002 f82e 	bl	8007586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005534:	2202      	movs	r2, #2
 8005536:	2101      	movs	r1, #1
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f002 f824 	bl	8007586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2210      	movs	r2, #16
 800554a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800554e:	e016      	b.n	800557e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005550:	2340      	movs	r3, #64	; 0x40
 8005552:	2202      	movs	r2, #2
 8005554:	2181      	movs	r1, #129	; 0x81
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f002 f815 	bl	8007586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	2202      	movs	r2, #2
 8005566:	2101      	movs	r1, #1
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 f80c 	bl	8007586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2210      	movs	r2, #16
 800557a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800557e:	2308      	movs	r3, #8
 8005580:	2203      	movs	r2, #3
 8005582:	2182      	movs	r1, #130	; 0x82
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 fffe 	bl	8007586 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	7c1b      	ldrb	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055be:	2101      	movs	r1, #1
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f002 f8cf 	bl	8007764 <USBD_LL_PrepareReceive>
 80055c6:	e007      	b.n	80055d8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055ce:	2340      	movs	r3, #64	; 0x40
 80055d0:	2101      	movs	r1, #1
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f002 f8c6 	bl	8007764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80055ee:	2181      	movs	r1, #129	; 0x81
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 ffee 	bl	80075d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055fc:	2101      	movs	r1, #1
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f001 ffe7 	bl	80075d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800560c:	2182      	movs	r1, #130	; 0x82
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f001 ffdf 	bl	80075d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800563e:	4618      	mov	r0, r3
 8005640:	f002 f8d2 	bl	80077e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005668:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800567c:	2303      	movs	r3, #3
 800567e:	e0af      	b.n	80057e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005688:	2b00      	cmp	r3, #0
 800568a:	d03f      	beq.n	800570c <USBD_CDC_Setup+0xb4>
 800568c:	2b20      	cmp	r3, #32
 800568e:	f040 809f 	bne.w	80057d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d02e      	beq.n	80056f8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da16      	bge.n	80056d2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80056b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	88d2      	ldrh	r2, [r2, #6]
 80056b6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	88db      	ldrh	r3, [r3, #6]
 80056bc:	2b07      	cmp	r3, #7
 80056be:	bf28      	it	cs
 80056c0:	2307      	movcs	r3, #7
 80056c2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	89fa      	ldrh	r2, [r7, #14]
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 fb19 	bl	8006d02 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80056d0:	e085      	b.n	80057de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	785a      	ldrb	r2, [r3, #1]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	88db      	ldrh	r3, [r3, #6]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80056e8:	6939      	ldr	r1, [r7, #16]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	88db      	ldrh	r3, [r3, #6]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 fb32 	bl	8006d5a <USBD_CtlPrepareRx>
      break;
 80056f6:	e072      	b.n	80057de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	7850      	ldrb	r0, [r2, #1]
 8005704:	2200      	movs	r2, #0
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	4798      	blx	r3
      break;
 800570a:	e068      	b.n	80057de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b0b      	cmp	r3, #11
 8005712:	d852      	bhi.n	80057ba <USBD_CDC_Setup+0x162>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <USBD_CDC_Setup+0xc4>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	0800574d 	.word	0x0800574d
 8005720:	080057c9 	.word	0x080057c9
 8005724:	080057bb 	.word	0x080057bb
 8005728:	080057bb 	.word	0x080057bb
 800572c:	080057bb 	.word	0x080057bb
 8005730:	080057bb 	.word	0x080057bb
 8005734:	080057bb 	.word	0x080057bb
 8005738:	080057bb 	.word	0x080057bb
 800573c:	080057bb 	.word	0x080057bb
 8005740:	080057bb 	.word	0x080057bb
 8005744:	08005777 	.word	0x08005777
 8005748:	080057a1 	.word	0x080057a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b03      	cmp	r3, #3
 8005756:	d107      	bne.n	8005768 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005758:	f107 030a 	add.w	r3, r7, #10
 800575c:	2202      	movs	r2, #2
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 face 	bl	8006d02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005766:	e032      	b.n	80057ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f001 fa58 	bl	8006c20 <USBD_CtlError>
            ret = USBD_FAIL;
 8005770:	2303      	movs	r3, #3
 8005772:	75fb      	strb	r3, [r7, #23]
          break;
 8005774:	e02b      	b.n	80057ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b03      	cmp	r3, #3
 8005780:	d107      	bne.n	8005792 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005782:	f107 030d 	add.w	r3, r7, #13
 8005786:	2201      	movs	r2, #1
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 fab9 	bl	8006d02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005790:	e01d      	b.n	80057ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fa43 	bl	8006c20 <USBD_CtlError>
            ret = USBD_FAIL;
 800579a:	2303      	movs	r3, #3
 800579c:	75fb      	strb	r3, [r7, #23]
          break;
 800579e:	e016      	b.n	80057ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d00f      	beq.n	80057cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fa36 	bl	8006c20 <USBD_CtlError>
            ret = USBD_FAIL;
 80057b4:	2303      	movs	r3, #3
 80057b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057b8:	e008      	b.n	80057cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 fa2f 	bl	8006c20 <USBD_CtlError>
          ret = USBD_FAIL;
 80057c2:	2303      	movs	r3, #3
 80057c4:	75fb      	strb	r3, [r7, #23]
          break;
 80057c6:	e002      	b.n	80057ce <USBD_CDC_Setup+0x176>
          break;
 80057c8:	bf00      	nop
 80057ca:	e008      	b.n	80057de <USBD_CDC_Setup+0x186>
          break;
 80057cc:	bf00      	nop
      }
      break;
 80057ce:	e006      	b.n	80057de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 fa24 	bl	8006c20 <USBD_CtlError>
      ret = USBD_FAIL;
 80057d8:	2303      	movs	r3, #3
 80057da:	75fb      	strb	r3, [r7, #23]
      break;
 80057dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80057de:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80057fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005806:	2303      	movs	r3, #3
 8005808:	e04f      	b.n	80058aa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005810:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3318      	adds	r3, #24
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d029      	beq.n	800587c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	3318      	adds	r3, #24
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	78f9      	ldrb	r1, [r7, #3]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	460b      	mov	r3, r1
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	1a5b      	subs	r3, r3, r1
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4403      	add	r3, r0
 8005848:	3344      	adds	r3, #68	; 0x44
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005856:	2b00      	cmp	r3, #0
 8005858:	d110      	bne.n	800587c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	3318      	adds	r3, #24
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800586e:	78f9      	ldrb	r1, [r7, #3]
 8005870:	2300      	movs	r3, #0
 8005872:	2200      	movs	r2, #0
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 ff54 	bl	8007722 <USBD_LL_Transmit>
 800587a:	e015      	b.n	80058a8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e015      	b.n	8005900 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 ff64 	bl	80077a6 <USBD_LL_GetRxDataSize>
 80058de:	4602      	mov	r2, r0
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058fa:	4611      	mov	r1, r2
 80058fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005916:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800591e:	2303      	movs	r3, #3
 8005920:	e01b      	b.n	800595a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d015      	beq.n	8005958 <USBD_CDC_EP0_RxReady+0x50>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005932:	2bff      	cmp	r3, #255	; 0xff
 8005934:	d010      	beq.n	8005958 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005944:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800594c:	b292      	uxth	r2, r2
 800594e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	22ff      	movs	r2, #255	; 0xff
 8005954:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2243      	movs	r2, #67	; 0x43
 8005970:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005972:	4b03      	ldr	r3, [pc, #12]	; (8005980 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000094 	.word	0x20000094

08005984 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2243      	movs	r2, #67	; 0x43
 8005990:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005992:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000050 	.word	0x20000050

080059a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2243      	movs	r2, #67	; 0x43
 80059b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80059b2:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	200000d8 	.word	0x200000d8

080059c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	220a      	movs	r2, #10
 80059d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80059d2:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	2000000c 	.word	0x2000000c

080059e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e004      	b.n	8005a02 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b087      	sub	sp, #28
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a20:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e008      	b.n	8005a3e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e004      	b.n	8005a70 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e01a      	b.n	8005ad4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d114      	bne.n	8005ad2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ac6:	2181      	movs	r1, #129	; 0x81
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fe2a 	bl	8007722 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e016      	b.n	8005b28 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	7c1b      	ldrb	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fe28 	bl	8007764 <USBD_LL_PrepareReceive>
 8005b14:	e007      	b.n	8005b26 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b1c:	2340      	movs	r3, #64	; 0x40
 8005b1e:	2101      	movs	r1, #1
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 fe1f 	bl	8007764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e01f      	b.n	8005b88 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	79fa      	ldrb	r2, [r7, #7]
 8005b7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f001 fc9b 	bl	80074b8 <USBD_LL_Init>
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e016      	b.n	8005bd6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	f107 020e 	add.w	r2, r7, #14
 8005bc8:	4610      	mov	r0, r2
 8005bca:	4798      	blx	r3
 8005bcc:	4602      	mov	r2, r0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fcb2 	bl	8007550 <USBD_LL_Start>
 8005bec:	4603      	mov	r3, r0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	4611      	mov	r1, r2
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4798      	blx	r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	4611      	mov	r1, r2
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	4798      	blx	r3
  }

  return USBD_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 ff90 	bl	8006bac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ca8:	f003 031f 	and.w	r3, r3, #31
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d01a      	beq.n	8005ce6 <USBD_LL_SetupStage+0x72>
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d822      	bhi.n	8005cfa <USBD_LL_SetupStage+0x86>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <USBD_LL_SetupStage+0x4a>
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d00a      	beq.n	8005cd2 <USBD_LL_SetupStage+0x5e>
 8005cbc:	e01d      	b.n	8005cfa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fa62 	bl	8006190 <USBD_StdDevReq>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd0:	e020      	b.n	8005d14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fac6 	bl	800626c <USBD_StdItfReq>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce4:	e016      	b.n	8005d14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fb05 	bl	80062fe <USBD_StdEPReq>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf8:	e00c      	b.n	8005d14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 fc81 	bl	8007610 <USBD_LL_StallEP>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	73fb      	strb	r3, [r7, #15]
      break;
 8005d12:	bf00      	nop
  }

  return ret;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b086      	sub	sp, #24
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	460b      	mov	r3, r1
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d138      	bne.n	8005da4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d14a      	bne.n	8005dda <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d913      	bls.n	8005d78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	4293      	cmp	r3, r2
 8005d68:	bf28      	it	cs
 8005d6a:	4613      	movcs	r3, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f001 f80f 	bl	8006d94 <USBD_CtlContinueRx>
 8005d76:	e030      	b.n	8005dda <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d10b      	bne.n	8005d9c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f001 f80a 	bl	8006db6 <USBD_CtlSendStatus>
 8005da2:	e01a      	b.n	8005dda <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d114      	bne.n	8005dda <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00e      	beq.n	8005dda <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	7afa      	ldrb	r2, [r7, #11]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	4798      	blx	r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	e000      	b.n	8005ddc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	460b      	mov	r3, r1
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005df2:	7afb      	ldrb	r3, [r7, #11]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d16b      	bne.n	8005ed0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3314      	adds	r3, #20
 8005dfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d156      	bne.n	8005eb6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d914      	bls.n	8005e3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	1ad2      	subs	r2, r2, r3
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	461a      	mov	r2, r3
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 ff84 	bl	8006d38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e30:	2300      	movs	r3, #0
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f001 fc94 	bl	8007764 <USBD_LL_PrepareReceive>
 8005e3c:	e03b      	b.n	8005eb6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d11c      	bne.n	8005e84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d316      	bcc.n	8005e84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d20f      	bcs.n	8005e84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 ff65 	bl	8006d38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e76:	2300      	movs	r3, #0
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f001 fc71 	bl	8007764 <USBD_LL_PrepareReceive>
 8005e82:	e018      	b.n	8005eb6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d10b      	bne.n	8005ea8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ea8:	2180      	movs	r1, #128	; 0x80
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f001 fbb0 	bl	8007610 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 ff93 	bl	8006ddc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d122      	bne.n	8005f06 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff fe98 	bl	8005bf6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ece:	e01a      	b.n	8005f06 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d114      	bne.n	8005f06 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00e      	beq.n	8005f06 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	7afa      	ldrb	r2, [r7, #11]
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	4798      	blx	r3
 8005ef8:	4603      	mov	r3, r0
 8005efa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	e000      	b.n	8005f08 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e02f      	b.n	8005fa4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00f      	beq.n	8005f6e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6852      	ldr	r2, [r2, #4]
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	4611      	mov	r1, r2
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f6e:	2340      	movs	r3, #64	; 0x40
 8005f70:	2200      	movs	r2, #0
 8005f72:	2100      	movs	r1, #0
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fb06 	bl	8007586 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2240      	movs	r2, #64	; 0x40
 8005f86:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f8a:	2340      	movs	r3, #64	; 0x40
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 faf8 	bl	8007586 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2240      	movs	r2, #64	; 0x40
 8005fa0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	78fa      	ldrb	r2, [r7, #3]
 8005fbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b04      	cmp	r3, #4
 800600a:	d106      	bne.n	800601a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006012:	b2da      	uxtb	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800603a:	2303      	movs	r3, #3
 800603c:	e012      	b.n	8006064 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b03      	cmp	r3, #3
 8006048:	d10b      	bne.n	8006062 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006082:	2303      	movs	r3, #3
 8006084:	e014      	b.n	80060b0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b03      	cmp	r3, #3
 8006090:	d10d      	bne.n	80060ae <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	4611      	mov	r1, r2
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e014      	b.n	80060fc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d10d      	bne.n	80060fa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	4611      	mov	r1, r2
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6852      	ldr	r2, [r2, #4]
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	4611      	mov	r1, r2
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
  }

  return USBD_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	3301      	adds	r3, #1
 8006168:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006170:	8a3b      	ldrh	r3, [r7, #16]
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	b21a      	sxth	r2, r3
 8006176:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800617a:	4313      	orrs	r3, r2
 800617c:	b21b      	sxth	r3, r3
 800617e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006180:	89fb      	ldrh	r3, [r7, #14]
}
 8006182:	4618      	mov	r0, r3
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d005      	beq.n	80061b6 <USBD_StdDevReq+0x26>
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d853      	bhi.n	8006256 <USBD_StdDevReq+0xc6>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <USBD_StdDevReq+0x3a>
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d14f      	bne.n	8006256 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
      break;
 80061c8:	e04a      	b.n	8006260 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b09      	cmp	r3, #9
 80061d0:	d83b      	bhi.n	800624a <USBD_StdDevReq+0xba>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <USBD_StdDevReq+0x48>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	0800622d 	.word	0x0800622d
 80061dc:	08006241 	.word	0x08006241
 80061e0:	0800624b 	.word	0x0800624b
 80061e4:	08006237 	.word	0x08006237
 80061e8:	0800624b 	.word	0x0800624b
 80061ec:	0800620b 	.word	0x0800620b
 80061f0:	08006201 	.word	0x08006201
 80061f4:	0800624b 	.word	0x0800624b
 80061f8:	08006223 	.word	0x08006223
 80061fc:	08006215 	.word	0x08006215
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f9de 	bl	80065c4 <USBD_GetDescriptor>
          break;
 8006208:	e024      	b.n	8006254 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fb43 	bl	8006898 <USBD_SetAddress>
          break;
 8006212:	e01f      	b.n	8006254 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb82 	bl	8006920 <USBD_SetConfig>
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]
          break;
 8006220:	e018      	b.n	8006254 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fc21 	bl	8006a6c <USBD_GetConfig>
          break;
 800622a:	e013      	b.n	8006254 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fc52 	bl	8006ad8 <USBD_GetStatus>
          break;
 8006234:	e00e      	b.n	8006254 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fc81 	bl	8006b40 <USBD_SetFeature>
          break;
 800623e:	e009      	b.n	8006254 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fc90 	bl	8006b68 <USBD_ClrFeature>
          break;
 8006248:	e004      	b.n	8006254 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fce7 	bl	8006c20 <USBD_CtlError>
          break;
 8006252:	bf00      	nop
      }
      break;
 8006254:	e004      	b.n	8006260 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fce1 	bl	8006c20 <USBD_CtlError>
      break;
 800625e:	bf00      	nop
  }

  return ret;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop

0800626c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d005      	beq.n	8006292 <USBD_StdItfReq+0x26>
 8006286:	2b40      	cmp	r3, #64	; 0x40
 8006288:	d82f      	bhi.n	80062ea <USBD_StdItfReq+0x7e>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <USBD_StdItfReq+0x26>
 800628e:	2b20      	cmp	r3, #32
 8006290:	d12b      	bne.n	80062ea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006298:	b2db      	uxtb	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	2b02      	cmp	r3, #2
 800629e:	d81d      	bhi.n	80062dc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	889b      	ldrh	r3, [r3, #4]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d813      	bhi.n	80062d2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	4798      	blx	r3
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	88db      	ldrh	r3, [r3, #6]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d110      	bne.n	80062e6 <USBD_StdItfReq+0x7a>
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10d      	bne.n	80062e6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fd73 	bl	8006db6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062d0:	e009      	b.n	80062e6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fca3 	bl	8006c20 <USBD_CtlError>
          break;
 80062da:	e004      	b.n	80062e6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fc9e 	bl	8006c20 <USBD_CtlError>
          break;
 80062e4:	e000      	b.n	80062e8 <USBD_StdItfReq+0x7c>
          break;
 80062e6:	bf00      	nop
      }
      break;
 80062e8:	e004      	b.n	80062f4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fc97 	bl	8006c20 <USBD_CtlError>
      break;
 80062f2:	bf00      	nop
  }

  return ret;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	889b      	ldrh	r3, [r3, #4]
 8006310:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d007      	beq.n	800632e <USBD_StdEPReq+0x30>
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	f200 8145 	bhi.w	80065ae <USBD_StdEPReq+0x2b0>
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00c      	beq.n	8006342 <USBD_StdEPReq+0x44>
 8006328:	2b20      	cmp	r3, #32
 800632a:	f040 8140 	bne.w	80065ae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
      break;
 8006340:	e13a      	b.n	80065b8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d007      	beq.n	800635a <USBD_StdEPReq+0x5c>
 800634a:	2b03      	cmp	r3, #3
 800634c:	f300 8129 	bgt.w	80065a2 <USBD_StdEPReq+0x2a4>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d07f      	beq.n	8006454 <USBD_StdEPReq+0x156>
 8006354:	2b01      	cmp	r3, #1
 8006356:	d03c      	beq.n	80063d2 <USBD_StdEPReq+0xd4>
 8006358:	e123      	b.n	80065a2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d002      	beq.n	800636c <USBD_StdEPReq+0x6e>
 8006366:	2b03      	cmp	r3, #3
 8006368:	d016      	beq.n	8006398 <USBD_StdEPReq+0x9a>
 800636a:	e02c      	b.n	80063c6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <USBD_StdEPReq+0x90>
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d00a      	beq.n	800638e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f947 	bl	8007610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006382:	2180      	movs	r1, #128	; 0x80
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f943 	bl	8007610 <USBD_LL_StallEP>
 800638a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800638c:	e020      	b.n	80063d0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fc45 	bl	8006c20 <USBD_CtlError>
              break;
 8006396:	e01b      	b.n	80063d0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10e      	bne.n	80063be <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <USBD_StdEPReq+0xc0>
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b80      	cmp	r3, #128	; 0x80
 80063aa:	d008      	beq.n	80063be <USBD_StdEPReq+0xc0>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f929 	bl	8007610 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fcf9 	bl	8006db6 <USBD_CtlSendStatus>

              break;
 80063c4:	e004      	b.n	80063d0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fc29 	bl	8006c20 <USBD_CtlError>
              break;
 80063ce:	bf00      	nop
          }
          break;
 80063d0:	e0ec      	b.n	80065ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d002      	beq.n	80063e4 <USBD_StdEPReq+0xe6>
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d016      	beq.n	8006410 <USBD_StdEPReq+0x112>
 80063e2:	e030      	b.n	8006446 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00d      	beq.n	8006406 <USBD_StdEPReq+0x108>
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	2b80      	cmp	r3, #128	; 0x80
 80063ee:	d00a      	beq.n	8006406 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 f90b 	bl	8007610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 f907 	bl	8007610 <USBD_LL_StallEP>
 8006402:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006404:	e025      	b.n	8006452 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fc09 	bl	8006c20 <USBD_CtlError>
              break;
 800640e:	e020      	b.n	8006452 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	885b      	ldrh	r3, [r3, #2]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d11b      	bne.n	8006450 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 f911 	bl	800764e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fcc2 	bl	8006db6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006444:	e004      	b.n	8006450 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fbe9 	bl	8006c20 <USBD_CtlError>
              break;
 800644e:	e000      	b.n	8006452 <USBD_StdEPReq+0x154>
              break;
 8006450:	bf00      	nop
          }
          break;
 8006452:	e0ab      	b.n	80065ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d002      	beq.n	8006466 <USBD_StdEPReq+0x168>
 8006460:	2b03      	cmp	r3, #3
 8006462:	d032      	beq.n	80064ca <USBD_StdEPReq+0x1cc>
 8006464:	e097      	b.n	8006596 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <USBD_StdEPReq+0x17e>
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b80      	cmp	r3, #128	; 0x80
 8006470:	d004      	beq.n	800647c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fbd3 	bl	8006c20 <USBD_CtlError>
                break;
 800647a:	e091      	b.n	80065a0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800647c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006480:	2b00      	cmp	r3, #0
 8006482:	da0b      	bge.n	800649c <USBD_StdEPReq+0x19e>
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	3310      	adds	r3, #16
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	4413      	add	r3, r2
 8006498:	3304      	adds	r3, #4
 800649a:	e00b      	b.n	80064b4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4413      	add	r3, r2
 80064b2:	3304      	adds	r3, #4
 80064b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2202      	movs	r2, #2
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fc1d 	bl	8006d02 <USBD_CtlSendData>
              break;
 80064c8:	e06a      	b.n	80065a0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da11      	bge.n	80064f6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	f003 020f 	and.w	r2, r3, #15
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	3324      	adds	r3, #36	; 0x24
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d117      	bne.n	800651c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fb96 	bl	8006c20 <USBD_CtlError>
                  break;
 80064f4:	e054      	b.n	80065a0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fb83 	bl	8006c20 <USBD_CtlError>
                  break;
 800651a:	e041      	b.n	80065a0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800651c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006520:	2b00      	cmp	r3, #0
 8006522:	da0b      	bge.n	800653c <USBD_StdEPReq+0x23e>
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	3310      	adds	r3, #16
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	3304      	adds	r3, #4
 800653a:	e00b      	b.n	8006554 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	4413      	add	r3, r2
 8006552:	3304      	adds	r3, #4
 8006554:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <USBD_StdEPReq+0x264>
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b80      	cmp	r3, #128	; 0x80
 8006560:	d103      	bne.n	800656a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	e00e      	b.n	8006588 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 f88c 	bl	800768c <USBD_LL_IsStallEP>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e002      	b.n	8006588 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2202      	movs	r2, #2
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fbb7 	bl	8006d02 <USBD_CtlSendData>
              break;
 8006594:	e004      	b.n	80065a0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fb41 	bl	8006c20 <USBD_CtlError>
              break;
 800659e:	bf00      	nop
          }
          break;
 80065a0:	e004      	b.n	80065ac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fb3b 	bl	8006c20 <USBD_CtlError>
          break;
 80065aa:	bf00      	nop
      }
      break;
 80065ac:	e004      	b.n	80065b8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fb35 	bl	8006c20 <USBD_CtlError>
      break;
 80065b6:	bf00      	nop
  }

  return ret;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	885b      	ldrh	r3, [r3, #2]
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	f200 8128 	bhi.w	800683a <USBD_GetDescriptor+0x276>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <USBD_GetDescriptor+0x2c>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	0800660d 	.word	0x0800660d
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006665 	.word	0x08006665
 80065fc:	0800683b 	.word	0x0800683b
 8006600:	0800683b 	.word	0x0800683b
 8006604:	080067db 	.word	0x080067db
 8006608:	08006807 	.word	0x08006807
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	7c12      	ldrb	r2, [r2, #16]
 8006618:	f107 0108 	add.w	r1, r7, #8
 800661c:	4610      	mov	r0, r2
 800661e:	4798      	blx	r3
 8006620:	60f8      	str	r0, [r7, #12]
      break;
 8006622:	e112      	b.n	800684a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	7c1b      	ldrb	r3, [r3, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10d      	bne.n	8006648 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	f107 0208 	add.w	r2, r7, #8
 8006638:	4610      	mov	r0, r2
 800663a:	4798      	blx	r3
 800663c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	2202      	movs	r2, #2
 8006644:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006646:	e100      	b.n	800684a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	f107 0208 	add.w	r2, r7, #8
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	2202      	movs	r2, #2
 8006660:	701a      	strb	r2, [r3, #0]
      break;
 8006662:	e0f2      	b.n	800684a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b05      	cmp	r3, #5
 800666c:	f200 80ac 	bhi.w	80067c8 <USBD_GetDescriptor+0x204>
 8006670:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <USBD_GetDescriptor+0xb4>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	08006691 	.word	0x08006691
 800667c:	080066c5 	.word	0x080066c5
 8006680:	080066f9 	.word	0x080066f9
 8006684:	0800672d 	.word	0x0800672d
 8006688:	08006761 	.word	0x08006761
 800668c:	08006795 	.word	0x08006795
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	7c12      	ldrb	r2, [r2, #16]
 80066a8:	f107 0108 	add.w	r1, r7, #8
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
 80066b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b2:	e091      	b.n	80067d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fab2 	bl	8006c20 <USBD_CtlError>
            err++;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	3301      	adds	r3, #1
 80066c0:	72fb      	strb	r3, [r7, #11]
          break;
 80066c2:	e089      	b.n	80067d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7c12      	ldrb	r2, [r2, #16]
 80066dc:	f107 0108 	add.w	r1, r7, #8
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066e6:	e077      	b.n	80067d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa98 	bl	8006c20 <USBD_CtlError>
            err++;
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	3301      	adds	r3, #1
 80066f4:	72fb      	strb	r3, [r7, #11]
          break;
 80066f6:	e06f      	b.n	80067d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7c12      	ldrb	r2, [r2, #16]
 8006710:	f107 0108 	add.w	r1, r7, #8
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671a:	e05d      	b.n	80067d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa7e 	bl	8006c20 <USBD_CtlError>
            err++;
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	3301      	adds	r3, #1
 8006728:	72fb      	strb	r3, [r7, #11]
          break;
 800672a:	e055      	b.n	80067d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	7c12      	ldrb	r2, [r2, #16]
 8006744:	f107 0108 	add.w	r1, r7, #8
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800674e:	e043      	b.n	80067d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa64 	bl	8006c20 <USBD_CtlError>
            err++;
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	3301      	adds	r3, #1
 800675c:	72fb      	strb	r3, [r7, #11]
          break;
 800675e:	e03b      	b.n	80067d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	7c12      	ldrb	r2, [r2, #16]
 8006778:	f107 0108 	add.w	r1, r7, #8
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006782:	e029      	b.n	80067d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa4a 	bl	8006c20 <USBD_CtlError>
            err++;
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	3301      	adds	r3, #1
 8006790:	72fb      	strb	r3, [r7, #11]
          break;
 8006792:	e021      	b.n	80067d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
 80067ac:	f107 0108 	add.w	r1, r7, #8
 80067b0:	4610      	mov	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067b6:	e00f      	b.n	80067d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa30 	bl	8006c20 <USBD_CtlError>
            err++;
 80067c0:	7afb      	ldrb	r3, [r7, #11]
 80067c2:	3301      	adds	r3, #1
 80067c4:	72fb      	strb	r3, [r7, #11]
          break;
 80067c6:	e007      	b.n	80067d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fa28 	bl	8006c20 <USBD_CtlError>
          err++;
 80067d0:	7afb      	ldrb	r3, [r7, #11]
 80067d2:	3301      	adds	r3, #1
 80067d4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80067d6:	bf00      	nop
      }
      break;
 80067d8:	e037      	b.n	800684a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7c1b      	ldrb	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ea:	f107 0208 	add.w	r2, r7, #8
 80067ee:	4610      	mov	r0, r2
 80067f0:	4798      	blx	r3
 80067f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067f4:	e029      	b.n	800684a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa11 	bl	8006c20 <USBD_CtlError>
        err++;
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	3301      	adds	r3, #1
 8006802:	72fb      	strb	r3, [r7, #11]
      break;
 8006804:	e021      	b.n	800684a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	7c1b      	ldrb	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10d      	bne.n	800682a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	f107 0208 	add.w	r2, r7, #8
 800681a:	4610      	mov	r0, r2
 800681c:	4798      	blx	r3
 800681e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	2207      	movs	r2, #7
 8006826:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006828:	e00f      	b.n	800684a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f9f7 	bl	8006c20 <USBD_CtlError>
        err++;
 8006832:	7afb      	ldrb	r3, [r7, #11]
 8006834:	3301      	adds	r3, #1
 8006836:	72fb      	strb	r3, [r7, #11]
      break;
 8006838:	e007      	b.n	800684a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f9ef 	bl	8006c20 <USBD_CtlError>
      err++;
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	3301      	adds	r3, #1
 8006846:	72fb      	strb	r3, [r7, #11]
      break;
 8006848:	bf00      	nop
  }

  if (err != 0U)
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11e      	bne.n	800688e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	88db      	ldrh	r3, [r3, #6]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d016      	beq.n	8006886 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	88da      	ldrh	r2, [r3, #6]
 8006862:	893b      	ldrh	r3, [r7, #8]
 8006864:	4293      	cmp	r3, r2
 8006866:	bf28      	it	cs
 8006868:	4613      	movcs	r3, r2
 800686a:	b29b      	uxth	r3, r3
 800686c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800686e:	893b      	ldrh	r3, [r7, #8]
 8006870:	461a      	mov	r2, r3
 8006872:	68f9      	ldr	r1, [r7, #12]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa44 	bl	8006d02 <USBD_CtlSendData>
 800687a:	e009      	b.n	8006890 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9ce 	bl	8006c20 <USBD_CtlError>
 8006884:	e004      	b.n	8006890 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa95 	bl	8006db6 <USBD_CtlSendStatus>
 800688c:	e000      	b.n	8006890 <USBD_GetDescriptor+0x2cc>
    return;
 800688e:	bf00      	nop
  }
}
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop

08006898 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	889b      	ldrh	r3, [r3, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d131      	bne.n	800690e <USBD_SetAddress+0x76>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	88db      	ldrh	r3, [r3, #6]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d12d      	bne.n	800690e <USBD_SetAddress+0x76>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	885b      	ldrh	r3, [r3, #2]
 80068b6:	2b7f      	cmp	r3, #127	; 0x7f
 80068b8:	d829      	bhi.n	800690e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	885b      	ldrh	r3, [r3, #2]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d104      	bne.n	80068dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f9a3 	bl	8006c20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068da:	e01d      	b.n	8006918 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	7bfa      	ldrb	r2, [r7, #15]
 80068e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fefb 	bl	80076e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa61 	bl	8006db6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006902:	e009      	b.n	8006918 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690c:	e004      	b.n	8006918 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f985 	bl	8006c20 <USBD_CtlError>
  }
}
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	b2da      	uxtb	r2, r3
 8006934:	4b4c      	ldr	r3, [pc, #304]	; (8006a68 <USBD_SetConfig+0x148>)
 8006936:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006938:	4b4b      	ldr	r3, [pc, #300]	; (8006a68 <USBD_SetConfig+0x148>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d905      	bls.n	800694c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f96c 	bl	8006c20 <USBD_CtlError>
    return USBD_FAIL;
 8006948:	2303      	movs	r3, #3
 800694a:	e088      	b.n	8006a5e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d002      	beq.n	800695e <USBD_SetConfig+0x3e>
 8006958:	2b03      	cmp	r3, #3
 800695a:	d025      	beq.n	80069a8 <USBD_SetConfig+0x88>
 800695c:	e071      	b.n	8006a42 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800695e:	4b42      	ldr	r3, [pc, #264]	; (8006a68 <USBD_SetConfig+0x148>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01c      	beq.n	80069a0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006966:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <USBD_SetConfig+0x148>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006970:	4b3d      	ldr	r3, [pc, #244]	; (8006a68 <USBD_SetConfig+0x148>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff f948 	bl	8005c0c <USBD_SetClassConfig>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f949 	bl	8006c20 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800698e:	e065      	b.n	8006a5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fa10 	bl	8006db6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2203      	movs	r2, #3
 800699a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800699e:	e05d      	b.n	8006a5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fa08 	bl	8006db6 <USBD_CtlSendStatus>
      break;
 80069a6:	e059      	b.n	8006a5c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069a8:	4b2f      	ldr	r3, [pc, #188]	; (8006a68 <USBD_SetConfig+0x148>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d112      	bne.n	80069d6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069b8:	4b2b      	ldr	r3, [pc, #172]	; (8006a68 <USBD_SetConfig+0x148>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069c2:	4b29      	ldr	r3, [pc, #164]	; (8006a68 <USBD_SetConfig+0x148>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff f93b 	bl	8005c44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f9f1 	bl	8006db6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069d4:	e042      	b.n	8006a5c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <USBD_SetConfig+0x148>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d02a      	beq.n	8006a3a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff f929 	bl	8005c44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069f2:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <USBD_SetConfig+0x148>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <USBD_SetConfig+0x148>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff f902 	bl	8005c0c <USBD_SetClassConfig>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f903 	bl	8006c20 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff f90e 	bl	8005c44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a30:	e014      	b.n	8006a5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f9bf 	bl	8006db6 <USBD_CtlSendStatus>
      break;
 8006a38:	e010      	b.n	8006a5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f9bb 	bl	8006db6 <USBD_CtlSendStatus>
      break;
 8006a40:	e00c      	b.n	8006a5c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f8eb 	bl	8006c20 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <USBD_SetConfig+0x148>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff f8f7 	bl	8005c44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a56:	2303      	movs	r3, #3
 8006a58:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5a:	bf00      	nop
  }

  return ret;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	200003a8 	.word	0x200003a8

08006a6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	88db      	ldrh	r3, [r3, #6]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d004      	beq.n	8006a88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f8cd 	bl	8006c20 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a86:	e023      	b.n	8006ad0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	dc02      	bgt.n	8006a9a <USBD_GetConfig+0x2e>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	dc03      	bgt.n	8006aa0 <USBD_GetConfig+0x34>
 8006a98:	e015      	b.n	8006ac6 <USBD_GetConfig+0x5a>
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d00b      	beq.n	8006ab6 <USBD_GetConfig+0x4a>
 8006a9e:	e012      	b.n	8006ac6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f927 	bl	8006d02 <USBD_CtlSendData>
        break;
 8006ab4:	e00c      	b.n	8006ad0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	2201      	movs	r2, #1
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f91f 	bl	8006d02 <USBD_CtlSendData>
        break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f8a9 	bl	8006c20 <USBD_CtlError>
        break;
 8006ace:	bf00      	nop
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	3b01      	subs	r3, #1
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d81e      	bhi.n	8006b2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	88db      	ldrh	r3, [r3, #6]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d004      	beq.n	8006b02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f890 	bl	8006c20 <USBD_CtlError>
        break;
 8006b00:	e01a      	b.n	8006b38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f043 0202 	orr.w	r2, r3, #2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	330c      	adds	r3, #12
 8006b22:	2202      	movs	r2, #2
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f8eb 	bl	8006d02 <USBD_CtlSendData>
      break;
 8006b2c:	e004      	b.n	8006b38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f875 	bl	8006c20 <USBD_CtlError>
      break;
 8006b36:	bf00      	nop
  }
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d106      	bne.n	8006b60 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f92b 	bl	8006db6 <USBD_CtlSendStatus>
  }
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d80b      	bhi.n	8006b98 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	885b      	ldrh	r3, [r3, #2]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d10c      	bne.n	8006ba2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f910 	bl	8006db6 <USBD_CtlSendStatus>
      }
      break;
 8006b96:	e004      	b.n	8006ba2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f840 	bl	8006c20 <USBD_CtlError>
      break;
 8006ba0:	e000      	b.n	8006ba4 <USBD_ClrFeature+0x3c>
      break;
 8006ba2:	bf00      	nop
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f7ff fabb 	bl	8006152 <SWAPBYTE>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff faae 	bl	8006152 <SWAPBYTE>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3301      	adds	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff faa1 	bl	8006152 <SWAPBYTE>
 8006c10:	4603      	mov	r3, r0
 8006c12:	461a      	mov	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	80da      	strh	r2, [r3, #6]
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c2a:	2180      	movs	r1, #128	; 0x80
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fcef 	bl	8007610 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c32:	2100      	movs	r1, #0
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fceb 	bl	8007610 <USBD_LL_StallEP>
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d036      	beq.n	8006cc6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c5c:	6938      	ldr	r0, [r7, #16]
 8006c5e:	f000 f836 	bl	8006cce <USBD_GetLen>
 8006c62:	4603      	mov	r3, r0
 8006c64:	3301      	adds	r3, #1
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4413      	add	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	4413      	add	r3, r2
 8006c88:	2203      	movs	r2, #3
 8006c8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c92:	e013      	b.n	8006cbc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	4413      	add	r3, r2
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	7812      	ldrb	r2, [r2, #0]
 8006c9e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	613b      	str	r3, [r7, #16]
    idx++;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e7      	bne.n	8006c94 <USBD_GetString+0x52>
 8006cc4:	e000      	b.n	8006cc8 <USBD_GetString+0x86>
    return;
 8006cc6:	bf00      	nop
  }
}
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cde:	e005      	b.n	8006cec <USBD_GetLen+0x1e>
  {
    len++;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f5      	bne.n	8006ce0 <USBD_GetLen+0x12>
  }

  return len;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fcfa 	bl	8007722 <USBD_LL_Transmit>

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fce9 	bl	8007722 <USBD_LL_Transmit>

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2203      	movs	r2, #3
 8006d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	2100      	movs	r1, #0
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 fced 	bl	8007764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	2100      	movs	r1, #0
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fcdc 	bl	8007764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2100      	movs	r1, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fca8 	bl	8007722 <USBD_LL_Transmit>

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2205      	movs	r2, #5
 8006de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dec:	2300      	movs	r3, #0
 8006dee:	2200      	movs	r2, #0
 8006df0:	2100      	movs	r1, #0
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fcb6 	bl	8007764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4912      	ldr	r1, [pc, #72]	; (8006e54 <MX_USB_DEVICE_Init+0x50>)
 8006e0c:	4812      	ldr	r0, [pc, #72]	; (8006e58 <MX_USB_DEVICE_Init+0x54>)
 8006e0e:	f7fe fe8f 	bl	8005b30 <USBD_Init>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e18:	f7f9 fe6e 	bl	8000af8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e1c:	490f      	ldr	r1, [pc, #60]	; (8006e5c <MX_USB_DEVICE_Init+0x58>)
 8006e1e:	480e      	ldr	r0, [pc, #56]	; (8006e58 <MX_USB_DEVICE_Init+0x54>)
 8006e20:	f7fe feb6 	bl	8005b90 <USBD_RegisterClass>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e2a:	f7f9 fe65 	bl	8000af8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e2e:	490c      	ldr	r1, [pc, #48]	; (8006e60 <MX_USB_DEVICE_Init+0x5c>)
 8006e30:	4809      	ldr	r0, [pc, #36]	; (8006e58 <MX_USB_DEVICE_Init+0x54>)
 8006e32:	f7fe fdd7 	bl	80059e4 <USBD_CDC_RegisterInterface>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e3c:	f7f9 fe5c 	bl	8000af8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e40:	4805      	ldr	r0, [pc, #20]	; (8006e58 <MX_USB_DEVICE_Init+0x54>)
 8006e42:	f7fe fecc 	bl	8005bde <USBD_Start>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e4c:	f7f9 fe54 	bl	8000af8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e50:	bf00      	nop
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000130 	.word	0x20000130
 8006e58:	200003ac 	.word	0x200003ac
 8006e5c:	20000018 	.word	0x20000018
 8006e60:	2000011c 	.word	0x2000011c

08006e64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4905      	ldr	r1, [pc, #20]	; (8006e80 <CDC_Init_FS+0x1c>)
 8006e6c:	4805      	ldr	r0, [pc, #20]	; (8006e84 <CDC_Init_FS+0x20>)
 8006e6e:	f7fe fdce 	bl	8005a0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e72:	4905      	ldr	r1, [pc, #20]	; (8006e88 <CDC_Init_FS+0x24>)
 8006e74:	4803      	ldr	r0, [pc, #12]	; (8006e84 <CDC_Init_FS+0x20>)
 8006e76:	f7fe fde8 	bl	8005a4a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20000e7c 	.word	0x20000e7c
 8006e84:	200003ac 	.word	0x200003ac
 8006e88:	2000067c 	.word	0x2000067c

08006e8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	6039      	str	r1, [r7, #0]
 8006ea6:	71fb      	strb	r3, [r7, #7]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	2b23      	cmp	r3, #35	; 0x23
 8006eb0:	d84a      	bhi.n	8006f48 <CDC_Control_FS+0xac>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <CDC_Control_FS+0x1c>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006f49 	.word	0x08006f49
 8006ebc:	08006f49 	.word	0x08006f49
 8006ec0:	08006f49 	.word	0x08006f49
 8006ec4:	08006f49 	.word	0x08006f49
 8006ec8:	08006f49 	.word	0x08006f49
 8006ecc:	08006f49 	.word	0x08006f49
 8006ed0:	08006f49 	.word	0x08006f49
 8006ed4:	08006f49 	.word	0x08006f49
 8006ed8:	08006f49 	.word	0x08006f49
 8006edc:	08006f49 	.word	0x08006f49
 8006ee0:	08006f49 	.word	0x08006f49
 8006ee4:	08006f49 	.word	0x08006f49
 8006ee8:	08006f49 	.word	0x08006f49
 8006eec:	08006f49 	.word	0x08006f49
 8006ef0:	08006f49 	.word	0x08006f49
 8006ef4:	08006f49 	.word	0x08006f49
 8006ef8:	08006f49 	.word	0x08006f49
 8006efc:	08006f49 	.word	0x08006f49
 8006f00:	08006f49 	.word	0x08006f49
 8006f04:	08006f49 	.word	0x08006f49
 8006f08:	08006f49 	.word	0x08006f49
 8006f0c:	08006f49 	.word	0x08006f49
 8006f10:	08006f49 	.word	0x08006f49
 8006f14:	08006f49 	.word	0x08006f49
 8006f18:	08006f49 	.word	0x08006f49
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	08006f49 	.word	0x08006f49
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f49 	.word	0x08006f49
 8006f2c:	08006f49 	.word	0x08006f49
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f49 	.word	0x08006f49
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f49 	.word	0x08006f49
 8006f40:	08006f49 	.word	0x08006f49
 8006f44:	08006f49 	.word	0x08006f49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f48:	bf00      	nop
  }

  return (USBD_OK);
 8006f4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4805      	ldr	r0, [pc, #20]	; (8006f7c <CDC_Receive_FS+0x24>)
 8006f66:	f7fe fd70 	bl	8005a4a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f6a:	4804      	ldr	r0, [pc, #16]	; (8006f7c <CDC_Receive_FS+0x24>)
 8006f6c:	f7fe fdb6 	bl	8005adc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200003ac 	.word	0x200003ac

08006f80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f90:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <CDC_Transmit_FS+0x48>)
 8006f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e00b      	b.n	8006fbe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fa6:	887b      	ldrh	r3, [r7, #2]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	4806      	ldr	r0, [pc, #24]	; (8006fc8 <CDC_Transmit_FS+0x48>)
 8006fae:	f7fe fd2e 	bl	8005a0e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fb2:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <CDC_Transmit_FS+0x48>)
 8006fb4:	f7fe fd62 	bl	8005a7c <USBD_CDC_TransmitPacket>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200003ac 	.word	0x200003ac

08006fcc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	6039      	str	r1, [r7, #0]
 8006ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2212      	movs	r2, #18
 8007000:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007002:	4b03      	ldr	r3, [pc, #12]	; (8007010 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	2000014c 	.word	0x2000014c

08007014 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2204      	movs	r2, #4
 8007024:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007026:	4b03      	ldr	r3, [pc, #12]	; (8007034 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	20000160 	.word	0x20000160

08007038 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d105      	bne.n	8007056 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4907      	ldr	r1, [pc, #28]	; (800706c <USBD_FS_ProductStrDescriptor+0x34>)
 800704e:	4808      	ldr	r0, [pc, #32]	; (8007070 <USBD_FS_ProductStrDescriptor+0x38>)
 8007050:	f7ff fdf7 	bl	8006c42 <USBD_GetString>
 8007054:	e004      	b.n	8007060 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4904      	ldr	r1, [pc, #16]	; (800706c <USBD_FS_ProductStrDescriptor+0x34>)
 800705a:	4805      	ldr	r0, [pc, #20]	; (8007070 <USBD_FS_ProductStrDescriptor+0x38>)
 800705c:	f7ff fdf1 	bl	8006c42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007060:	4b02      	ldr	r3, [pc, #8]	; (800706c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	2000167c 	.word	0x2000167c
 8007070:	080081f0 	.word	0x080081f0

08007074 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	4904      	ldr	r1, [pc, #16]	; (8007094 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007084:	4804      	ldr	r0, [pc, #16]	; (8007098 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007086:	f7ff fddc 	bl	8006c42 <USBD_GetString>
  return USBD_StrDesc;
 800708a:	4b02      	ldr	r3, [pc, #8]	; (8007094 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	2000167c 	.word	0x2000167c
 8007098:	08008208 	.word	0x08008208

0800709c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	6039      	str	r1, [r7, #0]
 80070a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	221a      	movs	r2, #26
 80070ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070ae:	f000 f843 	bl	8007138 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070b2:	4b02      	ldr	r3, [pc, #8]	; (80070bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000164 	.word	0x20000164

080070c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d105      	bne.n	80070de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	4907      	ldr	r1, [pc, #28]	; (80070f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070d6:	4808      	ldr	r0, [pc, #32]	; (80070f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070d8:	f7ff fdb3 	bl	8006c42 <USBD_GetString>
 80070dc:	e004      	b.n	80070e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	4904      	ldr	r1, [pc, #16]	; (80070f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070e2:	4805      	ldr	r0, [pc, #20]	; (80070f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070e4:	f7ff fdad 	bl	8006c42 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	2000167c 	.word	0x2000167c
 80070f8:	0800821c 	.word	0x0800821c

080070fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d105      	bne.n	800711a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	4907      	ldr	r1, [pc, #28]	; (8007130 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007112:	4808      	ldr	r0, [pc, #32]	; (8007134 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007114:	f7ff fd95 	bl	8006c42 <USBD_GetString>
 8007118:	e004      	b.n	8007124 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	4904      	ldr	r1, [pc, #16]	; (8007130 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800711e:	4805      	ldr	r0, [pc, #20]	; (8007134 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007120:	f7ff fd8f 	bl	8006c42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007124:	4b02      	ldr	r3, [pc, #8]	; (8007130 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	2000167c 	.word	0x2000167c
 8007134:	08008228 	.word	0x08008228

08007138 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <Get_SerialNum+0x44>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007144:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <Get_SerialNum+0x48>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800714a:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <Get_SerialNum+0x4c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800715e:	2208      	movs	r2, #8
 8007160:	4909      	ldr	r1, [pc, #36]	; (8007188 <Get_SerialNum+0x50>)
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f814 	bl	8007190 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007168:	2204      	movs	r2, #4
 800716a:	4908      	ldr	r1, [pc, #32]	; (800718c <Get_SerialNum+0x54>)
 800716c:	68b8      	ldr	r0, [r7, #8]
 800716e:	f000 f80f 	bl	8007190 <IntToUnicode>
  }
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	1fff7a10 	.word	0x1fff7a10
 8007180:	1fff7a14 	.word	0x1fff7a14
 8007184:	1fff7a18 	.word	0x1fff7a18
 8007188:	20000166 	.word	0x20000166
 800718c:	20000176 	.word	0x20000176

08007190 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071a2:	2300      	movs	r3, #0
 80071a4:	75fb      	strb	r3, [r7, #23]
 80071a6:	e027      	b.n	80071f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	0f1b      	lsrs	r3, r3, #28
 80071ac:	2b09      	cmp	r3, #9
 80071ae:	d80b      	bhi.n	80071c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	0f1b      	lsrs	r3, r3, #28
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	4619      	mov	r1, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	440b      	add	r3, r1
 80071c0:	3230      	adds	r2, #48	; 0x30
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e00a      	b.n	80071de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	0f1b      	lsrs	r3, r3, #28
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	4619      	mov	r1, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	440b      	add	r3, r1
 80071d8:	3237      	adds	r2, #55	; 0x37
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	3301      	adds	r3, #1
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	4413      	add	r3, r2
 80071ee:	2200      	movs	r2, #0
 80071f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	3301      	adds	r3, #1
 80071f6:	75fb      	strb	r3, [r7, #23]
 80071f8:	7dfa      	ldrb	r2, [r7, #23]
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d3d3      	bcc.n	80071a8 <IntToUnicode+0x18>
  }
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
	...

08007210 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	609a      	str	r2, [r3, #8]
 8007224:	60da      	str	r2, [r3, #12]
 8007226:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007230:	d147      	bne.n	80072c2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007232:	2300      	movs	r3, #0
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	4b25      	ldr	r3, [pc, #148]	; (80072cc <HAL_PCD_MspInit+0xbc>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	4a24      	ldr	r2, [pc, #144]	; (80072cc <HAL_PCD_MspInit+0xbc>)
 800723c:	f043 0301 	orr.w	r3, r3, #1
 8007240:	6313      	str	r3, [r2, #48]	; 0x30
 8007242:	4b22      	ldr	r3, [pc, #136]	; (80072cc <HAL_PCD_MspInit+0xbc>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	613b      	str	r3, [r7, #16]
 800724c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800724e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007254:	2300      	movs	r3, #0
 8007256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007258:	2300      	movs	r3, #0
 800725a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800725c:	f107 0314 	add.w	r3, r7, #20
 8007260:	4619      	mov	r1, r3
 8007262:	481b      	ldr	r0, [pc, #108]	; (80072d0 <HAL_PCD_MspInit+0xc0>)
 8007264:	f7f9 ff68 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007268:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800726c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800726e:	2302      	movs	r3, #2
 8007270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007276:	2300      	movs	r3, #0
 8007278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800727a:	230a      	movs	r3, #10
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800727e:	f107 0314 	add.w	r3, r7, #20
 8007282:	4619      	mov	r1, r3
 8007284:	4812      	ldr	r0, [pc, #72]	; (80072d0 <HAL_PCD_MspInit+0xc0>)
 8007286:	f7f9 ff57 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <HAL_PCD_MspInit+0xbc>)
 800728c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728e:	4a0f      	ldr	r2, [pc, #60]	; (80072cc <HAL_PCD_MspInit+0xbc>)
 8007290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007294:	6353      	str	r3, [r2, #52]	; 0x34
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <HAL_PCD_MspInit+0xbc>)
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	4a0b      	ldr	r2, [pc, #44]	; (80072cc <HAL_PCD_MspInit+0xbc>)
 80072a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072a4:	6453      	str	r3, [r2, #68]	; 0x44
 80072a6:	4b09      	ldr	r3, [pc, #36]	; (80072cc <HAL_PCD_MspInit+0xbc>)
 80072a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072b2:	2200      	movs	r2, #0
 80072b4:	2100      	movs	r1, #0
 80072b6:	2043      	movs	r0, #67	; 0x43
 80072b8:	f7f9 ff07 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072bc:	2043      	movs	r0, #67	; 0x43
 80072be:	f7f9 ff20 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072c2:	bf00      	nop
 80072c4:	3728      	adds	r7, #40	; 0x28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40023800 	.word	0x40023800
 80072d0:	40020000 	.word	0x40020000

080072d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7fe fcc2 	bl	8005c74 <USBD_LL_SetupStage>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	4619      	mov	r1, r3
 8007322:	f7fe fcfc 	bl	8005d1e <USBD_LL_DataOutStage>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007340:	78fa      	ldrb	r2, [r7, #3]
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	1a9b      	subs	r3, r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	3348      	adds	r3, #72	; 0x48
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	4619      	mov	r1, r3
 8007356:	f7fe fd45 	bl	8005de4 <USBD_LL_DataInStage>
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fe59 	bl	8006028 <USBD_LL_SOF>
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007386:	2301      	movs	r3, #1
 8007388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
 8007396:	e008      	b.n	80073aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d102      	bne.n	80073a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	e001      	b.n	80073aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80073a6:	f7f9 fba7 	bl	8000af8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073b0:	7bfa      	ldrb	r2, [r7, #15]
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fdf9 	bl	8005fac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fda5 	bl	8005f10 <USBD_LL_Reset>
}
 80073c6:	bf00      	nop
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fdf4 	bl	8005fcc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6812      	ldr	r2, [r2, #0]
 80073f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <HAL_PCD_SuspendCallback+0x48>)
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	4a03      	ldr	r2, [pc, #12]	; (8007418 <HAL_PCD_SuspendCallback+0x48>)
 800740a:	f043 0306 	orr.w	r3, r3, #6
 800740e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed00 	.word	0xe000ed00

0800741c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fde4 	bl	8005ff8 <USBD_LL_Resume>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fe32 	bl	80060b8 <USBD_LL_IsoOUTIncomplete>
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fdfa 	bl	800606c <USBD_LL_IsoINIncomplete>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fe38 	bl	8006104 <USBD_LL_DevConnected>
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fe35 	bl	800611a <USBD_LL_DevDisconnected>
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d13c      	bne.n	8007542 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074c8:	4a20      	ldr	r2, [pc, #128]	; (800754c <USBD_LL_Init+0x94>)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a1e      	ldr	r2, [pc, #120]	; (800754c <USBD_LL_Init+0x94>)
 80074d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074d8:	4b1c      	ldr	r3, [pc, #112]	; (800754c <USBD_LL_Init+0x94>)
 80074da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074e0:	4b1a      	ldr	r3, [pc, #104]	; (800754c <USBD_LL_Init+0x94>)
 80074e2:	2204      	movs	r2, #4
 80074e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074e6:	4b19      	ldr	r3, [pc, #100]	; (800754c <USBD_LL_Init+0x94>)
 80074e8:	2202      	movs	r2, #2
 80074ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074ec:	4b17      	ldr	r3, [pc, #92]	; (800754c <USBD_LL_Init+0x94>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074f2:	4b16      	ldr	r3, [pc, #88]	; (800754c <USBD_LL_Init+0x94>)
 80074f4:	2202      	movs	r2, #2
 80074f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074f8:	4b14      	ldr	r3, [pc, #80]	; (800754c <USBD_LL_Init+0x94>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <USBD_LL_Init+0x94>)
 8007500:	2200      	movs	r2, #0
 8007502:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007504:	4b11      	ldr	r3, [pc, #68]	; (800754c <USBD_LL_Init+0x94>)
 8007506:	2200      	movs	r2, #0
 8007508:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800750a:	4b10      	ldr	r3, [pc, #64]	; (800754c <USBD_LL_Init+0x94>)
 800750c:	2201      	movs	r2, #1
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007510:	4b0e      	ldr	r3, [pc, #56]	; (800754c <USBD_LL_Init+0x94>)
 8007512:	2200      	movs	r2, #0
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007516:	480d      	ldr	r0, [pc, #52]	; (800754c <USBD_LL_Init+0x94>)
 8007518:	f7f9 ffc3 	bl	80014a2 <HAL_PCD_Init>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007522:	f7f9 fae9 	bl	8000af8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007526:	2180      	movs	r1, #128	; 0x80
 8007528:	4808      	ldr	r0, [pc, #32]	; (800754c <USBD_LL_Init+0x94>)
 800752a:	f7fb f920 	bl	800276e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800752e:	2240      	movs	r2, #64	; 0x40
 8007530:	2100      	movs	r1, #0
 8007532:	4806      	ldr	r0, [pc, #24]	; (800754c <USBD_LL_Init+0x94>)
 8007534:	f7fb f8d4 	bl	80026e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007538:	2280      	movs	r2, #128	; 0x80
 800753a:	2101      	movs	r1, #1
 800753c:	4803      	ldr	r0, [pc, #12]	; (800754c <USBD_LL_Init+0x94>)
 800753e:	f7fb f8cf 	bl	80026e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	2000187c 	.word	0x2000187c

08007550 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007566:	4618      	mov	r0, r3
 8007568:	f7fa f8b8 	bl	80016dc <HAL_PCD_Start>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f942 	bl	80077fc <USBD_Get_USB_Status>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757c:	7bbb      	ldrb	r3, [r7, #14]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	461a      	mov	r2, r3
 8007594:	4603      	mov	r3, r0
 8007596:	70fb      	strb	r3, [r7, #3]
 8007598:	460b      	mov	r3, r1
 800759a:	70bb      	strb	r3, [r7, #2]
 800759c:	4613      	mov	r3, r2
 800759e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075ae:	78bb      	ldrb	r3, [r7, #2]
 80075b0:	883a      	ldrh	r2, [r7, #0]
 80075b2:	78f9      	ldrb	r1, [r7, #3]
 80075b4:	f7fa fc9c 	bl	8001ef0 <HAL_PCD_EP_Open>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f91c 	bl	80077fc <USBD_Get_USB_Status>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075ec:	78fa      	ldrb	r2, [r7, #3]
 80075ee:	4611      	mov	r1, r2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fa fce5 	bl	8001fc0 <HAL_PCD_EP_Close>
 80075f6:	4603      	mov	r3, r0
 80075f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f8fd 	bl	80077fc <USBD_Get_USB_Status>
 8007602:	4603      	mov	r3, r0
 8007604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007606:	7bbb      	ldrb	r3, [r7, #14]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	4611      	mov	r1, r2
 800762e:	4618      	mov	r0, r3
 8007630:	f7fa fdbd 	bl	80021ae <HAL_PCD_EP_SetStall>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f8de 	bl	80077fc <USBD_Get_USB_Status>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7fa fe02 	bl	8002276 <HAL_PCD_EP_ClrStall>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f8bf 	bl	80077fc <USBD_Get_USB_Status>
 800767e:	4603      	mov	r3, r0
 8007680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007682:	7bbb      	ldrb	r3, [r7, #14]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800769e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	da0b      	bge.n	80076c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	4613      	mov	r3, r2
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	333e      	adds	r3, #62	; 0x3e
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	e00b      	b.n	80076d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f7fa fbcf 	bl	8001ea6 <HAL_PCD_SetAddress>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f874 	bl	80077fc <USBD_Get_USB_Status>
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007718:	7bbb      	ldrb	r3, [r7, #14]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b086      	sub	sp, #24
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
 800772e:	460b      	mov	r3, r1
 8007730:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007740:	7af9      	ldrb	r1, [r7, #11]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	f7fa fce8 	bl	800211a <HAL_PCD_EP_Transmit>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 f853 	bl	80077fc <USBD_Get_USB_Status>
 8007756:	4603      	mov	r3, r0
 8007758:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800775a:	7dbb      	ldrb	r3, [r7, #22]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	460b      	mov	r3, r1
 8007772:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007782:	7af9      	ldrb	r1, [r7, #11]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	f7fa fc64 	bl	8002054 <HAL_PCD_EP_Receive>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 f832 	bl	80077fc <USBD_Get_USB_Status>
 8007798:	4603      	mov	r3, r0
 800779a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800779c:	7dbb      	ldrb	r3, [r7, #22]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077b8:	78fa      	ldrb	r2, [r7, #3]
 80077ba:	4611      	mov	r1, r2
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fa fc94 	bl	80020ea <HAL_PCD_EP_GetRxCount>
 80077c2:	4603      	mov	r3, r0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077d4:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <USBD_static_malloc+0x18>)
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20001c84 	.word	0x20001c84

080077e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]

}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	2b03      	cmp	r3, #3
 800780e:	d817      	bhi.n	8007840 <USBD_Get_USB_Status+0x44>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <USBD_Get_USB_Status+0x1c>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	08007829 	.word	0x08007829
 800781c:	0800782f 	.word	0x0800782f
 8007820:	08007835 	.word	0x08007835
 8007824:	0800783b 	.word	0x0800783b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]
    break;
 800782c:	e00b      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800782e:	2303      	movs	r3, #3
 8007830:	73fb      	strb	r3, [r7, #15]
    break;
 8007832:	e008      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007834:	2301      	movs	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
    break;
 8007838:	e005      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800783a:	2303      	movs	r3, #3
 800783c:	73fb      	strb	r3, [r7, #15]
    break;
 800783e:	e002      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
    break;
 8007844:	bf00      	nop
  }
  return usb_status;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <__errno>:
 8007854:	4b01      	ldr	r3, [pc, #4]	; (800785c <__errno+0x8>)
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000180 	.word	0x20000180

08007860 <__libc_init_array>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4d0d      	ldr	r5, [pc, #52]	; (8007898 <__libc_init_array+0x38>)
 8007864:	4c0d      	ldr	r4, [pc, #52]	; (800789c <__libc_init_array+0x3c>)
 8007866:	1b64      	subs	r4, r4, r5
 8007868:	10a4      	asrs	r4, r4, #2
 800786a:	2600      	movs	r6, #0
 800786c:	42a6      	cmp	r6, r4
 800786e:	d109      	bne.n	8007884 <__libc_init_array+0x24>
 8007870:	4d0b      	ldr	r5, [pc, #44]	; (80078a0 <__libc_init_array+0x40>)
 8007872:	4c0c      	ldr	r4, [pc, #48]	; (80078a4 <__libc_init_array+0x44>)
 8007874:	f000 fca2 	bl	80081bc <_init>
 8007878:	1b64      	subs	r4, r4, r5
 800787a:	10a4      	asrs	r4, r4, #2
 800787c:	2600      	movs	r6, #0
 800787e:	42a6      	cmp	r6, r4
 8007880:	d105      	bne.n	800788e <__libc_init_array+0x2e>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	f855 3b04 	ldr.w	r3, [r5], #4
 8007888:	4798      	blx	r3
 800788a:	3601      	adds	r6, #1
 800788c:	e7ee      	b.n	800786c <__libc_init_array+0xc>
 800788e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007892:	4798      	blx	r3
 8007894:	3601      	adds	r6, #1
 8007896:	e7f2      	b.n	800787e <__libc_init_array+0x1e>
 8007898:	08008284 	.word	0x08008284
 800789c:	08008284 	.word	0x08008284
 80078a0:	08008284 	.word	0x08008284
 80078a4:	08008288 	.word	0x08008288

080078a8 <memset>:
 80078a8:	4402      	add	r2, r0
 80078aa:	4603      	mov	r3, r0
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d100      	bne.n	80078b2 <memset+0xa>
 80078b0:	4770      	bx	lr
 80078b2:	f803 1b01 	strb.w	r1, [r3], #1
 80078b6:	e7f9      	b.n	80078ac <memset+0x4>

080078b8 <sniprintf>:
 80078b8:	b40c      	push	{r2, r3}
 80078ba:	b530      	push	{r4, r5, lr}
 80078bc:	4b17      	ldr	r3, [pc, #92]	; (800791c <sniprintf+0x64>)
 80078be:	1e0c      	subs	r4, r1, #0
 80078c0:	681d      	ldr	r5, [r3, #0]
 80078c2:	b09d      	sub	sp, #116	; 0x74
 80078c4:	da08      	bge.n	80078d8 <sniprintf+0x20>
 80078c6:	238b      	movs	r3, #139	; 0x8b
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	b01d      	add	sp, #116	; 0x74
 80078d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078d4:	b002      	add	sp, #8
 80078d6:	4770      	bx	lr
 80078d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80078dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078e0:	bf14      	ite	ne
 80078e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078e6:	4623      	moveq	r3, r4
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	9307      	str	r3, [sp, #28]
 80078ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078f0:	9002      	str	r0, [sp, #8]
 80078f2:	9006      	str	r0, [sp, #24]
 80078f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078fa:	ab21      	add	r3, sp, #132	; 0x84
 80078fc:	a902      	add	r1, sp, #8
 80078fe:	4628      	mov	r0, r5
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	f000 f869 	bl	80079d8 <_svfiprintf_r>
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	bfbc      	itt	lt
 800790a:	238b      	movlt	r3, #139	; 0x8b
 800790c:	602b      	strlt	r3, [r5, #0]
 800790e:	2c00      	cmp	r4, #0
 8007910:	d0dd      	beq.n	80078ce <sniprintf+0x16>
 8007912:	9b02      	ldr	r3, [sp, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e7d9      	b.n	80078ce <sniprintf+0x16>
 800791a:	bf00      	nop
 800791c:	20000180 	.word	0x20000180

08007920 <__ssputs_r>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	688e      	ldr	r6, [r1, #8]
 8007926:	429e      	cmp	r6, r3
 8007928:	4682      	mov	sl, r0
 800792a:	460c      	mov	r4, r1
 800792c:	4690      	mov	r8, r2
 800792e:	461f      	mov	r7, r3
 8007930:	d838      	bhi.n	80079a4 <__ssputs_r+0x84>
 8007932:	898a      	ldrh	r2, [r1, #12]
 8007934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007938:	d032      	beq.n	80079a0 <__ssputs_r+0x80>
 800793a:	6825      	ldr	r5, [r4, #0]
 800793c:	6909      	ldr	r1, [r1, #16]
 800793e:	eba5 0901 	sub.w	r9, r5, r1
 8007942:	6965      	ldr	r5, [r4, #20]
 8007944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800794c:	3301      	adds	r3, #1
 800794e:	444b      	add	r3, r9
 8007950:	106d      	asrs	r5, r5, #1
 8007952:	429d      	cmp	r5, r3
 8007954:	bf38      	it	cc
 8007956:	461d      	movcc	r5, r3
 8007958:	0553      	lsls	r3, r2, #21
 800795a:	d531      	bpl.n	80079c0 <__ssputs_r+0xa0>
 800795c:	4629      	mov	r1, r5
 800795e:	f000 fb63 	bl	8008028 <_malloc_r>
 8007962:	4606      	mov	r6, r0
 8007964:	b950      	cbnz	r0, 800797c <__ssputs_r+0x5c>
 8007966:	230c      	movs	r3, #12
 8007968:	f8ca 3000 	str.w	r3, [sl]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	6921      	ldr	r1, [r4, #16]
 800797e:	464a      	mov	r2, r9
 8007980:	f000 fabe 	bl	8007f00 <memcpy>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	6126      	str	r6, [r4, #16]
 8007992:	6165      	str	r5, [r4, #20]
 8007994:	444e      	add	r6, r9
 8007996:	eba5 0509 	sub.w	r5, r5, r9
 800799a:	6026      	str	r6, [r4, #0]
 800799c:	60a5      	str	r5, [r4, #8]
 800799e:	463e      	mov	r6, r7
 80079a0:	42be      	cmp	r6, r7
 80079a2:	d900      	bls.n	80079a6 <__ssputs_r+0x86>
 80079a4:	463e      	mov	r6, r7
 80079a6:	6820      	ldr	r0, [r4, #0]
 80079a8:	4632      	mov	r2, r6
 80079aa:	4641      	mov	r1, r8
 80079ac:	f000 fab6 	bl	8007f1c <memmove>
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	1b9b      	subs	r3, r3, r6
 80079b4:	60a3      	str	r3, [r4, #8]
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	4433      	add	r3, r6
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	2000      	movs	r0, #0
 80079be:	e7db      	b.n	8007978 <__ssputs_r+0x58>
 80079c0:	462a      	mov	r2, r5
 80079c2:	f000 fba5 	bl	8008110 <_realloc_r>
 80079c6:	4606      	mov	r6, r0
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d1e1      	bne.n	8007990 <__ssputs_r+0x70>
 80079cc:	6921      	ldr	r1, [r4, #16]
 80079ce:	4650      	mov	r0, sl
 80079d0:	f000 fabe 	bl	8007f50 <_free_r>
 80079d4:	e7c7      	b.n	8007966 <__ssputs_r+0x46>
	...

080079d8 <_svfiprintf_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	4698      	mov	r8, r3
 80079de:	898b      	ldrh	r3, [r1, #12]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	b09d      	sub	sp, #116	; 0x74
 80079e4:	4607      	mov	r7, r0
 80079e6:	460d      	mov	r5, r1
 80079e8:	4614      	mov	r4, r2
 80079ea:	d50e      	bpl.n	8007a0a <_svfiprintf_r+0x32>
 80079ec:	690b      	ldr	r3, [r1, #16]
 80079ee:	b963      	cbnz	r3, 8007a0a <_svfiprintf_r+0x32>
 80079f0:	2140      	movs	r1, #64	; 0x40
 80079f2:	f000 fb19 	bl	8008028 <_malloc_r>
 80079f6:	6028      	str	r0, [r5, #0]
 80079f8:	6128      	str	r0, [r5, #16]
 80079fa:	b920      	cbnz	r0, 8007a06 <_svfiprintf_r+0x2e>
 80079fc:	230c      	movs	r3, #12
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e0d1      	b.n	8007baa <_svfiprintf_r+0x1d2>
 8007a06:	2340      	movs	r3, #64	; 0x40
 8007a08:	616b      	str	r3, [r5, #20]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	2320      	movs	r3, #32
 8007a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a18:	2330      	movs	r3, #48	; 0x30
 8007a1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bc4 <_svfiprintf_r+0x1ec>
 8007a1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a22:	f04f 0901 	mov.w	r9, #1
 8007a26:	4623      	mov	r3, r4
 8007a28:	469a      	mov	sl, r3
 8007a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a2e:	b10a      	cbz	r2, 8007a34 <_svfiprintf_r+0x5c>
 8007a30:	2a25      	cmp	r2, #37	; 0x25
 8007a32:	d1f9      	bne.n	8007a28 <_svfiprintf_r+0x50>
 8007a34:	ebba 0b04 	subs.w	fp, sl, r4
 8007a38:	d00b      	beq.n	8007a52 <_svfiprintf_r+0x7a>
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7ff ff6d 	bl	8007920 <__ssputs_r>
 8007a46:	3001      	adds	r0, #1
 8007a48:	f000 80aa 	beq.w	8007ba0 <_svfiprintf_r+0x1c8>
 8007a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a4e:	445a      	add	r2, fp
 8007a50:	9209      	str	r2, [sp, #36]	; 0x24
 8007a52:	f89a 3000 	ldrb.w	r3, [sl]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80a2 	beq.w	8007ba0 <_svfiprintf_r+0x1c8>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a66:	f10a 0a01 	add.w	sl, sl, #1
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	9307      	str	r3, [sp, #28]
 8007a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a72:	931a      	str	r3, [sp, #104]	; 0x68
 8007a74:	4654      	mov	r4, sl
 8007a76:	2205      	movs	r2, #5
 8007a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7c:	4851      	ldr	r0, [pc, #324]	; (8007bc4 <_svfiprintf_r+0x1ec>)
 8007a7e:	f7f8 fbaf 	bl	80001e0 <memchr>
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	b9d8      	cbnz	r0, 8007abe <_svfiprintf_r+0xe6>
 8007a86:	06d0      	lsls	r0, r2, #27
 8007a88:	bf44      	itt	mi
 8007a8a:	2320      	movmi	r3, #32
 8007a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a90:	0711      	lsls	r1, r2, #28
 8007a92:	bf44      	itt	mi
 8007a94:	232b      	movmi	r3, #43	; 0x2b
 8007a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa0:	d015      	beq.n	8007ace <_svfiprintf_r+0xf6>
 8007aa2:	9a07      	ldr	r2, [sp, #28]
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f04f 0c0a 	mov.w	ip, #10
 8007aac:	4621      	mov	r1, r4
 8007aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab2:	3b30      	subs	r3, #48	; 0x30
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d94e      	bls.n	8007b56 <_svfiprintf_r+0x17e>
 8007ab8:	b1b0      	cbz	r0, 8007ae8 <_svfiprintf_r+0x110>
 8007aba:	9207      	str	r2, [sp, #28]
 8007abc:	e014      	b.n	8007ae8 <_svfiprintf_r+0x110>
 8007abe:	eba0 0308 	sub.w	r3, r0, r8
 8007ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	46a2      	mov	sl, r4
 8007acc:	e7d2      	b.n	8007a74 <_svfiprintf_r+0x9c>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	1d19      	adds	r1, r3, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	9103      	str	r1, [sp, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbb      	ittet	lt
 8007ada:	425b      	neglt	r3, r3
 8007adc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae0:	9307      	strge	r3, [sp, #28]
 8007ae2:	9307      	strlt	r3, [sp, #28]
 8007ae4:	bfb8      	it	lt
 8007ae6:	9204      	strlt	r2, [sp, #16]
 8007ae8:	7823      	ldrb	r3, [r4, #0]
 8007aea:	2b2e      	cmp	r3, #46	; 0x2e
 8007aec:	d10c      	bne.n	8007b08 <_svfiprintf_r+0x130>
 8007aee:	7863      	ldrb	r3, [r4, #1]
 8007af0:	2b2a      	cmp	r3, #42	; 0x2a
 8007af2:	d135      	bne.n	8007b60 <_svfiprintf_r+0x188>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9203      	str	r2, [sp, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfb8      	it	lt
 8007b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b04:	3402      	adds	r4, #2
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bd4 <_svfiprintf_r+0x1fc>
 8007b0c:	7821      	ldrb	r1, [r4, #0]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	4650      	mov	r0, sl
 8007b12:	f7f8 fb65 	bl	80001e0 <memchr>
 8007b16:	b140      	cbz	r0, 8007b2a <_svfiprintf_r+0x152>
 8007b18:	2340      	movs	r3, #64	; 0x40
 8007b1a:	eba0 000a 	sub.w	r0, r0, sl
 8007b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	4303      	orrs	r3, r0
 8007b26:	3401      	adds	r4, #1
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2e:	4826      	ldr	r0, [pc, #152]	; (8007bc8 <_svfiprintf_r+0x1f0>)
 8007b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b34:	2206      	movs	r2, #6
 8007b36:	f7f8 fb53 	bl	80001e0 <memchr>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d038      	beq.n	8007bb0 <_svfiprintf_r+0x1d8>
 8007b3e:	4b23      	ldr	r3, [pc, #140]	; (8007bcc <_svfiprintf_r+0x1f4>)
 8007b40:	bb1b      	cbnz	r3, 8007b8a <_svfiprintf_r+0x1b2>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	3307      	adds	r3, #7
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	9303      	str	r3, [sp, #12]
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	4433      	add	r3, r6
 8007b52:	9309      	str	r3, [sp, #36]	; 0x24
 8007b54:	e767      	b.n	8007a26 <_svfiprintf_r+0x4e>
 8007b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	e7a5      	b.n	8007aac <_svfiprintf_r+0xd4>
 8007b60:	2300      	movs	r3, #0
 8007b62:	3401      	adds	r4, #1
 8007b64:	9305      	str	r3, [sp, #20]
 8007b66:	4619      	mov	r1, r3
 8007b68:	f04f 0c0a 	mov.w	ip, #10
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b72:	3a30      	subs	r2, #48	; 0x30
 8007b74:	2a09      	cmp	r2, #9
 8007b76:	d903      	bls.n	8007b80 <_svfiprintf_r+0x1a8>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0c5      	beq.n	8007b08 <_svfiprintf_r+0x130>
 8007b7c:	9105      	str	r1, [sp, #20]
 8007b7e:	e7c3      	b.n	8007b08 <_svfiprintf_r+0x130>
 8007b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b84:	4604      	mov	r4, r0
 8007b86:	2301      	movs	r3, #1
 8007b88:	e7f0      	b.n	8007b6c <_svfiprintf_r+0x194>
 8007b8a:	ab03      	add	r3, sp, #12
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <_svfiprintf_r+0x1f8>)
 8007b92:	a904      	add	r1, sp, #16
 8007b94:	4638      	mov	r0, r7
 8007b96:	f3af 8000 	nop.w
 8007b9a:	1c42      	adds	r2, r0, #1
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	d1d6      	bne.n	8007b4e <_svfiprintf_r+0x176>
 8007ba0:	89ab      	ldrh	r3, [r5, #12]
 8007ba2:	065b      	lsls	r3, r3, #25
 8007ba4:	f53f af2c 	bmi.w	8007a00 <_svfiprintf_r+0x28>
 8007ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007baa:	b01d      	add	sp, #116	; 0x74
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	ab03      	add	r3, sp, #12
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <_svfiprintf_r+0x1f8>)
 8007bb8:	a904      	add	r1, sp, #16
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f000 f87a 	bl	8007cb4 <_printf_i>
 8007bc0:	e7eb      	b.n	8007b9a <_svfiprintf_r+0x1c2>
 8007bc2:	bf00      	nop
 8007bc4:	08008248 	.word	0x08008248
 8007bc8:	08008252 	.word	0x08008252
 8007bcc:	00000000 	.word	0x00000000
 8007bd0:	08007921 	.word	0x08007921
 8007bd4:	0800824e 	.word	0x0800824e

08007bd8 <_printf_common>:
 8007bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	4616      	mov	r6, r2
 8007bde:	4699      	mov	r9, r3
 8007be0:	688a      	ldr	r2, [r1, #8]
 8007be2:	690b      	ldr	r3, [r1, #16]
 8007be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007be8:	4293      	cmp	r3, r2
 8007bea:	bfb8      	it	lt
 8007bec:	4613      	movlt	r3, r2
 8007bee:	6033      	str	r3, [r6, #0]
 8007bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	b10a      	cbz	r2, 8007bfe <_printf_common+0x26>
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	6033      	str	r3, [r6, #0]
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	0699      	lsls	r1, r3, #26
 8007c02:	bf42      	ittt	mi
 8007c04:	6833      	ldrmi	r3, [r6, #0]
 8007c06:	3302      	addmi	r3, #2
 8007c08:	6033      	strmi	r3, [r6, #0]
 8007c0a:	6825      	ldr	r5, [r4, #0]
 8007c0c:	f015 0506 	ands.w	r5, r5, #6
 8007c10:	d106      	bne.n	8007c20 <_printf_common+0x48>
 8007c12:	f104 0a19 	add.w	sl, r4, #25
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	6832      	ldr	r2, [r6, #0]
 8007c1a:	1a9b      	subs	r3, r3, r2
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	dc26      	bgt.n	8007c6e <_printf_common+0x96>
 8007c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c24:	1e13      	subs	r3, r2, #0
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	bf18      	it	ne
 8007c2a:	2301      	movne	r3, #1
 8007c2c:	0692      	lsls	r2, r2, #26
 8007c2e:	d42b      	bmi.n	8007c88 <_printf_common+0xb0>
 8007c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c34:	4649      	mov	r1, r9
 8007c36:	4638      	mov	r0, r7
 8007c38:	47c0      	blx	r8
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d01e      	beq.n	8007c7c <_printf_common+0xa4>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	68e5      	ldr	r5, [r4, #12]
 8007c42:	6832      	ldr	r2, [r6, #0]
 8007c44:	f003 0306 	and.w	r3, r3, #6
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	bf08      	it	eq
 8007c4c:	1aad      	subeq	r5, r5, r2
 8007c4e:	68a3      	ldr	r3, [r4, #8]
 8007c50:	6922      	ldr	r2, [r4, #16]
 8007c52:	bf0c      	ite	eq
 8007c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c58:	2500      	movne	r5, #0
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	bfc4      	itt	gt
 8007c5e:	1a9b      	subgt	r3, r3, r2
 8007c60:	18ed      	addgt	r5, r5, r3
 8007c62:	2600      	movs	r6, #0
 8007c64:	341a      	adds	r4, #26
 8007c66:	42b5      	cmp	r5, r6
 8007c68:	d11a      	bne.n	8007ca0 <_printf_common+0xc8>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e008      	b.n	8007c80 <_printf_common+0xa8>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4652      	mov	r2, sl
 8007c72:	4649      	mov	r1, r9
 8007c74:	4638      	mov	r0, r7
 8007c76:	47c0      	blx	r8
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d103      	bne.n	8007c84 <_printf_common+0xac>
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c84:	3501      	adds	r5, #1
 8007c86:	e7c6      	b.n	8007c16 <_printf_common+0x3e>
 8007c88:	18e1      	adds	r1, r4, r3
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	2030      	movs	r0, #48	; 0x30
 8007c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c92:	4422      	add	r2, r4
 8007c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c9c:	3302      	adds	r3, #2
 8007c9e:	e7c7      	b.n	8007c30 <_printf_common+0x58>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	47c0      	blx	r8
 8007caa:	3001      	adds	r0, #1
 8007cac:	d0e6      	beq.n	8007c7c <_printf_common+0xa4>
 8007cae:	3601      	adds	r6, #1
 8007cb0:	e7d9      	b.n	8007c66 <_printf_common+0x8e>
	...

08007cb4 <_printf_i>:
 8007cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb8:	7e0f      	ldrb	r7, [r1, #24]
 8007cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cbc:	2f78      	cmp	r7, #120	; 0x78
 8007cbe:	4691      	mov	r9, r2
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	469a      	mov	sl, r3
 8007cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cca:	d807      	bhi.n	8007cdc <_printf_i+0x28>
 8007ccc:	2f62      	cmp	r7, #98	; 0x62
 8007cce:	d80a      	bhi.n	8007ce6 <_printf_i+0x32>
 8007cd0:	2f00      	cmp	r7, #0
 8007cd2:	f000 80d8 	beq.w	8007e86 <_printf_i+0x1d2>
 8007cd6:	2f58      	cmp	r7, #88	; 0x58
 8007cd8:	f000 80a3 	beq.w	8007e22 <_printf_i+0x16e>
 8007cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ce4:	e03a      	b.n	8007d5c <_printf_i+0xa8>
 8007ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cea:	2b15      	cmp	r3, #21
 8007cec:	d8f6      	bhi.n	8007cdc <_printf_i+0x28>
 8007cee:	a101      	add	r1, pc, #4	; (adr r1, 8007cf4 <_printf_i+0x40>)
 8007cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cf4:	08007d4d 	.word	0x08007d4d
 8007cf8:	08007d61 	.word	0x08007d61
 8007cfc:	08007cdd 	.word	0x08007cdd
 8007d00:	08007cdd 	.word	0x08007cdd
 8007d04:	08007cdd 	.word	0x08007cdd
 8007d08:	08007cdd 	.word	0x08007cdd
 8007d0c:	08007d61 	.word	0x08007d61
 8007d10:	08007cdd 	.word	0x08007cdd
 8007d14:	08007cdd 	.word	0x08007cdd
 8007d18:	08007cdd 	.word	0x08007cdd
 8007d1c:	08007cdd 	.word	0x08007cdd
 8007d20:	08007e6d 	.word	0x08007e6d
 8007d24:	08007d91 	.word	0x08007d91
 8007d28:	08007e4f 	.word	0x08007e4f
 8007d2c:	08007cdd 	.word	0x08007cdd
 8007d30:	08007cdd 	.word	0x08007cdd
 8007d34:	08007e8f 	.word	0x08007e8f
 8007d38:	08007cdd 	.word	0x08007cdd
 8007d3c:	08007d91 	.word	0x08007d91
 8007d40:	08007cdd 	.word	0x08007cdd
 8007d44:	08007cdd 	.word	0x08007cdd
 8007d48:	08007e57 	.word	0x08007e57
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	1d1a      	adds	r2, r3, #4
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	602a      	str	r2, [r5, #0]
 8007d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0a3      	b.n	8007ea8 <_printf_i+0x1f4>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	6829      	ldr	r1, [r5, #0]
 8007d64:	0606      	lsls	r6, r0, #24
 8007d66:	f101 0304 	add.w	r3, r1, #4
 8007d6a:	d50a      	bpl.n	8007d82 <_printf_i+0xce>
 8007d6c:	680e      	ldr	r6, [r1, #0]
 8007d6e:	602b      	str	r3, [r5, #0]
 8007d70:	2e00      	cmp	r6, #0
 8007d72:	da03      	bge.n	8007d7c <_printf_i+0xc8>
 8007d74:	232d      	movs	r3, #45	; 0x2d
 8007d76:	4276      	negs	r6, r6
 8007d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d7c:	485e      	ldr	r0, [pc, #376]	; (8007ef8 <_printf_i+0x244>)
 8007d7e:	230a      	movs	r3, #10
 8007d80:	e019      	b.n	8007db6 <_printf_i+0x102>
 8007d82:	680e      	ldr	r6, [r1, #0]
 8007d84:	602b      	str	r3, [r5, #0]
 8007d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d8a:	bf18      	it	ne
 8007d8c:	b236      	sxthne	r6, r6
 8007d8e:	e7ef      	b.n	8007d70 <_printf_i+0xbc>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	6820      	ldr	r0, [r4, #0]
 8007d94:	1d19      	adds	r1, r3, #4
 8007d96:	6029      	str	r1, [r5, #0]
 8007d98:	0601      	lsls	r1, r0, #24
 8007d9a:	d501      	bpl.n	8007da0 <_printf_i+0xec>
 8007d9c:	681e      	ldr	r6, [r3, #0]
 8007d9e:	e002      	b.n	8007da6 <_printf_i+0xf2>
 8007da0:	0646      	lsls	r6, r0, #25
 8007da2:	d5fb      	bpl.n	8007d9c <_printf_i+0xe8>
 8007da4:	881e      	ldrh	r6, [r3, #0]
 8007da6:	4854      	ldr	r0, [pc, #336]	; (8007ef8 <_printf_i+0x244>)
 8007da8:	2f6f      	cmp	r7, #111	; 0x6f
 8007daa:	bf0c      	ite	eq
 8007dac:	2308      	moveq	r3, #8
 8007dae:	230a      	movne	r3, #10
 8007db0:	2100      	movs	r1, #0
 8007db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007db6:	6865      	ldr	r5, [r4, #4]
 8007db8:	60a5      	str	r5, [r4, #8]
 8007dba:	2d00      	cmp	r5, #0
 8007dbc:	bfa2      	ittt	ge
 8007dbe:	6821      	ldrge	r1, [r4, #0]
 8007dc0:	f021 0104 	bicge.w	r1, r1, #4
 8007dc4:	6021      	strge	r1, [r4, #0]
 8007dc6:	b90e      	cbnz	r6, 8007dcc <_printf_i+0x118>
 8007dc8:	2d00      	cmp	r5, #0
 8007dca:	d04d      	beq.n	8007e68 <_printf_i+0x1b4>
 8007dcc:	4615      	mov	r5, r2
 8007dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8007dd6:	5dc7      	ldrb	r7, [r0, r7]
 8007dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ddc:	4637      	mov	r7, r6
 8007dde:	42bb      	cmp	r3, r7
 8007de0:	460e      	mov	r6, r1
 8007de2:	d9f4      	bls.n	8007dce <_printf_i+0x11a>
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d10b      	bne.n	8007e00 <_printf_i+0x14c>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	07de      	lsls	r6, r3, #31
 8007dec:	d508      	bpl.n	8007e00 <_printf_i+0x14c>
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	6861      	ldr	r1, [r4, #4]
 8007df2:	4299      	cmp	r1, r3
 8007df4:	bfde      	ittt	le
 8007df6:	2330      	movle	r3, #48	; 0x30
 8007df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e00:	1b52      	subs	r2, r2, r5
 8007e02:	6122      	str	r2, [r4, #16]
 8007e04:	f8cd a000 	str.w	sl, [sp]
 8007e08:	464b      	mov	r3, r9
 8007e0a:	aa03      	add	r2, sp, #12
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4640      	mov	r0, r8
 8007e10:	f7ff fee2 	bl	8007bd8 <_printf_common>
 8007e14:	3001      	adds	r0, #1
 8007e16:	d14c      	bne.n	8007eb2 <_printf_i+0x1fe>
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1c:	b004      	add	sp, #16
 8007e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e22:	4835      	ldr	r0, [pc, #212]	; (8007ef8 <_printf_i+0x244>)
 8007e24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e28:	6829      	ldr	r1, [r5, #0]
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e30:	6029      	str	r1, [r5, #0]
 8007e32:	061d      	lsls	r5, r3, #24
 8007e34:	d514      	bpl.n	8007e60 <_printf_i+0x1ac>
 8007e36:	07df      	lsls	r7, r3, #31
 8007e38:	bf44      	itt	mi
 8007e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e3e:	6023      	strmi	r3, [r4, #0]
 8007e40:	b91e      	cbnz	r6, 8007e4a <_printf_i+0x196>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	f023 0320 	bic.w	r3, r3, #32
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	2310      	movs	r3, #16
 8007e4c:	e7b0      	b.n	8007db0 <_printf_i+0xfc>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f043 0320 	orr.w	r3, r3, #32
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	2378      	movs	r3, #120	; 0x78
 8007e58:	4828      	ldr	r0, [pc, #160]	; (8007efc <_printf_i+0x248>)
 8007e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e5e:	e7e3      	b.n	8007e28 <_printf_i+0x174>
 8007e60:	0659      	lsls	r1, r3, #25
 8007e62:	bf48      	it	mi
 8007e64:	b2b6      	uxthmi	r6, r6
 8007e66:	e7e6      	b.n	8007e36 <_printf_i+0x182>
 8007e68:	4615      	mov	r5, r2
 8007e6a:	e7bb      	b.n	8007de4 <_printf_i+0x130>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	6826      	ldr	r6, [r4, #0]
 8007e70:	6961      	ldr	r1, [r4, #20]
 8007e72:	1d18      	adds	r0, r3, #4
 8007e74:	6028      	str	r0, [r5, #0]
 8007e76:	0635      	lsls	r5, r6, #24
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	d501      	bpl.n	8007e80 <_printf_i+0x1cc>
 8007e7c:	6019      	str	r1, [r3, #0]
 8007e7e:	e002      	b.n	8007e86 <_printf_i+0x1d2>
 8007e80:	0670      	lsls	r0, r6, #25
 8007e82:	d5fb      	bpl.n	8007e7c <_printf_i+0x1c8>
 8007e84:	8019      	strh	r1, [r3, #0]
 8007e86:	2300      	movs	r3, #0
 8007e88:	6123      	str	r3, [r4, #16]
 8007e8a:	4615      	mov	r5, r2
 8007e8c:	e7ba      	b.n	8007e04 <_printf_i+0x150>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	1d1a      	adds	r2, r3, #4
 8007e92:	602a      	str	r2, [r5, #0]
 8007e94:	681d      	ldr	r5, [r3, #0]
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f7f8 f9a0 	bl	80001e0 <memchr>
 8007ea0:	b108      	cbz	r0, 8007ea6 <_printf_i+0x1f2>
 8007ea2:	1b40      	subs	r0, r0, r5
 8007ea4:	6060      	str	r0, [r4, #4]
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	6123      	str	r3, [r4, #16]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb0:	e7a8      	b.n	8007e04 <_printf_i+0x150>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4640      	mov	r0, r8
 8007eba:	47d0      	blx	sl
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d0ab      	beq.n	8007e18 <_printf_i+0x164>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	079b      	lsls	r3, r3, #30
 8007ec4:	d413      	bmi.n	8007eee <_printf_i+0x23a>
 8007ec6:	68e0      	ldr	r0, [r4, #12]
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	bfb8      	it	lt
 8007ece:	4618      	movlt	r0, r3
 8007ed0:	e7a4      	b.n	8007e1c <_printf_i+0x168>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	4640      	mov	r0, r8
 8007eda:	47d0      	blx	sl
 8007edc:	3001      	adds	r0, #1
 8007ede:	d09b      	beq.n	8007e18 <_printf_i+0x164>
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	9903      	ldr	r1, [sp, #12]
 8007ee6:	1a5b      	subs	r3, r3, r1
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dcf2      	bgt.n	8007ed2 <_printf_i+0x21e>
 8007eec:	e7eb      	b.n	8007ec6 <_printf_i+0x212>
 8007eee:	2500      	movs	r5, #0
 8007ef0:	f104 0619 	add.w	r6, r4, #25
 8007ef4:	e7f5      	b.n	8007ee2 <_printf_i+0x22e>
 8007ef6:	bf00      	nop
 8007ef8:	08008259 	.word	0x08008259
 8007efc:	0800826a 	.word	0x0800826a

08007f00 <memcpy>:
 8007f00:	440a      	add	r2, r1
 8007f02:	4291      	cmp	r1, r2
 8007f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f08:	d100      	bne.n	8007f0c <memcpy+0xc>
 8007f0a:	4770      	bx	lr
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f16:	4291      	cmp	r1, r2
 8007f18:	d1f9      	bne.n	8007f0e <memcpy+0xe>
 8007f1a:	bd10      	pop	{r4, pc}

08007f1c <memmove>:
 8007f1c:	4288      	cmp	r0, r1
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	eb01 0402 	add.w	r4, r1, r2
 8007f24:	d902      	bls.n	8007f2c <memmove+0x10>
 8007f26:	4284      	cmp	r4, r0
 8007f28:	4623      	mov	r3, r4
 8007f2a:	d807      	bhi.n	8007f3c <memmove+0x20>
 8007f2c:	1e43      	subs	r3, r0, #1
 8007f2e:	42a1      	cmp	r1, r4
 8007f30:	d008      	beq.n	8007f44 <memmove+0x28>
 8007f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f3a:	e7f8      	b.n	8007f2e <memmove+0x12>
 8007f3c:	4402      	add	r2, r0
 8007f3e:	4601      	mov	r1, r0
 8007f40:	428a      	cmp	r2, r1
 8007f42:	d100      	bne.n	8007f46 <memmove+0x2a>
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f4e:	e7f7      	b.n	8007f40 <memmove+0x24>

08007f50 <_free_r>:
 8007f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d044      	beq.n	8007fe0 <_free_r+0x90>
 8007f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5a:	9001      	str	r0, [sp, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f62:	bfb8      	it	lt
 8007f64:	18e4      	addlt	r4, r4, r3
 8007f66:	f000 f913 	bl	8008190 <__malloc_lock>
 8007f6a:	4a1e      	ldr	r2, [pc, #120]	; (8007fe4 <_free_r+0x94>)
 8007f6c:	9801      	ldr	r0, [sp, #4]
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	b933      	cbnz	r3, 8007f80 <_free_r+0x30>
 8007f72:	6063      	str	r3, [r4, #4]
 8007f74:	6014      	str	r4, [r2, #0]
 8007f76:	b003      	add	sp, #12
 8007f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f7c:	f000 b90e 	b.w	800819c <__malloc_unlock>
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d908      	bls.n	8007f96 <_free_r+0x46>
 8007f84:	6825      	ldr	r5, [r4, #0]
 8007f86:	1961      	adds	r1, r4, r5
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	bf01      	itttt	eq
 8007f8c:	6819      	ldreq	r1, [r3, #0]
 8007f8e:	685b      	ldreq	r3, [r3, #4]
 8007f90:	1949      	addeq	r1, r1, r5
 8007f92:	6021      	streq	r1, [r4, #0]
 8007f94:	e7ed      	b.n	8007f72 <_free_r+0x22>
 8007f96:	461a      	mov	r2, r3
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	b10b      	cbz	r3, 8007fa0 <_free_r+0x50>
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	d9fa      	bls.n	8007f96 <_free_r+0x46>
 8007fa0:	6811      	ldr	r1, [r2, #0]
 8007fa2:	1855      	adds	r5, r2, r1
 8007fa4:	42a5      	cmp	r5, r4
 8007fa6:	d10b      	bne.n	8007fc0 <_free_r+0x70>
 8007fa8:	6824      	ldr	r4, [r4, #0]
 8007faa:	4421      	add	r1, r4
 8007fac:	1854      	adds	r4, r2, r1
 8007fae:	42a3      	cmp	r3, r4
 8007fb0:	6011      	str	r1, [r2, #0]
 8007fb2:	d1e0      	bne.n	8007f76 <_free_r+0x26>
 8007fb4:	681c      	ldr	r4, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	6053      	str	r3, [r2, #4]
 8007fba:	4421      	add	r1, r4
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	e7da      	b.n	8007f76 <_free_r+0x26>
 8007fc0:	d902      	bls.n	8007fc8 <_free_r+0x78>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	6003      	str	r3, [r0, #0]
 8007fc6:	e7d6      	b.n	8007f76 <_free_r+0x26>
 8007fc8:	6825      	ldr	r5, [r4, #0]
 8007fca:	1961      	adds	r1, r4, r5
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	bf04      	itt	eq
 8007fd0:	6819      	ldreq	r1, [r3, #0]
 8007fd2:	685b      	ldreq	r3, [r3, #4]
 8007fd4:	6063      	str	r3, [r4, #4]
 8007fd6:	bf04      	itt	eq
 8007fd8:	1949      	addeq	r1, r1, r5
 8007fda:	6021      	streq	r1, [r4, #0]
 8007fdc:	6054      	str	r4, [r2, #4]
 8007fde:	e7ca      	b.n	8007f76 <_free_r+0x26>
 8007fe0:	b003      	add	sp, #12
 8007fe2:	bd30      	pop	{r4, r5, pc}
 8007fe4:	20001ea4 	.word	0x20001ea4

08007fe8 <sbrk_aligned>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	4e0e      	ldr	r6, [pc, #56]	; (8008024 <sbrk_aligned+0x3c>)
 8007fec:	460c      	mov	r4, r1
 8007fee:	6831      	ldr	r1, [r6, #0]
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	b911      	cbnz	r1, 8007ffa <sbrk_aligned+0x12>
 8007ff4:	f000 f8bc 	bl	8008170 <_sbrk_r>
 8007ff8:	6030      	str	r0, [r6, #0]
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f8b7 	bl	8008170 <_sbrk_r>
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	d00a      	beq.n	800801c <sbrk_aligned+0x34>
 8008006:	1cc4      	adds	r4, r0, #3
 8008008:	f024 0403 	bic.w	r4, r4, #3
 800800c:	42a0      	cmp	r0, r4
 800800e:	d007      	beq.n	8008020 <sbrk_aligned+0x38>
 8008010:	1a21      	subs	r1, r4, r0
 8008012:	4628      	mov	r0, r5
 8008014:	f000 f8ac 	bl	8008170 <_sbrk_r>
 8008018:	3001      	adds	r0, #1
 800801a:	d101      	bne.n	8008020 <sbrk_aligned+0x38>
 800801c:	f04f 34ff 	mov.w	r4, #4294967295
 8008020:	4620      	mov	r0, r4
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	20001ea8 	.word	0x20001ea8

08008028 <_malloc_r>:
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	1ccd      	adds	r5, r1, #3
 800802e:	f025 0503 	bic.w	r5, r5, #3
 8008032:	3508      	adds	r5, #8
 8008034:	2d0c      	cmp	r5, #12
 8008036:	bf38      	it	cc
 8008038:	250c      	movcc	r5, #12
 800803a:	2d00      	cmp	r5, #0
 800803c:	4607      	mov	r7, r0
 800803e:	db01      	blt.n	8008044 <_malloc_r+0x1c>
 8008040:	42a9      	cmp	r1, r5
 8008042:	d905      	bls.n	8008050 <_malloc_r+0x28>
 8008044:	230c      	movs	r3, #12
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	2600      	movs	r6, #0
 800804a:	4630      	mov	r0, r6
 800804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008050:	4e2e      	ldr	r6, [pc, #184]	; (800810c <_malloc_r+0xe4>)
 8008052:	f000 f89d 	bl	8008190 <__malloc_lock>
 8008056:	6833      	ldr	r3, [r6, #0]
 8008058:	461c      	mov	r4, r3
 800805a:	bb34      	cbnz	r4, 80080aa <_malloc_r+0x82>
 800805c:	4629      	mov	r1, r5
 800805e:	4638      	mov	r0, r7
 8008060:	f7ff ffc2 	bl	8007fe8 <sbrk_aligned>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	4604      	mov	r4, r0
 8008068:	d14d      	bne.n	8008106 <_malloc_r+0xde>
 800806a:	6834      	ldr	r4, [r6, #0]
 800806c:	4626      	mov	r6, r4
 800806e:	2e00      	cmp	r6, #0
 8008070:	d140      	bne.n	80080f4 <_malloc_r+0xcc>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	4631      	mov	r1, r6
 8008076:	4638      	mov	r0, r7
 8008078:	eb04 0803 	add.w	r8, r4, r3
 800807c:	f000 f878 	bl	8008170 <_sbrk_r>
 8008080:	4580      	cmp	r8, r0
 8008082:	d13a      	bne.n	80080fa <_malloc_r+0xd2>
 8008084:	6821      	ldr	r1, [r4, #0]
 8008086:	3503      	adds	r5, #3
 8008088:	1a6d      	subs	r5, r5, r1
 800808a:	f025 0503 	bic.w	r5, r5, #3
 800808e:	3508      	adds	r5, #8
 8008090:	2d0c      	cmp	r5, #12
 8008092:	bf38      	it	cc
 8008094:	250c      	movcc	r5, #12
 8008096:	4629      	mov	r1, r5
 8008098:	4638      	mov	r0, r7
 800809a:	f7ff ffa5 	bl	8007fe8 <sbrk_aligned>
 800809e:	3001      	adds	r0, #1
 80080a0:	d02b      	beq.n	80080fa <_malloc_r+0xd2>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	442b      	add	r3, r5
 80080a6:	6023      	str	r3, [r4, #0]
 80080a8:	e00e      	b.n	80080c8 <_malloc_r+0xa0>
 80080aa:	6822      	ldr	r2, [r4, #0]
 80080ac:	1b52      	subs	r2, r2, r5
 80080ae:	d41e      	bmi.n	80080ee <_malloc_r+0xc6>
 80080b0:	2a0b      	cmp	r2, #11
 80080b2:	d916      	bls.n	80080e2 <_malloc_r+0xba>
 80080b4:	1961      	adds	r1, r4, r5
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	6025      	str	r5, [r4, #0]
 80080ba:	bf18      	it	ne
 80080bc:	6059      	strne	r1, [r3, #4]
 80080be:	6863      	ldr	r3, [r4, #4]
 80080c0:	bf08      	it	eq
 80080c2:	6031      	streq	r1, [r6, #0]
 80080c4:	5162      	str	r2, [r4, r5]
 80080c6:	604b      	str	r3, [r1, #4]
 80080c8:	4638      	mov	r0, r7
 80080ca:	f104 060b 	add.w	r6, r4, #11
 80080ce:	f000 f865 	bl	800819c <__malloc_unlock>
 80080d2:	f026 0607 	bic.w	r6, r6, #7
 80080d6:	1d23      	adds	r3, r4, #4
 80080d8:	1af2      	subs	r2, r6, r3
 80080da:	d0b6      	beq.n	800804a <_malloc_r+0x22>
 80080dc:	1b9b      	subs	r3, r3, r6
 80080de:	50a3      	str	r3, [r4, r2]
 80080e0:	e7b3      	b.n	800804a <_malloc_r+0x22>
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	bf0c      	ite	eq
 80080e8:	6032      	streq	r2, [r6, #0]
 80080ea:	605a      	strne	r2, [r3, #4]
 80080ec:	e7ec      	b.n	80080c8 <_malloc_r+0xa0>
 80080ee:	4623      	mov	r3, r4
 80080f0:	6864      	ldr	r4, [r4, #4]
 80080f2:	e7b2      	b.n	800805a <_malloc_r+0x32>
 80080f4:	4634      	mov	r4, r6
 80080f6:	6876      	ldr	r6, [r6, #4]
 80080f8:	e7b9      	b.n	800806e <_malloc_r+0x46>
 80080fa:	230c      	movs	r3, #12
 80080fc:	603b      	str	r3, [r7, #0]
 80080fe:	4638      	mov	r0, r7
 8008100:	f000 f84c 	bl	800819c <__malloc_unlock>
 8008104:	e7a1      	b.n	800804a <_malloc_r+0x22>
 8008106:	6025      	str	r5, [r4, #0]
 8008108:	e7de      	b.n	80080c8 <_malloc_r+0xa0>
 800810a:	bf00      	nop
 800810c:	20001ea4 	.word	0x20001ea4

08008110 <_realloc_r>:
 8008110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	4680      	mov	r8, r0
 8008116:	4614      	mov	r4, r2
 8008118:	460e      	mov	r6, r1
 800811a:	b921      	cbnz	r1, 8008126 <_realloc_r+0x16>
 800811c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	4611      	mov	r1, r2
 8008122:	f7ff bf81 	b.w	8008028 <_malloc_r>
 8008126:	b92a      	cbnz	r2, 8008134 <_realloc_r+0x24>
 8008128:	f7ff ff12 	bl	8007f50 <_free_r>
 800812c:	4625      	mov	r5, r4
 800812e:	4628      	mov	r0, r5
 8008130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008134:	f000 f838 	bl	80081a8 <_malloc_usable_size_r>
 8008138:	4284      	cmp	r4, r0
 800813a:	4607      	mov	r7, r0
 800813c:	d802      	bhi.n	8008144 <_realloc_r+0x34>
 800813e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008142:	d812      	bhi.n	800816a <_realloc_r+0x5a>
 8008144:	4621      	mov	r1, r4
 8008146:	4640      	mov	r0, r8
 8008148:	f7ff ff6e 	bl	8008028 <_malloc_r>
 800814c:	4605      	mov	r5, r0
 800814e:	2800      	cmp	r0, #0
 8008150:	d0ed      	beq.n	800812e <_realloc_r+0x1e>
 8008152:	42bc      	cmp	r4, r7
 8008154:	4622      	mov	r2, r4
 8008156:	4631      	mov	r1, r6
 8008158:	bf28      	it	cs
 800815a:	463a      	movcs	r2, r7
 800815c:	f7ff fed0 	bl	8007f00 <memcpy>
 8008160:	4631      	mov	r1, r6
 8008162:	4640      	mov	r0, r8
 8008164:	f7ff fef4 	bl	8007f50 <_free_r>
 8008168:	e7e1      	b.n	800812e <_realloc_r+0x1e>
 800816a:	4635      	mov	r5, r6
 800816c:	e7df      	b.n	800812e <_realloc_r+0x1e>
	...

08008170 <_sbrk_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d06      	ldr	r5, [pc, #24]	; (800818c <_sbrk_r+0x1c>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	f7f8 fdc2 	bl	8000d04 <_sbrk>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_sbrk_r+0x1a>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_sbrk_r+0x1a>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20001eac 	.word	0x20001eac

08008190 <__malloc_lock>:
 8008190:	4801      	ldr	r0, [pc, #4]	; (8008198 <__malloc_lock+0x8>)
 8008192:	f000 b811 	b.w	80081b8 <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	20001eb0 	.word	0x20001eb0

0800819c <__malloc_unlock>:
 800819c:	4801      	ldr	r0, [pc, #4]	; (80081a4 <__malloc_unlock+0x8>)
 800819e:	f000 b80c 	b.w	80081ba <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	20001eb0 	.word	0x20001eb0

080081a8 <_malloc_usable_size_r>:
 80081a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ac:	1f18      	subs	r0, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfbc      	itt	lt
 80081b2:	580b      	ldrlt	r3, [r1, r0]
 80081b4:	18c0      	addlt	r0, r0, r3
 80081b6:	4770      	bx	lr

080081b8 <__retarget_lock_acquire_recursive>:
 80081b8:	4770      	bx	lr

080081ba <__retarget_lock_release_recursive>:
 80081ba:	4770      	bx	lr

080081bc <_init>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <_fini>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr
