
LED_PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800819c  0800819c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081a4  080081a4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080081ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd8  200001e4  08008390  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ebc  08008390  00021ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a54  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000371b  00000000  00000000  00039c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0003d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  0003e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244ac  00000000  00000000  0003f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f0b  00000000  00000000  00063b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce657  00000000  00000000  00079a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001480de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b0  00000000  00000000  00148134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080e8 	.word	0x080080e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080080e8 	.word	0x080080e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int duty = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc2b 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f84d 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f981 	bl	8000890 <MX_GPIO_Init>
  MX_SPI1_Init();
 800058e:	f000 f8b3 	bl	80006f8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000592:	f006 fc0d 	bl	8006db0 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000596:	f000 f8e5 	bl	8000764 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	481e      	ldr	r0, [pc, #120]	; (8000618 <main+0xa0>)
 800059e:	f002 fe7b 	bl	8003298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005a2:	2104      	movs	r1, #4
 80005a4:	481c      	ldr	r0, [pc, #112]	; (8000618 <main+0xa0>)
 80005a6:	f002 fe77 	bl	8003298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80005aa:	2108      	movs	r1, #8
 80005ac:	481a      	ldr	r0, [pc, #104]	; (8000618 <main+0xa0>)
 80005ae:	f002 fe73 	bl	8003298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80005b2:	210c      	movs	r1, #12
 80005b4:	4818      	ldr	r0, [pc, #96]	; (8000618 <main+0xa0>)
 80005b6:	f002 fe6f 	bl	8003298 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim4.Instance->CCR1 = duty;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <main+0xa0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
	  htim4.Instance->CCR2 = 100-duty;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0xa0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	639a      	str	r2, [r3, #56]	; 0x38
	  htim4.Instance->CCR3 = duty;
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <main+0xa0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim4.Instance->CCR4 = 100-duty;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <main+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    snprintf (SendBuffer,BUFSIZE,"USB:0.1 secs\r\n");
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <main+0xa4>)
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <main+0xa8>)
 80005ea:	f007 f93b 	bl	8007864 <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80005ee:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0xa8>)
 80005f0:	f7ff fdee 	bl	80001d0 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4619      	mov	r1, r3
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0xa8>)
 80005fa:	f006 fc97 	bl	8006f2c <CDC_Transmit_FS>

	      duty = (duty + 1) ;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3301      	adds	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
	      if (duty > 100 )
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b64      	cmp	r3, #100	; 0x64
 8000608:	dd01      	ble.n	800060e <main+0x96>
	        duty = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]


	    HAL_Delay(100);
 800060e:	2064      	movs	r0, #100	; 0x64
 8000610:	f000 fc56 	bl	8000ec0 <HAL_Delay>
  {
 8000614:	e7d1      	b.n	80005ba <main+0x42>
 8000616:	bf00      	nop
 8000618:	20000430 	.word	0x20000430
 800061c:	08008100 	.word	0x08008100
 8000620:	20000478 	.word	0x20000478

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f007 f90e 	bl	8007854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <SystemClock_Config+0xcc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemClock_Config+0xd0>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000698:	23a8      	movs	r3, #168	; 0xa8
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f877 	bl	800279c <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b4:	f000 fa1a 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2105      	movs	r1, #5
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fad8 	bl	8002c8c <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e2:	f000 fa03 	bl	8000aec <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_SPI1_Init+0x64>)
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <MX_SPI1_Init+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_SPI1_Init+0x64>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_SPI1_Init+0x64>)
 8000744:	220a      	movs	r2, #10
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_SPI1_Init+0x64>)
 800074a:	f002 fc73 	bl	8003034 <HAL_SPI_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000754:	f000 f9ca 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000578 	.word	0x20000578
 8000760:	40013000 	.word	0x40013000

08000764 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08e      	sub	sp, #56	; 0x38
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000794:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <MX_TIM4_Init+0x124>)
 8000796:	4a3d      	ldr	r2, [pc, #244]	; (800088c <MX_TIM4_Init+0x128>)
 8000798:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800079a:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <MX_TIM4_Init+0x124>)
 800079c:	2253      	movs	r2, #83	; 0x53
 800079e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <MX_TIM4_Init+0x124>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <MX_TIM4_Init+0x124>)
 80007a8:	2263      	movs	r2, #99	; 0x63
 80007aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <MX_TIM4_Init+0x124>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b35      	ldr	r3, [pc, #212]	; (8000888 <MX_TIM4_Init+0x124>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007b8:	4833      	ldr	r0, [pc, #204]	; (8000888 <MX_TIM4_Init+0x124>)
 80007ba:	f002 fcc4 	bl	8003146 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80007c4:	f000 f992 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	4619      	mov	r1, r3
 80007d4:	482c      	ldr	r0, [pc, #176]	; (8000888 <MX_TIM4_Init+0x124>)
 80007d6:	f002 fee5 	bl	80035a4 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80007e0:	f000 f984 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007e4:	4828      	ldr	r0, [pc, #160]	; (8000888 <MX_TIM4_Init+0x124>)
 80007e6:	f002 fcfd 	bl	80031e4 <HAL_TIM_PWM_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80007f0:	f000 f97c 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4619      	mov	r1, r3
 8000802:	4821      	ldr	r0, [pc, #132]	; (8000888 <MX_TIM4_Init+0x124>)
 8000804:	f003 faa2 	bl	8003d4c <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800080e:	f000 f96d 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000812:	2360      	movs	r3, #96	; 0x60
 8000814:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	4619      	mov	r1, r3
 8000828:	4817      	ldr	r0, [pc, #92]	; (8000888 <MX_TIM4_Init+0x124>)
 800082a:	f002 fdfd 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000834:	f000 f95a 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2204      	movs	r2, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_TIM4_Init+0x124>)
 8000840:	f002 fdf2 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800084a:	f000 f94f 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2208      	movs	r2, #8
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_TIM4_Init+0x124>)
 8000856:	f002 fde7 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000860:	f000 f944 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	220c      	movs	r2, #12
 8000868:	4619      	mov	r1, r3
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM4_Init+0x124>)
 800086c:	f002 fddc 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8000876:	f000 f939 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM4_Init+0x124>)
 800087c:	f000 f9ce 	bl	8000c1c <HAL_TIM_MspPostInit>

}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	; 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000430 	.word	0x20000430
 800088c:	40000800 	.word	0x40000800

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b89      	ldr	r3, [pc, #548]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a88      	ldr	r2, [pc, #544]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b86      	ldr	r3, [pc, #536]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b82      	ldr	r3, [pc, #520]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a81      	ldr	r2, [pc, #516]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b7f      	ldr	r3, [pc, #508]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b7b      	ldr	r3, [pc, #492]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a7a      	ldr	r2, [pc, #488]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b78      	ldr	r3, [pc, #480]	; (8000ad0 <MX_GPIO_Init+0x240>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b74      	ldr	r3, [pc, #464]	; (8000ad0 <MX_GPIO_Init+0x240>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a73      	ldr	r2, [pc, #460]	; (8000ad0 <MX_GPIO_Init+0x240>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b71      	ldr	r3, [pc, #452]	; (8000ad0 <MX_GPIO_Init+0x240>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b6d      	ldr	r3, [pc, #436]	; (8000ad0 <MX_GPIO_Init+0x240>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a6c      	ldr	r2, [pc, #432]	; (8000ad0 <MX_GPIO_Init+0x240>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b6a      	ldr	r3, [pc, #424]	; (8000ad0 <MX_GPIO_Init+0x240>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b66      	ldr	r3, [pc, #408]	; (8000ad0 <MX_GPIO_Init+0x240>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a65      	ldr	r2, [pc, #404]	; (8000ad0 <MX_GPIO_Init+0x240>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b63      	ldr	r3, [pc, #396]	; (8000ad0 <MX_GPIO_Init+0x240>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4860      	ldr	r0, [pc, #384]	; (8000ad4 <MX_GPIO_Init+0x244>)
 8000954:	f000 fd86 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	485e      	ldr	r0, [pc, #376]	; (8000ad8 <MX_GPIO_Init+0x248>)
 800095e:	f000 fd81 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2110      	movs	r1, #16
 8000966:	485d      	ldr	r0, [pc, #372]	; (8000adc <MX_GPIO_Init+0x24c>)
 8000968:	f000 fd7c 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800096c:	2308      	movs	r3, #8
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4854      	ldr	r0, [pc, #336]	; (8000ad4 <MX_GPIO_Init+0x244>)
 8000984:	f000 fbd2 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000988:	2301      	movs	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	484e      	ldr	r0, [pc, #312]	; (8000ad8 <MX_GPIO_Init+0x248>)
 80009a0:	f000 fbc4 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009a4:	2308      	movs	r3, #8
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b4:	2305      	movs	r3, #5
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4846      	ldr	r0, [pc, #280]	; (8000ad8 <MX_GPIO_Init+0x248>)
 80009c0:	f000 fbb4 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c8:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <MX_GPIO_Init+0x250>)
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4843      	ldr	r0, [pc, #268]	; (8000ae4 <MX_GPIO_Init+0x254>)
 80009d8:	f000 fba8 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009dc:	2310      	movs	r3, #16
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ec:	2306      	movs	r3, #6
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	483b      	ldr	r0, [pc, #236]	; (8000ae4 <MX_GPIO_Init+0x254>)
 80009f8:	f000 fb98 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009fc:	2304      	movs	r3, #4
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x258>)
 8000a10:	f000 fb8c 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a26:	2305      	movs	r3, #5
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	482d      	ldr	r0, [pc, #180]	; (8000ae8 <MX_GPIO_Init+0x258>)
 8000a32:	f000 fb7b 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a36:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a48:	2306      	movs	r3, #6
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4821      	ldr	r0, [pc, #132]	; (8000ad8 <MX_GPIO_Init+0x248>)
 8000a54:	f000 fb6a 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481b      	ldr	r0, [pc, #108]	; (8000adc <MX_GPIO_Init+0x24c>)
 8000a70:	f000 fb5c 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a74:	2320      	movs	r3, #32
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_GPIO_Init+0x24c>)
 8000a88:	f000 fb50 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a8c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a92:	2312      	movs	r3, #18
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_GPIO_Init+0x258>)
 8000aaa:	f000 fb3f 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_GPIO_Init+0x250>)
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_GPIO_Init+0x244>)
 8000ac2:	f000 fb33 	bl	800112c <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	; 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	10120000 	.word	0x10120000
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020400 	.word	0x40020400

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fab6 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_SPI_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ba2:	23e0      	movs	r3, #224	; 0xe0
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_SPI_MspInit+0x8c>)
 8000bbe:	f000 fab5 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40013000 	.word	0x40013000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_TIM_Base_MspInit+0x3c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d10d      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_TIM_Base_MspInit+0x40>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_TIM_Base_MspInit+0x40>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_TIM_Base_MspInit+0x40>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40000800 	.word	0x40000800
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d11e      	bne.n	8000c7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c5a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_TIM_MspPostInit+0x70>)
 8000c78:	f000 fa58 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40000800 	.word	0x40000800
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020c00 	.word	0x40020c00

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f8d0 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <OTG_FS_IRQHandler+0x10>)
 8000cea:	f000 fd24 	bl	8001736 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20001aa4 	.word	0x20001aa4

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f006 fd6a 	bl	8007800 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000200 	.word	0x20000200
 8000d60:	20001ec0 	.word	0x20001ec0

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ffd7 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f006 fd29 	bl	800780c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fbdd 	bl	8000578 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000dcc:	080081ac 	.word	0x080081ac
  ldr r2, =_sbss
 8000dd0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000dd4:	20001ebc 	.word	0x20001ebc

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f94f 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe72 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f967 	bl	8001112 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f92f 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	200005d0 	.word	0x200005d0

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200005d0 	.word	0x200005d0

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e16b      	b.n	8001420 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 815a 	bne.w	800141a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d005      	beq.n	800117e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	2b02      	cmp	r3, #2
 800117c:	d130      	bne.n	80011e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	69b9      	ldr	r1, [r7, #24]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80b4 	beq.w	800141a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b60      	ldr	r3, [pc, #384]	; (8001438 <HAL_GPIO_Init+0x30c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a5f      	ldr	r2, [pc, #380]	; (8001438 <HAL_GPIO_Init+0x30c>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_GPIO_Init+0x30c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ce:	4a5b      	ldr	r2, [pc, #364]	; (800143c <HAL_GPIO_Init+0x310>)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_GPIO_Init+0x314>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d02b      	beq.n	8001352 <HAL_GPIO_Init+0x226>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a51      	ldr	r2, [pc, #324]	; (8001444 <HAL_GPIO_Init+0x318>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x222>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a50      	ldr	r2, [pc, #320]	; (8001448 <HAL_GPIO_Init+0x31c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x21e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4f      	ldr	r2, [pc, #316]	; (800144c <HAL_GPIO_Init+0x320>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x21a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4e      	ldr	r2, [pc, #312]	; (8001450 <HAL_GPIO_Init+0x324>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x216>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_GPIO_Init+0x328>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x212>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4c      	ldr	r2, [pc, #304]	; (8001458 <HAL_GPIO_Init+0x32c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x20e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4b      	ldr	r2, [pc, #300]	; (800145c <HAL_GPIO_Init+0x330>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x20a>
 8001332:	2307      	movs	r3, #7
 8001334:	e00e      	b.n	8001354 <HAL_GPIO_Init+0x228>
 8001336:	2308      	movs	r3, #8
 8001338:	e00c      	b.n	8001354 <HAL_GPIO_Init+0x228>
 800133a:	2306      	movs	r3, #6
 800133c:	e00a      	b.n	8001354 <HAL_GPIO_Init+0x228>
 800133e:	2305      	movs	r3, #5
 8001340:	e008      	b.n	8001354 <HAL_GPIO_Init+0x228>
 8001342:	2304      	movs	r3, #4
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x228>
 8001346:	2303      	movs	r3, #3
 8001348:	e004      	b.n	8001354 <HAL_GPIO_Init+0x228>
 800134a:	2302      	movs	r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x228>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x228>
 8001352:	2300      	movs	r3, #0
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	f002 0203 	and.w	r2, r2, #3
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4093      	lsls	r3, r2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001364:	4935      	ldr	r1, [pc, #212]	; (800143c <HAL_GPIO_Init+0x310>)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <HAL_GPIO_Init+0x334>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001396:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_GPIO_Init+0x334>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_GPIO_Init+0x334>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <HAL_GPIO_Init+0x334>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_GPIO_Init+0x334>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ea:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_GPIO_Init+0x334>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_GPIO_Init+0x334>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_GPIO_Init+0x334>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	f67f ae90 	bls.w	8001148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400
 8001448:	40020800 	.word	0x40020800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40021000 	.word	0x40021000
 8001454:	40021400 	.word	0x40021400
 8001458:	40021800 	.word	0x40021800
 800145c:	40021c00 	.word	0x40021c00
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001496:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001498:	b08f      	sub	sp, #60	; 0x3c
 800149a:	af0a      	add	r7, sp, #40	; 0x28
 800149c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e10f      	b.n	80016c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f005 fe7a 	bl	80071bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2203      	movs	r2, #3
 80014cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fdc1 	bl	800406e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	687e      	ldr	r6, [r7, #4]
 80014f4:	466d      	mov	r5, sp
 80014f6:	f106 0410 	add.w	r4, r6, #16
 80014fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001506:	e885 0003 	stmia.w	r5, {r0, r1}
 800150a:	1d33      	adds	r3, r6, #4
 800150c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f002 fc98 	bl	8003e44 <USB_CoreInit>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0d0      	b.n	80016c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f002 fdaf 	bl	8004090 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e04a      	b.n	80015ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	333d      	adds	r3, #61	; 0x3d
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	333c      	adds	r3, #60	; 0x3c
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	b298      	uxth	r0, r3
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3342      	adds	r3, #66	; 0x42
 8001574:	4602      	mov	r2, r0
 8001576:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	333f      	adds	r3, #63	; 0x3f
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3344      	adds	r3, #68	; 0x44
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3348      	adds	r3, #72	; 0x48
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3350      	adds	r3, #80	; 0x50
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	3301      	adds	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3af      	bcc.n	8001538 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e044      	b.n	8001668 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	3301      	adds	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d3b5      	bcc.n	80015de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	687e      	ldr	r6, [r7, #4]
 800167a:	466d      	mov	r5, sp
 800167c:	f106 0410 	add.w	r4, r6, #16
 8001680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001690:	1d33      	adds	r3, r6, #4
 8001692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f002 fd25 	bl	80040e4 <USB_DevInit>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e00d      	b.n	80016c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fd6d 	bl	80051a0 <USB_DevDisconnect>

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_PCD_Start+0x1c>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e020      	b.n	800172e <HAL_PCD_Start+0x5e>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d109      	bne.n	8001710 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001708:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fc99 	bl	800404c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fd1d 	bl	800515e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001736:	b590      	push	{r4, r7, lr}
 8001738:	b08d      	sub	sp, #52	; 0x34
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fddb 	bl	8005308 <USB_GetMode>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 839d 	bne.w	8001e94 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fd3f 	bl	80051e2 <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8393 	beq.w	8001e92 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fd36 	bl	80051e2 <USB_ReadInterrupts>
 8001776:	4603      	mov	r3, r0
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b02      	cmp	r3, #2
 800177e:	d107      	bne.n	8001790 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f002 0202 	and.w	r2, r2, #2
 800178e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fd24 	bl	80051e2 <USB_ReadInterrupts>
 800179a:	4603      	mov	r3, r0
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d161      	bne.n	8001868 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0210 	bic.w	r2, r2, #16
 80017b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f003 020f 	and.w	r2, r3, #15
 80017c0:	4613      	mov	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	3304      	adds	r3, #4
 80017d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	0c5b      	lsrs	r3, r3, #17
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d124      	bne.n	800182a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d035      	beq.n	8001858 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	6a38      	ldr	r0, [r7, #32]
 8001800:	f003 fb8a 	bl	8004f18 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001810:	441a      	add	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001822:	441a      	add	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	e016      	b.n	8001858 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	0c5b      	lsrs	r3, r3, #17
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	2b06      	cmp	r3, #6
 8001834:	d110      	bne.n	8001858 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800183c:	2208      	movs	r2, #8
 800183e:	4619      	mov	r1, r3
 8001840:	6a38      	ldr	r0, [r7, #32]
 8001842:	f003 fb69 	bl	8004f18 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001852:	441a      	add	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699a      	ldr	r2, [r3, #24]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0210 	orr.w	r2, r2, #16
 8001866:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fcb8 	bl	80051e2 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001878:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800187c:	d16e      	bne.n	800195c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f003 fcbe 	bl	8005208 <USB_ReadDevAllOutEpInterrupt>
 800188c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800188e:	e062      	b.n	8001956 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d057      	beq.n	800194a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fce3 	bl	8005270 <USB_ReadDevOutEPInterrupt>
 80018aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c2:	461a      	mov	r2, r3
 80018c4:	2301      	movs	r3, #1
 80018c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fdb0 	bl	8002430 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e6:	461a      	mov	r2, r3
 80018e8:	2308      	movs	r3, #8
 80018ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 feaa 	bl	8002648 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190a:	461a      	mov	r2, r3
 800190c:	2310      	movs	r3, #16
 800190e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	4413      	add	r3, r2
 8001922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001926:	461a      	mov	r2, r3
 8001928:	2320      	movs	r3, #32
 800192a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001942:	461a      	mov	r2, r3
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	d199      	bne.n	8001890 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fc3e 	bl	80051e2 <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001970:	f040 80c0 	bne.w	8001af4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fc5f 	bl	800523c <USB_ReadDevAllInEpInterrupt>
 800197e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001984:	e0b2      	b.n	8001aec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a7 	beq.w	8001ae0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fc85 	bl	80052ac <USB_ReadDevInEPInterrupt>
 80019a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d057      	beq.n	8001a5e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	2201      	movs	r2, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69f9      	ldr	r1, [r7, #28]
 80019ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019ce:	4013      	ands	r3, r2
 80019d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019de:	461a      	mov	r2, r3
 80019e0:	2301      	movs	r3, #1
 80019e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d132      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3348      	adds	r3, #72	; 0x48
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4403      	add	r3, r0
 8001a0c:	3344      	adds	r3, #68	; 0x44
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4419      	add	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4403      	add	r3, r0
 8001a20:	3348      	adds	r3, #72	; 0x48
 8001a22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d113      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x31c>
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3350      	adds	r3, #80	; 0x50
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f003 fc8d 	bl	800536c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f005 fc3e 	bl	80072da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a74:	461a      	mov	r2, r3
 8001a76:	2308      	movs	r3, #8
 8001a78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a90:	461a      	mov	r2, r3
 8001a92:	2310      	movs	r3, #16
 8001a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aac:	461a      	mov	r2, r3
 8001aae:	2340      	movs	r3, #64	; 0x40
 8001ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2302      	movs	r3, #2
 8001acc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fc1b 	bl	8002316 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f47f af49 	bne.w	8001986 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fb72 	bl	80051e2 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b08:	d122      	bne.n	8001b50 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b30:	2100      	movs	r1, #0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fe26 	bl	8002784 <HAL_PCDEx_LPM_Callback>
 8001b38:	e002      	b.n	8001b40 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f005 fc44 	bl	80073c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fb44 	bl	80051e2 <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b64:	d112      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d102      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f005 fc00 	bl	800737c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b8a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fb26 	bl	80051e2 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba0:	f040 80c7 	bne.w	8001d32 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fbf4 	bl	80043ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc8:	e056      	b.n	8001c78 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bdc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bee:	0151      	lsls	r1, r2, #5
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	440a      	add	r2, r1
 8001bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bfc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c0e:	0151      	lsls	r1, r2, #5
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	440a      	add	r2, r1
 8001c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c42:	0151      	lsls	r1, r2, #5
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	440a      	add	r2, r1
 8001c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c62:	0151      	lsls	r1, r2, #5
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	440a      	add	r2, r1
 8001c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	3301      	adds	r3, #1
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3a3      	bcc.n	8001bca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c90:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cae:	f043 030b 	orr.w	r3, r3, #11
 8001cb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc4:	f043 030b 	orr.w	r3, r3, #11
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	e015      	b.n	8001cf8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cde:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ce2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf2:	f043 030b 	orr.w	r3, r3, #11
 8001cf6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f003 fb25 	bl	800536c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 fa53 	bl	80051e2 <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d46:	d124      	bne.n	8001d92 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fae9 	bl	8005324 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 fb89 	bl	800446e <USB_GetDevSpeed>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681c      	ldr	r4, [r3, #0]
 8001d68:	f001 f958 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8001d6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	4620      	mov	r0, r4
 8001d78:	f002 f8c6 	bl	8003f08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f005 fad4 	bl	800732a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fa23 	bl	80051e2 <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d10a      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f005 fab1 	bl	800730e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f002 0208 	and.w	r2, r2, #8
 8001dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fa0e 	bl	80051e2 <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dd0:	d10f      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f005 fb13 	bl	8007408 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f9f3 	bl	80051e2 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e06:	d10f      	bne.n	8001e28 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f005 fae6 	bl	80073e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 f9d8 	bl	80051e2 <USB_ReadInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3c:	d10a      	bne.n	8001e54 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f005 faf4 	bl	800742c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 f9c2 	bl	80051e2 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d115      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f005 fae4 	bl	8007448 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	e000      	b.n	8001e94 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e92:	bf00      	nop
    }
  }
}
 8001e94:	3734      	adds	r7, #52	; 0x34
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}

08001e9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_PCD_SetAddress+0x1a>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e013      	b.n	8001edc <HAL_PCD_SetAddress+0x42>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 f920 	bl	8005112 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	70fb      	strb	r3, [r7, #3]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	803b      	strh	r3, [r7, #0]
 8001efa:	4613      	mov	r3, r2
 8001efc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da0f      	bge.n	8001f2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 020f 	and.w	r2, r3, #15
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	3338      	adds	r3, #56	; 0x38
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3304      	adds	r3, #4
 8001f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	705a      	strb	r2, [r3, #1]
 8001f28:	e00f      	b.n	8001f4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	3304      	adds	r3, #4
 8001f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f56:	883a      	ldrh	r2, [r7, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	78ba      	ldrb	r2, [r7, #2]
 8001f60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f74:	78bb      	ldrb	r3, [r7, #2]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d102      	bne.n	8001f80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_PCD_EP_Open+0xaa>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e00e      	b.n	8001fac <HAL_PCD_EP_Open+0xc8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fa8b 	bl	80044b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001faa:	7afb      	ldrb	r3, [r7, #11]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da0f      	bge.n	8001fe8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 020f 	and.w	r2, r3, #15
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	3338      	adds	r3, #56	; 0x38
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	705a      	strb	r2, [r3, #1]
 8001fe6:	e00f      	b.n	8002008 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	b2da      	uxtb	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_PCD_EP_Close+0x6e>
 800201e:	2302      	movs	r3, #2
 8002020:	e00e      	b.n	8002040 <HAL_PCD_EP_Close+0x8c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f002 fac9 	bl	80045c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	460b      	mov	r3, r1
 8002056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	7afb      	ldrb	r3, [r7, #11]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2200      	movs	r2, #0
 8002088:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800208a:	7afb      	ldrb	r3, [r7, #11]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	b2da      	uxtb	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	6979      	ldr	r1, [r7, #20]
 80020bc:	f002 fda4 	bl	8004c08 <USB_EP0StartXfer>
 80020c0:	e008      	b.n	80020d4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6979      	ldr	r1, [r7, #20]
 80020d0:	f002 fb56 	bl	8004780 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002100:	681b      	ldr	r3, [r3, #0]
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	460b      	mov	r3, r1
 800211c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	3338      	adds	r3, #56	; 0x38
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2201      	movs	r2, #1
 800214c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214e:	7afb      	ldrb	r3, [r7, #11]
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	b2da      	uxtb	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	6979      	ldr	r1, [r7, #20]
 8002180:	f002 fd42 	bl	8004c08 <USB_EP0StartXfer>
 8002184:	e008      	b.n	8002198 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	6979      	ldr	r1, [r7, #20]
 8002194:	f002 faf4 	bl	8004780 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d901      	bls.n	80021c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e050      	b.n	8002262 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da0f      	bge.n	80021e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	3338      	adds	r3, #56	; 0x38
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	3304      	adds	r3, #4
 80021de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	705a      	strb	r2, [r3, #1]
 80021e6:	e00d      	b.n	8002204 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	3304      	adds	r3, #4
 80021fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_PCD_EP_SetStall+0x82>
 8002220:	2302      	movs	r3, #2
 8002222:	e01e      	b.n	8002262 <HAL_PCD_EP_SetStall+0xc0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	f002 fe99 	bl	8004f6a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	b2d9      	uxtb	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002252:	461a      	mov	r2, r3
 8002254:	f003 f88a 	bl	800536c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 020f 	and.w	r2, r3, #15
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d901      	bls.n	8002288 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e042      	b.n	800230e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da0f      	bge.n	80022b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	3338      	adds	r3, #56	; 0x38
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	3304      	adds	r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	705a      	strb	r2, [r3, #1]
 80022ae:	e00f      	b.n	80022d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_PCD_EP_ClrStall+0x86>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e00e      	b.n	800230e <HAL_PCD_EP_ClrStall+0xa4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 fea1 	bl	8005046 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b08a      	sub	sp, #40	; 0x28
 800231a:	af02      	add	r7, sp, #8
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3338      	adds	r3, #56	; 0x38
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	429a      	cmp	r2, r3
 8002348:	d901      	bls.n	800234e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06c      	b.n	8002428 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	429a      	cmp	r2, r3
 8002362:	d902      	bls.n	800236a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3303      	adds	r3, #3
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002372:	e02b      	b.n	80023cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	429a      	cmp	r2, r3
 8002388:	d902      	bls.n	8002390 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	3303      	adds	r3, #3
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68d9      	ldr	r1, [r3, #12]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4603      	mov	r3, r0
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f002 fd7d 	bl	8004eae <USB_WritePacket>

    ep->xfer_buff  += len;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	441a      	add	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	441a      	add	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d809      	bhi.n	80023f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d203      	bcs.n	80023f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1be      	bne.n	8002374 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d811      	bhi.n	8002426 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	2201      	movs	r2, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	43db      	mvns	r3, r3
 800241c:	6939      	ldr	r1, [r7, #16]
 800241e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002422:	4013      	ands	r3, r2
 8002424:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	333c      	adds	r3, #60	; 0x3c
 8002448:	3304      	adds	r3, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	f040 80a0 	bne.w	80025a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d015      	beq.n	800249e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4a72      	ldr	r2, [pc, #456]	; (8002640 <PCD_EP_OutXfrComplete_int+0x210>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f240 80dd 	bls.w	8002636 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80d7 	beq.w	8002636 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002494:	461a      	mov	r2, r3
 8002496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249a:	6093      	str	r3, [r2, #8]
 800249c:	e0cb      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b4:	461a      	mov	r2, r3
 80024b6:	2320      	movs	r3, #32
 80024b8:	6093      	str	r3, [r2, #8]
 80024ba:	e0bc      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80b7 	bne.w	8002636 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a5d      	ldr	r2, [pc, #372]	; (8002640 <PCD_EP_OutXfrComplete_int+0x210>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d90f      	bls.n	80024f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	461a      	mov	r2, r3
 80024e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ec:	6093      	str	r3, [r2, #8]
 80024ee:	e0a2      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002502:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	0159      	lsls	r1, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	440b      	add	r3, r1
 800250c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002516:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4403      	add	r3, r0
 8002526:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800252a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4403      	add	r3, r0
 800254e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4419      	add	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4403      	add	r3, r0
 8002564:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002568:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d114      	bne.n	800259a <PCD_EP_OutXfrComplete_int+0x16a>
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d108      	bne.n	800259a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002592:	461a      	mov	r2, r3
 8002594:	2101      	movs	r1, #1
 8002596:	f002 fee9 	bl	800536c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f004 fe7f 	bl	80072a4 <HAL_PCD_DataOutStageCallback>
 80025a6:	e046      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4a26      	ldr	r2, [pc, #152]	; (8002644 <PCD_EP_OutXfrComplete_int+0x214>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d124      	bne.n	80025fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c6:	461a      	mov	r2, r3
 80025c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025cc:	6093      	str	r3, [r2, #8]
 80025ce:	e032      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e6:	461a      	mov	r2, r3
 80025e8:	2320      	movs	r3, #32
 80025ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f004 fe56 	bl	80072a4 <HAL_PCD_DataOutStageCallback>
 80025f8:	e01d      	b.n	8002636 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d114      	bne.n	800262a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d108      	bne.n	800262a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002622:	461a      	mov	r2, r3
 8002624:	2100      	movs	r1, #0
 8002626:	f002 fea1 	bl	800536c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	4619      	mov	r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f004 fe37 	bl	80072a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	4f54300a 	.word	0x4f54300a
 8002644:	4f54310a 	.word	0x4f54310a

08002648 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	333c      	adds	r3, #60	; 0x3c
 8002660:	3304      	adds	r3, #4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d90e      	bls.n	800269c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002684:	2b00      	cmp	r3, #0
 8002686:	d009      	beq.n	800269c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002694:	461a      	mov	r2, r3
 8002696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800269a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f004 fdef 	bl	8007280 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d90c      	bls.n	80026c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026bc:	461a      	mov	r2, r3
 80026be:	2101      	movs	r1, #1
 80026c0:	f002 fe54 	bl	800536c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	4f54300a 	.word	0x4f54300a

080026d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
 80026e0:	4613      	mov	r3, r2
 80026e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d107      	bne.n	8002702 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026f2:	883b      	ldrh	r3, [r7, #0]
 80026f4:	0419      	lsls	r1, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002700:	e028      	b.n	8002754 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4413      	add	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e00d      	b.n	8002732 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	3340      	adds	r3, #64	; 0x40
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4413      	add	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	3301      	adds	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	3b01      	subs	r3, #1
 8002738:	429a      	cmp	r2, r3
 800273a:	d3ec      	bcc.n	8002716 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800273c:	883b      	ldrh	r3, [r7, #0]
 800273e:	0418      	lsls	r0, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	3b01      	subs	r3, #1
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	4302      	orrs	r2, r0
 800274c:	3340      	adds	r3, #64	; 0x40
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e264      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d075      	beq.n	80028a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ba:	4ba3      	ldr	r3, [pc, #652]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d00c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c6:	4ba0      	ldr	r3, [pc, #640]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d112      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4b9d      	ldr	r3, [pc, #628]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027de:	d10b      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	4b99      	ldr	r3, [pc, #612]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d05b      	beq.n	80028a4 <HAL_RCC_OscConfig+0x108>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d157      	bne.n	80028a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e23f      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d106      	bne.n	8002810 <HAL_RCC_OscConfig+0x74>
 8002802:	4b91      	ldr	r3, [pc, #580]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a90      	ldr	r2, [pc, #576]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e01d      	b.n	800284c <HAL_RCC_OscConfig+0xb0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x98>
 800281a:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a8a      	ldr	r2, [pc, #552]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a87      	ldr	r2, [pc, #540]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0xb0>
 8002834:	4b84      	ldr	r3, [pc, #528]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a83      	ldr	r2, [pc, #524]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a80      	ldr	r2, [pc, #512]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fb28 	bl	8000ea8 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285c:	f7fe fb24 	bl	8000ea8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e204      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b76      	ldr	r3, [pc, #472]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0xc0>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe fb14 	bl	8000ea8 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe fb10 	bl	8000ea8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1f0      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	4b6c      	ldr	r3, [pc, #432]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0xe8>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d11c      	bne.n	8002904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b5f      	ldr	r3, [pc, #380]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	4b5c      	ldr	r3, [pc, #368]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x152>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1c4      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b56      	ldr	r3, [pc, #344]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4952      	ldr	r1, [pc, #328]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	e03a      	b.n	800297a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <HAL_RCC_OscConfig+0x2b0>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe fac9 	bl	8000ea8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291a:	f7fe fac5 	bl	8000ea8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1a5      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292c:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4940      	ldr	r1, [pc, #256]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e015      	b.n	800297a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <HAL_RCC_OscConfig+0x2b0>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe faa8 	bl	8000ea8 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295c:	f7fe faa4 	bl	8000ea8 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e184      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d030      	beq.n	80029e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_RCC_OscConfig+0x2b4>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe fa88 	bl	8000ea8 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299c:	f7fe fa84 	bl	8000ea8 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e164      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x200>
 80029ba:	e015      	b.n	80029e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x2b4>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fa71 	bl	8000ea8 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe fa6d 	bl	8000ea8 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e14d      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80029de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a0 	beq.w	8002b36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_OscConfig+0x2b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d121      	bne.n	8002a76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_RCC_OscConfig+0x2b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_RCC_OscConfig+0x2b8>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fa33 	bl	8000ea8 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	e011      	b.n	8002a6a <HAL_RCC_OscConfig+0x2ce>
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	42470000 	.word	0x42470000
 8002a50:	42470e80 	.word	0x42470e80
 8002a54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a58:	f7fe fa26 	bl	8000ea8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e106      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b85      	ldr	r3, [pc, #532]	; (8002c80 <HAL_RCC_OscConfig+0x4e4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2f0>
 8002a7e:	4b81      	ldr	r3, [pc, #516]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a80      	ldr	r2, [pc, #512]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	e01c      	b.n	8002ac6 <HAL_RCC_OscConfig+0x32a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d10c      	bne.n	8002aae <HAL_RCC_OscConfig+0x312>
 8002a94:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a7a      	ldr	r2, [pc, #488]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	4b78      	ldr	r3, [pc, #480]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a77      	ldr	r2, [pc, #476]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	e00b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x32a>
 8002aae:	4b75      	ldr	r3, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a74      	ldr	r2, [pc, #464]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aba:	4b72      	ldr	r3, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a71      	ldr	r2, [pc, #452]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d015      	beq.n	8002afa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7fe f9eb 	bl	8000ea8 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe f9e7 	bl	8000ea8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0c5      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aec:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ee      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x33a>
 8002af8:	e014      	b.n	8002b24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fe f9d5 	bl	8000ea8 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe f9d1 	bl	8000ea8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0af      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b18:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ee      	bne.n	8002b02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d105      	bne.n	8002b36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2a:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a55      	ldr	r2, [pc, #340]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 809b 	beq.w	8002c76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d05c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d141      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCC_OscConfig+0x4ec>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe f9a5 	bl	8000ea8 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe f9a1 	bl	8000ea8 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e081      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b74:	4b43      	ldr	r3, [pc, #268]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	019b      	lsls	r3, r3, #6
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	4937      	ldr	r1, [pc, #220]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_OscConfig+0x4ec>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f97a 	bl	8000ea8 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe f976 	bl	8000ea8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e056      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x41c>
 8002bd6:	e04e      	b.n	8002c76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_OscConfig+0x4ec>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe f963 	bl	8000ea8 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe f95f 	bl	8000ea8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e03f      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf8:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x44a>
 8002c04:	e037      	b.n	8002c76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e032      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c12:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <HAL_RCC_OscConfig+0x4e8>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d028      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d121      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d11a      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c42:	4013      	ands	r3, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40007000 	.word	0x40007000
 8002c84:	40023800 	.word	0x40023800
 8002c88:	42470060 	.word	0x42470060

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0cc      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d90c      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d044      	beq.n	8002dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d119      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e067      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6a:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 0203 	bic.w	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4934      	ldr	r1, [pc, #208]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d7c:	f7fe f894 	bl	8000ea8 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d84:	f7fe f890 	bl	8000ea8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e04f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 020c 	and.w	r2, r3, #12
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d1eb      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d20c      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e032      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4916      	ldr	r1, [pc, #88]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e12:	f000 f821 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e16:	4602      	mov	r2, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	490a      	ldr	r1, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	5ccb      	ldrb	r3, [r1, r3]
 8002e26:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fff4 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023c00 	.word	0x40023c00
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08008158 	.word	0x08008158
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e70:	4b67      	ldr	r3, [pc, #412]	; (8003010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d00d      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x40>
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	f200 80bd 	bhi.w	8002ffc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x34>
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e8a:	e0b7      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e8e:	60bb      	str	r3, [r7, #8]
       break;
 8002e90:	e0b7      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e92:	4b61      	ldr	r3, [pc, #388]	; (8003018 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e94:	60bb      	str	r3, [r7, #8]
      break;
 8002e96:	e0b4      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e98:	4b5d      	ldr	r3, [pc, #372]	; (8003010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	; (8003010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d04d      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eae:	4b58      	ldr	r3, [pc, #352]	; (8003010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	ea02 0800 	and.w	r8, r2, r0
 8002ec6:	ea03 0901 	and.w	r9, r3, r1
 8002eca:	4640      	mov	r0, r8
 8002ecc:	4649      	mov	r1, r9
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	014b      	lsls	r3, r1, #5
 8002ed8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002edc:	0142      	lsls	r2, r0, #5
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	ebb0 0008 	subs.w	r0, r0, r8
 8002ee6:	eb61 0109 	sbc.w	r1, r1, r9
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	018b      	lsls	r3, r1, #6
 8002ef4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ef8:	0182      	lsls	r2, r0, #6
 8002efa:	1a12      	subs	r2, r2, r0
 8002efc:	eb63 0301 	sbc.w	r3, r3, r1
 8002f00:	f04f 0000 	mov.w	r0, #0
 8002f04:	f04f 0100 	mov.w	r1, #0
 8002f08:	00d9      	lsls	r1, r3, #3
 8002f0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f0e:	00d0      	lsls	r0, r2, #3
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	eb12 0208 	adds.w	r2, r2, r8
 8002f18:	eb43 0309 	adc.w	r3, r3, r9
 8002f1c:	f04f 0000 	mov.w	r0, #0
 8002f20:	f04f 0100 	mov.w	r1, #0
 8002f24:	0259      	lsls	r1, r3, #9
 8002f26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f2a:	0250      	lsls	r0, r2, #9
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f7fd f9a0 	bl	8000280 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	e04a      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	461a      	mov	r2, r3
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	ea02 0400 	and.w	r4, r2, r0
 8002f62:	ea03 0501 	and.w	r5, r3, r1
 8002f66:	4620      	mov	r0, r4
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	014b      	lsls	r3, r1, #5
 8002f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f78:	0142      	lsls	r2, r0, #5
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	1b00      	subs	r0, r0, r4
 8002f80:	eb61 0105 	sbc.w	r1, r1, r5
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	018b      	lsls	r3, r1, #6
 8002f8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f92:	0182      	lsls	r2, r0, #6
 8002f94:	1a12      	subs	r2, r2, r0
 8002f96:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	00d9      	lsls	r1, r3, #3
 8002fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fa8:	00d0      	lsls	r0, r2, #3
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	1912      	adds	r2, r2, r4
 8002fb0:	eb45 0303 	adc.w	r3, r5, r3
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f04f 0100 	mov.w	r1, #0
 8002fbc:	0299      	lsls	r1, r3, #10
 8002fbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fc2:	0290      	lsls	r0, r2, #10
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	f7fd f954 	bl	8000280 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	3301      	adds	r3, #1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	60bb      	str	r3, [r7, #8]
      break;
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ffe:	60bb      	str	r3, [r7, #8]
      break;
 8003000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003002:	68bb      	ldr	r3, [r7, #8]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	00f42400 	.word	0x00f42400
 8003018:	007a1200 	.word	0x007a1200

0800301c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_RCC_GetHCLKFreq+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000

08003034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e07b      	b.n	800313e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003056:	d009      	beq.n	800306c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
 800305e:	e005      	b.n	800306c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fd5e 	bl	8000b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	ea42 0103 	orr.w	r1, r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0104 	and.w	r1, r3, #4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	f003 0210 	and.w	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e041      	b.n	80031dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fd fd33 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f000 fad1 	bl	800372c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e041      	b.n	800327a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f839 	bl	8003282 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f000 fa82 	bl	800372c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_TIM_PWM_Start+0x24>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e022      	b.n	8003302 <HAL_TIM_PWM_Start+0x6a>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d109      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x3e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e015      	b.n	8003302 <HAL_TIM_PWM_Start+0x6a>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d109      	bne.n	80032f0 <HAL_TIM_PWM_Start+0x58>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e008      	b.n	8003302 <HAL_TIM_PWM_Start+0x6a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07c      	b.n	8003404 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <HAL_TIM_PWM_Start+0x82>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003318:	e013      	b.n	8003342 <HAL_TIM_PWM_Start+0xaa>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d104      	bne.n	800332a <HAL_TIM_PWM_Start+0x92>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003328:	e00b      	b.n	8003342 <HAL_TIM_PWM_Start+0xaa>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d104      	bne.n	800333a <HAL_TIM_PWM_Start+0xa2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003338:	e003      	b.n	8003342 <HAL_TIM_PWM_Start+0xaa>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2201      	movs	r2, #1
 8003348:	6839      	ldr	r1, [r7, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fcd8 	bl	8003d00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2d      	ldr	r2, [pc, #180]	; (800340c <HAL_TIM_PWM_Start+0x174>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_TIM_PWM_Start+0xcc>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <HAL_TIM_PWM_Start+0x178>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_TIM_PWM_Start+0xd0>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_TIM_PWM_Start+0xd2>
 8003368:	2300      	movs	r3, #0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a22      	ldr	r2, [pc, #136]	; (800340c <HAL_TIM_PWM_Start+0x174>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_TIM_PWM_Start+0x136>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d01d      	beq.n	80033ce <HAL_TIM_PWM_Start+0x136>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <HAL_TIM_PWM_Start+0x17c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_TIM_PWM_Start+0x136>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_TIM_PWM_Start+0x180>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_TIM_PWM_Start+0x136>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_TIM_PWM_Start+0x184>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_TIM_PWM_Start+0x136>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a16      	ldr	r2, [pc, #88]	; (8003410 <HAL_TIM_PWM_Start+0x178>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_TIM_PWM_Start+0x136>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_TIM_PWM_Start+0x188>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_TIM_PWM_Start+0x136>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_TIM_PWM_Start+0x18c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d111      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d010      	beq.n	8003402 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f0:	e007      	b.n	8003402 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40010000 	.word	0x40010000
 8003410:	40010400 	.word	0x40010400
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40014000 	.word	0x40014000
 8003424:	40001800 	.word	0x40001800

08003428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800343e:	2302      	movs	r3, #2
 8003440:	e0ac      	b.n	800359c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b0c      	cmp	r3, #12
 800344e:	f200 809f 	bhi.w	8003590 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	0800348d 	.word	0x0800348d
 800345c:	08003591 	.word	0x08003591
 8003460:	08003591 	.word	0x08003591
 8003464:	08003591 	.word	0x08003591
 8003468:	080034cd 	.word	0x080034cd
 800346c:	08003591 	.word	0x08003591
 8003470:	08003591 	.word	0x08003591
 8003474:	08003591 	.word	0x08003591
 8003478:	0800350f 	.word	0x0800350f
 800347c:	08003591 	.word	0x08003591
 8003480:	08003591 	.word	0x08003591
 8003484:	08003591 	.word	0x08003591
 8003488:	0800354f 	.word	0x0800354f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f9ea 	bl	800386c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0204 	bic.w	r2, r2, #4
 80034b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6999      	ldr	r1, [r3, #24]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	619a      	str	r2, [r3, #24]
      break;
 80034ca:	e062      	b.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa3a 	bl	800394c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6999      	ldr	r1, [r3, #24]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]
      break;
 800350c:	e041      	b.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fa8f 	bl	8003a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0208 	orr.w	r2, r2, #8
 8003528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0204 	bic.w	r2, r2, #4
 8003538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69d9      	ldr	r1, [r3, #28]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	61da      	str	r2, [r3, #28]
      break;
 800354c:	e021      	b.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fae3 	bl	8003b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69d9      	ldr	r1, [r3, #28]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	021a      	lsls	r2, r3, #8
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	61da      	str	r2, [r3, #28]
      break;
 800358e:	e000      	b.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_TIM_ConfigClockSource+0x18>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e0b3      	b.n	8003724 <HAL_TIM_ConfigClockSource+0x180>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f4:	d03e      	beq.n	8003674 <HAL_TIM_ConfigClockSource+0xd0>
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	f200 8087 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x168>
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003602:	f000 8085 	beq.w	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	d87f      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x168>
 800360c:	2b70      	cmp	r3, #112	; 0x70
 800360e:	d01a      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0xa2>
 8003610:	2b70      	cmp	r3, #112	; 0x70
 8003612:	d87b      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x168>
 8003614:	2b60      	cmp	r3, #96	; 0x60
 8003616:	d050      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x116>
 8003618:	2b60      	cmp	r3, #96	; 0x60
 800361a:	d877      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x168>
 800361c:	2b50      	cmp	r3, #80	; 0x50
 800361e:	d03c      	beq.n	800369a <HAL_TIM_ConfigClockSource+0xf6>
 8003620:	2b50      	cmp	r3, #80	; 0x50
 8003622:	d873      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x168>
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d058      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x136>
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d86f      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x168>
 800362c:	2b30      	cmp	r3, #48	; 0x30
 800362e:	d064      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x156>
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d86b      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x168>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d060      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x156>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d867      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x168>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05c      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x156>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d05a      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003644:	e062      	b.n	800370c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f000 fb33 	bl	8003cc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003668:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	609a      	str	r2, [r3, #8]
      break;
 8003672:	e04e      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f000 fb1c 	bl	8003cc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003696:	609a      	str	r2, [r3, #8]
      break;
 8003698:	e03b      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f000 fa90 	bl	8003bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2150      	movs	r1, #80	; 0x50
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fae9 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80036b8:	e02b      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f000 faaf 	bl	8003c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2160      	movs	r1, #96	; 0x60
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fad9 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80036d8:	e01b      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 fa70 	bl	8003bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2140      	movs	r1, #64	; 0x40
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fac9 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80036f8:	e00b      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f000 fac0 	bl	8003c8a <TIM_ITRx_SetConfig>
        break;
 800370a:	e002      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800370c:	bf00      	nop
 800370e:	e000      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003710:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a40      	ldr	r2, [pc, #256]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d00f      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3d      	ldr	r2, [pc, #244]	; (8003844 <TIM_Base_SetConfig+0x118>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00b      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <TIM_Base_SetConfig+0x11c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3b      	ldr	r2, [pc, #236]	; (800384c <TIM_Base_SetConfig+0x120>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3a      	ldr	r2, [pc, #232]	; (8003850 <TIM_Base_SetConfig+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d108      	bne.n	800377e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d02b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d027      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <TIM_Base_SetConfig+0x118>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d023      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <TIM_Base_SetConfig+0x11c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01f      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <TIM_Base_SetConfig+0x120>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a29      	ldr	r2, [pc, #164]	; (8003850 <TIM_Base_SetConfig+0x124>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d017      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a28      	ldr	r2, [pc, #160]	; (8003854 <TIM_Base_SetConfig+0x128>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a27      	ldr	r2, [pc, #156]	; (8003858 <TIM_Base_SetConfig+0x12c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00f      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_Base_SetConfig+0x130>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a25      	ldr	r2, [pc, #148]	; (8003860 <TIM_Base_SetConfig+0x134>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a24      	ldr	r2, [pc, #144]	; (8003864 <TIM_Base_SetConfig+0x138>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a23      	ldr	r2, [pc, #140]	; (8003868 <TIM_Base_SetConfig+0x13c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0xf8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <TIM_Base_SetConfig+0x124>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d103      	bne.n	800382c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	615a      	str	r2, [r3, #20]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800
 8003860:	40001800 	.word	0x40001800
 8003864:	40001c00 	.word	0x40001c00
 8003868:	40002000 	.word	0x40002000

0800386c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f023 0201 	bic.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 0302 	bic.w	r3, r3, #2
 80038b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a20      	ldr	r2, [pc, #128]	; (8003944 <TIM_OC1_SetConfig+0xd8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_OC1_SetConfig+0x64>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <TIM_OC1_SetConfig+0xdc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10c      	bne.n	80038ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0308 	bic.w	r3, r3, #8
 80038d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 0304 	bic.w	r3, r3, #4
 80038e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a15      	ldr	r2, [pc, #84]	; (8003944 <TIM_OC1_SetConfig+0xd8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_OC1_SetConfig+0x8e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <TIM_OC1_SetConfig+0xdc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d111      	bne.n	800391e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	621a      	str	r2, [r3, #32]
}
 8003938:	bf00      	nop
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40010000 	.word	0x40010000
 8003948:	40010400 	.word	0x40010400

0800394c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0210 	bic.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0320 	bic.w	r3, r3, #32
 8003996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a22      	ldr	r2, [pc, #136]	; (8003a30 <TIM_OC2_SetConfig+0xe4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_OC2_SetConfig+0x68>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <TIM_OC2_SetConfig+0xe8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10d      	bne.n	80039d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <TIM_OC2_SetConfig+0xe4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_OC2_SetConfig+0x94>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <TIM_OC2_SetConfig+0xe8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d113      	bne.n	8003a08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40010400 	.word	0x40010400

08003a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <TIM_OC3_SetConfig+0xe0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_OC3_SetConfig+0x66>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <TIM_OC3_SetConfig+0xe4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10d      	bne.n	8003aba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <TIM_OC3_SetConfig+0xe0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_OC3_SetConfig+0x92>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <TIM_OC3_SetConfig+0xe4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d113      	bne.n	8003af2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	40010400 	.word	0x40010400

08003b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	031b      	lsls	r3, r3, #12
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <TIM_OC4_SetConfig+0xa4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_OC4_SetConfig+0x68>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a11      	ldr	r2, [pc, #68]	; (8003bc8 <TIM_OC4_SetConfig+0xa8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d109      	bne.n	8003b9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40010400 	.word	0x40010400

08003bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 030a 	bic.w	r3, r3, #10
 8003c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0210 	bic.w	r2, r3, #16
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f043 0307 	orr.w	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	021a      	lsls	r2, r3, #8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	2201      	movs	r2, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1a      	ldr	r2, [r3, #32]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e05a      	b.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d01d      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10c      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40010400 	.word	0x40010400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40001800 	.word	0x40001800

08003e44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e44:	b084      	sub	sp, #16
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	f107 001c 	add.w	r0, r7, #28
 8003e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d122      	bne.n	8003ea2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d105      	bne.n	8003e96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f001 fac6 	bl	8005428 <USB_CoreReset>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e01a      	b.n	8003ed8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f001 faba 	bl	8005428 <USB_CoreReset>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8003eca:	e005      	b.n	8003ed8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10b      	bne.n	8003ef6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f043 0206 	orr.w	r2, r3, #6
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f02:	b004      	add	sp, #16
 8003f04:	4770      	bx	lr
	...

08003f08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	4613      	mov	r3, r2
 8003f14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d165      	bne.n	8003fe8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4a41      	ldr	r2, [pc, #260]	; (8004024 <USB_SetTurnaroundTime+0x11c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d906      	bls.n	8003f32 <USB_SetTurnaroundTime+0x2a>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4a40      	ldr	r2, [pc, #256]	; (8004028 <USB_SetTurnaroundTime+0x120>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d202      	bcs.n	8003f32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f2c:	230f      	movs	r3, #15
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e062      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <USB_SetTurnaroundTime+0x120>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d306      	bcc.n	8003f48 <USB_SetTurnaroundTime+0x40>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4a3b      	ldr	r2, [pc, #236]	; (800402c <USB_SetTurnaroundTime+0x124>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d202      	bcs.n	8003f48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f42:	230e      	movs	r3, #14
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e057      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4a38      	ldr	r2, [pc, #224]	; (800402c <USB_SetTurnaroundTime+0x124>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d306      	bcc.n	8003f5e <USB_SetTurnaroundTime+0x56>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4a37      	ldr	r2, [pc, #220]	; (8004030 <USB_SetTurnaroundTime+0x128>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d202      	bcs.n	8003f5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f58:	230d      	movs	r3, #13
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e04c      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4a33      	ldr	r2, [pc, #204]	; (8004030 <USB_SetTurnaroundTime+0x128>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d306      	bcc.n	8003f74 <USB_SetTurnaroundTime+0x6c>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4a32      	ldr	r2, [pc, #200]	; (8004034 <USB_SetTurnaroundTime+0x12c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d802      	bhi.n	8003f74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f6e:	230c      	movs	r3, #12
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e041      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <USB_SetTurnaroundTime+0x12c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d906      	bls.n	8003f8a <USB_SetTurnaroundTime+0x82>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <USB_SetTurnaroundTime+0x130>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d802      	bhi.n	8003f8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f84:	230b      	movs	r3, #11
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e036      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <USB_SetTurnaroundTime+0x130>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d906      	bls.n	8003fa0 <USB_SetTurnaroundTime+0x98>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <USB_SetTurnaroundTime+0x134>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d802      	bhi.n	8003fa0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e02b      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a26      	ldr	r2, [pc, #152]	; (800403c <USB_SetTurnaroundTime+0x134>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d906      	bls.n	8003fb6 <USB_SetTurnaroundTime+0xae>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a25      	ldr	r2, [pc, #148]	; (8004040 <USB_SetTurnaroundTime+0x138>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d202      	bcs.n	8003fb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003fb0:	2309      	movs	r3, #9
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e020      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4a21      	ldr	r2, [pc, #132]	; (8004040 <USB_SetTurnaroundTime+0x138>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d306      	bcc.n	8003fcc <USB_SetTurnaroundTime+0xc4>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	; (8004044 <USB_SetTurnaroundTime+0x13c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d802      	bhi.n	8003fcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e015      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <USB_SetTurnaroundTime+0x13c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d906      	bls.n	8003fe2 <USB_SetTurnaroundTime+0xda>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <USB_SetTurnaroundTime+0x140>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d202      	bcs.n	8003fe2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fdc:	2307      	movs	r3, #7
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e00a      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fe2:	2306      	movs	r3, #6
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e007      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fee:	2309      	movs	r3, #9
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e001      	b.n	8003ff8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ff4:	2309      	movs	r3, #9
 8003ff6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	029b      	lsls	r3, r3, #10
 800400c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	00d8acbf 	.word	0x00d8acbf
 8004028:	00e4e1c0 	.word	0x00e4e1c0
 800402c:	00f42400 	.word	0x00f42400
 8004030:	01067380 	.word	0x01067380
 8004034:	011a499f 	.word	0x011a499f
 8004038:	01312cff 	.word	0x01312cff
 800403c:	014ca43f 	.word	0x014ca43f
 8004040:	016e3600 	.word	0x016e3600
 8004044:	01a6ab1f 	.word	0x01a6ab1f
 8004048:	01e84800 	.word	0x01e84800

0800404c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f023 0201 	bic.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d106      	bne.n	80040bc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e00b      	b.n	80040d4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
 80040ce:	e001      	b.n	80040d4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e003      	b.n	80040dc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80040d4:	2032      	movs	r0, #50	; 0x32
 80040d6:	f7fc fef3 	bl	8000ec0 <HAL_Delay>

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040e4:	b084      	sub	sp, #16
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e009      	b.n	8004118 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	3340      	adds	r3, #64	; 0x40
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	2200      	movs	r2, #0
 8004110:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3301      	adds	r3, #1
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0e      	cmp	r3, #14
 800411c:	d9f2      	bls.n	8004104 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11c      	bne.n	800415e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004132:	f043 0302 	orr.w	r3, r3, #2
 8004136:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
 800415c:	e00b      	b.n	8004176 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800417c:	461a      	mov	r2, r3
 800417e:	2300      	movs	r3, #0
 8004180:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004188:	4619      	mov	r1, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004190:	461a      	mov	r2, r3
 8004192:	680b      	ldr	r3, [r1, #0]
 8004194:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	2b01      	cmp	r3, #1
 800419a:	d10c      	bne.n	80041b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041a2:	2100      	movs	r1, #0
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f949 	bl	800443c <USB_SetDevSpeed>
 80041aa:	e008      	b.n	80041be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041ac:	2101      	movs	r1, #1
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f944 	bl	800443c <USB_SetDevSpeed>
 80041b4:	e003      	b.n	80041be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041b6:	2103      	movs	r1, #3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f93f 	bl	800443c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041be:	2110      	movs	r1, #16
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f8f3 	bl	80043ac <USB_FlushTxFifo>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f911 	bl	80043f8 <USB_FlushRxFifo>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e6:	461a      	mov	r2, r3
 80041e8:	2300      	movs	r3, #0
 80041ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	461a      	mov	r2, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	461a      	mov	r2, r3
 8004200:	2300      	movs	r3, #0
 8004202:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	e043      	b.n	8004292 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800421c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004220:	d118      	bne.n	8004254 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e013      	b.n	8004266 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	461a      	mov	r2, r3
 800424c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e008      	b.n	8004266 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	461a      	mov	r2, r3
 8004262:	2300      	movs	r3, #0
 8004264:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004272:	461a      	mov	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004284:	461a      	mov	r2, r3
 8004286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800428a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3301      	adds	r3, #1
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d3b7      	bcc.n	800420a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e043      	b.n	8004328 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b6:	d118      	bne.n	80042ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	461a      	mov	r2, r3
 80042cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e013      	b.n	80042fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	461a      	mov	r2, r3
 80042e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	e008      	b.n	80042fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431a:	461a      	mov	r2, r3
 800431c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	3301      	adds	r3, #1
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	429a      	cmp	r2, r3
 800432e:	d3b7      	bcc.n	80042a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004342:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004350:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f043 0210 	orr.w	r2, r3, #16
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <USB_DevInit+0x2c4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f043 0208 	orr.w	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d107      	bne.n	8004398 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004390:	f043 0304 	orr.w	r3, r3, #4
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043a4:	b004      	add	sp, #16
 80043a6:	4770      	bx	lr
 80043a8:	803c3800 	.word	0x803c3800

080043ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3301      	adds	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <USB_FlushTxFifo+0x48>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d0f0      	beq.n	80043c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	00030d40 	.word	0x00030d40

080043f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2210      	movs	r2, #16
 8004408:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <USB_FlushRxFifo+0x40>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e006      	b.n	800442a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d0f0      	beq.n	800440a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	00030d40 	.word	0x00030d40

0800443c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0306 	and.w	r3, r3, #6
 8004486:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d102      	bne.n	8004494 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800448e:	2300      	movs	r3, #0
 8004490:	75fb      	strb	r3, [r7, #23]
 8004492:	e00a      	b.n	80044aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d002      	beq.n	80044a0 <USB_GetDevSpeed+0x32>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b06      	cmp	r3, #6
 800449e:	d102      	bne.n	80044a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044a0:	2302      	movs	r3, #2
 80044a2:	75fb      	strb	r3, [r7, #23]
 80044a4:	e001      	b.n	80044aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044a6:	230f      	movs	r3, #15
 80044a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	785b      	ldrb	r3, [r3, #1]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d13a      	bne.n	800454a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	2101      	movs	r1, #1
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	68f9      	ldr	r1, [r7, #12]
 80044ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d155      	bne.n	80045b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	78db      	ldrb	r3, [r3, #3]
 8004526:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004528:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	059b      	lsls	r3, r3, #22
 800452e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004530:	4313      	orrs	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	e036      	b.n	80045b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	2101      	movs	r1, #1
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004568:	4313      	orrs	r3, r2
 800456a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11a      	bne.n	80045b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	78db      	ldrb	r3, [r3, #3]
 800459c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800459e:	430b      	orrs	r3, r1
 80045a0:	4313      	orrs	r3, r2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d161      	bne.n	80046a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045fa:	d11f      	bne.n	800463c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800461a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800463a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	b29b      	uxth	r3, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465c:	4013      	ands	r3, r2
 800465e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	2101      	movs	r1, #1
 8004672:	fa01 f303 	lsl.w	r3, r1, r3
 8004676:	b29b      	uxth	r3, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004680:	4013      	ands	r3, r2
 8004682:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	0159      	lsls	r1, r3, #5
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	440b      	add	r3, r1
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	4619      	mov	r1, r3
 80046a0:	4b35      	ldr	r3, [pc, #212]	; (8004778 <USB_DeactivateEndpoint+0x1b0>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]
 80046a6:	e060      	b.n	800476a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046be:	d11f      	bne.n	8004700 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	0151      	lsls	r1, r2, #5
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	440a      	add	r2, r1
 80046d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	2101      	movs	r1, #1
 8004712:	fa01 f303 	lsl.w	r3, r1, r3
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	43db      	mvns	r3, r3
 800471a:	68f9      	ldr	r1, [r7, #12]
 800471c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004720:	4013      	ands	r3, r2
 8004722:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	2101      	movs	r1, #1
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	43db      	mvns	r3, r3
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004744:	4013      	ands	r3, r2
 8004746:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	0159      	lsls	r1, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	440b      	add	r3, r1
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	4619      	mov	r1, r3
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <USB_DeactivateEndpoint+0x1b4>)
 8004766:	4013      	ands	r3, r2
 8004768:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	ec337800 	.word	0xec337800
 800477c:	eff37800 	.word	0xeff37800

08004780 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 815c 	bne.w	8004a5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d132      	bne.n	8004810 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	440a      	add	r2, r1
 8004804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004808:	0cdb      	lsrs	r3, r3, #19
 800480a:	04db      	lsls	r3, r3, #19
 800480c:	6113      	str	r3, [r2, #16]
 800480e:	e074      	b.n	80048fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482a:	0cdb      	lsrs	r3, r3, #19
 800482c:	04db      	lsls	r3, r3, #19
 800482e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800484e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6959      	ldr	r1, [r3, #20]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	440b      	add	r3, r1
 800486c:	1e59      	subs	r1, r3, #1
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	fbb1 f3f3 	udiv	r3, r1, r3
 8004876:	04d9      	lsls	r1, r3, #19
 8004878:	4b9d      	ldr	r3, [pc, #628]	; (8004af0 <USB_EPStartXfer+0x370>)
 800487a:	400b      	ands	r3, r1
 800487c:	69b9      	ldr	r1, [r7, #24]
 800487e:	0148      	lsls	r0, r1, #5
 8004880:	69f9      	ldr	r1, [r7, #28]
 8004882:	4401      	add	r1, r0
 8004884:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004888:	4313      	orrs	r3, r2
 800488a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a2:	69b9      	ldr	r1, [r7, #24]
 80048a4:	0148      	lsls	r0, r1, #5
 80048a6:	69f9      	ldr	r1, [r7, #28]
 80048a8:	4401      	add	r1, r0
 80048aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048ae:	4313      	orrs	r3, r2
 80048b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	78db      	ldrb	r3, [r3, #3]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d11f      	bne.n	80048fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d14b      	bne.n	8004998 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	461a      	mov	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	78db      	ldrb	r3, [r3, #3]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d128      	bne.n	8004976 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d110      	bne.n	8004956 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	e00f      	b.n	8004976 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004974:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004990:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e12f      	b.n	8004bf8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	78db      	ldrb	r3, [r3, #3]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d015      	beq.n	80049ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8117 	beq.w	8004bf8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	69f9      	ldr	r1, [r7, #28]
 80049e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e6:	4313      	orrs	r3, r2
 80049e8:	634b      	str	r3, [r1, #52]	; 0x34
 80049ea:	e105      	b.n	8004bf8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d110      	bne.n	8004a1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	e00f      	b.n	8004a3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	68d9      	ldr	r1, [r3, #12]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	b298      	uxth	r0, r3
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	4603      	mov	r3, r0
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fa2b 	bl	8004eae <USB_WritePacket>
 8004a58:	e0ce      	b.n	8004bf8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a74:	0cdb      	lsrs	r3, r3, #19
 8004a76:	04db      	lsls	r3, r3, #19
 8004a78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d126      	bne.n	8004af4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	0148      	lsls	r0, r1, #5
 8004ac0:	69f9      	ldr	r1, [r7, #28]
 8004ac2:	4401      	add	r1, r0
 8004ac4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aea:	6113      	str	r3, [r2, #16]
 8004aec:	e036      	b.n	8004b5c <USB_EPStartXfer+0x3dc>
 8004aee:	bf00      	nop
 8004af0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	1e5a      	subs	r2, r3, #1
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	8afb      	ldrh	r3, [r7, #22]
 8004b1a:	04d9      	lsls	r1, r3, #19
 8004b1c:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <USB_EPStartXfer+0x484>)
 8004b1e:	400b      	ands	r3, r1
 8004b20:	69b9      	ldr	r1, [r7, #24]
 8004b22:	0148      	lsls	r0, r1, #5
 8004b24:	69f9      	ldr	r1, [r7, #28]
 8004b26:	4401      	add	r1, r0
 8004b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	8af9      	ldrh	r1, [r7, #22]
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b4c:	69b9      	ldr	r1, [r7, #24]
 8004b4e:	0148      	lsls	r0, r1, #5
 8004b50:	69f9      	ldr	r1, [r7, #28]
 8004b52:	4401      	add	r1, r0
 8004b54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10d      	bne.n	8004b7e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	68d9      	ldr	r1, [r3, #12]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	78db      	ldrb	r3, [r3, #3]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d128      	bne.n	8004bd8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d110      	bne.n	8004bb8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e00f      	b.n	8004bd8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	1ff80000 	.word	0x1ff80000

08004c08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 80cd 	bne.w	8004dc4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d132      	bne.n	8004c98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c90:	0cdb      	lsrs	r3, r3, #19
 8004c92:	04db      	lsls	r3, r3, #19
 8004c94:	6113      	str	r3, [r2, #16]
 8004c96:	e04e      	b.n	8004d36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb2:	0cdb      	lsrs	r3, r3, #19
 8004cb4:	04db      	lsls	r3, r3, #19
 8004cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	0151      	lsls	r1, r2, #5
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	440a      	add	r2, r1
 8004cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d903      	bls.n	8004cf0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d26:	6939      	ldr	r1, [r7, #16]
 8004d28:	0148      	lsls	r0, r1, #5
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	4401      	add	r1, r0
 8004d2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d32:	4313      	orrs	r3, r2
 8004d34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d11e      	bne.n	8004d7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	461a      	mov	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e092      	b.n	8004ea0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d07e      	beq.n	8004ea0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	2101      	movs	r1, #1
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	634b      	str	r3, [r1, #52]	; 0x34
 8004dc2:	e06d      	b.n	8004ea0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dde:	0cdb      	lsrs	r3, r3, #19
 8004de0:	04db      	lsls	r3, r3, #19
 8004de2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e06:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	0148      	lsls	r0, r1, #5
 8004e52:	6979      	ldr	r1, [r7, #20]
 8004e54:	4401      	add	r1, r0
 8004e56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d10d      	bne.n	8004e80 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	68d9      	ldr	r1, [r3, #12]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	460a      	mov	r2, r1
 8004e7e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b089      	sub	sp, #36	; 0x24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	461a      	mov	r2, r3
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	71fb      	strb	r3, [r7, #7]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004ecc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d11a      	bne.n	8004f0a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ed4:	88bb      	ldrh	r3, [r7, #4]
 8004ed6:	3303      	adds	r3, #3
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	e00f      	b.n	8004f02 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	031a      	lsls	r2, r3, #12
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eee:	461a      	mov	r2, r3
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	3301      	adds	r3, #1
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d3eb      	bcc.n	8004ee2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3724      	adds	r7, #36	; 0x24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	3303      	adds	r3, #3
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	e00b      	b.n	8004f54 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61bb      	str	r3, [r7, #24]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d3ef      	bcc.n	8004f3c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3724      	adds	r7, #36	; 0x24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d12c      	bne.n	8004fe0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	db12      	blt.n	8004fbe <USB_EPSetStall+0x54>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00f      	beq.n	8004fbe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fbc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e02b      	b.n	8005038 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	db12      	blt.n	8005018 <USB_EPSetStall+0xae>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00f      	beq.n	8005018 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	440a      	add	r2, r1
 800500e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005012:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005016:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	0151      	lsls	r1, r2, #5
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	440a      	add	r2, r1
 800502e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d128      	bne.n	80050b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005080:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d003      	beq.n	8005092 <USB_EPClearStall+0x4c>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	78db      	ldrb	r3, [r3, #3]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d138      	bne.n	8005104 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e027      	b.n	8005104 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d003      	beq.n	80050e4 <USB_EPClearStall+0x9e>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	78db      	ldrb	r3, [r3, #3]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d10f      	bne.n	8005104 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005102:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	460b      	mov	r3, r1
 800511c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005130:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005134:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005178:	f023 0303 	bic.w	r3, r3, #3
 800517c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518c:	f023 0302 	bic.w	r3, r3, #2
 8005190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ce:	f043 0302 	orr.w	r3, r3, #2
 80051d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4013      	ands	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	0c1b      	lsrs	r3, r3, #16
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4013      	ands	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	b29b      	uxth	r3, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800529e:	68bb      	ldr	r3, [r7, #8]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	01db      	lsls	r3, r3, #7
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4013      	ands	r3, r2
 80052f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052fa:	68bb      	ldr	r3, [r7, #8]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0301 	and.w	r3, r3, #1
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005342:	f023 0307 	bic.w	r3, r3, #7
 8005346:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	460b      	mov	r3, r1
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	333c      	adds	r3, #60	; 0x3c
 8005382:	3304      	adds	r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4a26      	ldr	r2, [pc, #152]	; (8005424 <USB_EP0_OutStart+0xb8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d90a      	bls.n	80053a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a0:	d101      	bne.n	80053a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e037      	b.n	8005416 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d4:	f043 0318 	orr.w	r3, r3, #24
 80053d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80053ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053ee:	7afb      	ldrb	r3, [r7, #11]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d10f      	bne.n	8005414 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	461a      	mov	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	4f54300a 	.word	0x4f54300a

08005428 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4a13      	ldr	r2, [pc, #76]	; (800548c <USB_CoreReset+0x64>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e01b      	b.n	800547e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	daf2      	bge.n	8005434 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f043 0201 	orr.w	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <USB_CoreReset+0x64>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e006      	b.n	800547e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d0f0      	beq.n	800545e <USB_CoreReset+0x36>

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	00030d40 	.word	0x00030d40

08005490 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800549c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054a0:	f002 f96a 	bl	8007778 <USBD_static_malloc>
 80054a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80054b4:	2302      	movs	r3, #2
 80054b6:	e066      	b.n	8005586 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	7c1b      	ldrb	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d119      	bne.n	80054fc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054cc:	2202      	movs	r2, #2
 80054ce:	2181      	movs	r1, #129	; 0x81
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f002 f82e 	bl	8007532 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054e0:	2202      	movs	r2, #2
 80054e2:	2101      	movs	r1, #1
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f002 f824 	bl	8007532 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2210      	movs	r2, #16
 80054f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80054fa:	e016      	b.n	800552a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054fc:	2340      	movs	r3, #64	; 0x40
 80054fe:	2202      	movs	r2, #2
 8005500:	2181      	movs	r1, #129	; 0x81
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 f815 	bl	8007532 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800550e:	2340      	movs	r3, #64	; 0x40
 8005510:	2202      	movs	r2, #2
 8005512:	2101      	movs	r1, #1
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f002 f80c 	bl	8007532 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2210      	movs	r2, #16
 8005526:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800552a:	2308      	movs	r3, #8
 800552c:	2203      	movs	r2, #3
 800552e:	2182      	movs	r1, #130	; 0x82
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 fffe 	bl	8007532 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	7c1b      	ldrb	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800556a:	2101      	movs	r1, #1
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f002 f8cf 	bl	8007710 <USBD_LL_PrepareReceive>
 8005572:	e007      	b.n	8005584 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800557a:	2340      	movs	r3, #64	; 0x40
 800557c:	2101      	movs	r1, #1
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f002 f8c6 	bl	8007710 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800559a:	2181      	movs	r1, #129	; 0x81
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 ffee 	bl	800757e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055a8:	2101      	movs	r1, #1
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 ffe7 	bl	800757e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055b8:	2182      	movs	r1, #130	; 0x82
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 ffdf 	bl	800757e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00e      	beq.n	80055f8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ea:	4618      	mov	r0, r3
 80055ec:	f002 f8d2 	bl	8007794 <USBD_static_free>
    pdev->pClassData = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005614:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005628:	2303      	movs	r3, #3
 800562a:	e0af      	b.n	800578c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005634:	2b00      	cmp	r3, #0
 8005636:	d03f      	beq.n	80056b8 <USBD_CDC_Setup+0xb4>
 8005638:	2b20      	cmp	r3, #32
 800563a:	f040 809f 	bne.w	800577c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	88db      	ldrh	r3, [r3, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d02e      	beq.n	80056a4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	b25b      	sxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	da16      	bge.n	800567e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800565c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	88d2      	ldrh	r2, [r2, #6]
 8005662:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	88db      	ldrh	r3, [r3, #6]
 8005668:	2b07      	cmp	r3, #7
 800566a:	bf28      	it	cs
 800566c:	2307      	movcs	r3, #7
 800566e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	89fa      	ldrh	r2, [r7, #14]
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 fb19 	bl	8006cae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800567c:	e085      	b.n	800578a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	785a      	ldrb	r2, [r3, #1]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	88db      	ldrh	r3, [r3, #6]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005694:	6939      	ldr	r1, [r7, #16]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	88db      	ldrh	r3, [r3, #6]
 800569a:	461a      	mov	r2, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fb32 	bl	8006d06 <USBD_CtlPrepareRx>
      break;
 80056a2:	e072      	b.n	800578a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	7850      	ldrb	r0, [r2, #1]
 80056b0:	2200      	movs	r2, #0
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	4798      	blx	r3
      break;
 80056b6:	e068      	b.n	800578a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b0b      	cmp	r3, #11
 80056be:	d852      	bhi.n	8005766 <USBD_CDC_Setup+0x162>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <USBD_CDC_Setup+0xc4>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056f9 	.word	0x080056f9
 80056cc:	08005775 	.word	0x08005775
 80056d0:	08005767 	.word	0x08005767
 80056d4:	08005767 	.word	0x08005767
 80056d8:	08005767 	.word	0x08005767
 80056dc:	08005767 	.word	0x08005767
 80056e0:	08005767 	.word	0x08005767
 80056e4:	08005767 	.word	0x08005767
 80056e8:	08005767 	.word	0x08005767
 80056ec:	08005767 	.word	0x08005767
 80056f0:	08005723 	.word	0x08005723
 80056f4:	0800574d 	.word	0x0800574d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b03      	cmp	r3, #3
 8005702:	d107      	bne.n	8005714 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005704:	f107 030a 	add.w	r3, r7, #10
 8005708:	2202      	movs	r2, #2
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 face 	bl	8006cae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005712:	e032      	b.n	800577a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 fa58 	bl	8006bcc <USBD_CtlError>
            ret = USBD_FAIL;
 800571c:	2303      	movs	r3, #3
 800571e:	75fb      	strb	r3, [r7, #23]
          break;
 8005720:	e02b      	b.n	800577a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b03      	cmp	r3, #3
 800572c:	d107      	bne.n	800573e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800572e:	f107 030d 	add.w	r3, r7, #13
 8005732:	2201      	movs	r2, #1
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 fab9 	bl	8006cae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800573c:	e01d      	b.n	800577a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fa43 	bl	8006bcc <USBD_CtlError>
            ret = USBD_FAIL;
 8005746:	2303      	movs	r3, #3
 8005748:	75fb      	strb	r3, [r7, #23]
          break;
 800574a:	e016      	b.n	800577a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b03      	cmp	r3, #3
 8005756:	d00f      	beq.n	8005778 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 fa36 	bl	8006bcc <USBD_CtlError>
            ret = USBD_FAIL;
 8005760:	2303      	movs	r3, #3
 8005762:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005764:	e008      	b.n	8005778 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 fa2f 	bl	8006bcc <USBD_CtlError>
          ret = USBD_FAIL;
 800576e:	2303      	movs	r3, #3
 8005770:	75fb      	strb	r3, [r7, #23]
          break;
 8005772:	e002      	b.n	800577a <USBD_CDC_Setup+0x176>
          break;
 8005774:	bf00      	nop
 8005776:	e008      	b.n	800578a <USBD_CDC_Setup+0x186>
          break;
 8005778:	bf00      	nop
      }
      break;
 800577a:	e006      	b.n	800578a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 fa24 	bl	8006bcc <USBD_CtlError>
      ret = USBD_FAIL;
 8005784:	2303      	movs	r3, #3
 8005786:	75fb      	strb	r3, [r7, #23]
      break;
 8005788:	bf00      	nop
  }

  return (uint8_t)ret;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80057a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e04f      	b.n	8005856 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3318      	adds	r3, #24
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d029      	beq.n	8005828 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80057d4:	78fa      	ldrb	r2, [r7, #3]
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	3318      	adds	r3, #24
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	78f9      	ldrb	r1, [r7, #3]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	460b      	mov	r3, r1
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	1a5b      	subs	r3, r3, r1
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4403      	add	r3, r0
 80057f4:	3344      	adds	r3, #68	; 0x44
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80057fc:	fb03 f301 	mul.w	r3, r3, r1
 8005800:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005802:	2b00      	cmp	r3, #0
 8005804:	d110      	bne.n	8005828 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005806:	78fa      	ldrb	r2, [r7, #3]
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	3318      	adds	r3, #24
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800581a:	78f9      	ldrb	r1, [r7, #3]
 800581c:	2300      	movs	r3, #0
 800581e:	2200      	movs	r2, #0
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 ff54 	bl	80076ce <USBD_LL_Transmit>
 8005826:	e015      	b.n	8005854 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	460b      	mov	r3, r1
 8005868:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005870:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800587c:	2303      	movs	r3, #3
 800587e:	e015      	b.n	80058ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 ff64 	bl	8007752 <USBD_LL_GetRxDataSize>
 800588a:	4602      	mov	r2, r0
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058a6:	4611      	mov	r1, r2
 80058a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e01b      	b.n	8005906 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d015      	beq.n	8005904 <USBD_CDC_EP0_RxReady+0x50>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058de:	2bff      	cmp	r3, #255	; 0xff
 80058e0:	d010      	beq.n	8005904 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80058f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058f8:	b292      	uxth	r2, r2
 80058fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	22ff      	movs	r2, #255	; 0xff
 8005900:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2243      	movs	r2, #67	; 0x43
 800591c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800591e:	4b03      	ldr	r3, [pc, #12]	; (800592c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	20000094 	.word	0x20000094

08005930 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2243      	movs	r2, #67	; 0x43
 800593c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800593e:	4b03      	ldr	r3, [pc, #12]	; (800594c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000050 	.word	0x20000050

08005950 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2243      	movs	r2, #67	; 0x43
 800595c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800595e:	4b03      	ldr	r3, [pc, #12]	; (800596c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	200000d8 	.word	0x200000d8

08005970 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	220a      	movs	r2, #10
 800597c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800597e:	4b03      	ldr	r3, [pc, #12]	; (800598c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	2000000c 	.word	0x2000000c

08005990 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e004      	b.n	80059ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e008      	b.n	80059ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e004      	b.n	8005a1c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e01a      	b.n	8005a80 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d114      	bne.n	8005a7e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a72:	2181      	movs	r1, #129	; 0x81
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fe2a 	bl	80076ce <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e016      	b.n	8005ad4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	7c1b      	ldrb	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab8:	2101      	movs	r1, #1
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 fe28 	bl	8007710 <USBD_LL_PrepareReceive>
 8005ac0:	e007      	b.n	8005ad2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ac8:	2340      	movs	r3, #64	; 0x40
 8005aca:	2101      	movs	r1, #1
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fe1f 	bl	8007710 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e01f      	b.n	8005b34 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	79fa      	ldrb	r2, [r7, #7]
 8005b26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f001 fc9b 	bl	8007464 <USBD_LL_Init>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e016      	b.n	8005b82 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f107 020e 	add.w	r2, r7, #14
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
 8005b78:	4602      	mov	r2, r0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 fcb2 	bl	80074fc <USBD_LL_Start>
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	4611      	mov	r1, r2
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
  }

  return USBD_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 ff90 	bl	8006b58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c46:	461a      	mov	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d01a      	beq.n	8005c92 <USBD_LL_SetupStage+0x72>
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d822      	bhi.n	8005ca6 <USBD_LL_SetupStage+0x86>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <USBD_LL_SetupStage+0x4a>
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d00a      	beq.n	8005c7e <USBD_LL_SetupStage+0x5e>
 8005c68:	e01d      	b.n	8005ca6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fa62 	bl	800613c <USBD_StdDevReq>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e020      	b.n	8005cc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fac6 	bl	8006218 <USBD_StdItfReq>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c90:	e016      	b.n	8005cc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fb05 	bl	80062aa <USBD_StdEPReq>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca4:	e00c      	b.n	8005cc0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fc81 	bl	80075bc <USBD_LL_StallEP>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbe:	bf00      	nop
  }

  return ret;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d138      	bne.n	8005d50 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ce4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d14a      	bne.n	8005d86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d913      	bls.n	8005d24 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	bf28      	it	cs
 8005d16:	4613      	movcs	r3, r2
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f001 f80f 	bl	8006d40 <USBD_CtlContinueRx>
 8005d22:	e030      	b.n	8005d86 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d10b      	bne.n	8005d48 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f001 f80a 	bl	8006d62 <USBD_CtlSendStatus>
 8005d4e:	e01a      	b.n	8005d86 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d114      	bne.n	8005d86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00e      	beq.n	8005d86 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	7afa      	ldrb	r2, [r7, #11]
 8005d72:	4611      	mov	r1, r2
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	4798      	blx	r3
 8005d78:	4603      	mov	r3, r0
 8005d7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	e000      	b.n	8005d88 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d9e:	7afb      	ldrb	r3, [r7, #11]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d16b      	bne.n	8005e7c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3314      	adds	r3, #20
 8005da8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d156      	bne.n	8005e62 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d914      	bls.n	8005dea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 ff84 	bl	8006ce4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2200      	movs	r2, #0
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f001 fc94 	bl	8007710 <USBD_LL_PrepareReceive>
 8005de8:	e03b      	b.n	8005e62 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d11c      	bne.n	8005e30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d316      	bcc.n	8005e30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d20f      	bcs.n	8005e30 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e10:	2200      	movs	r2, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 ff65 	bl	8006ce4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e22:	2300      	movs	r3, #0
 8005e24:	2200      	movs	r2, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f001 fc71 	bl	8007710 <USBD_LL_PrepareReceive>
 8005e2e:	e018      	b.n	8005e62 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d10b      	bne.n	8005e54 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e54:	2180      	movs	r1, #128	; 0x80
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f001 fbb0 	bl	80075bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 ff93 	bl	8006d88 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d122      	bne.n	8005eb2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff fe98 	bl	8005ba2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e7a:	e01a      	b.n	8005eb2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d114      	bne.n	8005eb2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00e      	beq.n	8005eb2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	7afa      	ldrb	r2, [r7, #11]
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	4798      	blx	r3
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	e000      	b.n	8005eb4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e02f      	b.n	8005f50 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00f      	beq.n	8005f1a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6852      	ldr	r2, [r2, #4]
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	4611      	mov	r1, r2
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2100      	movs	r1, #0
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 fb06 	bl	8007532 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2240      	movs	r2, #64	; 0x40
 8005f32:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2180      	movs	r1, #128	; 0x80
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 faf8 	bl	8007532 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2240      	movs	r2, #64	; 0x40
 8005f4c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2204      	movs	r2, #4
 8005f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d106      	bne.n	8005fc6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e012      	b.n	8006010 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d10b      	bne.n	800600e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800602e:	2303      	movs	r3, #3
 8006030:	e014      	b.n	800605c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b03      	cmp	r3, #3
 800603c:	d10d      	bne.n	800605a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	4611      	mov	r1, r2
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800607a:	2303      	movs	r3, #3
 800607c:	e014      	b.n	80060a8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b03      	cmp	r3, #3
 8006088:	d10d      	bne.n	80060a6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	4611      	mov	r1, r2
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d009      	beq.n	80060f4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6852      	ldr	r2, [r2, #4]
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	4611      	mov	r1, r2
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	4798      	blx	r3
  }

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80060fe:	b480      	push	{r7}
 8006100:	b087      	sub	sp, #28
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	3301      	adds	r3, #1
 8006114:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800611c:	8a3b      	ldrh	r3, [r7, #16]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	b21a      	sxth	r2, r3
 8006122:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006126:	4313      	orrs	r3, r2
 8006128:	b21b      	sxth	r3, r3
 800612a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800612c:	89fb      	ldrh	r3, [r7, #14]
}
 800612e:	4618      	mov	r0, r3
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d005      	beq.n	8006162 <USBD_StdDevReq+0x26>
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d853      	bhi.n	8006202 <USBD_StdDevReq+0xc6>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <USBD_StdDevReq+0x3a>
 800615e:	2b20      	cmp	r3, #32
 8006160:	d14f      	bne.n	8006202 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]
      break;
 8006174:	e04a      	b.n	800620c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	2b09      	cmp	r3, #9
 800617c:	d83b      	bhi.n	80061f6 <USBD_StdDevReq+0xba>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <USBD_StdDevReq+0x48>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061d9 	.word	0x080061d9
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080061f7 	.word	0x080061f7
 8006190:	080061e3 	.word	0x080061e3
 8006194:	080061f7 	.word	0x080061f7
 8006198:	080061b7 	.word	0x080061b7
 800619c:	080061ad 	.word	0x080061ad
 80061a0:	080061f7 	.word	0x080061f7
 80061a4:	080061cf 	.word	0x080061cf
 80061a8:	080061c1 	.word	0x080061c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f9de 	bl	8006570 <USBD_GetDescriptor>
          break;
 80061b4:	e024      	b.n	8006200 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fb43 	bl	8006844 <USBD_SetAddress>
          break;
 80061be:	e01f      	b.n	8006200 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fb82 	bl	80068cc <USBD_SetConfig>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
          break;
 80061cc:	e018      	b.n	8006200 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fc21 	bl	8006a18 <USBD_GetConfig>
          break;
 80061d6:	e013      	b.n	8006200 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fc52 	bl	8006a84 <USBD_GetStatus>
          break;
 80061e0:	e00e      	b.n	8006200 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fc81 	bl	8006aec <USBD_SetFeature>
          break;
 80061ea:	e009      	b.n	8006200 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fc90 	bl	8006b14 <USBD_ClrFeature>
          break;
 80061f4:	e004      	b.n	8006200 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fce7 	bl	8006bcc <USBD_CtlError>
          break;
 80061fe:	bf00      	nop
      }
      break;
 8006200:	e004      	b.n	800620c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fce1 	bl	8006bcc <USBD_CtlError>
      break;
 800620a:	bf00      	nop
  }

  return ret;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop

08006218 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d005      	beq.n	800623e <USBD_StdItfReq+0x26>
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d82f      	bhi.n	8006296 <USBD_StdItfReq+0x7e>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <USBD_StdItfReq+0x26>
 800623a:	2b20      	cmp	r3, #32
 800623c:	d12b      	bne.n	8006296 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006244:	b2db      	uxtb	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	2b02      	cmp	r3, #2
 800624a:	d81d      	bhi.n	8006288 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	889b      	ldrh	r3, [r3, #4]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b01      	cmp	r3, #1
 8006254:	d813      	bhi.n	800627e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	88db      	ldrh	r3, [r3, #6]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d110      	bne.n	8006292 <USBD_StdItfReq+0x7a>
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10d      	bne.n	8006292 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fd73 	bl	8006d62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800627c:	e009      	b.n	8006292 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fca3 	bl	8006bcc <USBD_CtlError>
          break;
 8006286:	e004      	b.n	8006292 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fc9e 	bl	8006bcc <USBD_CtlError>
          break;
 8006290:	e000      	b.n	8006294 <USBD_StdItfReq+0x7c>
          break;
 8006292:	bf00      	nop
      }
      break;
 8006294:	e004      	b.n	80062a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fc97 	bl	8006bcc <USBD_CtlError>
      break;
 800629e:	bf00      	nop
  }

  return ret;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	889b      	ldrh	r3, [r3, #4]
 80062bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d007      	beq.n	80062da <USBD_StdEPReq+0x30>
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	f200 8145 	bhi.w	800655a <USBD_StdEPReq+0x2b0>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00c      	beq.n	80062ee <USBD_StdEPReq+0x44>
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	f040 8140 	bne.w	800655a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
      break;
 80062ec:	e13a      	b.n	8006564 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d007      	beq.n	8006306 <USBD_StdEPReq+0x5c>
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	f300 8129 	bgt.w	800654e <USBD_StdEPReq+0x2a4>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d07f      	beq.n	8006400 <USBD_StdEPReq+0x156>
 8006300:	2b01      	cmp	r3, #1
 8006302:	d03c      	beq.n	800637e <USBD_StdEPReq+0xd4>
 8006304:	e123      	b.n	800654e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d002      	beq.n	8006318 <USBD_StdEPReq+0x6e>
 8006312:	2b03      	cmp	r3, #3
 8006314:	d016      	beq.n	8006344 <USBD_StdEPReq+0x9a>
 8006316:	e02c      	b.n	8006372 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <USBD_StdEPReq+0x90>
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d00a      	beq.n	800633a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f947 	bl	80075bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 f943 	bl	80075bc <USBD_LL_StallEP>
 8006336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006338:	e020      	b.n	800637c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc45 	bl	8006bcc <USBD_CtlError>
              break;
 8006342:	e01b      	b.n	800637c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	885b      	ldrh	r3, [r3, #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10e      	bne.n	800636a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00b      	beq.n	800636a <USBD_StdEPReq+0xc0>
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	d008      	beq.n	800636a <USBD_StdEPReq+0xc0>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	88db      	ldrh	r3, [r3, #6]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f929 	bl	80075bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fcf9 	bl	8006d62 <USBD_CtlSendStatus>

              break;
 8006370:	e004      	b.n	800637c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fc29 	bl	8006bcc <USBD_CtlError>
              break;
 800637a:	bf00      	nop
          }
          break;
 800637c:	e0ec      	b.n	8006558 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d002      	beq.n	8006390 <USBD_StdEPReq+0xe6>
 800638a:	2b03      	cmp	r3, #3
 800638c:	d016      	beq.n	80063bc <USBD_StdEPReq+0x112>
 800638e:	e030      	b.n	80063f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00d      	beq.n	80063b2 <USBD_StdEPReq+0x108>
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d00a      	beq.n	80063b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 f90b 	bl	80075bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063a6:	2180      	movs	r1, #128	; 0x80
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 f907 	bl	80075bc <USBD_LL_StallEP>
 80063ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063b0:	e025      	b.n	80063fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fc09 	bl	8006bcc <USBD_CtlError>
              break;
 80063ba:	e020      	b.n	80063fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11b      	bne.n	80063fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 f911 	bl	80075fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fcc2 	bl	8006d62 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80063f0:	e004      	b.n	80063fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fbe9 	bl	8006bcc <USBD_CtlError>
              break;
 80063fa:	e000      	b.n	80063fe <USBD_StdEPReq+0x154>
              break;
 80063fc:	bf00      	nop
          }
          break;
 80063fe:	e0ab      	b.n	8006558 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d002      	beq.n	8006412 <USBD_StdEPReq+0x168>
 800640c:	2b03      	cmp	r3, #3
 800640e:	d032      	beq.n	8006476 <USBD_StdEPReq+0x1cc>
 8006410:	e097      	b.n	8006542 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <USBD_StdEPReq+0x17e>
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b80      	cmp	r3, #128	; 0x80
 800641c:	d004      	beq.n	8006428 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fbd3 	bl	8006bcc <USBD_CtlError>
                break;
 8006426:	e091      	b.n	800654c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800642c:	2b00      	cmp	r3, #0
 800642e:	da0b      	bge.n	8006448 <USBD_StdEPReq+0x19e>
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	3310      	adds	r3, #16
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	4413      	add	r3, r2
 8006444:	3304      	adds	r3, #4
 8006446:	e00b      	b.n	8006460 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	3304      	adds	r3, #4
 8006460:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2202      	movs	r2, #2
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fc1d 	bl	8006cae <USBD_CtlSendData>
              break;
 8006474:	e06a      	b.n	800654c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da11      	bge.n	80064a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	3324      	adds	r3, #36	; 0x24
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d117      	bne.n	80064c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fb96 	bl	8006bcc <USBD_CtlError>
                  break;
 80064a0:	e054      	b.n	800654c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	f003 020f 	and.w	r2, r3, #15
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fb83 	bl	8006bcc <USBD_CtlError>
                  break;
 80064c6:	e041      	b.n	800654c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da0b      	bge.n	80064e8 <USBD_StdEPReq+0x23e>
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	3310      	adds	r3, #16
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	3304      	adds	r3, #4
 80064e6:	e00b      	b.n	8006500 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	3304      	adds	r3, #4
 8006500:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <USBD_StdEPReq+0x264>
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	2b80      	cmp	r3, #128	; 0x80
 800650c:	d103      	bne.n	8006516 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	e00e      	b.n	8006534 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 f88c 	bl	8007638 <USBD_LL_IsStallEP>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e002      	b.n	8006534 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2202      	movs	r2, #2
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fbb7 	bl	8006cae <USBD_CtlSendData>
              break;
 8006540:	e004      	b.n	800654c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fb41 	bl	8006bcc <USBD_CtlError>
              break;
 800654a:	bf00      	nop
          }
          break;
 800654c:	e004      	b.n	8006558 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fb3b 	bl	8006bcc <USBD_CtlError>
          break;
 8006556:	bf00      	nop
      }
      break;
 8006558:	e004      	b.n	8006564 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb35 	bl	8006bcc <USBD_CtlError>
      break;
 8006562:	bf00      	nop
  }

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	885b      	ldrh	r3, [r3, #2]
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	2b06      	cmp	r3, #6
 8006592:	f200 8128 	bhi.w	80067e6 <USBD_GetDescriptor+0x276>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <USBD_GetDescriptor+0x2c>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065b9 	.word	0x080065b9
 80065a0:	080065d1 	.word	0x080065d1
 80065a4:	08006611 	.word	0x08006611
 80065a8:	080067e7 	.word	0x080067e7
 80065ac:	080067e7 	.word	0x080067e7
 80065b0:	08006787 	.word	0x08006787
 80065b4:	080067b3 	.word	0x080067b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	7c12      	ldrb	r2, [r2, #16]
 80065c4:	f107 0108 	add.w	r1, r7, #8
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
 80065cc:	60f8      	str	r0, [r7, #12]
      break;
 80065ce:	e112      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	7c1b      	ldrb	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f107 0208 	add.w	r2, r7, #8
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
 80065e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	2202      	movs	r2, #2
 80065f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065f2:	e100      	b.n	80067f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	f107 0208 	add.w	r2, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	2202      	movs	r2, #2
 800660c:	701a      	strb	r2, [r3, #0]
      break;
 800660e:	e0f2      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b05      	cmp	r3, #5
 8006618:	f200 80ac 	bhi.w	8006774 <USBD_GetDescriptor+0x204>
 800661c:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <USBD_GetDescriptor+0xb4>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	0800663d 	.word	0x0800663d
 8006628:	08006671 	.word	0x08006671
 800662c:	080066a5 	.word	0x080066a5
 8006630:	080066d9 	.word	0x080066d9
 8006634:	0800670d 	.word	0x0800670d
 8006638:	08006741 	.word	0x08006741
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	7c12      	ldrb	r2, [r2, #16]
 8006654:	f107 0108 	add.w	r1, r7, #8
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
 800665c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800665e:	e091      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fab2 	bl	8006bcc <USBD_CtlError>
            err++;
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	3301      	adds	r3, #1
 800666c:	72fb      	strb	r3, [r7, #11]
          break;
 800666e:	e089      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	7c12      	ldrb	r2, [r2, #16]
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006692:	e077      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa98 	bl	8006bcc <USBD_CtlError>
            err++;
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	3301      	adds	r3, #1
 80066a0:	72fb      	strb	r3, [r7, #11]
          break;
 80066a2:	e06f      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	7c12      	ldrb	r2, [r2, #16]
 80066bc:	f107 0108 	add.w	r1, r7, #8
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c6:	e05d      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa7e 	bl	8006bcc <USBD_CtlError>
            err++;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	3301      	adds	r3, #1
 80066d4:	72fb      	strb	r3, [r7, #11]
          break;
 80066d6:	e055      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fa:	e043      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa64 	bl	8006bcc <USBD_CtlError>
            err++;
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	3301      	adds	r3, #1
 8006708:	72fb      	strb	r3, [r7, #11]
          break;
 800670a:	e03b      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672e:	e029      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa4a 	bl	8006bcc <USBD_CtlError>
            err++;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	3301      	adds	r3, #1
 800673c:	72fb      	strb	r3, [r7, #11]
          break;
 800673e:	e021      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	7c12      	ldrb	r2, [r2, #16]
 8006758:	f107 0108 	add.w	r1, r7, #8
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006762:	e00f      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa30 	bl	8006bcc <USBD_CtlError>
            err++;
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	3301      	adds	r3, #1
 8006770:	72fb      	strb	r3, [r7, #11]
          break;
 8006772:	e007      	b.n	8006784 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa28 	bl	8006bcc <USBD_CtlError>
          err++;
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	3301      	adds	r3, #1
 8006780:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006782:	bf00      	nop
      }
      break;
 8006784:	e037      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	7c1b      	ldrb	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	f107 0208 	add.w	r2, r7, #8
 800679a:	4610      	mov	r0, r2
 800679c:	4798      	blx	r3
 800679e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067a0:	e029      	b.n	80067f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fa11 	bl	8006bcc <USBD_CtlError>
        err++;
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	3301      	adds	r3, #1
 80067ae:	72fb      	strb	r3, [r7, #11]
      break;
 80067b0:	e021      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7c1b      	ldrb	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10d      	bne.n	80067d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
 80067ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	2207      	movs	r2, #7
 80067d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d4:	e00f      	b.n	80067f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f9f7 	bl	8006bcc <USBD_CtlError>
        err++;
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	3301      	adds	r3, #1
 80067e2:	72fb      	strb	r3, [r7, #11]
      break;
 80067e4:	e007      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f9ef 	bl	8006bcc <USBD_CtlError>
      err++;
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	3301      	adds	r3, #1
 80067f2:	72fb      	strb	r3, [r7, #11]
      break;
 80067f4:	bf00      	nop
  }

  if (err != 0U)
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11e      	bne.n	800683a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	88db      	ldrh	r3, [r3, #6]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d016      	beq.n	8006832 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006804:	893b      	ldrh	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88da      	ldrh	r2, [r3, #6]
 800680e:	893b      	ldrh	r3, [r7, #8]
 8006810:	4293      	cmp	r3, r2
 8006812:	bf28      	it	cs
 8006814:	4613      	movcs	r3, r2
 8006816:	b29b      	uxth	r3, r3
 8006818:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800681a:	893b      	ldrh	r3, [r7, #8]
 800681c:	461a      	mov	r2, r3
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa44 	bl	8006cae <USBD_CtlSendData>
 8006826:	e009      	b.n	800683c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9ce 	bl	8006bcc <USBD_CtlError>
 8006830:	e004      	b.n	800683c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa95 	bl	8006d62 <USBD_CtlSendStatus>
 8006838:	e000      	b.n	800683c <USBD_GetDescriptor+0x2cc>
    return;
 800683a:	bf00      	nop
  }
}
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	889b      	ldrh	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d131      	bne.n	80068ba <USBD_SetAddress+0x76>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12d      	bne.n	80068ba <USBD_SetAddress+0x76>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	885b      	ldrh	r3, [r3, #2]
 8006862:	2b7f      	cmp	r3, #127	; 0x7f
 8006864:	d829      	bhi.n	80068ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006870:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b03      	cmp	r3, #3
 800687c:	d104      	bne.n	8006888 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f9a3 	bl	8006bcc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006886:	e01d      	b.n	80068c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	7bfa      	ldrb	r2, [r7, #15]
 800688c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fefb 	bl	8007690 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa61 	bl	8006d62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	e009      	b.n	80068c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b8:	e004      	b.n	80068c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f985 	bl	8006bcc <USBD_CtlError>
  }
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	885b      	ldrh	r3, [r3, #2]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	4b4c      	ldr	r3, [pc, #304]	; (8006a14 <USBD_SetConfig+0x148>)
 80068e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068e4:	4b4b      	ldr	r3, [pc, #300]	; (8006a14 <USBD_SetConfig+0x148>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d905      	bls.n	80068f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f96c 	bl	8006bcc <USBD_CtlError>
    return USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e088      	b.n	8006a0a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d002      	beq.n	800690a <USBD_SetConfig+0x3e>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d025      	beq.n	8006954 <USBD_SetConfig+0x88>
 8006908:	e071      	b.n	80069ee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800690a:	4b42      	ldr	r3, [pc, #264]	; (8006a14 <USBD_SetConfig+0x148>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01c      	beq.n	800694c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006912:	4b40      	ldr	r3, [pc, #256]	; (8006a14 <USBD_SetConfig+0x148>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800691c:	4b3d      	ldr	r3, [pc, #244]	; (8006a14 <USBD_SetConfig+0x148>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff f948 	bl	8005bb8 <USBD_SetClassConfig>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f949 	bl	8006bcc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800693a:	e065      	b.n	8006a08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa10 	bl	8006d62 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2203      	movs	r2, #3
 8006946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800694a:	e05d      	b.n	8006a08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa08 	bl	8006d62 <USBD_CtlSendStatus>
      break;
 8006952:	e059      	b.n	8006a08 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006954:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <USBD_SetConfig+0x148>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d112      	bne.n	8006982 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006964:	4b2b      	ldr	r3, [pc, #172]	; (8006a14 <USBD_SetConfig+0x148>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800696e:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <USBD_SetConfig+0x148>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff f93b 	bl	8005bf0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f9f1 	bl	8006d62 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006980:	e042      	b.n	8006a08 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006982:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <USBD_SetConfig+0x148>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d02a      	beq.n	80069e6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff f929 	bl	8005bf0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800699e:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <USBD_SetConfig+0x148>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069a8:	4b1a      	ldr	r3, [pc, #104]	; (8006a14 <USBD_SetConfig+0x148>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff f902 	bl	8005bb8 <USBD_SetClassConfig>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00f      	beq.n	80069de <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f903 	bl	8006bcc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff f90e 	bl	8005bf0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069dc:	e014      	b.n	8006a08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9bf 	bl	8006d62 <USBD_CtlSendStatus>
      break;
 80069e4:	e010      	b.n	8006a08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9bb 	bl	8006d62 <USBD_CtlSendStatus>
      break;
 80069ec:	e00c      	b.n	8006a08 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f8eb 	bl	8006bcc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <USBD_SetConfig+0x148>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff f8f7 	bl	8005bf0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a02:	2303      	movs	r3, #3
 8006a04:	73fb      	strb	r3, [r7, #15]
      break;
 8006a06:	bf00      	nop
  }

  return ret;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000204 	.word	0x20000204

08006a18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	88db      	ldrh	r3, [r3, #6]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d004      	beq.n	8006a34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f8cd 	bl	8006bcc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a32:	e023      	b.n	8006a7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	dc02      	bgt.n	8006a46 <USBD_GetConfig+0x2e>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc03      	bgt.n	8006a4c <USBD_GetConfig+0x34>
 8006a44:	e015      	b.n	8006a72 <USBD_GetConfig+0x5a>
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d00b      	beq.n	8006a62 <USBD_GetConfig+0x4a>
 8006a4a:	e012      	b.n	8006a72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3308      	adds	r3, #8
 8006a56:	2201      	movs	r2, #1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f927 	bl	8006cae <USBD_CtlSendData>
        break;
 8006a60:	e00c      	b.n	8006a7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2201      	movs	r2, #1
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f91f 	bl	8006cae <USBD_CtlSendData>
        break;
 8006a70:	e004      	b.n	8006a7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f8a9 	bl	8006bcc <USBD_CtlError>
        break;
 8006a7a:	bf00      	nop
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d81e      	bhi.n	8006ada <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	88db      	ldrh	r3, [r3, #6]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d004      	beq.n	8006aae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f890 	bl	8006bcc <USBD_CtlError>
        break;
 8006aac:	e01a      	b.n	8006ae4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f043 0202 	orr.w	r2, r3, #2
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	330c      	adds	r3, #12
 8006ace:	2202      	movs	r2, #2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f8eb 	bl	8006cae <USBD_CtlSendData>
      break;
 8006ad8:	e004      	b.n	8006ae4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f875 	bl	8006bcc <USBD_CtlError>
      break;
 8006ae2:	bf00      	nop
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d106      	bne.n	8006b0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f92b 	bl	8006d62 <USBD_CtlSendStatus>
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d80b      	bhi.n	8006b44 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	885b      	ldrh	r3, [r3, #2]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d10c      	bne.n	8006b4e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f910 	bl	8006d62 <USBD_CtlSendStatus>
      }
      break;
 8006b42:	e004      	b.n	8006b4e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f840 	bl	8006bcc <USBD_CtlError>
      break;
 8006b4c:	e000      	b.n	8006b50 <USBD_ClrFeature+0x3c>
      break;
 8006b4e:	bf00      	nop
  }
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3301      	adds	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	781a      	ldrb	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff fabb 	bl	80060fe <SWAPBYTE>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff faae 	bl	80060fe <SWAPBYTE>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3301      	adds	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff faa1 	bl	80060fe <SWAPBYTE>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	80da      	strh	r2, [r3, #6]
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fcef 	bl	80075bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bde:	2100      	movs	r1, #0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fceb 	bl	80075bc <USBD_LL_StallEP>
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b086      	sub	sp, #24
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d036      	beq.n	8006c72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c08:	6938      	ldr	r0, [r7, #16]
 8006c0a:	f000 f836 	bl	8006c7a <USBD_GetLen>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	3301      	adds	r3, #1
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	7812      	ldrb	r2, [r2, #0]
 8006c26:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	4413      	add	r3, r2
 8006c34:	2203      	movs	r2, #3
 8006c36:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c3e:	e013      	b.n	8006c68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	4413      	add	r3, r2
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	7812      	ldrb	r2, [r2, #0]
 8006c4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	613b      	str	r3, [r7, #16]
    idx++;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	3301      	adds	r3, #1
 8006c56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	3301      	adds	r3, #1
 8006c66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e7      	bne.n	8006c40 <USBD_GetString+0x52>
 8006c70:	e000      	b.n	8006c74 <USBD_GetString+0x86>
    return;
 8006c72:	bf00      	nop
  }
}
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c8a:	e005      	b.n	8006c98 <USBD_GetLen+0x1e>
  {
    len++;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	3301      	adds	r3, #1
 8006c96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1f5      	bne.n	8006c8c <USBD_GetLen+0x12>
  }

  return len;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fcfa 	bl	80076ce <USBD_LL_Transmit>

  return USBD_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fce9 	bl	80076ce <USBD_LL_Transmit>

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2203      	movs	r2, #3
 8006d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fced 	bl	8007710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	2100      	movs	r1, #0
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fcdc 	bl	8007710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d72:	2300      	movs	r3, #0
 8006d74:	2200      	movs	r2, #0
 8006d76:	2100      	movs	r1, #0
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fca8 	bl	80076ce <USBD_LL_Transmit>

  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2205      	movs	r2, #5
 8006d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fcb6 	bl	8007710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006db4:	2200      	movs	r2, #0
 8006db6:	4912      	ldr	r1, [pc, #72]	; (8006e00 <MX_USB_DEVICE_Init+0x50>)
 8006db8:	4812      	ldr	r0, [pc, #72]	; (8006e04 <MX_USB_DEVICE_Init+0x54>)
 8006dba:	f7fe fe8f 	bl	8005adc <USBD_Init>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dc4:	f7f9 fe92 	bl	8000aec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006dc8:	490f      	ldr	r1, [pc, #60]	; (8006e08 <MX_USB_DEVICE_Init+0x58>)
 8006dca:	480e      	ldr	r0, [pc, #56]	; (8006e04 <MX_USB_DEVICE_Init+0x54>)
 8006dcc:	f7fe feb6 	bl	8005b3c <USBD_RegisterClass>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dd6:	f7f9 fe89 	bl	8000aec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006dda:	490c      	ldr	r1, [pc, #48]	; (8006e0c <MX_USB_DEVICE_Init+0x5c>)
 8006ddc:	4809      	ldr	r0, [pc, #36]	; (8006e04 <MX_USB_DEVICE_Init+0x54>)
 8006dde:	f7fe fdd7 	bl	8005990 <USBD_CDC_RegisterInterface>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006de8:	f7f9 fe80 	bl	8000aec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dec:	4805      	ldr	r0, [pc, #20]	; (8006e04 <MX_USB_DEVICE_Init+0x54>)
 8006dee:	f7fe fecc 	bl	8005b8a <USBD_Start>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006df8:	f7f9 fe78 	bl	8000aec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dfc:	bf00      	nop
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000130 	.word	0x20000130
 8006e04:	200005d4 	.word	0x200005d4
 8006e08:	20000018 	.word	0x20000018
 8006e0c:	2000011c 	.word	0x2000011c

08006e10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e14:	2200      	movs	r2, #0
 8006e16:	4905      	ldr	r1, [pc, #20]	; (8006e2c <CDC_Init_FS+0x1c>)
 8006e18:	4805      	ldr	r0, [pc, #20]	; (8006e30 <CDC_Init_FS+0x20>)
 8006e1a:	f7fe fdce 	bl	80059ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e1e:	4905      	ldr	r1, [pc, #20]	; (8006e34 <CDC_Init_FS+0x24>)
 8006e20:	4803      	ldr	r0, [pc, #12]	; (8006e30 <CDC_Init_FS+0x20>)
 8006e22:	f7fe fde8 	bl	80059f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	200010a4 	.word	0x200010a4
 8006e30:	200005d4 	.word	0x200005d4
 8006e34:	200008a4 	.word	0x200008a4

08006e38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	71fb      	strb	r3, [r7, #7]
 8006e54:	4613      	mov	r3, r2
 8006e56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	2b23      	cmp	r3, #35	; 0x23
 8006e5c:	d84a      	bhi.n	8006ef4 <CDC_Control_FS+0xac>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <CDC_Control_FS+0x1c>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006ef5 	.word	0x08006ef5
 8006e68:	08006ef5 	.word	0x08006ef5
 8006e6c:	08006ef5 	.word	0x08006ef5
 8006e70:	08006ef5 	.word	0x08006ef5
 8006e74:	08006ef5 	.word	0x08006ef5
 8006e78:	08006ef5 	.word	0x08006ef5
 8006e7c:	08006ef5 	.word	0x08006ef5
 8006e80:	08006ef5 	.word	0x08006ef5
 8006e84:	08006ef5 	.word	0x08006ef5
 8006e88:	08006ef5 	.word	0x08006ef5
 8006e8c:	08006ef5 	.word	0x08006ef5
 8006e90:	08006ef5 	.word	0x08006ef5
 8006e94:	08006ef5 	.word	0x08006ef5
 8006e98:	08006ef5 	.word	0x08006ef5
 8006e9c:	08006ef5 	.word	0x08006ef5
 8006ea0:	08006ef5 	.word	0x08006ef5
 8006ea4:	08006ef5 	.word	0x08006ef5
 8006ea8:	08006ef5 	.word	0x08006ef5
 8006eac:	08006ef5 	.word	0x08006ef5
 8006eb0:	08006ef5 	.word	0x08006ef5
 8006eb4:	08006ef5 	.word	0x08006ef5
 8006eb8:	08006ef5 	.word	0x08006ef5
 8006ebc:	08006ef5 	.word	0x08006ef5
 8006ec0:	08006ef5 	.word	0x08006ef5
 8006ec4:	08006ef5 	.word	0x08006ef5
 8006ec8:	08006ef5 	.word	0x08006ef5
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006ef5 	.word	0x08006ef5
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	08006ef5 	.word	0x08006ef5
 8006ee0:	08006ef5 	.word	0x08006ef5
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006ef5 	.word	0x08006ef5
 8006eec:	08006ef5 	.word	0x08006ef5
 8006ef0:	08006ef5 	.word	0x08006ef5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ef4:	bf00      	nop
  }

  return (USBD_OK);
 8006ef6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4805      	ldr	r0, [pc, #20]	; (8006f28 <CDC_Receive_FS+0x24>)
 8006f12:	f7fe fd70 	bl	80059f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f16:	4804      	ldr	r0, [pc, #16]	; (8006f28 <CDC_Receive_FS+0x24>)
 8006f18:	f7fe fdb6 	bl	8005a88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200005d4 	.word	0x200005d4

08006f2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <CDC_Transmit_FS+0x48>)
 8006f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e00b      	b.n	8006f6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f52:	887b      	ldrh	r3, [r7, #2]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4806      	ldr	r0, [pc, #24]	; (8006f74 <CDC_Transmit_FS+0x48>)
 8006f5a:	f7fe fd2e 	bl	80059ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f5e:	4805      	ldr	r0, [pc, #20]	; (8006f74 <CDC_Transmit_FS+0x48>)
 8006f60:	f7fe fd62 	bl	8005a28 <USBD_CDC_TransmitPacket>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	200005d4 	.word	0x200005d4

08006f78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2212      	movs	r2, #18
 8006fac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fae:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	2000014c 	.word	0x2000014c

08006fc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fd2:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20000160 	.word	0x20000160

08006fe4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	4907      	ldr	r1, [pc, #28]	; (8007018 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ffa:	4808      	ldr	r0, [pc, #32]	; (800701c <USBD_FS_ProductStrDescriptor+0x38>)
 8006ffc:	f7ff fdf7 	bl	8006bee <USBD_GetString>
 8007000:	e004      	b.n	800700c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4904      	ldr	r1, [pc, #16]	; (8007018 <USBD_FS_ProductStrDescriptor+0x34>)
 8007006:	4805      	ldr	r0, [pc, #20]	; (800701c <USBD_FS_ProductStrDescriptor+0x38>)
 8007008:	f7ff fdf1 	bl	8006bee <USBD_GetString>
  }
  return USBD_StrDesc;
 800700c:	4b02      	ldr	r3, [pc, #8]	; (8007018 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200018a4 	.word	0x200018a4
 800701c:	08008110 	.word	0x08008110

08007020 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	4904      	ldr	r1, [pc, #16]	; (8007040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007030:	4804      	ldr	r0, [pc, #16]	; (8007044 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007032:	f7ff fddc 	bl	8006bee <USBD_GetString>
  return USBD_StrDesc;
 8007036:	4b02      	ldr	r3, [pc, #8]	; (8007040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	200018a4 	.word	0x200018a4
 8007044:	08008128 	.word	0x08008128

08007048 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	6039      	str	r1, [r7, #0]
 8007052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	221a      	movs	r2, #26
 8007058:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800705a:	f000 f843 	bl	80070e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800705e:	4b02      	ldr	r3, [pc, #8]	; (8007068 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000164 	.word	0x20000164

0800706c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4907      	ldr	r1, [pc, #28]	; (80070a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007082:	4808      	ldr	r0, [pc, #32]	; (80070a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007084:	f7ff fdb3 	bl	8006bee <USBD_GetString>
 8007088:	e004      	b.n	8007094 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4904      	ldr	r1, [pc, #16]	; (80070a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800708e:	4805      	ldr	r0, [pc, #20]	; (80070a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007090:	f7ff fdad 	bl	8006bee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007094:	4b02      	ldr	r3, [pc, #8]	; (80070a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200018a4 	.word	0x200018a4
 80070a4:	0800813c 	.word	0x0800813c

080070a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	4907      	ldr	r1, [pc, #28]	; (80070dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070be:	4808      	ldr	r0, [pc, #32]	; (80070e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070c0:	f7ff fd95 	bl	8006bee <USBD_GetString>
 80070c4:	e004      	b.n	80070d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4904      	ldr	r1, [pc, #16]	; (80070dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070ca:	4805      	ldr	r0, [pc, #20]	; (80070e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070cc:	f7ff fd8f 	bl	8006bee <USBD_GetString>
  }
  return USBD_StrDesc;
 80070d0:	4b02      	ldr	r3, [pc, #8]	; (80070dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	200018a4 	.word	0x200018a4
 80070e0:	08008148 	.word	0x08008148

080070e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070ea:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <Get_SerialNum+0x44>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070f0:	4b0e      	ldr	r3, [pc, #56]	; (800712c <Get_SerialNum+0x48>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070f6:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <Get_SerialNum+0x4c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800710a:	2208      	movs	r2, #8
 800710c:	4909      	ldr	r1, [pc, #36]	; (8007134 <Get_SerialNum+0x50>)
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f814 	bl	800713c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007114:	2204      	movs	r2, #4
 8007116:	4908      	ldr	r1, [pc, #32]	; (8007138 <Get_SerialNum+0x54>)
 8007118:	68b8      	ldr	r0, [r7, #8]
 800711a:	f000 f80f 	bl	800713c <IntToUnicode>
  }
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	1fff7a10 	.word	0x1fff7a10
 800712c:	1fff7a14 	.word	0x1fff7a14
 8007130:	1fff7a18 	.word	0x1fff7a18
 8007134:	20000166 	.word	0x20000166
 8007138:	20000176 	.word	0x20000176

0800713c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	4613      	mov	r3, r2
 8007148:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]
 8007152:	e027      	b.n	80071a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	0f1b      	lsrs	r3, r3, #28
 8007158:	2b09      	cmp	r3, #9
 800715a:	d80b      	bhi.n	8007174 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	0f1b      	lsrs	r3, r3, #28
 8007160:	b2da      	uxtb	r2, r3
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	4619      	mov	r1, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	440b      	add	r3, r1
 800716c:	3230      	adds	r2, #48	; 0x30
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	e00a      	b.n	800718a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	0f1b      	lsrs	r3, r3, #28
 8007178:	b2da      	uxtb	r2, r3
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	4619      	mov	r1, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	440b      	add	r3, r1
 8007184:	3237      	adds	r2, #55	; 0x37
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	3301      	adds	r3, #1
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4413      	add	r3, r2
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	3301      	adds	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
 80071a4:	7dfa      	ldrb	r2, [r7, #23]
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d3d3      	bcc.n	8007154 <IntToUnicode+0x18>
  }
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071c4:	f107 0314 	add.w	r3, r7, #20
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	605a      	str	r2, [r3, #4]
 80071ce:	609a      	str	r2, [r3, #8]
 80071d0:	60da      	str	r2, [r3, #12]
 80071d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071dc:	d147      	bne.n	800726e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	4b25      	ldr	r3, [pc, #148]	; (8007278 <HAL_PCD_MspInit+0xbc>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	4a24      	ldr	r2, [pc, #144]	; (8007278 <HAL_PCD_MspInit+0xbc>)
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	6313      	str	r3, [r2, #48]	; 0x30
 80071ee:	4b22      	ldr	r3, [pc, #136]	; (8007278 <HAL_PCD_MspInit+0xbc>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80071fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007200:	2300      	movs	r3, #0
 8007202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007204:	2300      	movs	r3, #0
 8007206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007208:	f107 0314 	add.w	r3, r7, #20
 800720c:	4619      	mov	r1, r3
 800720e:	481b      	ldr	r0, [pc, #108]	; (800727c <HAL_PCD_MspInit+0xc0>)
 8007210:	f7f9 ff8c 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007214:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800721a:	2302      	movs	r3, #2
 800721c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721e:	2300      	movs	r3, #0
 8007220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007222:	2300      	movs	r3, #0
 8007224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007226:	230a      	movs	r3, #10
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800722a:	f107 0314 	add.w	r3, r7, #20
 800722e:	4619      	mov	r1, r3
 8007230:	4812      	ldr	r0, [pc, #72]	; (800727c <HAL_PCD_MspInit+0xc0>)
 8007232:	f7f9 ff7b 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007236:	4b10      	ldr	r3, [pc, #64]	; (8007278 <HAL_PCD_MspInit+0xbc>)
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	4a0f      	ldr	r2, [pc, #60]	; (8007278 <HAL_PCD_MspInit+0xbc>)
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	6353      	str	r3, [r2, #52]	; 0x34
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <HAL_PCD_MspInit+0xbc>)
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	4a0b      	ldr	r2, [pc, #44]	; (8007278 <HAL_PCD_MspInit+0xbc>)
 800724c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007250:	6453      	str	r3, [r2, #68]	; 0x44
 8007252:	4b09      	ldr	r3, [pc, #36]	; (8007278 <HAL_PCD_MspInit+0xbc>)
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800725e:	2200      	movs	r2, #0
 8007260:	2100      	movs	r1, #0
 8007262:	2043      	movs	r0, #67	; 0x43
 8007264:	f7f9 ff2b 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007268:	2043      	movs	r0, #67	; 0x43
 800726a:	f7f9 ff44 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800726e:	bf00      	nop
 8007270:	3728      	adds	r7, #40	; 0x28
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800
 800727c:	40020000 	.word	0x40020000

08007280 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007294:	4619      	mov	r1, r3
 8007296:	4610      	mov	r0, r2
 8007298:	f7fe fcc2 	bl	8005c20 <USBD_LL_SetupStage>
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072b6:	78fa      	ldrb	r2, [r7, #3]
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	4613      	mov	r3, r2
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	1a9b      	subs	r3, r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	440b      	add	r3, r1
 80072c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	4619      	mov	r1, r3
 80072ce:	f7fe fcfc 	bl	8005cca <USBD_LL_DataOutStage>
}
 80072d2:	bf00      	nop
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3348      	adds	r3, #72	; 0x48
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	4619      	mov	r1, r3
 8007302:	f7fe fd45 	bl	8005d90 <USBD_LL_DataInStage>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fe59 	bl	8005fd4 <USBD_LL_SOF>
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007332:	2301      	movs	r3, #1
 8007334:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
 8007342:	e008      	b.n	8007356 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d102      	bne.n	8007352 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800734c:	2301      	movs	r3, #1
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	e001      	b.n	8007356 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007352:	f7f9 fbcb 	bl	8000aec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800735c:	7bfa      	ldrb	r2, [r7, #15]
 800735e:	4611      	mov	r1, r2
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe fdf9 	bl	8005f58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe fda5 	bl	8005ebc <USBD_LL_Reset>
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fdf4 	bl	8005f78 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073b0:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <HAL_PCD_SuspendCallback+0x48>)
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	4a03      	ldr	r2, [pc, #12]	; (80073c4 <HAL_PCD_SuspendCallback+0x48>)
 80073b6:	f043 0306 	orr.w	r3, r3, #6
 80073ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	e000ed00 	.word	0xe000ed00

080073c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fde4 	bl	8005fa4 <USBD_LL_Resume>
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fe32 	bl	8006064 <USBD_LL_IsoOUTIncomplete>
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	4611      	mov	r1, r2
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fdfa 	bl	8006018 <USBD_LL_IsoINIncomplete>
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fe38 	bl	80060b0 <USBD_LL_DevConnected>
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fe35 	bl	80060c6 <USBD_LL_DevDisconnected>
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d13c      	bne.n	80074ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007474:	4a20      	ldr	r2, [pc, #128]	; (80074f8 <USBD_LL_Init+0x94>)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a1e      	ldr	r2, [pc, #120]	; (80074f8 <USBD_LL_Init+0x94>)
 8007480:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007484:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <USBD_LL_Init+0x94>)
 8007486:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800748a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800748c:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <USBD_LL_Init+0x94>)
 800748e:	2204      	movs	r2, #4
 8007490:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007492:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <USBD_LL_Init+0x94>)
 8007494:	2202      	movs	r2, #2
 8007496:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007498:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <USBD_LL_Init+0x94>)
 800749a:	2200      	movs	r2, #0
 800749c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800749e:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <USBD_LL_Init+0x94>)
 80074a0:	2202      	movs	r2, #2
 80074a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074a4:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <USBD_LL_Init+0x94>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074aa:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <USBD_LL_Init+0x94>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074b0:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <USBD_LL_Init+0x94>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80074b6:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <USBD_LL_Init+0x94>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074bc:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <USBD_LL_Init+0x94>)
 80074be:	2200      	movs	r2, #0
 80074c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074c2:	480d      	ldr	r0, [pc, #52]	; (80074f8 <USBD_LL_Init+0x94>)
 80074c4:	f7f9 ffe7 	bl	8001496 <HAL_PCD_Init>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074ce:	f7f9 fb0d 	bl	8000aec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	4808      	ldr	r0, [pc, #32]	; (80074f8 <USBD_LL_Init+0x94>)
 80074d6:	f7fb f944 	bl	8002762 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074da:	2240      	movs	r2, #64	; 0x40
 80074dc:	2100      	movs	r1, #0
 80074de:	4806      	ldr	r0, [pc, #24]	; (80074f8 <USBD_LL_Init+0x94>)
 80074e0:	f7fb f8f8 	bl	80026d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	2101      	movs	r1, #1
 80074e8:	4803      	ldr	r0, [pc, #12]	; (80074f8 <USBD_LL_Init+0x94>)
 80074ea:	f7fb f8f3 	bl	80026d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20001aa4 	.word	0x20001aa4

080074fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007512:	4618      	mov	r0, r3
 8007514:	f7fa f8dc 	bl	80016d0 <HAL_PCD_Start>
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	4618      	mov	r0, r3
 8007520:	f000 f942 	bl	80077a8 <USBD_Get_USB_Status>
 8007524:	4603      	mov	r3, r0
 8007526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007528:	7bbb      	ldrb	r3, [r7, #14]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	4608      	mov	r0, r1
 800753c:	4611      	mov	r1, r2
 800753e:	461a      	mov	r2, r3
 8007540:	4603      	mov	r3, r0
 8007542:	70fb      	strb	r3, [r7, #3]
 8007544:	460b      	mov	r3, r1
 8007546:	70bb      	strb	r3, [r7, #2]
 8007548:	4613      	mov	r3, r2
 800754a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800755a:	78bb      	ldrb	r3, [r7, #2]
 800755c:	883a      	ldrh	r2, [r7, #0]
 800755e:	78f9      	ldrb	r1, [r7, #3]
 8007560:	f7fa fcc0 	bl	8001ee4 <HAL_PCD_EP_Open>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f91c 	bl	80077a8 <USBD_Get_USB_Status>
 8007570:	4603      	mov	r3, r0
 8007572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007574:	7bbb      	ldrb	r3, [r7, #14]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	4611      	mov	r1, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f7fa fd09 	bl	8001fb4 <HAL_PCD_EP_Close>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f8fd 	bl	80077a8 <USBD_Get_USB_Status>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fa fde1 	bl	80021a2 <HAL_PCD_EP_SetStall>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f8de 	bl	80077a8 <USBD_Get_USB_Status>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f7fa fe26 	bl	800226a <HAL_PCD_EP_ClrStall>
 800761e:	4603      	mov	r3, r0
 8007620:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f8bf 	bl	80077a8 <USBD_Get_USB_Status>
 800762a:	4603      	mov	r3, r0
 800762c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800762e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800764a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800764c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007650:	2b00      	cmp	r3, #0
 8007652:	da0b      	bge.n	800766c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800765a:	68f9      	ldr	r1, [r7, #12]
 800765c:	4613      	mov	r3, r2
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	333e      	adds	r3, #62	; 0x3e
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	e00b      	b.n	8007684 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007672:	68f9      	ldr	r1, [r7, #12]
 8007674:	4613      	mov	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007682:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076aa:	78fa      	ldrb	r2, [r7, #3]
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fa fbf3 	bl	8001e9a <HAL_PCD_SetAddress>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f874 	bl	80077a8 <USBD_Get_USB_Status>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
 80076da:	460b      	mov	r3, r1
 80076dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076ec:	7af9      	ldrb	r1, [r7, #11]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	f7fa fd0c 	bl	800210e <HAL_PCD_EP_Transmit>
 80076f6:	4603      	mov	r3, r0
 80076f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 f853 	bl	80077a8 <USBD_Get_USB_Status>
 8007702:	4603      	mov	r3, r0
 8007704:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007706:	7dbb      	ldrb	r3, [r7, #22]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	460b      	mov	r3, r1
 800771e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800772e:	7af9      	ldrb	r1, [r7, #11]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	f7fa fc88 	bl	8002048 <HAL_PCD_EP_Receive>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f832 	bl	80077a8 <USBD_Get_USB_Status>
 8007744:	4603      	mov	r3, r0
 8007746:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007748:	7dbb      	ldrb	r3, [r7, #22]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	460b      	mov	r3, r1
 800775c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f7fa fcb8 	bl	80020de <HAL_PCD_EP_GetRxCount>
 800776e:	4603      	mov	r3, r0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007780:	4b03      	ldr	r3, [pc, #12]	; (8007790 <USBD_static_malloc+0x18>)
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000208 	.word	0x20000208

08007794 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d817      	bhi.n	80077ec <USBD_Get_USB_Status+0x44>
 80077bc:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <USBD_Get_USB_Status+0x1c>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	080077d5 	.word	0x080077d5
 80077c8:	080077db 	.word	0x080077db
 80077cc:	080077e1 	.word	0x080077e1
 80077d0:	080077e7 	.word	0x080077e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]
    break;
 80077d8:	e00b      	b.n	80077f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077da:	2303      	movs	r3, #3
 80077dc:	73fb      	strb	r3, [r7, #15]
    break;
 80077de:	e008      	b.n	80077f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077e0:	2301      	movs	r3, #1
 80077e2:	73fb      	strb	r3, [r7, #15]
    break;
 80077e4:	e005      	b.n	80077f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077e6:	2303      	movs	r3, #3
 80077e8:	73fb      	strb	r3, [r7, #15]
    break;
 80077ea:	e002      	b.n	80077f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077ec:	2303      	movs	r3, #3
 80077ee:	73fb      	strb	r3, [r7, #15]
    break;
 80077f0:	bf00      	nop
  }
  return usb_status;
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <__errno>:
 8007800:	4b01      	ldr	r3, [pc, #4]	; (8007808 <__errno+0x8>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	20000180 	.word	0x20000180

0800780c <__libc_init_array>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4d0d      	ldr	r5, [pc, #52]	; (8007844 <__libc_init_array+0x38>)
 8007810:	4c0d      	ldr	r4, [pc, #52]	; (8007848 <__libc_init_array+0x3c>)
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	2600      	movs	r6, #0
 8007818:	42a6      	cmp	r6, r4
 800781a:	d109      	bne.n	8007830 <__libc_init_array+0x24>
 800781c:	4d0b      	ldr	r5, [pc, #44]	; (800784c <__libc_init_array+0x40>)
 800781e:	4c0c      	ldr	r4, [pc, #48]	; (8007850 <__libc_init_array+0x44>)
 8007820:	f000 fc62 	bl	80080e8 <_init>
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	2600      	movs	r6, #0
 800782a:	42a6      	cmp	r6, r4
 800782c:	d105      	bne.n	800783a <__libc_init_array+0x2e>
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	f855 3b04 	ldr.w	r3, [r5], #4
 8007834:	4798      	blx	r3
 8007836:	3601      	adds	r6, #1
 8007838:	e7ee      	b.n	8007818 <__libc_init_array+0xc>
 800783a:	f855 3b04 	ldr.w	r3, [r5], #4
 800783e:	4798      	blx	r3
 8007840:	3601      	adds	r6, #1
 8007842:	e7f2      	b.n	800782a <__libc_init_array+0x1e>
 8007844:	080081a4 	.word	0x080081a4
 8007848:	080081a4 	.word	0x080081a4
 800784c:	080081a4 	.word	0x080081a4
 8007850:	080081a8 	.word	0x080081a8

08007854 <memset>:
 8007854:	4402      	add	r2, r0
 8007856:	4603      	mov	r3, r0
 8007858:	4293      	cmp	r3, r2
 800785a:	d100      	bne.n	800785e <memset+0xa>
 800785c:	4770      	bx	lr
 800785e:	f803 1b01 	strb.w	r1, [r3], #1
 8007862:	e7f9      	b.n	8007858 <memset+0x4>

08007864 <sniprintf>:
 8007864:	b40c      	push	{r2, r3}
 8007866:	b530      	push	{r4, r5, lr}
 8007868:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <sniprintf+0x64>)
 800786a:	1e0c      	subs	r4, r1, #0
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	b09d      	sub	sp, #116	; 0x74
 8007870:	da08      	bge.n	8007884 <sniprintf+0x20>
 8007872:	238b      	movs	r3, #139	; 0x8b
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	b01d      	add	sp, #116	; 0x74
 800787c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007880:	b002      	add	sp, #8
 8007882:	4770      	bx	lr
 8007884:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007888:	f8ad 3014 	strh.w	r3, [sp, #20]
 800788c:	bf14      	ite	ne
 800788e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007892:	4623      	moveq	r3, r4
 8007894:	9304      	str	r3, [sp, #16]
 8007896:	9307      	str	r3, [sp, #28]
 8007898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	9006      	str	r0, [sp, #24]
 80078a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078a6:	ab21      	add	r3, sp, #132	; 0x84
 80078a8:	a902      	add	r1, sp, #8
 80078aa:	4628      	mov	r0, r5
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	f000 f869 	bl	8007984 <_svfiprintf_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	bfbc      	itt	lt
 80078b6:	238b      	movlt	r3, #139	; 0x8b
 80078b8:	602b      	strlt	r3, [r5, #0]
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	d0dd      	beq.n	800787a <sniprintf+0x16>
 80078be:	9b02      	ldr	r3, [sp, #8]
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	e7d9      	b.n	800787a <sniprintf+0x16>
 80078c6:	bf00      	nop
 80078c8:	20000180 	.word	0x20000180

080078cc <__ssputs_r>:
 80078cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d0:	688e      	ldr	r6, [r1, #8]
 80078d2:	429e      	cmp	r6, r3
 80078d4:	4682      	mov	sl, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	4690      	mov	r8, r2
 80078da:	461f      	mov	r7, r3
 80078dc:	d838      	bhi.n	8007950 <__ssputs_r+0x84>
 80078de:	898a      	ldrh	r2, [r1, #12]
 80078e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078e4:	d032      	beq.n	800794c <__ssputs_r+0x80>
 80078e6:	6825      	ldr	r5, [r4, #0]
 80078e8:	6909      	ldr	r1, [r1, #16]
 80078ea:	eba5 0901 	sub.w	r9, r5, r1
 80078ee:	6965      	ldr	r5, [r4, #20]
 80078f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f8:	3301      	adds	r3, #1
 80078fa:	444b      	add	r3, r9
 80078fc:	106d      	asrs	r5, r5, #1
 80078fe:	429d      	cmp	r5, r3
 8007900:	bf38      	it	cc
 8007902:	461d      	movcc	r5, r3
 8007904:	0553      	lsls	r3, r2, #21
 8007906:	d531      	bpl.n	800796c <__ssputs_r+0xa0>
 8007908:	4629      	mov	r1, r5
 800790a:	f000 fb47 	bl	8007f9c <_malloc_r>
 800790e:	4606      	mov	r6, r0
 8007910:	b950      	cbnz	r0, 8007928 <__ssputs_r+0x5c>
 8007912:	230c      	movs	r3, #12
 8007914:	f8ca 3000 	str.w	r3, [sl]
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007928:	6921      	ldr	r1, [r4, #16]
 800792a:	464a      	mov	r2, r9
 800792c:	f000 fabe 	bl	8007eac <memcpy>
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	6126      	str	r6, [r4, #16]
 800793e:	6165      	str	r5, [r4, #20]
 8007940:	444e      	add	r6, r9
 8007942:	eba5 0509 	sub.w	r5, r5, r9
 8007946:	6026      	str	r6, [r4, #0]
 8007948:	60a5      	str	r5, [r4, #8]
 800794a:	463e      	mov	r6, r7
 800794c:	42be      	cmp	r6, r7
 800794e:	d900      	bls.n	8007952 <__ssputs_r+0x86>
 8007950:	463e      	mov	r6, r7
 8007952:	4632      	mov	r2, r6
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	4641      	mov	r1, r8
 8007958:	f000 fab6 	bl	8007ec8 <memmove>
 800795c:	68a3      	ldr	r3, [r4, #8]
 800795e:	6822      	ldr	r2, [r4, #0]
 8007960:	1b9b      	subs	r3, r3, r6
 8007962:	4432      	add	r2, r6
 8007964:	60a3      	str	r3, [r4, #8]
 8007966:	6022      	str	r2, [r4, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e7db      	b.n	8007924 <__ssputs_r+0x58>
 800796c:	462a      	mov	r2, r5
 800796e:	f000 fb6f 	bl	8008050 <_realloc_r>
 8007972:	4606      	mov	r6, r0
 8007974:	2800      	cmp	r0, #0
 8007976:	d1e1      	bne.n	800793c <__ssputs_r+0x70>
 8007978:	6921      	ldr	r1, [r4, #16]
 800797a:	4650      	mov	r0, sl
 800797c:	f000 fabe 	bl	8007efc <_free_r>
 8007980:	e7c7      	b.n	8007912 <__ssputs_r+0x46>
	...

08007984 <_svfiprintf_r>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	4698      	mov	r8, r3
 800798a:	898b      	ldrh	r3, [r1, #12]
 800798c:	061b      	lsls	r3, r3, #24
 800798e:	b09d      	sub	sp, #116	; 0x74
 8007990:	4607      	mov	r7, r0
 8007992:	460d      	mov	r5, r1
 8007994:	4614      	mov	r4, r2
 8007996:	d50e      	bpl.n	80079b6 <_svfiprintf_r+0x32>
 8007998:	690b      	ldr	r3, [r1, #16]
 800799a:	b963      	cbnz	r3, 80079b6 <_svfiprintf_r+0x32>
 800799c:	2140      	movs	r1, #64	; 0x40
 800799e:	f000 fafd 	bl	8007f9c <_malloc_r>
 80079a2:	6028      	str	r0, [r5, #0]
 80079a4:	6128      	str	r0, [r5, #16]
 80079a6:	b920      	cbnz	r0, 80079b2 <_svfiprintf_r+0x2e>
 80079a8:	230c      	movs	r3, #12
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	e0d1      	b.n	8007b56 <_svfiprintf_r+0x1d2>
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	616b      	str	r3, [r5, #20]
 80079b6:	2300      	movs	r3, #0
 80079b8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ba:	2320      	movs	r3, #32
 80079bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c4:	2330      	movs	r3, #48	; 0x30
 80079c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b70 <_svfiprintf_r+0x1ec>
 80079ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ce:	f04f 0901 	mov.w	r9, #1
 80079d2:	4623      	mov	r3, r4
 80079d4:	469a      	mov	sl, r3
 80079d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079da:	b10a      	cbz	r2, 80079e0 <_svfiprintf_r+0x5c>
 80079dc:	2a25      	cmp	r2, #37	; 0x25
 80079de:	d1f9      	bne.n	80079d4 <_svfiprintf_r+0x50>
 80079e0:	ebba 0b04 	subs.w	fp, sl, r4
 80079e4:	d00b      	beq.n	80079fe <_svfiprintf_r+0x7a>
 80079e6:	465b      	mov	r3, fp
 80079e8:	4622      	mov	r2, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	4638      	mov	r0, r7
 80079ee:	f7ff ff6d 	bl	80078cc <__ssputs_r>
 80079f2:	3001      	adds	r0, #1
 80079f4:	f000 80aa 	beq.w	8007b4c <_svfiprintf_r+0x1c8>
 80079f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fa:	445a      	add	r2, fp
 80079fc:	9209      	str	r2, [sp, #36]	; 0x24
 80079fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80a2 	beq.w	8007b4c <_svfiprintf_r+0x1c8>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a12:	f10a 0a01 	add.w	sl, sl, #1
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8007a20:	4654      	mov	r4, sl
 8007a22:	2205      	movs	r2, #5
 8007a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a28:	4851      	ldr	r0, [pc, #324]	; (8007b70 <_svfiprintf_r+0x1ec>)
 8007a2a:	f7f8 fbd9 	bl	80001e0 <memchr>
 8007a2e:	9a04      	ldr	r2, [sp, #16]
 8007a30:	b9d8      	cbnz	r0, 8007a6a <_svfiprintf_r+0xe6>
 8007a32:	06d0      	lsls	r0, r2, #27
 8007a34:	bf44      	itt	mi
 8007a36:	2320      	movmi	r3, #32
 8007a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3c:	0711      	lsls	r1, r2, #28
 8007a3e:	bf44      	itt	mi
 8007a40:	232b      	movmi	r3, #43	; 0x2b
 8007a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a46:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a4c:	d015      	beq.n	8007a7a <_svfiprintf_r+0xf6>
 8007a4e:	9a07      	ldr	r2, [sp, #28]
 8007a50:	4654      	mov	r4, sl
 8007a52:	2000      	movs	r0, #0
 8007a54:	f04f 0c0a 	mov.w	ip, #10
 8007a58:	4621      	mov	r1, r4
 8007a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a5e:	3b30      	subs	r3, #48	; 0x30
 8007a60:	2b09      	cmp	r3, #9
 8007a62:	d94e      	bls.n	8007b02 <_svfiprintf_r+0x17e>
 8007a64:	b1b0      	cbz	r0, 8007a94 <_svfiprintf_r+0x110>
 8007a66:	9207      	str	r2, [sp, #28]
 8007a68:	e014      	b.n	8007a94 <_svfiprintf_r+0x110>
 8007a6a:	eba0 0308 	sub.w	r3, r0, r8
 8007a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	46a2      	mov	sl, r4
 8007a78:	e7d2      	b.n	8007a20 <_svfiprintf_r+0x9c>
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	1d19      	adds	r1, r3, #4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	9103      	str	r1, [sp, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bfbb      	ittet	lt
 8007a86:	425b      	neglt	r3, r3
 8007a88:	f042 0202 	orrlt.w	r2, r2, #2
 8007a8c:	9307      	strge	r3, [sp, #28]
 8007a8e:	9307      	strlt	r3, [sp, #28]
 8007a90:	bfb8      	it	lt
 8007a92:	9204      	strlt	r2, [sp, #16]
 8007a94:	7823      	ldrb	r3, [r4, #0]
 8007a96:	2b2e      	cmp	r3, #46	; 0x2e
 8007a98:	d10c      	bne.n	8007ab4 <_svfiprintf_r+0x130>
 8007a9a:	7863      	ldrb	r3, [r4, #1]
 8007a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a9e:	d135      	bne.n	8007b0c <_svfiprintf_r+0x188>
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	9203      	str	r2, [sp, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	bfb8      	it	lt
 8007aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab0:	3402      	adds	r4, #2
 8007ab2:	9305      	str	r3, [sp, #20]
 8007ab4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b80 <_svfiprintf_r+0x1fc>
 8007ab8:	7821      	ldrb	r1, [r4, #0]
 8007aba:	2203      	movs	r2, #3
 8007abc:	4650      	mov	r0, sl
 8007abe:	f7f8 fb8f 	bl	80001e0 <memchr>
 8007ac2:	b140      	cbz	r0, 8007ad6 <_svfiprintf_r+0x152>
 8007ac4:	2340      	movs	r3, #64	; 0x40
 8007ac6:	eba0 000a 	sub.w	r0, r0, sl
 8007aca:	fa03 f000 	lsl.w	r0, r3, r0
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	4303      	orrs	r3, r0
 8007ad2:	3401      	adds	r4, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ada:	4826      	ldr	r0, [pc, #152]	; (8007b74 <_svfiprintf_r+0x1f0>)
 8007adc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae0:	2206      	movs	r2, #6
 8007ae2:	f7f8 fb7d 	bl	80001e0 <memchr>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d038      	beq.n	8007b5c <_svfiprintf_r+0x1d8>
 8007aea:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <_svfiprintf_r+0x1f4>)
 8007aec:	bb1b      	cbnz	r3, 8007b36 <_svfiprintf_r+0x1b2>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	3307      	adds	r3, #7
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	3308      	adds	r3, #8
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afc:	4433      	add	r3, r6
 8007afe:	9309      	str	r3, [sp, #36]	; 0x24
 8007b00:	e767      	b.n	80079d2 <_svfiprintf_r+0x4e>
 8007b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b06:	460c      	mov	r4, r1
 8007b08:	2001      	movs	r0, #1
 8007b0a:	e7a5      	b.n	8007a58 <_svfiprintf_r+0xd4>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	3401      	adds	r4, #1
 8007b10:	9305      	str	r3, [sp, #20]
 8007b12:	4619      	mov	r1, r3
 8007b14:	f04f 0c0a 	mov.w	ip, #10
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b1e:	3a30      	subs	r2, #48	; 0x30
 8007b20:	2a09      	cmp	r2, #9
 8007b22:	d903      	bls.n	8007b2c <_svfiprintf_r+0x1a8>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0c5      	beq.n	8007ab4 <_svfiprintf_r+0x130>
 8007b28:	9105      	str	r1, [sp, #20]
 8007b2a:	e7c3      	b.n	8007ab4 <_svfiprintf_r+0x130>
 8007b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b30:	4604      	mov	r4, r0
 8007b32:	2301      	movs	r3, #1
 8007b34:	e7f0      	b.n	8007b18 <_svfiprintf_r+0x194>
 8007b36:	ab03      	add	r3, sp, #12
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <_svfiprintf_r+0x1f8>)
 8007b3e:	a904      	add	r1, sp, #16
 8007b40:	4638      	mov	r0, r7
 8007b42:	f3af 8000 	nop.w
 8007b46:	1c42      	adds	r2, r0, #1
 8007b48:	4606      	mov	r6, r0
 8007b4a:	d1d6      	bne.n	8007afa <_svfiprintf_r+0x176>
 8007b4c:	89ab      	ldrh	r3, [r5, #12]
 8007b4e:	065b      	lsls	r3, r3, #25
 8007b50:	f53f af2c 	bmi.w	80079ac <_svfiprintf_r+0x28>
 8007b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b56:	b01d      	add	sp, #116	; 0x74
 8007b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5c:	ab03      	add	r3, sp, #12
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	462a      	mov	r2, r5
 8007b62:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <_svfiprintf_r+0x1f8>)
 8007b64:	a904      	add	r1, sp, #16
 8007b66:	4638      	mov	r0, r7
 8007b68:	f000 f87a 	bl	8007c60 <_printf_i>
 8007b6c:	e7eb      	b.n	8007b46 <_svfiprintf_r+0x1c2>
 8007b6e:	bf00      	nop
 8007b70:	08008168 	.word	0x08008168
 8007b74:	08008172 	.word	0x08008172
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	080078cd 	.word	0x080078cd
 8007b80:	0800816e 	.word	0x0800816e

08007b84 <_printf_common>:
 8007b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	4616      	mov	r6, r2
 8007b8a:	4699      	mov	r9, r3
 8007b8c:	688a      	ldr	r2, [r1, #8]
 8007b8e:	690b      	ldr	r3, [r1, #16]
 8007b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bfb8      	it	lt
 8007b98:	4613      	movlt	r3, r2
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	b10a      	cbz	r2, 8007baa <_printf_common+0x26>
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	6033      	str	r3, [r6, #0]
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	0699      	lsls	r1, r3, #26
 8007bae:	bf42      	ittt	mi
 8007bb0:	6833      	ldrmi	r3, [r6, #0]
 8007bb2:	3302      	addmi	r3, #2
 8007bb4:	6033      	strmi	r3, [r6, #0]
 8007bb6:	6825      	ldr	r5, [r4, #0]
 8007bb8:	f015 0506 	ands.w	r5, r5, #6
 8007bbc:	d106      	bne.n	8007bcc <_printf_common+0x48>
 8007bbe:	f104 0a19 	add.w	sl, r4, #25
 8007bc2:	68e3      	ldr	r3, [r4, #12]
 8007bc4:	6832      	ldr	r2, [r6, #0]
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	dc26      	bgt.n	8007c1a <_printf_common+0x96>
 8007bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bd0:	1e13      	subs	r3, r2, #0
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	bf18      	it	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	0692      	lsls	r2, r2, #26
 8007bda:	d42b      	bmi.n	8007c34 <_printf_common+0xb0>
 8007bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007be0:	4649      	mov	r1, r9
 8007be2:	4638      	mov	r0, r7
 8007be4:	47c0      	blx	r8
 8007be6:	3001      	adds	r0, #1
 8007be8:	d01e      	beq.n	8007c28 <_printf_common+0xa4>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	68e5      	ldr	r5, [r4, #12]
 8007bee:	6832      	ldr	r2, [r6, #0]
 8007bf0:	f003 0306 	and.w	r3, r3, #6
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	bf08      	it	eq
 8007bf8:	1aad      	subeq	r5, r5, r2
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	bf0c      	ite	eq
 8007c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c04:	2500      	movne	r5, #0
 8007c06:	4293      	cmp	r3, r2
 8007c08:	bfc4      	itt	gt
 8007c0a:	1a9b      	subgt	r3, r3, r2
 8007c0c:	18ed      	addgt	r5, r5, r3
 8007c0e:	2600      	movs	r6, #0
 8007c10:	341a      	adds	r4, #26
 8007c12:	42b5      	cmp	r5, r6
 8007c14:	d11a      	bne.n	8007c4c <_printf_common+0xc8>
 8007c16:	2000      	movs	r0, #0
 8007c18:	e008      	b.n	8007c2c <_printf_common+0xa8>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	4649      	mov	r1, r9
 8007c20:	4638      	mov	r0, r7
 8007c22:	47c0      	blx	r8
 8007c24:	3001      	adds	r0, #1
 8007c26:	d103      	bne.n	8007c30 <_printf_common+0xac>
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c30:	3501      	adds	r5, #1
 8007c32:	e7c6      	b.n	8007bc2 <_printf_common+0x3e>
 8007c34:	18e1      	adds	r1, r4, r3
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	2030      	movs	r0, #48	; 0x30
 8007c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c3e:	4422      	add	r2, r4
 8007c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c48:	3302      	adds	r3, #2
 8007c4a:	e7c7      	b.n	8007bdc <_printf_common+0x58>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4649      	mov	r1, r9
 8007c52:	4638      	mov	r0, r7
 8007c54:	47c0      	blx	r8
 8007c56:	3001      	adds	r0, #1
 8007c58:	d0e6      	beq.n	8007c28 <_printf_common+0xa4>
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	e7d9      	b.n	8007c12 <_printf_common+0x8e>
	...

08007c60 <_printf_i>:
 8007c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	460c      	mov	r4, r1
 8007c66:	4691      	mov	r9, r2
 8007c68:	7e27      	ldrb	r7, [r4, #24]
 8007c6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c6c:	2f78      	cmp	r7, #120	; 0x78
 8007c6e:	4680      	mov	r8, r0
 8007c70:	469a      	mov	sl, r3
 8007c72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c76:	d807      	bhi.n	8007c88 <_printf_i+0x28>
 8007c78:	2f62      	cmp	r7, #98	; 0x62
 8007c7a:	d80a      	bhi.n	8007c92 <_printf_i+0x32>
 8007c7c:	2f00      	cmp	r7, #0
 8007c7e:	f000 80d8 	beq.w	8007e32 <_printf_i+0x1d2>
 8007c82:	2f58      	cmp	r7, #88	; 0x58
 8007c84:	f000 80a3 	beq.w	8007dce <_printf_i+0x16e>
 8007c88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c90:	e03a      	b.n	8007d08 <_printf_i+0xa8>
 8007c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c96:	2b15      	cmp	r3, #21
 8007c98:	d8f6      	bhi.n	8007c88 <_printf_i+0x28>
 8007c9a:	a001      	add	r0, pc, #4	; (adr r0, 8007ca0 <_printf_i+0x40>)
 8007c9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ca0:	08007cf9 	.word	0x08007cf9
 8007ca4:	08007d0d 	.word	0x08007d0d
 8007ca8:	08007c89 	.word	0x08007c89
 8007cac:	08007c89 	.word	0x08007c89
 8007cb0:	08007c89 	.word	0x08007c89
 8007cb4:	08007c89 	.word	0x08007c89
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007c89 	.word	0x08007c89
 8007cc0:	08007c89 	.word	0x08007c89
 8007cc4:	08007c89 	.word	0x08007c89
 8007cc8:	08007c89 	.word	0x08007c89
 8007ccc:	08007e19 	.word	0x08007e19
 8007cd0:	08007d3d 	.word	0x08007d3d
 8007cd4:	08007dfb 	.word	0x08007dfb
 8007cd8:	08007c89 	.word	0x08007c89
 8007cdc:	08007c89 	.word	0x08007c89
 8007ce0:	08007e3b 	.word	0x08007e3b
 8007ce4:	08007c89 	.word	0x08007c89
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007c89 	.word	0x08007c89
 8007cf0:	08007c89 	.word	0x08007c89
 8007cf4:	08007e03 	.word	0x08007e03
 8007cf8:	680b      	ldr	r3, [r1, #0]
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	600a      	str	r2, [r1, #0]
 8007d00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0a3      	b.n	8007e54 <_printf_i+0x1f4>
 8007d0c:	6825      	ldr	r5, [r4, #0]
 8007d0e:	6808      	ldr	r0, [r1, #0]
 8007d10:	062e      	lsls	r6, r5, #24
 8007d12:	f100 0304 	add.w	r3, r0, #4
 8007d16:	d50a      	bpl.n	8007d2e <_printf_i+0xce>
 8007d18:	6805      	ldr	r5, [r0, #0]
 8007d1a:	600b      	str	r3, [r1, #0]
 8007d1c:	2d00      	cmp	r5, #0
 8007d1e:	da03      	bge.n	8007d28 <_printf_i+0xc8>
 8007d20:	232d      	movs	r3, #45	; 0x2d
 8007d22:	426d      	negs	r5, r5
 8007d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d28:	485e      	ldr	r0, [pc, #376]	; (8007ea4 <_printf_i+0x244>)
 8007d2a:	230a      	movs	r3, #10
 8007d2c:	e019      	b.n	8007d62 <_printf_i+0x102>
 8007d2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d32:	6805      	ldr	r5, [r0, #0]
 8007d34:	600b      	str	r3, [r1, #0]
 8007d36:	bf18      	it	ne
 8007d38:	b22d      	sxthne	r5, r5
 8007d3a:	e7ef      	b.n	8007d1c <_printf_i+0xbc>
 8007d3c:	680b      	ldr	r3, [r1, #0]
 8007d3e:	6825      	ldr	r5, [r4, #0]
 8007d40:	1d18      	adds	r0, r3, #4
 8007d42:	6008      	str	r0, [r1, #0]
 8007d44:	0628      	lsls	r0, r5, #24
 8007d46:	d501      	bpl.n	8007d4c <_printf_i+0xec>
 8007d48:	681d      	ldr	r5, [r3, #0]
 8007d4a:	e002      	b.n	8007d52 <_printf_i+0xf2>
 8007d4c:	0669      	lsls	r1, r5, #25
 8007d4e:	d5fb      	bpl.n	8007d48 <_printf_i+0xe8>
 8007d50:	881d      	ldrh	r5, [r3, #0]
 8007d52:	4854      	ldr	r0, [pc, #336]	; (8007ea4 <_printf_i+0x244>)
 8007d54:	2f6f      	cmp	r7, #111	; 0x6f
 8007d56:	bf0c      	ite	eq
 8007d58:	2308      	moveq	r3, #8
 8007d5a:	230a      	movne	r3, #10
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d62:	6866      	ldr	r6, [r4, #4]
 8007d64:	60a6      	str	r6, [r4, #8]
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	bfa2      	ittt	ge
 8007d6a:	6821      	ldrge	r1, [r4, #0]
 8007d6c:	f021 0104 	bicge.w	r1, r1, #4
 8007d70:	6021      	strge	r1, [r4, #0]
 8007d72:	b90d      	cbnz	r5, 8007d78 <_printf_i+0x118>
 8007d74:	2e00      	cmp	r6, #0
 8007d76:	d04d      	beq.n	8007e14 <_printf_i+0x1b4>
 8007d78:	4616      	mov	r6, r2
 8007d7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d7e:	fb03 5711 	mls	r7, r3, r1, r5
 8007d82:	5dc7      	ldrb	r7, [r0, r7]
 8007d84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d88:	462f      	mov	r7, r5
 8007d8a:	42bb      	cmp	r3, r7
 8007d8c:	460d      	mov	r5, r1
 8007d8e:	d9f4      	bls.n	8007d7a <_printf_i+0x11a>
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d10b      	bne.n	8007dac <_printf_i+0x14c>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	07df      	lsls	r7, r3, #31
 8007d98:	d508      	bpl.n	8007dac <_printf_i+0x14c>
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	6861      	ldr	r1, [r4, #4]
 8007d9e:	4299      	cmp	r1, r3
 8007da0:	bfde      	ittt	le
 8007da2:	2330      	movle	r3, #48	; 0x30
 8007da4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007da8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dac:	1b92      	subs	r2, r2, r6
 8007dae:	6122      	str	r2, [r4, #16]
 8007db0:	f8cd a000 	str.w	sl, [sp]
 8007db4:	464b      	mov	r3, r9
 8007db6:	aa03      	add	r2, sp, #12
 8007db8:	4621      	mov	r1, r4
 8007dba:	4640      	mov	r0, r8
 8007dbc:	f7ff fee2 	bl	8007b84 <_printf_common>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d14c      	bne.n	8007e5e <_printf_i+0x1fe>
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	b004      	add	sp, #16
 8007dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dce:	4835      	ldr	r0, [pc, #212]	; (8007ea4 <_printf_i+0x244>)
 8007dd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	680e      	ldr	r6, [r1, #0]
 8007dd8:	061f      	lsls	r7, r3, #24
 8007dda:	f856 5b04 	ldr.w	r5, [r6], #4
 8007dde:	600e      	str	r6, [r1, #0]
 8007de0:	d514      	bpl.n	8007e0c <_printf_i+0x1ac>
 8007de2:	07d9      	lsls	r1, r3, #31
 8007de4:	bf44      	itt	mi
 8007de6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dea:	6023      	strmi	r3, [r4, #0]
 8007dec:	b91d      	cbnz	r5, 8007df6 <_printf_i+0x196>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	f023 0320 	bic.w	r3, r3, #32
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	2310      	movs	r3, #16
 8007df8:	e7b0      	b.n	8007d5c <_printf_i+0xfc>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	f043 0320 	orr.w	r3, r3, #32
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	2378      	movs	r3, #120	; 0x78
 8007e04:	4828      	ldr	r0, [pc, #160]	; (8007ea8 <_printf_i+0x248>)
 8007e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e0a:	e7e3      	b.n	8007dd4 <_printf_i+0x174>
 8007e0c:	065e      	lsls	r6, r3, #25
 8007e0e:	bf48      	it	mi
 8007e10:	b2ad      	uxthmi	r5, r5
 8007e12:	e7e6      	b.n	8007de2 <_printf_i+0x182>
 8007e14:	4616      	mov	r6, r2
 8007e16:	e7bb      	b.n	8007d90 <_printf_i+0x130>
 8007e18:	680b      	ldr	r3, [r1, #0]
 8007e1a:	6826      	ldr	r6, [r4, #0]
 8007e1c:	6960      	ldr	r0, [r4, #20]
 8007e1e:	1d1d      	adds	r5, r3, #4
 8007e20:	600d      	str	r5, [r1, #0]
 8007e22:	0635      	lsls	r5, r6, #24
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	d501      	bpl.n	8007e2c <_printf_i+0x1cc>
 8007e28:	6018      	str	r0, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <_printf_i+0x1d2>
 8007e2c:	0671      	lsls	r1, r6, #25
 8007e2e:	d5fb      	bpl.n	8007e28 <_printf_i+0x1c8>
 8007e30:	8018      	strh	r0, [r3, #0]
 8007e32:	2300      	movs	r3, #0
 8007e34:	6123      	str	r3, [r4, #16]
 8007e36:	4616      	mov	r6, r2
 8007e38:	e7ba      	b.n	8007db0 <_printf_i+0x150>
 8007e3a:	680b      	ldr	r3, [r1, #0]
 8007e3c:	1d1a      	adds	r2, r3, #4
 8007e3e:	600a      	str	r2, [r1, #0]
 8007e40:	681e      	ldr	r6, [r3, #0]
 8007e42:	6862      	ldr	r2, [r4, #4]
 8007e44:	2100      	movs	r1, #0
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7f8 f9ca 	bl	80001e0 <memchr>
 8007e4c:	b108      	cbz	r0, 8007e52 <_printf_i+0x1f2>
 8007e4e:	1b80      	subs	r0, r0, r6
 8007e50:	6060      	str	r0, [r4, #4]
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	6123      	str	r3, [r4, #16]
 8007e56:	2300      	movs	r3, #0
 8007e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5c:	e7a8      	b.n	8007db0 <_printf_i+0x150>
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	4632      	mov	r2, r6
 8007e62:	4649      	mov	r1, r9
 8007e64:	4640      	mov	r0, r8
 8007e66:	47d0      	blx	sl
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d0ab      	beq.n	8007dc4 <_printf_i+0x164>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	079b      	lsls	r3, r3, #30
 8007e70:	d413      	bmi.n	8007e9a <_printf_i+0x23a>
 8007e72:	68e0      	ldr	r0, [r4, #12]
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	4298      	cmp	r0, r3
 8007e78:	bfb8      	it	lt
 8007e7a:	4618      	movlt	r0, r3
 8007e7c:	e7a4      	b.n	8007dc8 <_printf_i+0x168>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4632      	mov	r2, r6
 8007e82:	4649      	mov	r1, r9
 8007e84:	4640      	mov	r0, r8
 8007e86:	47d0      	blx	sl
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d09b      	beq.n	8007dc4 <_printf_i+0x164>
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	9903      	ldr	r1, [sp, #12]
 8007e92:	1a5b      	subs	r3, r3, r1
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dcf2      	bgt.n	8007e7e <_printf_i+0x21e>
 8007e98:	e7eb      	b.n	8007e72 <_printf_i+0x212>
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	f104 0619 	add.w	r6, r4, #25
 8007ea0:	e7f5      	b.n	8007e8e <_printf_i+0x22e>
 8007ea2:	bf00      	nop
 8007ea4:	08008179 	.word	0x08008179
 8007ea8:	0800818a 	.word	0x0800818a

08007eac <memcpy>:
 8007eac:	440a      	add	r2, r1
 8007eae:	4291      	cmp	r1, r2
 8007eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eb4:	d100      	bne.n	8007eb8 <memcpy+0xc>
 8007eb6:	4770      	bx	lr
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ec2:	4291      	cmp	r1, r2
 8007ec4:	d1f9      	bne.n	8007eba <memcpy+0xe>
 8007ec6:	bd10      	pop	{r4, pc}

08007ec8 <memmove>:
 8007ec8:	4288      	cmp	r0, r1
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	eb01 0402 	add.w	r4, r1, r2
 8007ed0:	d902      	bls.n	8007ed8 <memmove+0x10>
 8007ed2:	4284      	cmp	r4, r0
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	d807      	bhi.n	8007ee8 <memmove+0x20>
 8007ed8:	1e43      	subs	r3, r0, #1
 8007eda:	42a1      	cmp	r1, r4
 8007edc:	d008      	beq.n	8007ef0 <memmove+0x28>
 8007ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ee6:	e7f8      	b.n	8007eda <memmove+0x12>
 8007ee8:	4402      	add	r2, r0
 8007eea:	4601      	mov	r1, r0
 8007eec:	428a      	cmp	r2, r1
 8007eee:	d100      	bne.n	8007ef2 <memmove+0x2a>
 8007ef0:	bd10      	pop	{r4, pc}
 8007ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007efa:	e7f7      	b.n	8007eec <memmove+0x24>

08007efc <_free_r>:
 8007efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007efe:	2900      	cmp	r1, #0
 8007f00:	d048      	beq.n	8007f94 <_free_r+0x98>
 8007f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f06:	9001      	str	r0, [sp, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f0e:	bfb8      	it	lt
 8007f10:	18e4      	addlt	r4, r4, r3
 8007f12:	f000 f8d3 	bl	80080bc <__malloc_lock>
 8007f16:	4a20      	ldr	r2, [pc, #128]	; (8007f98 <_free_r+0x9c>)
 8007f18:	9801      	ldr	r0, [sp, #4]
 8007f1a:	6813      	ldr	r3, [r2, #0]
 8007f1c:	4615      	mov	r5, r2
 8007f1e:	b933      	cbnz	r3, 8007f2e <_free_r+0x32>
 8007f20:	6063      	str	r3, [r4, #4]
 8007f22:	6014      	str	r4, [r2, #0]
 8007f24:	b003      	add	sp, #12
 8007f26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f2a:	f000 b8cd 	b.w	80080c8 <__malloc_unlock>
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	d90b      	bls.n	8007f4a <_free_r+0x4e>
 8007f32:	6821      	ldr	r1, [r4, #0]
 8007f34:	1862      	adds	r2, r4, r1
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bf04      	itt	eq
 8007f3a:	681a      	ldreq	r2, [r3, #0]
 8007f3c:	685b      	ldreq	r3, [r3, #4]
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	bf04      	itt	eq
 8007f42:	1852      	addeq	r2, r2, r1
 8007f44:	6022      	streq	r2, [r4, #0]
 8007f46:	602c      	str	r4, [r5, #0]
 8007f48:	e7ec      	b.n	8007f24 <_free_r+0x28>
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	b10b      	cbz	r3, 8007f54 <_free_r+0x58>
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	d9fa      	bls.n	8007f4a <_free_r+0x4e>
 8007f54:	6811      	ldr	r1, [r2, #0]
 8007f56:	1855      	adds	r5, r2, r1
 8007f58:	42a5      	cmp	r5, r4
 8007f5a:	d10b      	bne.n	8007f74 <_free_r+0x78>
 8007f5c:	6824      	ldr	r4, [r4, #0]
 8007f5e:	4421      	add	r1, r4
 8007f60:	1854      	adds	r4, r2, r1
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	6011      	str	r1, [r2, #0]
 8007f66:	d1dd      	bne.n	8007f24 <_free_r+0x28>
 8007f68:	681c      	ldr	r4, [r3, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	6053      	str	r3, [r2, #4]
 8007f6e:	4421      	add	r1, r4
 8007f70:	6011      	str	r1, [r2, #0]
 8007f72:	e7d7      	b.n	8007f24 <_free_r+0x28>
 8007f74:	d902      	bls.n	8007f7c <_free_r+0x80>
 8007f76:	230c      	movs	r3, #12
 8007f78:	6003      	str	r3, [r0, #0]
 8007f7a:	e7d3      	b.n	8007f24 <_free_r+0x28>
 8007f7c:	6825      	ldr	r5, [r4, #0]
 8007f7e:	1961      	adds	r1, r4, r5
 8007f80:	428b      	cmp	r3, r1
 8007f82:	bf04      	itt	eq
 8007f84:	6819      	ldreq	r1, [r3, #0]
 8007f86:	685b      	ldreq	r3, [r3, #4]
 8007f88:	6063      	str	r3, [r4, #4]
 8007f8a:	bf04      	itt	eq
 8007f8c:	1949      	addeq	r1, r1, r5
 8007f8e:	6021      	streq	r1, [r4, #0]
 8007f90:	6054      	str	r4, [r2, #4]
 8007f92:	e7c7      	b.n	8007f24 <_free_r+0x28>
 8007f94:	b003      	add	sp, #12
 8007f96:	bd30      	pop	{r4, r5, pc}
 8007f98:	20000428 	.word	0x20000428

08007f9c <_malloc_r>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	1ccd      	adds	r5, r1, #3
 8007fa0:	f025 0503 	bic.w	r5, r5, #3
 8007fa4:	3508      	adds	r5, #8
 8007fa6:	2d0c      	cmp	r5, #12
 8007fa8:	bf38      	it	cc
 8007faa:	250c      	movcc	r5, #12
 8007fac:	2d00      	cmp	r5, #0
 8007fae:	4606      	mov	r6, r0
 8007fb0:	db01      	blt.n	8007fb6 <_malloc_r+0x1a>
 8007fb2:	42a9      	cmp	r1, r5
 8007fb4:	d903      	bls.n	8007fbe <_malloc_r+0x22>
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	6033      	str	r3, [r6, #0]
 8007fba:	2000      	movs	r0, #0
 8007fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fbe:	f000 f87d 	bl	80080bc <__malloc_lock>
 8007fc2:	4921      	ldr	r1, [pc, #132]	; (8008048 <_malloc_r+0xac>)
 8007fc4:	680a      	ldr	r2, [r1, #0]
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	b99c      	cbnz	r4, 8007ff2 <_malloc_r+0x56>
 8007fca:	4f20      	ldr	r7, [pc, #128]	; (800804c <_malloc_r+0xb0>)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	b923      	cbnz	r3, 8007fda <_malloc_r+0x3e>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f000 f862 	bl	800809c <_sbrk_r>
 8007fd8:	6038      	str	r0, [r7, #0]
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f000 f85d 	bl	800809c <_sbrk_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d123      	bne.n	800802e <_malloc_r+0x92>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	6033      	str	r3, [r6, #0]
 8007fea:	4630      	mov	r0, r6
 8007fec:	f000 f86c 	bl	80080c8 <__malloc_unlock>
 8007ff0:	e7e3      	b.n	8007fba <_malloc_r+0x1e>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	1b5b      	subs	r3, r3, r5
 8007ff6:	d417      	bmi.n	8008028 <_malloc_r+0x8c>
 8007ff8:	2b0b      	cmp	r3, #11
 8007ffa:	d903      	bls.n	8008004 <_malloc_r+0x68>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	441c      	add	r4, r3
 8008000:	6025      	str	r5, [r4, #0]
 8008002:	e004      	b.n	800800e <_malloc_r+0x72>
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	42a2      	cmp	r2, r4
 8008008:	bf0c      	ite	eq
 800800a:	600b      	streq	r3, [r1, #0]
 800800c:	6053      	strne	r3, [r2, #4]
 800800e:	4630      	mov	r0, r6
 8008010:	f000 f85a 	bl	80080c8 <__malloc_unlock>
 8008014:	f104 000b 	add.w	r0, r4, #11
 8008018:	1d23      	adds	r3, r4, #4
 800801a:	f020 0007 	bic.w	r0, r0, #7
 800801e:	1ac2      	subs	r2, r0, r3
 8008020:	d0cc      	beq.n	8007fbc <_malloc_r+0x20>
 8008022:	1a1b      	subs	r3, r3, r0
 8008024:	50a3      	str	r3, [r4, r2]
 8008026:	e7c9      	b.n	8007fbc <_malloc_r+0x20>
 8008028:	4622      	mov	r2, r4
 800802a:	6864      	ldr	r4, [r4, #4]
 800802c:	e7cc      	b.n	8007fc8 <_malloc_r+0x2c>
 800802e:	1cc4      	adds	r4, r0, #3
 8008030:	f024 0403 	bic.w	r4, r4, #3
 8008034:	42a0      	cmp	r0, r4
 8008036:	d0e3      	beq.n	8008000 <_malloc_r+0x64>
 8008038:	1a21      	subs	r1, r4, r0
 800803a:	4630      	mov	r0, r6
 800803c:	f000 f82e 	bl	800809c <_sbrk_r>
 8008040:	3001      	adds	r0, #1
 8008042:	d1dd      	bne.n	8008000 <_malloc_r+0x64>
 8008044:	e7cf      	b.n	8007fe6 <_malloc_r+0x4a>
 8008046:	bf00      	nop
 8008048:	20000428 	.word	0x20000428
 800804c:	2000042c 	.word	0x2000042c

08008050 <_realloc_r>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	4607      	mov	r7, r0
 8008054:	4614      	mov	r4, r2
 8008056:	460e      	mov	r6, r1
 8008058:	b921      	cbnz	r1, 8008064 <_realloc_r+0x14>
 800805a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800805e:	4611      	mov	r1, r2
 8008060:	f7ff bf9c 	b.w	8007f9c <_malloc_r>
 8008064:	b922      	cbnz	r2, 8008070 <_realloc_r+0x20>
 8008066:	f7ff ff49 	bl	8007efc <_free_r>
 800806a:	4625      	mov	r5, r4
 800806c:	4628      	mov	r0, r5
 800806e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008070:	f000 f830 	bl	80080d4 <_malloc_usable_size_r>
 8008074:	42a0      	cmp	r0, r4
 8008076:	d20f      	bcs.n	8008098 <_realloc_r+0x48>
 8008078:	4621      	mov	r1, r4
 800807a:	4638      	mov	r0, r7
 800807c:	f7ff ff8e 	bl	8007f9c <_malloc_r>
 8008080:	4605      	mov	r5, r0
 8008082:	2800      	cmp	r0, #0
 8008084:	d0f2      	beq.n	800806c <_realloc_r+0x1c>
 8008086:	4631      	mov	r1, r6
 8008088:	4622      	mov	r2, r4
 800808a:	f7ff ff0f 	bl	8007eac <memcpy>
 800808e:	4631      	mov	r1, r6
 8008090:	4638      	mov	r0, r7
 8008092:	f7ff ff33 	bl	8007efc <_free_r>
 8008096:	e7e9      	b.n	800806c <_realloc_r+0x1c>
 8008098:	4635      	mov	r5, r6
 800809a:	e7e7      	b.n	800806c <_realloc_r+0x1c>

0800809c <_sbrk_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d06      	ldr	r5, [pc, #24]	; (80080b8 <_sbrk_r+0x1c>)
 80080a0:	2300      	movs	r3, #0
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	f7f8 fe26 	bl	8000cf8 <_sbrk>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_sbrk_r+0x1a>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_sbrk_r+0x1a>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20001eac 	.word	0x20001eac

080080bc <__malloc_lock>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__malloc_lock+0x8>)
 80080be:	f000 b811 	b.w	80080e4 <__retarget_lock_acquire_recursive>
 80080c2:	bf00      	nop
 80080c4:	20001eb4 	.word	0x20001eb4

080080c8 <__malloc_unlock>:
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <__malloc_unlock+0x8>)
 80080ca:	f000 b80c 	b.w	80080e6 <__retarget_lock_release_recursive>
 80080ce:	bf00      	nop
 80080d0:	20001eb4 	.word	0x20001eb4

080080d4 <_malloc_usable_size_r>:
 80080d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d8:	1f18      	subs	r0, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bfbc      	itt	lt
 80080de:	580b      	ldrlt	r3, [r1, r0]
 80080e0:	18c0      	addlt	r0, r0, r3
 80080e2:	4770      	bx	lr

080080e4 <__retarget_lock_acquire_recursive>:
 80080e4:	4770      	bx	lr

080080e6 <__retarget_lock_release_recursive>:
 80080e6:	4770      	bx	lr

080080e8 <_init>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	bf00      	nop
 80080ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ee:	bc08      	pop	{r3}
 80080f0:	469e      	mov	lr, r3
 80080f2:	4770      	bx	lr

080080f4 <_fini>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	bf00      	nop
 80080f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fa:	bc08      	pop	{r3}
 80080fc:	469e      	mov	lr, r3
 80080fe:	4770      	bx	lr
